// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })'); // new Function does not allow upvars in node
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module.printErr('Exiting runtime. Any attempt to access the compiled C code may fail from now. If you want to keep the runtime alive, set Module["noExitRuntime"] = true or build with -s NO_EXIT_RUNTIME=1');
  }
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===
var __ZTVN10__cxxabiv117__class_type_infoE = 26880;
var __ZTVN10__cxxabiv120__si_class_type_infoE = 26920;




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(27747);
/* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__I_a() } });


/* memory initializer */ allocate([248,52,0,0,0,0,0,0,37,115,58,37,115,58,37,100,44,32,97,115,115,101,114,116,105,111,110,32,40,37,115,41,32,102,97,105,108,101,100,10,0,0,0,0,0,0,0,0,108,105,98,112,114,105,109,101,114,51,46,99,0,0,0,0,100,112,97,108,95,115,101,116,95,97,109,98,105,103,117,105,116,121,95,99,111,100,101,95,109,97,116,114,105,120,40,104,45,62,108,111,99,97,108,95,97,109,98,105,103,41,0,0,100,112,97,108,95,115,101,116,95,97,109,98,105,103,117,105,116,121,95,99,111,100,101,95,109,97,116,114,105,120,40,104,45,62,108,111,99,97,108,95,101,110,100,95,97,109,98,105,103,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,76,32,33,61,32,112,97,0,0,0,0,0,0,0,0,48,76,32,33,61,32,115,97,0,0,0,0,0,0,0,0,83,116,97,114,116,32,111,102,32,99,104,111,111,115,101,95,112,114,105,109,101,114,115,58,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,102,116,101,114,32,95,97,100,106,117,115,116,95,115,101,113,95,97,114,103,115,10,0,69,110,100,32,111,102,32,99,104,111,111,115,101,95,112,114,105,109,101,114,115,58,10,0,79,84,95,76,69,70,84,32,61,61,32,111,95,116,121,112,101,32,124,124,32,79,84,95,82,73,71,72,84,32,61,61,32,111,95,116,121,112,101,0,49,32,61,61,32,115,97,45,62,116,97,114,50,46,99,111,117,110,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,105,98,112,114,105,109,101,114,51,32,114,101,108,101,97,115,101,32,50,46,51,46,54,0,0,0,0,0,0,0,0,48,76,32,33,61,32,115,0,48,76,32,33,61,32,120,0,59,32,0,0,0,0,0,0,48,76,32,33,61,32,115,101,112,0,0,0,0,0,0,0,128,255,255,255,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,10,0,0,66,69,71,73,78,32,71,76,79,66,65,76,32,65,82,71,83,10,0,0,0,0,0,0,32,32,112,114,105,109,101,114,95,116,97,115,107,32,37,105,10,0,0,0,0,0,0,0,32,32,112,105,99,107,95,108,101,102,116,95,112,114,105,109,101,114,32,37,105,10,0,0,32,32,112,105,99,107,95,114,105,103,104,116,95,112,114,105,109,101,114,32,37,105,10,0,32,32,112,105,99,107,95,105,110,116,101,114,110,97,108,95,111,108,105,103,111,32,37,105,10,0,0,0,0,0,0,0,32,32,102,105,108,101,95,102,108,97,103,32,37,105,10,0,32,32,102,105,114,115,116,95,98,97,115,101,95,105,110,100,101,120,32,37,105,10,0,0,32,32,108,105,98,101,114,97,108,95,98,97,115,101,32,37,105,10,0,0,0,0,0,0,32,32,110,117,109,95,114,101,116,117,114,110,32,37,105,10,0,0,0,0,0,0,0,0,32,32,112,105,99,107,95,97,110,121,119,97,121,32,37,105,10,0,0,0,0,0,0,0,32,32,108,105,98,95,97,109,98,105,103,117,105,116,121,95,99,111,100,101,115,95,99,111,110,115,101,110,115,117,115,32,37,105,10,0,0,0,0,0,32,32,113,117,97,108,105,116,121,95,114,97,110,103,101,95,109,105,110,32,37,105,10,0,32,32,113,117,97,108,105,116,121,95,114,97,110,103,101,95,109,97,120,32,37,105,10,0,32,32,116,109,95,115,97,110,116,97,108,117,99,105,97,32,37,105,10,0,0,0,0,0,32,32,115,97,108,116,95,99,111,114,114,101,99,116,105,111,110,115,32,37,105,10,0,0,32,32,109,97,120,95,101,110,100,95,115,116,97,98,105,108,105,116,121,32,37,102,10,0,32,32,103,99,95,99,108,97,109,112,32,37,105,10,0,0,32,32,109,97,120,95,101,110,100,95,103,99,32,37,105,10,0,0,0,0,0,0,0,0,32,32,108,111,119,101,114,99,97,115,101,95,109,97,115,107,105,110,103,32,37,105,10,0,32,32,116,104,101,114,109,111,100,121,110,97,109,105,99,95,111,108,105,103,111,95,97,108,105,103,110,109,101,110,116,32,37,105,10,0,0,0,0,0,32,32,116,104,101,114,109,111,100,121,110,97,109,105,99,95,116,101,109,112,108,97,116,101,95,97,108,105,103,110,109,101,110,116,32,37,105,10,0,0,32,32,111,117,116,115,105,100,101,95,112,101,110,97,108,116,121,32,37,102,10,0,0,0,32,32,105,110,115,105,100,101,95,112,101,110,97,108,116,121,32,37,102,10,0,0,0,0,32,32,110,117,109,98,101,114,32,111,102,32,112,114,111,100,117,99,116,32,115,105,122,101,32,114,97,110,103,101,115,58,32,37,100,10,0,0,0,0,32,32,112,114,111,100,117,99,116,32,115,105,122,101,32,114,97,110,103,101,115,58,10,0,32,32,37,100,32,45,32,37,100,32,10,0,0,0,0,0,32,32,112,114,111,100,117,99,116,95,111,112,116,95,115,105,122,101,32,37,105,10,0,0,32,32,112,114,111,100,117,99,116,95,109,97,120,95,116,109,32,37,102,10,0,0,0,0,32,32,112,114,111,100,117,99,116,95,109,105,110,95,116,109,32,37,102,10,0,0,0,0,32,32,112,114,111,100,117,99,116,95,111,112,116,95,116,109,32,37,102,10,0,0,0,0,32,32,112,97,105,114,95,109,97,120,95,116,101,109,112,108,97,116,101,95,109,105,115,112,114,105,109,105,110,103,32,37,102,10,0,0,0,0,0,0,32,32,112,97,105,114,95,109,97,120,95,116,101,109,112,108,97,116,101,95,109,105,115,112,114,105,109,105,110,103,95,116,104,32,37,102,10,0,0,0,32,32,112,97,105,114,95,114,101,112,101,97,116,95,99,111,109,112,108,32,37,102,10,0,32,32,112,97,105,114,95,99,111,109,112,108,95,97,110,121,32,37,102,10,0,0,0,0,32,32,112,97,105,114,95,99,111,109,112,108,95,101,110,100,32,37,102,10,0,0,0,0,32,32,112,97,105,114,95,99,111,109,112,108,95,97,110,121,95,116,104,32,37,102,10,0,32,32,112,97,105,114,95,99,111,109,112,108,95,101,110,100,95,116,104,32,37,102,10,0,32,32,109,105,110,95,108,101,102,116,95,116,104,114,101,101,95,112,114,105,109,101,95,100,105,115,116,97,110,99,101,32,37,105,10,0,0,0,0,0,32,32,109,105,110,95,114,105,103,104,116,95,116,104,114,101,101,95,112,114,105,109,101,95,100,105,115,116,97,110,99,101,32,37,105,10,0,0,0,0,32,32,109,105,110,95,53,95,112,114,105,109,101,95,111,118,101,114,108,97,112,95,111,102,95,106,117,110,99,116,105,111,110,32,37,105,10,0,0,0,32,32,109,105,110,95,51,95,112,114,105,109,101,95,111,118,101,114,108,97,112,95,111,102,95,106,117,110,99,116,105,111,110,32,37,105,10,0,0,0,32,32,100,117,109,112,32,37,105,10,0,0,0,0,0,0,32,32,98,101,103,105,110,32,112,114,95,112,97,105,114,95,119,101,105,103,104,116,115,10,0,0,0,0,0,0,0,0,32,32,32,32,112,114,105,109,101,114,95,113,117,97,108,105,116,121,32,37,102,10,0,0,32,32,32,32,105,111,95,113,117,97,108,105,116,121,32,37,102,10,0,0,0,0,0,0,32,32,32,32,100,105,102,102,95,116,109,32,37,102,10,0,32,32,32,32,99,111,109,112,108,95,97,110,121,32,37,102,10,0,0,0,0,0,0,0,32,32,32,32,99,111,109,112,108,95,101,110,100,32,37,102,10,0,0,0,0,0,0,0,32,32,32,32,99,111,109,112,108,95,97,110,121,95,116,104,32,37,102,10,0,0,0,0,32,32,32,32,99,111,109,112,108,95,101,110,100,95,116,104,32,37,102,10,0,0,0,0,32,32,32,32,112,114,111,100,117,99,116,95,116,109,95,108,116,32,37,102,10,0,0,0,32,32,32,32,112,114,111,100,117,99,116,95,116,109,95,103,116,32,37,102,10,0,0,0,32,32,32,32,112,114,111,100,117,99,116,95,115,105,122,101,95,108,116,32,37,102,10,0,32,32,32,32,112,114,111,100,117,99,116,95,115,105,122,101,95,103,116,32,37,102,10,0,32,32,32,32,114,101,112,101,97,116,95,115,105,109,32,37,102,10,0,0,0,0,0,0,32,32,32,32,116,101,109,112,108,97,116,101,95,109,105,115,112,114,105,109,105,110,103,32,37,102,10,0,0,0,0,0,32,32,32,32,116,101,109,112,108,97,116,101,95,109,105,115,112,114,105,109,105,110,103,95,116,104,32,37,102,10,0,0,32,32,101,110,100,32,112,97,105,114,95,119,101,105,103,104,116,115,10,0,0,0,0,0,10,10,0,0,0,0,0,0,66,69,71,73,78,32,112,114,105,109,101,114,95,97,114,103,115,10,0,0,0,0,0,0,98,101,103,105,110,32,111,108,105,103,111,95,119,101,105,103,104,116,115,10,0,0,0,0,116,101,109,112,95,103,116,32,37,102,10,0,0,0,0,0,116,101,109,112,95,108,116,32,37,102,10,0,0,0,0,0,103,99,95,99,111,110,116,101,110,116,95,103,116,32,37,102,10,0,0,0,0,0,0,0,103,99,95,99,111,110,116,101,110,116,95,108,116,32,37,102,10,0,0,0,0,0,0,0,99,111,109,112,108,95,97,110,121,32,37,102,10,0,0,0,99,111,109,112,108,95,101,110,100,32,37,102,10,0,0,0,99,111,109,112,108,95,97,110,121,95,116,104,32,37,102,10,0,0,0,0,0,0,0,0,99,111,109,112,108,95,101,110,100,95,116,104,32,37,102,10,0,0,0,0,0,0,0,0,104,97,105,114,112,105,110,32,37,102,10,0,0,0,0,0,114,101,112,101,97,116,95,115,105,109,32,37,102,10,0,0,108,101,110,103,116,104,95,108,116,32,37,102,10,0,0,0,108,101,110,103,116,104,95,103,116,32,37,102,10,0,0,0,115,101,113,95,113,117,97,108,105,116,121,32,37,102,10,0,101,110,100,95,113,117,97,108,105,116,121,32,37,102,10,0,112,111,115,95,112,101,110,97,108,116,121,32,37,102,10,0,101,110,100,95,115,116,97,98,105,108,105,116,121,32,37,102,10,0,0,0,0,0,0,0,110,117,109,95,110,115,32,37,102,10,0,0,0,0,0,0,116,101,109,112,108,97,116,101,95,109,105,115,112,114,105,109,105,110,103,32,37,102,10,0,116,101,109,112,108,97,116,101,95,109,105,115,112,114,105,109,105,110,103,95,116,104,32,37,102,10,0,0,0,0,0,0,101,110,100,32,111,108,105,103,111,95,119,101,105,103,104,116,115,10,0,0,0,0,0,0,111,112,116,95,116,109,32,37,102,10,0,0,0,0,0,0,109,105,110,95,116,109,32,37,102,10,0,0,0,0,0,0,109,97,120,95,116,109,32,37,102,10,0,0,0,0,0,0,111,112,116,95,103,99,95,99,111,110,116,101,110,116,32,37,102,10,0,0,0,0,0,0,109,97,120,95,103,99,32,37,102,10,0,0,0,0,0,0,109,105,110,95,103,99,32,37,102,10,0,0,0,0,0,0,100,105,118,97,108,101,110,116,95,99,111,110,99,32,37,102,10,0,0,0,0,0,0,0,100,110,116,112,95,99,111,110,99,32,37,102,10,0,0,0,100,110,97,95,99,111,110,99,32,37,102,10,0,0,0,0,110,117,109,95,110,115,95,97,99,99,101,112,116,101,100,32,37,105,10,0,0,0,0,0,111,112,116,95,115,105,122,101,32,37,105,10,0,0,0,0,109,105,110,95,115,105,122,101,32,37,105,10,0,0,0,0,109,97,120,95,115,105,122,101,32,37,105,10,0,0,0,0,109,97,120,95,112,111,108,121,95,120,32,37,105,10,0,0,109,105,110,95,101,110,100,95,113,117,97,108,105,116,121,32,37,105,10,0,0,0,0,0,109,105,110,95,113,117,97,108,105,116,121,32,37,105,10,0,109,97,120,95,115,101,108,102,95,97,110,121,32,37,102,10,0,0,0,0,0,0,0,0,109,97,120,95,115,101,108,102,95,101,110,100,32,37,102,10,0,0,0,0,0,0,0,0,109,97,120,95,115,101,108,102,95,97,110,121,95,116,104,32,37,102,10,0,0,0,0,0,109,97,120,95,115,101,108,102,95,101,110,100,95,116,104,32,37,102,10,0,0,0,0,0,109,97,120,95,104,97,105,114,112,105,110,32,37,102,10,0,109,97,120,95,114,101,112,101,97,116,95,99,111,109,112,108,32,37,102,10,0,0,0,0,109,97,120,95,116,101,109,112,108,97,116,101,95,109,105,115,112,114,105,109,105,110,103,32,37,102,10,0,0,0,0,0,109,97,120,95,116,101,109,112,108,97,116,101,95,109,105,115,112,114,105,109,105,110,103,95,116,104,32,37,102,10,0,0,101,110,100,32,112,114,105,109,101,114,32,97,114,103,115,10,0,0,0,0,0,0,0,0,98,101,103,105,110,32,105,110,116,101,114,110,97,108,32,111,108,105,103,111,32,97,114,103,115,32,40,112,45,62,111,95,97,114,103,115,46,41,10,0,32,32,98,101,103,105,110,32,105,110,116,101,114,110,97,108,32,111,108,105,103,111,95,119,101,105,103,104,116,115,32,40,112,45,62,111,95,97,114,103,115,46,119,101,105,103,104,116,115,46,41,10,0,0,0,0,32,32,32,32,116,101,109,112,95,103,116,32,37,102,10,0,32,32,32,32,116,101,109,112,95,108,116,32,37,102,10,0,32,32,32,32,103,99,95,99,111,110,116,101,110,116,95,103,116,32,37,102,10,0,0,0,32,32,32,32,103,99,95,99,111,110,116,101,110,116,95,108,116,32,37,102,10,0,0,0,32,32,32,32,104,97,105,114,112,105,110,32,37,102,10,0,32,32,32,32,108,101,110,103,116,104,95,108,116,32,37,102,10,0,0,0,0,0,0,0,32,32,32,32,108,101,110,103,116,104,95,103,116,32,37,102,10,0,0,0,0,0,0,0,32,32,32,32,115,101,113,95,113,117,97,108,105,116,121,32,37,102,10,0,0,0,0,0,32,32,32,32,101,110,100,95,113,117,97,108,105,116,121,32,37,102,10,0,0,0,0,0,32,32,32,32,112,111,115,95,112,101,110,97,108,116,121,32,37,102,10,0,0,0,0,0,32,32,32,32,101,110,100,95,115,116,97,98,105,108,105,116,121,32,37,102,10,0,0,0,32,32,32,32,110,117,109,95,110,115,32,37,102,10,0,0,32,32,101,110,100,32,105,110,116,101,114,110,97,108,32,111,108,105,103,111,95,119,101,105,103,104,116,115,10,0,0,0,32,32,111,112,116,95,116,109,32,37,102,10,0,0,0,0,32,32,109,105,110,95,116,109,32,37,102,10,0,0,0,0,32,32,109,97,120,95,116,109,32,37,102,10,0,0,0,0,32,32,111,112,116,95,103,99,95,99,111,110,116,101,110,116,32,37,102,10,0,0,0,0,32,32,109,97,120,95,103,99,32,37,102,10,0,0,0,0,32,32,109,105,110,95,103,99,32,37,102,10,0,0,0,0,32,32,100,105,118,97,108,101,110,116,95,99,111,110,99,32,37,102,10,0,0,0,0,0,32,32,100,110,116,112,95,99,111,110,99,32,37,102,10,0,32,32,100,110,97,95,99,111,110,99,32,37,102,10,0,0,32,32,110,117,109,95,110,115,95,97,99,99,101,112,116,101,100,32,37,105,10,0,0,0,32,32,111,112,116,95,115,105,122,101,32,37,105,10,0,0,32,32,109,105,110,95,115,105,122,101,32,37,105,10,0,0,32,32,109,97,120,95,115,105,122,101,32,37,105,10,0,0,32,32,109,97,120,95,112,111,108,121,95,120,32,37,105,10,0,0,0,0,0,0,0,0,32,32,109,105,110,95,101,110,100,95,113,117,97,108,105,116,121,32,37,105,10,0,0,0,32,32,109,105,110,95,113,117,97,108,105,116,121,32,37,105,10,0,0,0,0,0,0,0,32,32,109,97,120,95,115,101,108,102,95,97,110,121,32,37,102,10,0,0,0,0,0,0,32,32,109,97,120,95,115,101,108,102,95,101,110,100,32,37,102,10,0,0,0,0,0,0,32,32,109,97,120,95,114,101,112,101,97,116,95,99,111,109,112,108,32,37,102,10,0,0,32,32,101,110,100,32,105,110,116,101,114,110,97,108,32,111,108,105,103,111,32,97,114,103,115,10,0,0,0,0,0,0,10,0,0,0,0,0,0,0,69,78,68,32,71,76,79,66,65,76,32,65,82,71,83,10,0,0,0,0,0,0,0,0,66,69,71,73,78,32,83,69,81,85,69,78,67,69,32,65,82,71,83,10,0,0,0,0,112,114,105,109,101,114,95,111,118,101,114,108,97,112,95,106,117,110,99,116,105,111,110,115,95,99,111,117,110,116,32,37,105,10,0,0,0,0,0,0,112,114,105,109,101,114,95,111,118,101,114,108,97,112,95,106,117,110,99,116,105,111,110,115,95,108,105,115,116,32,91,10,0,0,0,0,0,0,0,0,32,32,32,37,105,10,0,0,93,10,0,0,0,0,0,0,105,110,99,108,95,115,32,37,105,10,0,0,0,0,0,0,105,110,99,108,95,108,32,37,105,10,0,0,0,0,0,0,115,116,97,114,116,95,99,111,100,111,110,95,112,111,115,32,37,105,10,0,0,0,0,0,110,95,113,117,97,108,105,116,121,32,37,105,10,0,0,0,113,117,97,108,105,116,121,95,115,116,111,114,97,103,101,95,115,105,122,101,32,37,105,10,0,0,0,0,0,0,0,0,42,115,101,113,117,101,110,99,101,32,37,115,10,0,0,0,42,115,101,113,117,101,110,99,101,95,110,97,109,101,32,37,115,10,0,0,0,0,0,0,42,115,101,113,117,101,110,99,101,95,102,105,108,101,32,37,115,10,0,0,0,0,0,0,42,116,114,105,109,109,101,100,95,115,101,113,32,37,115,10,0,0,0,0,0,0,0,0,42,116,114,105,109,109,101,100,95,111,114,105,103,95,115,101,113,32,37,115,10,0,0,0,42,117,112,99,97,115,101,100,95,115,101,113,32,37,115,10,0,0,0,0,0,0,0,0,42,117,112,99,97,115,101,100,95,115,101,113,95,114,32,37,115,10,0,0,0,0,0,0,42,108,101,102,116,95,105,110,112,117,116,32,37,115,10,0,42,114,105,103,104,116,95,105,110,112,117,116,32,37,115,10,0,0,0,0,0,0,0,0,42,105,110,116,101,114,110,97,108,95,105,110,112,117,116,32,37,115,10,0,0,0,0,0,102,111,114,99,101,95,108,101,102,116,95,115,116,97,114,116,32,37,105,10,0,0,0,0,102,111,114,99,101,95,108,101,102,116,95,101,110,100,32,37,105,10,0,0,0,0,0,0,102,111,114,99,101,95,114,105,103,104,116,95,115,116,97,114,116,32,37,105,10,0,0,0,102,111,114,99,101,95,114,105,103,104,116,95,101,110,100,32,37,105,10,0,0,0,0,0,69,78,68,32,83,69,81,85,69,78,67,69,32,65,82,71,83,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,114,114,111,114,32,105,110,32,115,101,113,117,101,110,99,101,32,113,117,97,108,105,116,121,32,100,97,116,97,0,0,77,105,110,105,109,117,109,32,51,39,32,100,105,115,116,97,110,99,101,32,109,117,115,116,32,98,101,32,62,61,32,45,49,32,40,109,105,110,95,42,95,116,104,114,101,101,95,112,114,105,109,101,95,100,105,115,116,97,110,99,101,41,0,0,83,101,113,117,101,110,99,101,32,113,117,97,108,105,116,121,32,100,97,116,97,32,109,105,115,115,105,110,103,0,0,0,86,97,108,117,101,32,116,111,111,32,115,109,97,108,108,32,97,116,32,116,97,103,32,80,82,73,77,69,82,95,70,73,82,83,84,95,66,65,83,69,95,73,78,68,69,88,0,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,97,116,32,116,97,103,32,80,82,73,77,69,82,95,77,65,88,95,84,69,77,80,76,65,84,69,95,77,73,83,80,82,73,77,73,78,71,0,0,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,97,116,32,116,97,103,32,80,82,73,77,69,82,95,80,65,73,82,95,77,65,88,95,84,69,77,80,76,65,84,69,95,77,73,83,80,82,73,77,73,78,71,0,0,0,0,0,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,97,116,32,116,97,103,32,80,82,73,77,69,82,95,77,65,88,95,76,73,66,82,65,82,89,95,77,73,83,80,82,73,77,73,78,71,0,0,0,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,97,116,32,116,97,103,32,80,82,73,77,69,82,95,73,78,84,69,82,78,65,76,95,77,65,88,95,76,73,66,82,65,82,89,95,77,73,83,72,89,66,0,0,0,0,0,0,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,97,116,32,116,97,103,32,80,82,73,77,69,82,95,80,65,73,82,95,77,65,88,95,76,73,66,82,65,82,89,95,77,73,83,80,82,73,77,73,78,71,0,0,0,0,0,0,0,80,82,73,77,69,82,95,73,78,84,69,82,78,65,76,95,77,65,88,95,84,69,77,80,76,65,84,69,95,77,73,83,72,89,66,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,80,82,73,77,69,82,95,73,78,84,69,82,78,65,76,95,77,65,88,95,84,69,77,80,76,65,84,69,95,77,73,83,72,89,66,95,84,72,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,80,82,73,77,69,82,95,77,73,78,95,83,73,90,69,32,109,117,115,116,32,98,101,32,62,61,32,49,0,0,0,0,80,82,73,77,69,82,95,77,65,88,95,83,73,90,69,32,101,120,99,101,101,100,115,32,98,117,105,108,116,45,105,110,32,109,97,120,105,109,117,109,32,111,102,32,0,0,0,0,51,54,0,0,0,0,0,0,80,82,73,77,69,82,95,123,79,80,84,44,68,69,70,65,85,76,84,125,95,83,73,90,69,32,62,32,80,82,73,77,69,82,95,77,65,88,95,83,73,90,69,0,0,0,0,0,80,82,73,77,69,82,95,123,79,80,84,44,68,69,70,65,85,76,84,125,95,83,73,90,69,32,60,32,80,82,73,77,69,82,95,77,73,78,95,83,73,90,69,0,0,0,0,0,80,82,73,77,69,82,95,73,78,84,69,82,78,65,76,95,77,65,88,95,83,73,90,69,32,101,120,99,101,101,100,115,32,98,117,105,108,116,45,105,110,32,109,97,120,105,109,117,109,0,0,0,0,0,0,0,80,82,73,77,69,82,95,73,78,84,69,82,78,65,76,95,123,79,80,84,44,68,69,70,65,85,76,84,125,95,83,73,90,69,32,62,32,77,65,88,95,83,73,90,69,0,0,0,80,82,73,77,69,82,95,73,78,84,69,82,78,65,76,95,123,79,80,84,44,68,69,70,65,85,76,84,125,95,83,73,90,69,32,60,32,77,73,78,95,83,73,90,69,0,0,0,80,82,73,77,69,82,95,71,67,95,67,76,65,77,80,32,62,32,80,82,73,77,69,82,95,77,73,78,95,83,73,90,69,0,0,0,0,0,0,0,80,82,73,77,69,82,95,77,65,88,95,69,78,68,95,71,67,32,109,117,115,116,32,98,101,32,98,101,116,119,101,101,110,32,48,32,116,111,32,53,0,0,0,0,0,0,0,0,69,109,112,116,121,32,118,97,108,117,101,32,102,111,114,32,80,82,73,77,69,82,95,80,82,79,68,85,67,84,95,83,73,90,69,95,82,65,78,71,69,0,0,0,0,0,0,0,73,108,108,101,103,97,108,32,101,108,101,109,101,110,116,32,105,110,32,80,82,73,77,69,82,95,80,82,79,68,85,67,84,95,83,73,90,69,95,82,65,78,71,69,0,0,0,0,80,82,73,77,69,82,95,77,65,88,95,83,73,90,69,32,62,32,109,105,110,32,80,82,73,77,69,82,95,80,82,79,68,85,67,84,95,83,73,90,69,95,82,65,78,71,69,0,80,82,73,77,69,82,95,73,78,84,69,82,78,65,76,95,77,65,88,95,83,73,90,69,32,62,32,109,105,110,32,80,82,73,77,69,82,95,80,82,79,68,85,67,84,95,83,73,90,69,95,82,65,78,71,69,0,0,0,0,0,0,0,0,80,82,73,77,69,82,95,78,85,77,95,82,69,84,85,82,78,32,60,32,49,0,0,0,80,82,73,77,69,82,95,77,85,83,84,95,77,65,84,67,72,95,70,73,86,69,95,80,82,73,77,69,32,109,117,115,116,32,104,97,118,101,32,53,32,99,104,97,114,97,99,116,101,114,115,0,0,0,0,0,80,82,73,77,69,82,95,77,85,83,84,95,77,65,84,67,72,95,84,72,82,69,69,95,80,82,73,77,69,32,109,117,115,116,32,104,97,118,101,32,53,32,99,104,97,114,97,99,116,101,114,115,0,0,0,0,80,82,73,77,69,82,95,73,78,84,69,82,78,65,76,95,77,85,83,84,95,77,65,84,67,72,95,70,73,86,69,95,80,82,73,77,69,32,109,117,115,116,32,104,97,118,101,32,53,32,99,104,97,114,97,99,116,101,114,115,0,0,0,0,80,82,73,77,69,82,95,73,78,84,69,82,78,65,76,95,77,85,83,84,95,77,65,84,67,72,95,84,72,82,69,69,95,80,82,73,77,69,32,109,117,115,116,32,104,97,118,101,32,53,32,99,104,97,114,97,99,116,101,114,115,0,0,0,86,97,108,117,101,32,102,111,114,32,83,69,81,85,69,78,67,69,95,73,78,67,76,85,68,69,68,95,82,69,71,73,79,78,32,116,111,111,32,108,97,114,103,101,0,0,0,0,73,108,108,101,103,97,108,32,118,97,108,117,101,32,102,111,114,32,83,69,81,85,69,78,67,69,95,73,78,67,76,85,68,69,68,95,82,69,71,73,79,78,0,0,0,0,0,0,83,69,81,85,69,78,67,69,95,73,78,67,76,85,68,69,68,95,82,69,71,73,79,78,32,108,101,110,103,116,104,32,60,32,109,105,110,32,80,82,73,77,69,82,95,80,82,79,68,85,67,84,95,83,73,90,69,95,82,65,78,71,69,0,80,82,73,77,69,82,95,77,65,88,95,69,78,68,95,83,84,65,66,73,76,73,84,89,32,109,117,115,116,32,98,101,32,110,111,110,45,110,101,103,97,116,105,118,101,0,0,0,67,97,110,110,111,116,32,97,99,99,101,112,116,32,98,111,116,104,32,83,69,81,85,69,78,67,69,95,83,84,65,82,84,95,67,79,68,79,78,95,80,79,83,73,84,73,79,78,32,97,110,100,32,110,111,110,45,100,101,102,97,117,108,116,32,0,0,0,0,0,0,0,97,114,103,117,109,101,110,116,115,32,102,111,114,32,80,82,73,77,69,82,95,73,78,83,73,68,69,95,80,69,78,65,76,84,89,32,111,114,32,80,82,73,77,69,82,95,79,85,84,83,73,68,69,95,80,69,78,65,76,84,89,0,0,0,83,116,97,114,116,32,99,111,100,111,110,32,112,111,115,105,116,105,111,110,32,110,111,116,32,99,111,110,116,97,105,110,101,100,32,105,110,32,83,69,81,85,69,78,67,69,95,73,78,67,76,85,68,69,68,95,82,69,71,73,79,78,0,0,78,111,32,115,116,97,114,116,32,99,111,100,111,110,32,97,116,32,83,69,81,85,69,78,67,69,95,83,84,65,82,84,95,67,79,68,79,78,95,80,79,83,73,84,73,79,78,0,80,82,73,77,69,82,95,77,73,78,95,81,85,65,76,73,84,89,32,60,32,80,82,73,77,69,82,95,81,85,65,76,73,84,89,95,82,65,78,71,69,95,77,73,78,0,0,0,80,82,73,77,69,82,95,77,73,78,95,81,85,65,76,73,84,89,32,62,32,80,82,73,77,69,82,95,81,85,65,76,73,84,89,95,82,65,78,71,69,95,77,65,88,0,0,0,80,82,73,77,69,82,95,73,78,84,69,82,78,65,76,95,77,73,78,95,81,85,65,76,73,84,89,32,60,32,80,82,73,77,69,82,95,81,85,65,76,73,84,89,95,82,65,78,71,69,95,77,73,78,0,0,80,82,73,77,69,82,95,73,78,84,69,82,78,65,76,95,77,73,78,95,81,85,65,76,73,84,89,32,62,32,80,82,73,77,69,82,95,81,85,65,76,73,84,89,95,82,65,78,71,69,95,77,65,88,0,0,83,101,113,117,101,110,99,101,32,113,117,97,108,105,116,121,32,115,99,111,114,101,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,83,101,113,117,101,110,99,101,32,113,117,97,108,105,116,121,32,105,115,32,112,97,114,116,32,111,102,32,111,98,106,101,99,116,105,118,101,32,102,117,110,99,116,105,111,110,32,98,117,116,32,115,101,113,117,101,110,99,101,32,113,117,97,108,105,116,121,32,105,115,32,110,111,116,32,100,101,102,105,110,101,100,0,0,0,0,0,0,85,110,114,101,99,111,103,110,105,122,101,100,32,98,97,115,101,32,105,110,32,105,110,112,117,116,32,115,101,113,117,101,110,99,101,0,0,0,0,0,79,112,116,105,109,117,109,32,112,114,105,109,101,114,32,84,109,32,108,111,119,101,114,32,116,104,97,110,32,109,105,110,105,109,117,109,32,111,114,32,104,105,103,104,101,114,32,116,104,97,110,32,109,97,120,105,109,117,109,0,0,0,0,0,79,112,116,105,109,117,109,32,105,110,116,101,114,110,97,108,32,111,108,105,103,111,32,84,109,32,108,111,119,101,114,32,116,104,97,110,32,109,105,110,105,109,117,109,32,111,114,32,104,105,103,104,101,114,32,116,104,97,110,32,109,97,120,105,109,117,109,0,0,0,0,0,73,108,108,101,103,97,108,32,118,97,108,117,101,32,102,111,114,32,80,82,73,77,69,82,95,77,65,88,95,71,67,32,97,110,100,32,80,82,73,77,69,82,95,77,73,78,95,71,67,0,0,0,0,0,0,0,73,108,108,101,103,97,108,32,118,97,108,117,101,32,102,111,114,32,80,82,73,77,69,82,95,73,78,84,69,82,78,65,76,95,79,76,73,71,79,95,71,67,0,0,0,0,0,0,73,108,108,101,103,97,108,32,118,97,108,117,101,32,102,111,114,32,80,82,73,77,69,82,95,77,65,88,95,78,83,95,65,67,67,69,80,84,69,68,0,0,0,0,0,0,0,0,73,108,108,101,103,97,108,32,118,97,108,117,101,32,102,111,114,32,80,82,73,77,69,82,95,73,78,84,69,82,78,65,76,95,77,65,88,95,78,83,95,65,67,67,69,80,84,69,68,0,0,0,0,0,0,0,73,108,108,101,103,97,108,32,118,97,108,117,101,32,102,111,114,32,112,114,105,109,101,114,32,99,111,109,112,108,101,109,101,110,116,97,114,105,116,121,32,114,101,115,116,114,105,99,116,105,111,110,115,0,0,0,73,108,108,101,103,97,108,32,118,97,108,117,101,32,102,111,114,32,112,114,105,109,101,114,32,99,111,109,112,108,101,109,101,110,116,97,114,105,116,121,32,114,101,115,116,114,105,99,116,105,111,110,115,32,40,116,104,101,114,109,111,100,46,32,97,112,112,114,111,97,99,104,41,0,0,0,0,0,0,0,73,108,108,101,103,97,108,32,118,97,108,117,101,32,102,111,114,32,105,110,116,101,114,110,97,108,32,111,108,105,103,111,32,99,111,109,112,108,101,109,101,110,116,97,114,105,116,121,32,114,101,115,116,114,105,99,116,105,111,110,115,0,0,0,73,108,108,101,103,97,108,32,118,97,108,117,101,32,102,111,114,32,112,114,105,109,101,114,32,115,97,108,116,32,111,114,32,100,110,97,32,99,111,110,99,101,110,116,114,97,116,105,111,110,0,0,0,0,0,0,73,108,108,101,103,97,108,32,118,97,108,117,101,32,102,111,114,32,112,114,105,109,101,114,32,100,105,118,97,108,101,110,116,32,115,97,108,116,32,111,114,32,100,78,84,80,32,99,111,110,99,101,110,116,114,97,116,105,111,110,0,0,0,0,73,108,108,101,103,97,108,32,118,97,108,117,101,32,102,111,114,32,105,110,116,101,114,110,97,108,32,111,108,105,103,111,32,115,97,108,116,32,111,114,32,100,110,97,32,99,111,110,99,101,110,116,114,97,116,105,111,110,0,0,0,0,0,0,73,108,108,101,103,97,108,32,118,97,108,117,101,32,102,111,114,32,105,110,116,101,114,110,97,108,32,111,108,105,103,111,32,100,105,118,97,108,101,110,116,32,115,97,108,116,32,111,114,32,100,78,84,80,32,99,111,110,99,101,110,116,114,97,116,105,111,110,0,0,0,0,78,111,110,45,100,101,102,97,117,108,116,32,105,110,115,105,100,101,32,112,101,110,97,108,116,121,32,111,114,32,111,117,116,115,105,100,101,32,112,101,110,97,108,116,121,32,0,0,105,115,32,118,97,108,105,100,32,111,110,108,121,32,119,104,101,110,32,110,117,109,98,101,114,32,111,102,32,116,97,114,103,101,116,115,32,60,61,32,49,0,0,0,0,0,0,0,104,97,115,32,110,111,32,101,102,102,101,99,116,32,119,104,101,110,32,110,117,109,98,101,114,32,111,102,32,116,97,114,103,101,116,115,32,105,115,32,48,0,0,0,0,0,0,0,78,111,116,32,115,112,101,99,105,102,105,101,100,32,116,111,32,112,105,99,107,32,105,110,116,101,114,110,97,108,32,111,108,105,103,111,115,0,0,0,32,98,117,116,32,97,32,115,112,101,99,105,102,105,99,32,105,110,116,101,114,110,97,108,32,111,108,105,103,111,32,105,115,32,112,114,111,118,105,100,101,100,0,0,0,0,0,0,83,112,101,99,105,102,105,101,100,32,105,110,116,101,114,110,97,108,32,111,108,105,103,111,32,101,120,99,101,101,100,115,32,98,117,105,108,116,45,105,110,32,109,97,120,105,109,117,109,32,111,102,32,0,0,0,83,112,101,99,105,102,105,101,100,32,105,110,116,101,114,110,97,108,32,111,108,105,103,111,32,62,32,80,82,73,77,69,82,95,73,78,84,69,82,78,65,76,95,77,65,88,95,83,73,90,69,0,0,0,0,0,83,112,101,99,105,102,105,101,100,32,105,110,116,101,114,110,97,108,32,111,108,105,103,111,32,60,32,80,82,73,77,69,82,95,73,78,84,69,82,78,65,76,95,77,73,78,95,83,73,90,69,0,0,0,0,0,83,112,101,99,105,102,105,101,100,32,105,110,116,101,114,110,97,108,32,111,108,105,103,111,32,110,111,116,32,105,110,32,115,101,113,117,101,110,99,101,0,0,0,0,0,0,0,0,83,112,101,99,105,102,105,101,100,32,105,110,116,101,114,110,97,108,32,111,108,105,103,111,32,110,111,116,32,105,110,32,73,110,99,108,117,100,101,100,32,82,101,103,105,111,110,0,83,112,101,99,105,102,105,101,100,32,108,101,102,116,32,112,114,105,109,101,114,32,101,120,99,101,101,100,115,32,98,117,105,108,116,45,105,110,32,109,97,120,105,109,117,109,32,111,102,32,0,0,0,0,0,0,83,112,101,99,105,102,105,101,100,32,108,101,102,116,32,112,114,105,109,101,114,32,62,32,80,82,73,77,69,82,95,77,65,88,95,83,73,90,69,0,83,112,101,99,105,102,105,101,100,32,108,101,102,116,32,112,114,105,109,101,114,32,60,32,80,82,73,77,69,82,95,77,73,78,95,83,73,90,69,0,83,112,101,99,105,102,105,101,100,32,108,101,102,116,32,112,114,105,109,101,114,32,110,111,116,32,105,110,32,115,101,113,117,101,110,99,101,0,0,0,83,112,101,99,105,102,105,101,100,32,108,101,102,116,32,112,114,105,109,101,114,32,110,111,116,32,105,110,32,73,110,99,108,117,100,101,100,32,82,101,103,105,111,110,0,0,0,0,83,112,101,99,105,102,105,101,100,32,114,105,103,104,116,32,112,114,105,109,101,114,32,101,120,99,101,101,100,115,32,98,117,105,108,116,45,105,110,32,109,97,120,105,109,117,109,32,111,102,32,0,0,0,0,0,83,112,101,99,105,102,105,101,100,32,114,105,103,104,116,32,112,114,105,109,101,114,32,60,32,80,82,73,77,69,82,95,77,73,78,95,83,73,90,69,0,0,0,0,0,0,0,0,83,112,101,99,105,102,105,101,100,32,114,105,103,104,116,32,112,114,105,109,101,114,32,62,32,80,82,73,77,69,82,95,77,65,88,95,83,73,90,69,0,0,0,0,0,0,0,0,83,112,101,99,105,102,105,101,100,32,114,105,103,104,116,32,112,114,105,109,101,114,32,110,111,116,32,105,110,32,115,101,113,117,101,110,99,101,0,0,83,112,101,99,105,102,105,101,100,32,114,105,103,104,116,32,112,114,105,109,101,114,32,110,111,116,32,105,110,32,73,110,99,108,117,100,101,100,32,82,101,103,105,111,110,0,0,0,80,114,111,100,117,99,116,32,116,101,109,112,101,114,97,116,117,114,101,32,105,115,32,112,97,114,116,32,111,102,32,111,98,106,101,99,116,105,118,101,32,102,117,110,99,116,105,111,110,32,119,104,105,108,101,32,111,112,116,105,109,117,109,32,116,101,109,112,101,114,97,116,117,114,101,32,105,115,32,110,111,116,32,100,101,102,105,110,101,100,0,0,0,0,0,0,80,114,111,100,117,99,116,32,115,105,122,101,32,105,115,32,112,97,114,116,32,111,102,32,111,98,106,101,99,116,105,118,101,32,102,117,110,99,116,105,111,110,32,119,104,105,108,101,32,111,112,116,105,109,117,109,32,115,105,122,101,32,105,115,32,110,111,116,32,100,101,102,105,110,101,100,0,0,0,0,80,114,105,109,101,114,32,71,67,32,99,111,110,116,101,110,116,32,105,115,32,112,97,114,116,32,111,102,32,111,98,106,101,99,116,105,118,101,32,102,117,110,99,116,105,111,110,32,119,104,105,108,101,32,111,112,116,105,109,117,109,32,103,99,95,99,111,110,116,101,110,116,32,105,115,32,110,111,116,32,100,101,102,105,110,101,100,0,72,121,98,32,112,114,111,98,101,32,71,67,32,99,111,110,116,101,110,116,32,105,115,32,112,97,114,116,32,111,102,32,111,98,106,101,99,116,105,118,101,32,102,117,110,99,116,105,111,110,32,119,104,105,108,101,32,111,112,116,105,109,117,109,32,103,99,95,99,111,110,116,101,110,116,32,105,115,32,110,111,116,32,100,101,102,105,110,101,100,0,0,0,0,0,0,73,110,116,101,114,110,97,108,32,111,108,105,103,111,32,113,117,97,108,105,116,121,32,105,115,32,112,97,114,116,32,111,102,32,111,98,106,101,99,116,105,118,101,32,102,117,110,99,116,105,111,110,32,119,104,105,108,101,32,105,110,116,101,114,110,97,108,32,111,108,105,103,111,32,99,104,111,105,99,101,32,105,115,32,110,111,116,32,114,101,113,117,105,114,101,100,0,0,0,0,0,0,0,0,77,105,115,112,114,105,109,105,110,103,32,115,99,111,114,101,32,105,115,32,112,97,114,116,32,111,102,32,111,98,106,101,99,116,105,118,101,32,102,117,110,99,116,105,111,110,44,32,98,117,116,32,109,105,115,112,114,105,109,105,110,103,32,108,105,98,114,97,114,121,32,105,115,32,110,111,116,32,100,101,102,105,110,101,100,0,0,0,73,110,116,101,114,110,97,108,32,111,108,105,103,111,32,109,105,115,112,114,105,109,105,110,103,32,115,99,111,114,101,32,105,115,32,112,97,114,116,32,111,102,32,111,98,106,101,99,116,105,118,101,32,102,117,110,99,116,105,111,110,32,119,104,105,108,101,32,109,105,115,104,121,98,32,108,105,98,114,97,114,121,32,105,115,32,110,111,116,32,100,101,102,105,110,101,100,0,0,0,0,0,0,0,73,108,108,101,103,97,108,32,118,97,108,117,101,32,102,111,114,32,80,82,73,77,69,82,95,83,69,81,85,69,78,67,73,78,71,95,76,69,65,68,0,0,0,0,0,0,0,0,73,108,108,101,103,97,108,32,118,97,108,117,101,32,102,111,114,32,80,82,73,77,69,82,95,83,69,81,85,69,78,67,73,78,71,95,73,78,84,69,82,86,65,76,0,0,0,0,73,108,108,101,103,97,108,32,118,97,108,117,101,32,102,111,114,32,80,82,73,77,69,82,95,83,69,81,85,69,78,67,73,78,71,95,65,67,67,85,82,65,67,89,0,0,0,0,73,108,108,101,103,97,108,32,118,97,108,117,101,32,102,111,114,32,80,82,73,77,69,82,95,83,69,81,85,69,78,67,73,78,71,95,83,80,65,67,73,78,71,0,0,0,0,0,80,82,73,77,69,82,95,83,69,81,85,69,78,67,73,78,71,95,73,78,84,69,82,86,65,76,32,62,32,80,82,73,77,69,82,95,83,69,81,85,69,78,67,73,78,71,95,83,80,65,67,73,78,71,0,0,80,82,73,77,69,82,95,83,69,81,85,69,78,67,73,78,71,95,65,67,67,85,82,65,67,89,32,62,32,80,82,73,77,69,82,95,83,69,81,85,69,78,67,73,78,71,95,83,80,65,67,73,78,71,0,0,80,82,73,77,69,82,95,83,69,81,85,69,78,67,73,78,71,95,76,69,65,68,32,62,32,80,82,73,77,69,82,95,83,69,81,85,69,78,67,73,78,71,95,83,80,65,67,73,78,71,0,0,0,0,0,0,83,69,81,85,69,78,67,69,95,70,79,82,67,69,95,76,69,70,84,95,83,84,65,82,84,32,62,32,83,69,81,85,69,78,67,69,95,70,79,82,67,69,95,76,69,70,84,95,69,78,68,0,0,0,0,0,83,69,81,85,69,78,67,69,95,70,79,82,67,69,95,82,73,71,72,84,95,69,78,68,32,62,32,83,69,81,85,69,78,67,69,95,70,79,82,67,69,95,82,73,71,72,84,95,83,84,65,82,84,0,0,0,73,108,108,101,103,97,108,32,118,97,108,117,101,32,102,111,114,32,80,82,73,77,69,82,95,77,73,78,95,53,95,80,82,73,77,69,95,79,86,69,82,76,65,80,95,79,70,95,74,85,78,67,84,73,79,78,0,0,0,0,0,0,0,0,73,108,108,101,103,97,108,32,118,97,108,117,101,32,102,111,114,32,80,82,73,77,69,82,95,77,73,78,95,51,95,80,82,73,77,69,95,79,86,69,82,76,65,80,95,79,70,95,74,85,78,67,84,73,79,78,0,0,0,0,0,0,0,0,80,82,73,77,69,82,95,77,73,78,95,53,95,80,82,73,77,69,95,79,86,69,82,76,65,80,95,79,70,95,74,85,78,67,84,73,79,78,32,62,32,80,82,73,77,69,82,95,77,65,88,95,83,73,90,69,32,47,32,50], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([80,82,73,77,69,82,95,77,73,78,95,51,95,80,82,73,77,69,95,79,86,69,82,76,65,80,95,79,70,95,74,85,78,67,84,73,79,78,32,62,32,80,82,73,77,69,82,95,77,65,88,95,83,73,90,69,32,47,32,50,0,0,0,0,80,82,73,77,69,82,95,83,65,76,84,95,68,73,86,65,76,69,78,84,32,62,32,48,46,48,32,98,117,116,32,80,82,73,77,69,82,95,68,78,84,80,95,67,79,78,67,32,60,61,32,48,46,48,59,32,117,115,101,32,114,101,97,115,111,110,97,98,108,101,32,118,97,108,117,101,32,102,111,114,32,80,82,73,77,69,82,95,68,78,84,80,95,67,79,78,67,0,0,0,0,0,0,0,73,108,108,101,103,97,108,32,118,97,108,117,101,115,32,102,111,114,32,80,82,73,77,69,82,95,77,85,83,84,95,77,65,84,67,72,95,70,73,86,69,95,80,82,73,77,69,0,73,108,108,101,103,97,108,32,118,97,108,117,101,115,32,102,111,114,32,80,82,73,77,69,82,95,77,85,83,84,95,77,65,84,67,72,95,84,72,82,69,69,95,80,82,73,77,69,0,0,0,0,0,0,0,0,73,108,108,101,103,97,108,32,118,97,108,117,101,115,32,102,111,114,32,80,82,73,77,69,82,95,73,78,84,69,82,78,65,76,95,77,85,83,84,95,77,65,84,67,72,95,70,73,86,69,95,80,82,73,77,69,0,0,0,0,0,0,0,0,73,108,108,101,103,97,108,32,118,97,108,117,101,115,32,102,111,114,32,80,82,73,77,69,82,95,73,78,84,69,82,78,65,76,95,77,85,83,84,95,77,65,84,67,72,95,84,72,82,69,69,95,80,82,73,77,69,0,0,0,0,0,0,0,84,97,115,107,32,112,105,99,107,95,115,101,113,117,101,110,99,105,110,103,95,112,114,105,109,101,114,115,32,99,97,110,110,111,116,32,98,101,32,99,111,109,98,105,110,101,100,32,119,105,116,104,32,105,110,99,108,117,100,101,100,32,114,101,103,105,111,110,0,0,0,0,78,111,32,112,114,105,109,101,114,115,32,112,114,111,118,105,100,101,100,0,0,0,0,0,77,105,115,115,105,110,103,32,83,69,81,85,69,78,67,69,32,116,97,103,0,0,0,0,84,97,115,107,32,112,105,99,107,95,100,105,115,99,114,105,109,105,110,97,116,105,118,101,95,112,114,105,109,101,114,115,32,114,101,113,117,105,114,101,115,32,101,120,97,99,116,108,121,32,111,110,101,32,83,69,81,85,69,78,67,69,95,84,65,82,71,69,84,0,0,0,83,69,81,85,69,78,67,69,95,79,86,69,82,76,65,80,95,74,85,78,67,84,73,79,78,95,76,73,83,84,0,0,37,115,32,98,101,121,111,110,100,32,101,110,100,32,111,102,32,115,101,113,117,101,110,99,101,0,0,0,0,0,0,0,78,101,103,97,116,105,118,101,32,37,115,32,108,101,110,103,116,104,0,0,0,0,0,0,37,115,32,111,117,116,115,105,100,101,32,111,102,32,73,78,67,76,85,68,69,68,95,82,69,71,73,79,78,0,0,0,84,65,82,71,69,84,0,0,69,88,67,76,85,68,69,68,95,82,69,71,73,79,78,0,80,82,73,77,69,82,95,73,78,84,69,82,78,65,76,95,79,76,73,71,79,95,69,88,67,76,85,68,69,68,95,82,69,71,73,79,78,0,0,0,80,82,73,77,69,82,95,80,65,73,82,95,79,75,95,82,69,71,73,79,78,95,76,73,83,84,0,0,0,0,0,0,32,105,108,108,101,103,97,108,32,105,110,116,101,114,118,97,108,0,0,0,0,0,0,0,32,98,101,121,111,110,100,32,101,110,100,32,111,102,32,115,101,113,117,101,110,99,101,0,32,111,117,116,115,105,100,101,32,111,102,32,73,78,67,76,85,68,69,68,95,82,69,71,73,79,78,0,0,0,0,0,78,101,103,97,116,105,118,101,32,0,0,0,0,0,0,0,32,108,101,110,103,116,104,0,78,0,0,0,0,0,0,0,115,32,33,61,32,48,76,0,100,105,114,101,99,116,105,111,110,32,61,61,32,49,32,124,124,32,100,105,114,101,99,116,105,111,110,32,61,61,32,45,49,0,0,0,0,0,0,0,108,101,110,32,62,61,32,51,0,0,0,0,0,0,0,0,115,116,97,114,116,32,60,61,32,40,108,101,110,32,45,32,51,41,0,0,0,0,0,0,48,120,55,102,102,102,102,102,102,102,32,62,32,40,110,61,115,116,114,108,101,110,40,115,97,45,62,116,114,105,109,109,101,100,95,115,101,113,41,41,0,0,0,0,0,0,0,0,67,97,108,99,117,108,97,116,105,111,110,32,101,114,114,111,114,32,105,110,32,102,111,114,119,97,114,100,32,115,101,113,117,101,110,99,105,110,103,32,112,111,115,105,116,105,111,110,32,99,97,108,99,117,108,97,116,105,111,110,0,0,0,0,67,97,108,99,117,108,97,116,105,111,110,32,101,114,114,111,114,32,105,110,32,114,101,118,101,114,115,101,32,115,101,113,117,101,110,99,105,110,103,32,112,111,115,105,116,105,111,110,32,99,97,108,99,117,108,97,116,105,111,110,0,0,0,0,73,110,99,114,101,97,115,101,32,80,82,73,77,69,82,95,78,85,77,95,82,69,84,85,82,78,32,116,111,32,111,98,116,97,105,110,32,97,108,108,32,115,101,113,117,101,110,99,105,110,103,32,112,114,105,109,101,114,115,0,0,0,0,0,78,111,32,114,105,103,104,116,32,112,114,105,109,101,114,32,102,111,117,110,100,32,105,110,32,114,97,110,103,101,32,0,78,111,32,108,101,102,116,32,112,114,105,109,101,114,32,102,111,117,110,100,32,105,110,32,114,97,110,103,101,32,0,0,37,100,0,0,0,0,0,0,32,45,32,0,0,0,0,0,0,195,126,18,0,0,0,0,48,0,0,0,0,0,0,0,33,40,98,102,95,103,101,116,95,105,110,102,105,110,105,116,101,95,112,111,115,95,112,101,110,97,108,116,121,40,104,41,41,0,0,0,0,0,0,0,111,108,105,103,111,95,109,97,120,95,116,101,109,112,108,97,116,101,95,109,105,115,112,114,105,109,105,110,103,40,104,41,32,33,61,32,45,49,46,55,57,55,54,57,51,49,51,52,56,54,50,51,49,53,55,101,43,51,48,56,0,0,0,0,111,108,105,103,111,95,109,97,120,95,116,101,109,112,108,97,116,101,95,109,105,115,112,114,105,109,105,110,103,95,116,104,101,114,109,111,100,40,104,41,32,33,61,32,45,49,46,55,57,55,54,57,51,49,51,52,56,54,50,51,49,53,55,101,43,51,48,56,0,0,0,0,79,84,95,76,69,70,84,32,61,61,32,108,32,124,124,32,79,84,95,82,73,71,72,84,32,61,61,32,108,32,124,124,32,79,84,95,73,78,84,76,32,61,61,32,108,0,0,0,107,32,62,61,32,48,0,0,107,32,60,32,40,40,115,97,41,45,62,105,110,99,108,95,108,41,0,0,0,0,0,0,115,97,45,62,116,97,114,50,46,99,111,117,110,116,32,60,61,32,49,32,124,124,32,40,45,49,46,48,32,61,61,32,112,97,45,62,105,110,115,105,100,101,95,112,101,110,97,108,116,121,32,38,38,32,48,46,48,32,61,61,32,112,97,45,62,111,117,116,115,105,100,101,95,112,101,110,97,108,116,121,41,0,0,0,0,0,0,0,33,112,51,95,111,108,95,105,115,95,111,107,40,104,41,0,102,105,114,115,116,95,117,110,116,114,105,109,109,101,100,32,61,32,37,100,44,32,108,97,115,116,95,117,110,116,114,105,109,109,101,100,32,61,32,37,100,10,0,0,0,0,0,0,10,42,42,42,42,42,42,42,42,42,42,42,42,32,79,76,73,71,79,32,61,32,76,69,70,84,10,0,0,0,0,0,10,42,42,42,42,42,42,42,42,42,42,42,42,32,79,76,73,71,79,32,61,32,82,73,71,72,84,10,0,0,0,0,102,105,114,115,116,95,117,110,116,114,105,109,109,101,100,32,61,32,37,100,44,32,108,97,115,116,95,117,110,116,114,105,109,109,101,100,32,61,32,37,100,44,32,102,105,114,115,116,32,61,32,37,100,44,32,108,97,115,116,32,61,32,37,100,10,0,0,0,0,0,0,0,53,39,32,111,102,32,111,108,105,103,111,58,32,83,99,111,114,101,32,37,102,32,97,108,105,103,110,105,110,103,32,37,115,32,97,103,97,105,110,115,116,32,37,115,10,10,0,0,51,39,32,111,102,32,111,108,105,103,111,32,83,99,111,114,101,32,37,102,32,97,108,105,103,110,105,110,103,32,37,115,32,97,103,97,105,110,115,116,32,37,115,10,10,0,0,0,73,110,32,112,114,105,109,101,114,95,109,105,115,112,114,105,109,105,110,103,95,116,111,95,116,101,109,112,108,97,116,101,95,116,104,101,114,109,111,100,10,32,111,116,104,101,114,32,115,116,114,97,110,100,32,83,99,111,114,101,32,37,102,32,97,108,105,103,110,105,110,103,32,37,115,32,97,103,97,105,110,115,116,32,37,115,10,10,0,0,0,0,0,0,0,0,116,104,97,108,44,32,116,104,97,108,95,97,114,103,115,44,32,116,121,112,101,61,37,100,32,109,97,120,76,111,111,112,61,37,100,32,109,118,61,37,102,32,100,118,61,37,102,32,100,110,116,112,61,37,102,32,100,110,97,95,99,111,110,99,61,37,102,44,32,116,101,109,112,61,37,102,44,32,116,101,109,112,111,110,108,121,61,37,100,32,100,105,109,101,114,61,37,100,10,0,0,0,0,0,116,104,97,108,58,32,115,49,61,37,115,32,115,50,61,37,115,32,116,101,109,112,61,37,102,32,109,115,103,61,37,115,32,101,110,100,49,61,37,100,32,101,110,100,50,61,37,100,10,0,0,0,0,0,0,0,114,46,116,101,109,112,32,60,61,32,49,46,55,57,55,54,57,51,49,51,52,56,54,50,51,49,53,55,101,43,51,48,56,0,0,0,0,0,0,0,102,105,114,115,116,95,117,110,116,114,105,109,109,101,100,32,61,32,37,100,44,32,108,97,115,116,95,117,110,116,114,105,109,109,101,100,32,61,32,37,100,44,102,105,114,115,116,32,61,32,37,100,44,32,108,97,115,116,32,61,32,37,100,10,0,0,0,0,0,0,0,0,111,116,104,101,114,32,115,116,114,97,110,100,32,83,99,111,114,101,32,37,102,32,97,108,105,103,110,105,110,103,32,37,115,32,97,103,97,105,110,115,116,32,37,115,10,10,0,0,114,46,115,99,111,114,101,32,60,61,32,48,120,55,102,102,102,0,0,0,0,0,0,0,37,115,0,0,0,0,0,0,114,46,115,99,111,114,101,32,33,61,32,40,45,49,45,48,120,55,102,102,102,102,102,102,102,41,0,0,0,0,0,0,104,32,33,61,32,48,76,0,77,111,114,101,32,116,104,97,110,32,111,110,101,32,112,111,115,105,116,105,111,110,32,105,110,32,116,101,109,112,108,97,116,101,32,102,111,114,32,105,110,112,117,116,32,111,108,105,103,111,32,0,0,0,0,0,67,97,108,99,117,108,97,116,105,111,110,32,101,114,114,111,114,32,105,110,32,102,111,114,99,101,100,32,112,114,105,109,101,114,32,112,111,115,105,116,105,111,110,32,99,97,108,99,117,108,97,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,61,37,100,44,32,106,61,37,100,44,32,111,118,101,114,108,97,112,115,95,111,108,105,103,111,95,105,110,95,98,101,116,116,101,114,95,112,97,105,114,43,43,10,0,0,0,0,117,112,100,97,116,101,115,32,79,78,58,32,105,61,37,100,44,32,106,61,37,100,44,32,109,97,120,95,106,95,115,101,101,110,91,37,100,93,61,37,100,10,0,0,0,0,0,0,109,97,120,95,106,95,115,101,101,110,91,37,100,93,32,45,45,62,32,37,100,10,0,0,117,112,100,97,116,101,115,32,111,110,10,0,0,0,0,0,111,107,43,43,10,0,0,0,104,46,112,97,105,114,95,113,117,97,108,105,116,121,32,62,61,32,48,46,48,0,0,0,65,68,68,32,112,97,105,114,32,105,61,37,100,44,32,106,61,37,100,10,0,0,0,0,112,97,45,62,112,114,95,112,97,105,114,95,119,101,105,103,104,116,115,46,116,101,109,112,108,97,116,101,95,109,105,115,112,114,105,109,105,110,103,32,62,61,32,48,46,48,0,0,104,45,62,116,101,109,112,108,97,116,101,95,109,105,115,112,114,105,109,105,110,103,32,62,61,32,48,46,48,0,0,0,112,97,45,62,112,114,95,112,97,105,114,95,119,101,105,103,104,116,115,46,116,101,109,112,108,97,116,101,95,109,105,115,112,114,105,109,105,110,103,95,116,104,32,62,61,32,48,46,48,0,0,0,0,0,0,0,115,117,109,32,62,61,32,48,46,48,0,0,0,0,0,0,116,101,109,112,111,114,97,114,121,0,0,0,0,0,0,0,112,112,97,105,114,45,62,114,105,103,104,116,45,62,115,116,97,114,116,32,45,32,112,112,97,105,114,45,62,108,101,102,116,45,62,115,116,97,114,116,32,43,32,49,32,62,32,48,0,0,0,0,0,0,0,0,112,112,97,105,114,45,62,112,114,111,100,117,99,116,95,116,109,32,33,61,32,45,57,57,57,57,57,57,46,57,57,57,57,0,0,0,0,0,0,0,112,112,97,105,114,45,62,108,101,102,116,45,62,116,101,109,112,108,97,116,101,95,109,105,115,112,114,105,109,105,110,103,32,33,61,32,45,49,46,55,57,55,54,57,51,49,51,52,56,54,50,51,49,53,55,101,43,51,48,56,0,0,0,0,112,112,97,105,114,45,62,108,101,102,116,45,62,116,101,109,112,108,97,116,101,95,109,105,115,112,114,105,109,105,110,103,95,114,32,33,61,32,45,49,46,55,57,55,54,57,51,49,51,52,56,54,50,51,49,53,55,101,43,51,48,56,0,0,112,112,97,105,114,45,62,114,105,103,104,116,45,62,116,101,109,112,108,97,116,101,95,109,105,115,112,114,105,109,105,110,103,32,33,61,32,45,49,46,55,57,55,54,57,51,49,51,52,56,54,50,51,49,53,55,101,43,51,48,56,0,0,0,112,112,97,105,114,45,62,114,105,103,104,116,45,62,116,101,109,112,108,97,116,101,95,109,105,115,112,114,105,109,105,110,103,95,114,32,33,61,32,45,49,46,55,57,55,54,57,51,49,51,52,56,54,50,51,49,53,55,101,43,51,48,56,0,112,114,111,98,97,98,108,121,32,112,114,105,109,101,114,51,95,99,111,114,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([152,57,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,48,105,0,0,120,57,0,0,160,65,0,0,0,0,0,0,0,0,0,0,0,58,0,0,3,0,0,0,4,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,5,0,0,0,2,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,48,105,0,0,232,57,0,0,160,65,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,0,0,0,0,152,58,0,0,5,0,0,0,6,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,2,0,0,0,8,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,11,0,0,0,5,0,0,0,7,0,0,0,6,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,48,105,0,0,120,58,0,0,96,65,0,0,0,0,0,0,0,0,0,0,0,59,0,0,7,0,0,0,8,0,0,0,4,0,0,0,5,0,0,0,2,0,0,0,2,0,0,0,12,0,0,0,9,0,0,0,6,0,0,0,13,0,0,0,14,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,48,105,0,0,232,58,0,0,96,65,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,8,105,0,0,16,59,0,0,0,0,0,0,120,59,0,0,9,0,0,0,10,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,224,59,0,0,11,0,0,0,12,0,0,0,16,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,48,105,0,0,104,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,59,0,0,9,0,0,0,13,0,0,0,15,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,48,105,0,0,160,59,0,0,120,59,0,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,48,105,0,0,200,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,60,0,0,11,0,0,0,14,0,0,0,16,0,0,0,0,0,0,0,83,116,49,52,111,118,101,114,102,108,111,119,95,101,114,114,111,114,0,0,0,0,0,0,48,105,0,0,8,60,0,0,224,59,0,0,0,0,0,0,58,32,0,0,0,0,0,0,0,0,0,0,104,60,0,0,15,0,0,0,16,0,0,0,16,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,48,105,0,0,80,60,0,0,224,59,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,8,105,0,0,120,60,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,48,105,0,0,160,60,0,0,152,60,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,7,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,29,0,0,0,31,0,0,0,37,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,53,0,0,0,59,0,0,0,61,0,0,0,67,0,0,0,71,0,0,0,73,0,0,0,79,0,0,0,83,0,0,0,89,0,0,0,97,0,0,0,101,0,0,0,103,0,0,0,107,0,0,0,109,0,0,0,113,0,0,0,127,0,0,0,131,0,0,0,137,0,0,0,139,0,0,0,149,0,0,0,151,0,0,0,157,0,0,0,163,0,0,0,167,0,0,0,173,0,0,0,179,0,0,0,181,0,0,0,191,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,211,0,0,0,1,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,29,0,0,0,31,0,0,0,37,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,53,0,0,0,59,0,0,0,61,0,0,0,67,0,0,0,71,0,0,0,73,0,0,0,79,0,0,0,83,0,0,0,89,0,0,0,97,0,0,0,101,0,0,0,103,0,0,0,107,0,0,0,109,0,0,0,113,0,0,0,121,0,0,0,127,0,0,0,131,0,0,0,137,0,0,0,139,0,0,0,143,0,0,0,149,0,0,0,151,0,0,0,157,0,0,0,163,0,0,0,167,0,0,0,169,0,0,0,173,0,0,0,179,0,0,0,181,0,0,0,187,0,0,0,191,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,209,0,0,0,95,95,110,101,120,116,95,112,114,105,109,101,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,0,0,0,0,96,65,0,0,17,0,0,0,18,0,0,0,5,0,0,0,5,0,0,0,2,0,0,0,2,0,0,0,12,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,11,0,0,0,5,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,160,65,0,0,19,0,0,0,20,0,0,0,6,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,5,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,8,0,0,0,0,0,0,0,216,65,0,0,21,0,0,0,22,0,0,0,248,255,255,255,248,255,255,255,216,65,0,0,23,0,0,0,24,0,0,0,8,0,0,0,0,0,0,0,32,66,0,0,25,0,0,0,26,0,0,0,248,255,255,255,248,255,255,255,32,66,0,0,27,0,0,0,28,0,0,0,4,0,0,0,0,0,0,0,104,66,0,0,29,0,0,0,30,0,0,0,252,255,255,255,252,255,255,255,104,66,0,0,31,0,0,0,32,0,0,0,4,0,0,0,0,0,0,0,176,66,0,0,33,0,0,0,34,0,0,0,252,255,255,255,252,255,255,255,176,66,0,0,35,0,0,0,36,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,64,0,0,37,0,0,0,38,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,160,64,0,0,39,0,0,0,40,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,48,105,0,0,88,64,0,0,104,60,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,8,105,0,0,136,64,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,48,105,0,0,168,64,0,0,160,64,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,48,105,0,0,232,64,0,0,160,64,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,8,105,0,0,40,65,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,8,105,0,0,104,65,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,144,105,0,0,168,65,0,0,0,0,0,0,1,0,0,0,216,64,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,144,105,0,0,240,65,0,0,0,0,0,0,1,0,0,0,24,65,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,144,105,0,0,56,66,0,0,0,0,0,0,1,0,0,0,216,64,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,144,105,0,0,128,66,0,0,0,0,0,0,1,0,0,0,24,65,0,0,3,244,255,255,0,0,0,0,16,67,0,0,41,0,0,0,42,0,0,0,17,0,0,0,1,0,0,0,9,0,0,0,10,0,0,0,2,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,48,105,0,0,240,66,0,0,184,60,0,0,0,0,0,0,0,0,0,0,56,81,0,0,43,0,0,0,44,0,0,0,45,0,0,0,1,0,0,0,3,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,81,0,0,46,0,0,0,47,0,0,0,45,0,0,0,2,0,0,0,4,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,86,0,0,48,0,0,0,49,0,0,0,45,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,168,86,0,0,50,0,0,0,51,0,0,0,45,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,87,0,0,52,0,0,0,53,0,0,0,45,0,0,0,3,0,0,0,4,0,0,0,23,0,0,0,5,0,0,0,24,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,0,0,54,0,0,0,55,0,0,0,45,0,0,0,7,0,0,0,8,0,0,0,25,0,0,0,9,0,0,0,26,0,0,0,3,0,0,0,4,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,40,83,0,0,56,0,0,0,57,0,0,0,45,0,0,0,18,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,1,0,0,0,248,255,255,255,40,83,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,72,58,37,77,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,200,83,0,0,58,0,0,0,59,0,0,0,45,0,0,0,26,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,2,0,0,0,248,255,255,255,200,83,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,88,84,0,0,60,0,0,0,61,0,0,0,45,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,84,0,0,62,0,0,0,63,0,0,0,45,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,81,0,0,64,0,0,0,65,0,0,0,45,0,0,0,34,0,0,0,35,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,36,0,0,0,11,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,81,0,0,66,0,0,0,67,0,0,0,45,0,0,0,37,0,0,0,38,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,39,0,0,0,17,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,82,0,0,68,0,0,0,69,0,0,0,45,0,0,0,40,0,0,0,41,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,42,0,0,0,23,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,82,0,0,70,0,0,0,71,0,0,0,45,0,0,0,43,0,0,0,44,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,45,0,0,0,29,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,88,0,0,72,0,0,0,73,0,0,0,45,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,76,102,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,0,0,0,0,32,89,0,0,74,0,0,0,75,0,0,0,45,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,176,89,0,0,76,0,0,0,77,0,0,0,45,0,0,0,1,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,0,0,0,0,64,90,0,0,78,0,0,0,79,0,0,0,45,0,0,0,2,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,85,0,0,80,0,0,0,81,0,0,0,45,0,0,0,13,0,0,0,11,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,85,0,0,82,0,0,0,83,0,0,0,45,0,0,0,14,0,0,0,12,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,118,101,99,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,16,81,0,0,84,0,0,0,85,0,0,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,77,0,0,86,0,0,0,87,0,0,0,45,0,0,0,9,0,0,0,15,0,0,0,10,0,0,0,16,0,0,0,11,0,0,0,1,0,0,0,17,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,78,0,0,88,0,0,0,89,0,0,0,45,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,46,0,0,0,47,0,0,0,5,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,80,0,0,90,0,0,0,91,0,0,0,45,0,0,0,49,0,0,0,50,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,0,0,0,0,232,80,0,0,92,0,0,0,93,0,0,0,45,0,0,0,51,0,0,0,52,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,116,114,117,101,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,0,32,77,0,0,94,0,0,0,95,0,0,0,45,0,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,48,105,0,0,8,77,0,0,48,59,0,0,0,0,0,0,0,0,0,0,176,77,0,0,94,0,0,0,96,0,0,0,45,0,0,0,18,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,12,0,0,0,19,0,0,0,13,0,0,0,20,0,0,0,14,0,0,0,5,0,0,0,21,0,0,0,6,0,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,8,105,0,0,144,77,0,0,144,105,0,0,120,77,0,0,0,0,0,0,2,0,0,0,32,77,0,0,2,0,0,0,168,77,0,0,2,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,144,105,0,0,208,77,0,0,0,0,0,0,2,0,0,0,32,77,0,0,2,0,0,0,168,77,0,0,2,0,0,0,0,0,0,0,128,78,0,0,94,0,0,0,97,0,0,0,45,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,53,0,0,0,54,0,0,0,8,0,0,0,55,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,8,105,0,0,96,78,0,0,144,105,0,0,56,78,0,0,0,0,0,0,2,0,0,0,32,77,0,0,2,0,0,0,120,78,0,0,2,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,144,105,0,0,160,78,0,0,0,0,0,0,2,0,0,0,32,77,0,0,2,0,0,0,120,78,0,0,2,0,0,0,0,0,0,0,64,79,0,0,94,0,0,0,98,0,0,0,45,0,0,0,5,0,0,0,6,0,0,0,9,0,0,0,56,0,0,0,57,0,0,0,10,0,0,0,58,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,144,105,0,0,24,79,0,0,0,0,0,0,2,0,0,0,32,77,0,0,2,0,0,0,120,78,0,0,2,0,0,0,0,0,0,0,184,79,0,0,94,0,0,0,99,0,0,0,45,0,0,0,7,0,0,0,8,0,0,0,11,0,0,0,59,0,0,0,60,0,0,0,12,0,0,0,61,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,144,105,0,0,144,79,0,0,0,0,0,0,2,0,0,0,32,77,0,0,2,0,0,0,120,78,0,0,2,0,0,0,0,0,0,0,48,80,0,0,94,0,0,0,100,0,0,0,45,0,0,0,7,0,0,0,8,0,0,0,11,0,0,0,59,0,0,0,60,0,0,0,12,0,0,0,61,0,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,48,105,0,0,8,80,0,0,184,79,0,0,0,0,0,0,0,0,0,0,152,80,0,0,94,0,0,0,101,0,0,0,45,0,0,0,7,0,0,0,8,0,0,0,11,0,0,0,59,0,0,0,60,0,0,0,12,0,0,0,61,0,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,48,105,0,0,112,80,0,0,184,79,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,48,105,0,0,168,80,0,0,32,77,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,48,105,0,0,208,80,0,0,32,77,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,48,105,0,0,248,80,0,0,32,77,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,48,105,0,0,32,81,0,0,32,77,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,48,105,0,0,72,81,0,0,32,77,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,8,105,0,0,144,81,0,0,144,105,0,0,112,81,0,0,0,0,0,0,2,0,0,0,32,77,0,0,2,0,0,0,168,81,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,144,105,0,0,208,81,0,0,0,0,0,0,2,0,0,0,32,77,0,0,2,0,0,0,168,81,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,144,105,0,0,16,82,0,0,0,0,0,0,2,0,0,0,32,77,0,0,2,0,0,0,168,81,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,144,105,0,0,80,82,0,0,0,0,0,0,2,0,0,0,32,77,0,0,2,0,0,0,168,81,0,0,2,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,8,105,0,0,216,82,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,8,105,0,0,248,82,0,0,144,105,0,0,144,82,0,0,0,0,0,0,3,0,0,0,32,77,0,0,2,0,0,0,240,82,0,0,2,0,0,0,32,83,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,8,105,0,0,152,83,0,0,144,105,0,0,80,83,0,0,0,0,0,0,3,0,0,0,32,77,0,0,2,0,0,0,240,82,0,0,2,0,0,0,192,83,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,8,105,0,0,56,84,0,0,144,105,0,0,240,83,0,0,0,0,0,0,2,0,0,0,32,77,0,0,2,0,0,0,80,84,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,144,105,0,0,120,84,0,0,0,0,0,0,2,0,0,0,32,77,0,0,2,0,0,0,80,84,0,0,0,8,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,8,105,0,0,248,84,0,0,144,105,0,0,224,84,0,0,0,0,0,0,2,0,0,0,32,77,0,0,2,0,0,0,16,85,0,0,2,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,144,105,0,0,56,85,0,0,0,0,0,0,2,0,0,0,32,77,0,0,2,0,0,0,16,85,0,0,2,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,8,105,0,0,208,85,0,0,144,105,0,0,184,85,0,0,0,0,0,0,1,0,0,0,240,85,0,0,0,0,0,0,144,105,0,0,112,85,0,0,0,0,0,0,2,0,0,0,32,77,0,0,2,0,0,0,248,85,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,144,105,0,0,120,86,0,0,0,0,0,0,1,0,0,0,240,85,0,0,0,0,0,0,144,105,0,0,48,86,0,0,0,0,0,0,2,0,0,0,32,77,0,0,2,0,0,0,144,86,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,8,105,0,0,40,87,0,0,144,105,0,0,16,87,0,0,0,0,0,0,1,0,0,0,72,87,0,0,0,0,0,0,144,105,0,0,200,86,0,0,0,0,0,0,2,0,0,0,32,77,0,0,2,0,0,0,80,87,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,144,105,0,0,208,87,0,0,0,0,0,0,1,0,0,0,72,87,0,0,0,0,0,0,144,105,0,0,136,87,0,0,0,0,0,0,2,0,0,0,32,77,0,0,2,0,0,0,232,87,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,8,105,0,0,104,88,0,0,144,105,0,0,32,88,0,0,0,0,0,0,2,0,0,0,32,77,0,0,2,0,0,0,136,88,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,8,105,0,0,248,88,0,0,144,105,0,0,176,88,0,0,0,0,0,0,2,0,0,0,32,77,0,0,2,0,0,0,24,89,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,8,105,0,0,136,89,0,0,144,105,0,0,64,89,0,0,0,0,0,0,2,0,0,0,32,77,0,0,2,0,0,0,168,89,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,8,105,0,0,24,90,0,0,144,105,0,0,208,89,0,0,0,0,0,0,2,0,0,0,32,77,0,0,2,0,0,0,56,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+14644);
/* memory initializer */ allocate([74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,65,112,114,105,108,0,0,0,77,97,121,0,0,0,0,0,74,117,110,101,0,0,0,0,74,117,108,121,0,0,0,0,65,117,103,117,115,116,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,74,97,110,0,0,0,0,0,70,101,98,0,0,0,0,0,77,97,114,0,0,0,0,0,65,112,114,0,0,0,0,0,74,117,110,0,0,0,0,0,74,117,108,0,0,0,0,0,65,117,103,0,0,0,0,0,83,101,112,0,0,0,0,0,79,99,116,0,0,0,0,0,78,111,118,0,0,0,0,0,68,101,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,117,110,100,97,121,0,0,77,111,110,100,97,121,0,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,83,117,110,0,0,0,0,0,77,111,110,0,0,0,0,0,84,117,101,0,0,0,0,0,87,101,100,0,0,0,0,0,84,104,117,0,0,0,0,0,70,114,105,0,0,0,0,0,83,97,116,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,104,0,0,102,0,0,0,103,0,0,0,62,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,8,105,0,0,88,104,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,48,105,0,0,112,104,0,0,0,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,48,105,0,0,144,104,0,0,104,104,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,48,105,0,0,200,104,0,0,184,104,0,0,0,0,0,0,0,0,0,0,240,104,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,22,0,0,0,13,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,120,105,0,0,104,0,0,0,108,0,0,0,106,0,0,0,107,0,0,0,22,0,0,0,14,0,0,0,2,0,0,0,6,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,48,105,0,0,80,105,0,0,240,104,0,0,0,0,0,0,0,0,0,0,216,105,0,0,104,0,0,0,109,0,0,0,106,0,0,0,107,0,0,0,22,0,0,0,15,0,0,0,3,0,0,0,7,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,48,105,0,0,176,105,0,0,240,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,108,0,0,110,0,0,0,111,0,0,0,63,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,48,105,0,0,8,108,0,0,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+24888);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }var ___cxa_atexit=_atexit;

   
  Module["_i64Subtract"] = _i64Subtract;

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

   
  Module["_i64Add"] = _i64Add;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  
  
  
  var ___cxa_last_thrown_exception=0;function ___resumeException(ptr) {
      if (!___cxa_last_thrown_exception) { ___cxa_last_thrown_exception = ptr; }
      throw ptr;
    }
  
  var ___cxa_exception_header_size=8;function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = ___cxa_last_thrown_exception;
      header = thrown - ___cxa_exception_header_size;
      if (throwntype == -1) throwntype = HEAP32[((header)>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
  
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      var header = ptr - ___cxa_exception_header_size;
      HEAP32[((header)>>2)]=type;
      HEAP32[(((header)+(4))>>2)]=destructor;
      ___cxa_last_thrown_exception = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _set_dpal_args() {
  Module['printErr']('missing function: set_dpal_args'); abort(-1);
  }

  function _pthread_mutex_lock() {}

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr - ___cxa_exception_header_size);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }
  
  var ___cxa_caught_exceptions=[];function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = ___cxa_caught_exceptions.pop();
      if (ptr) {
        header = ptr - ___cxa_exception_header_size;
        var destructor = HEAP32[(((header)+(4))>>2)];
        if (destructor) {
          Runtime.dynCall('vi', destructor, [ptr]);
          HEAP32[(((header)+(4))>>2)]=0;
        }
        ___cxa_free_exception(ptr);
        ___cxa_last_thrown_exception = 0;
      }
    }

  function _end_oligodg() {
  Module['printErr']('missing function: end_oligodg'); abort(-1);
  }

  
  
  
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            assert(buffer.length);
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
              } else {
                return intArrayFromString(xhr.responseText || '', true);
              }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
              return lazyArray.chunks[chunkNum];
            });
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces "//" comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the "#" for "//" again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                url = url + addr + ':' + port;
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }


  var _emscripten_check_longjmp=true;

  
  
  
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }
  function __parseInt64(str, endptr, base, min, max, unsign) {
      var isNegative = false;
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      if (HEAP8[(str)] == 45) {
        str++;
        isNegative = true;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
  
      // Find base.
      var ok = false;
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            ok = true; // we saw an initial zero, perhaps the entire thing is just "0"
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      var start = str;
  
      // Get digits.
      var chr;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          str++;
          ok = true;
        }
      }
  
      if (!ok) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return ((asm["setTempRet0"](0),0)|0);
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str;
      }
  
      try {
        var numberString = isNegative ? '-'+Pointer_stringify(start, str - start) : Pointer_stringify(start, str - start);
        i64Math.fromString(numberString, finalBase, min, max, unsign);
      } catch(e) {
        ___setErrNo(ERRNO_CODES.ERANGE); // not quite correct
      }
  
      return ((asm["setTempRet0"](((HEAP32[(((tempDoublePtr)+(4))>>2)])|0)),((HEAP32[((tempDoublePtr)>>2)])|0))|0);
    }function _strtoull(str, endptr, base) {
      return __parseInt64(str, endptr, base, 0, '18446744073709551615', true);  // ULONG_MAX.
    }function _strtoull_l(str, endptr, base) {
      return _strtoull(str, endptr, base); // no locale support yet
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var _emscripten_postinvoke=true;


  
  function _strtoll(str, endptr, base) {
      return __parseInt64(str, endptr, base, '-9223372036854775808', '9223372036854775807');  // LLONG_MIN, LLONG_MAX.
    }function _strtoll_l(str, endptr, base) {
      return _strtoll(str, endptr, base); // no locale support yet
    }

  
  
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _putchar(c) {
      // int putchar(int c);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
      return _fputc(c, HEAP32[((_stdout)>>2)]);
    } 
  Module["_saveSetjmp"] = _saveSetjmp;

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }


  var _emscripten_prep_setjmp=true;

  var _emscripten_setjmp=true;

  function _pthread_cond_broadcast() {
      return 0;
    }

  
  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  var _emscripten_resume=true;

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)]
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls(Math.floor(year/100),2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  
  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }function __ZSt9terminatev() {
      _exit(-1234);
    }

  function _pthread_mutex_unlock() {}

  
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }function _isxdigit_l(chr) {
      return _isxdigit(chr); // no locale support yet
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _emscripten_landingpad=true;

  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function ___cxa_guard_abort() {}

  function _newlocale(mask, locale, base) {
      return _malloc(4);
    }

  var _emscripten_preinvoke=true;

  function ___gxx_personality_v0() {
    }

  function _pthread_cond_wait() {
      return 0;
    }

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = ___cxa_caught_exceptions.pop();
      throw ptr;
    }

  function _fmod(x, y) {
      return x % y;
    }

  function ___cxa_guard_release() {}

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  function _uselocale(locale) {
      return 0;
    }

  
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _vsnprintf(s, n, format, va_arg) {
      return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
    }

  
  
  
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
                if (next === 0) return i > 0 ? fields : fields-1; // we failed to read the full length of this field
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
  
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
  
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
  
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
  
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
  
            // write out null-terminating character
            HEAP8[((argPtr++)|0)]=0;
            formatIndex += match[0].length;
            
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
  
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16);
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text);
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text);
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j];
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      function get() { return HEAP8[(((s)+(index++))|0)]; };
      function unget() { index--; };
      return __scanString(format, get, unget, varargs);
    }function _vsscanf(s, format, va_arg) {
      return _sscanf(s, format, HEAP32[((va_arg)>>2)]);
    }



  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }

  function ___errno_location() {
      return ___errno_state;
    }

   
  Module["_memset"] = _memset;

   
  Module["_strcat"] = _strcat;

  var _BItoD=true;

  function __Z21set_thal_default_argsP9thal_args() {
  Module['printErr']('missing function: _Z21set_thal_default_argsP9thal_args'); abort(-1);
  }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }



  function _seqtm() {
  Module['printErr']('missing function: seqtm'); abort(-1);
  }


  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }function _isdigit_l(chr) {
      return _isdigit(chr); // no locale support yet
    }

  var _fabs=Math_abs;


  var _getc=_fgetc;

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }var _copysignl=_copysign;

  var _abs=Math_abs;

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        
        // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
        // Module['forcedAspectRatio'] = 4 / 3;
        
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'] ||
                                    canvas['msRequestPointerLock'] ||
                                    function(){};
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 document['msExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        return Math.max(-1, Math.min(1, event.type === 'DOMMouseScroll' ? event.detail : -event.wheelDelta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};

  function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  var _emscripten_get_longjmp_result=true;

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _freelocale(locale) {
      _free(locale);
    }

  function ___cxa_allocate_exception(size) {
      var ptr = _malloc(size + ___cxa_exception_header_size);
      return ptr + ___cxa_exception_header_size;
    }

  var _fmodl=_fmod;

  var _ceilf=Math_ceil;

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  
  function _asprintf(s, format, varargs) {
      return _sprintf(-s, format, varargs);
    }function _vasprintf(s, format, va_arg) {
      return _asprintf(s, format, HEAP32[((va_arg)>>2)]);
    }

  var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC); 
  Module["_llvm_ctlz_i32"] = _llvm_ctlz_i32;

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }


  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function __Z4thalPKhS0_PK9thal_argsP12thal_results() {
  Module['printErr']('missing function: _Z4thalPKhS0_PK9thal_argsP12thal_results'); abort(-1);
  }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[(variable)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[(variable)]=1;
        return 1;
      }
      return 0;
    }

  function _dpal_set_ambiguity_code_matrix() {
  Module['printErr']('missing function: dpal_set_ambiguity_code_matrix'); abort(-1);
  }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      ___cxa_caught_exceptions.push(___cxa_last_thrown_exception);
      return ptr;
    }


  function __ZNSt9exceptionD2Ev() {}

  function _long_seq_tm() {
  Module['printErr']('missing function: long_seq_tm'); abort(-1);
  }


   
  Module["_strcpy"] = _strcpy;

  function _dpal() {
  Module['printErr']('missing function: dpal'); abort(-1);
  }

  function __INFINITY() {
  Module['printErr']('missing function: _INFINITY'); abort(-1);
  }

  var __ZTISt9exception=allocate([allocate([1,0,0,0,0,0,0], "i8", ALLOC_STATIC)+8, 0], "i32", ALLOC_STATIC);

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);



___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

var Math_min = Math.min;
function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiid"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var __INFINITY=env.__INFINITY|0;
  var __ZTISt9exception=env.__ZTISt9exception|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var nullFunc_viiiiid=env.nullFunc_viiiiid;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiid=env.nullFunc_viiiiiid;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var invoke_viiiiid=env.invoke_viiiiid;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiid=env.invoke_viiiiiid;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_diii=env.invoke_diii;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _vsscanf=env._vsscanf;
  var __ZSt9terminatev=env.__ZSt9terminatev;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var __reallyNegative=env.__reallyNegative;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _longjmp=env._longjmp;
  var ___ctype_toupper_loc=env.___ctype_toupper_loc;
  var __addDays=env.__addDays;
  var _sbrk=env._sbrk;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _sysconf=env._sysconf;
  var _end_oligodg=env._end_oligodg;
  var _fileno=env._fileno;
  var _fread=env._fread;
  var _dpal=env._dpal;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var __ZNSt9exceptionD2Ev=env.__ZNSt9exceptionD2Ev;
  var ___cxa_does_inherit=env.___cxa_does_inherit;
  var _strtoll_l=env._strtoll_l;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var _catclose=env._catclose;
  var ___cxa_call_unexpected=env.___cxa_call_unexpected;
  var __Z21set_thal_default_argsP9thal_args=env.__Z21set_thal_default_argsP9thal_args;
  var _send=env._send;
  var ___cxa_is_number_type=env.___cxa_is_number_type;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _isxdigit_l=env._isxdigit_l;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _strerror_r=env._strerror_r;
  var ___setErrNo=env.___setErrNo;
  var _newlocale=env._newlocale;
  var _isdigit_l=env._isdigit_l;
  var ___resumeException=env.___resumeException;
  var _freelocale=env._freelocale;
  var _dpal_set_ambiguity_code_matrix=env._dpal_set_ambiguity_code_matrix;
  var _putchar=env._putchar;
  var _printf=env._printf;
  var _sprintf=env._sprintf;
  var _vasprintf=env._vasprintf;
  var _vsnprintf=env._vsnprintf;
  var _strtoull_l=env._strtoull_l;
  var _read=env._read;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _catopen=env._catopen;
  var _exit=env._exit;
  var ___cxa_guard_abort=env.___cxa_guard_abort;
  var ___ctype_b_loc=env.___ctype_b_loc;
  var _fmod=env._fmod;
  var __Z4thalPKhS0_PK9thal_argsP12thal_results=env.__Z4thalPKhS0_PK9thal_argsP12thal_results;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _ceilf=env._ceilf;
  var _strtoll=env._strtoll;
  var _pwrite=env._pwrite;
  var _uselocale=env._uselocale;
  var _snprintf=env._snprintf;
  var __scanString=env.__scanString;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _strtoull=env._strtoull;
  var _strftime=env._strftime;
  var _isxdigit=env._isxdigit;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var _recv=env._recv;
  var _fgetc=env._fgetc;
  var __parseInt64=env.__parseInt64;
  var __getFloat=env.__getFloat;
  var _seqtm=env._seqtm;
  var _abort=env._abort;
  var _set_dpal_args=env._set_dpal_args;
  var _abs=env._abs;
  var _isspace=env._isspace;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _ungetc=env._ungetc;
  var _fflush=env._fflush;
  var _strftime_l=env._strftime_l;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var _sscanf=env._sscanf;
  var _catgets=env._catgets;
  var _asprintf=env._asprintf;
  var __exit=env.__exit;
  var __arraySum=env.__arraySum;
  var ___ctype_tolower_loc=env.___ctype_tolower_loc;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var ___errno_location=env.___errno_location;
  var _copysign=env._copysign;
  var _fputc=env._fputc;
  var ___cxa_throw=env.___cxa_throw;
  var _isdigit=env._isdigit;
  var _strerror=env._strerror;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var __formatString=env.__formatString;
  var _atexit=env._atexit;
  var _long_seq_tm=env._long_seq_tm;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 7)&-8;
  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1|0] = HEAP8[ptr+1|0];
  HEAP8[tempDoublePtr+2|0] = HEAP8[ptr+2|0];
  HEAP8[tempDoublePtr+3|0] = HEAP8[ptr+3|0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1|0] = HEAP8[ptr+1|0];
  HEAP8[tempDoublePtr+2|0] = HEAP8[ptr+2|0];
  HEAP8[tempDoublePtr+3|0] = HEAP8[ptr+3|0];
  HEAP8[tempDoublePtr+4|0] = HEAP8[ptr+4|0];
  HEAP8[tempDoublePtr+5|0] = HEAP8[ptr+5|0];
  HEAP8[tempDoublePtr+6|0] = HEAP8[ptr+6|0];
  HEAP8[tempDoublePtr+7|0] = HEAP8[ptr+7|0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}

function setTempRet1(value) {
  value = value|0;
  tempRet1 = value;
}

function setTempRet2(value) {
  value = value|0;
  tempRet2 = value;
}

function setTempRet3(value) {
  value = value|0;
  tempRet3 = value;
}

function setTempRet4(value) {
  value = value|0;
  tempRet4 = value;
}

function setTempRet5(value) {
  value = value|0;
  tempRet5 = value;
}

function setTempRet6(value) {
  value = value|0;
  tempRet6 = value;
}

function setTempRet7(value) {
  value = value|0;
  tempRet7 = value;
}

function setTempRet8(value) {
  value = value|0;
  tempRet8 = value;
}

function setTempRet9(value) {
  value = value|0;
  tempRet9 = value;
}

function _p3_create_global_settings() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = (_malloc(2664)|0);
 $r = $1;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $r;
  __ZL28pr_set_default_global_args_2P18p3_global_settings($3);
  $4 = $r;
  $0 = $4;
 } else {
  $0 = 0;
 }
 $5 = $0;
 STACKTOP = sp;return ($5|0);
}
function __ZL28pr_set_default_global_args_2P18p3_global_settings($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $a;
 $1 = $0;
 __ZL28pr_set_default_global_args_1P18p3_global_settings($1);
 $2 = $0;
 $3 = (($2) + 752|0);
 HEAP32[$3>>2] = 1;
 $4 = $0;
 $5 = (($4) + 756|0);
 HEAP32[$5>>2] = 1;
 $6 = $0;
 $7 = (($6) + 2504|0);
 HEAP32[$7>>2] = 1;
 $8 = $0;
 $9 = (($8) + 2508|0);
 HEAP32[$9>>2] = 0;
 $10 = $0;
 $11 = (($10) + 48|0);
 $12 = (($11) + 224|0);
 HEAPF64[$12>>3] = 1.5;
 $13 = $0;
 $14 = (($13) + 48|0);
 $15 = (($14) + 232|0);
 HEAPF64[$15>>3] = 0.599999999999999977796;
 $16 = $0;
 $17 = (($16) + 36|0);
 HEAP32[$17>>2] = 0;
 STACKTOP = sp;return;
}
function __ZL28pr_set_default_global_args_1P18p3_global_settings($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $a;
 $1 = $0;
 _memset(($1|0),0,2664)|0;
 $2 = $0;
 $3 = (($2) + 48|0);
 $4 = (($3) + 252|0);
 HEAP32[$4>>2] = 20;
 $5 = $0;
 $6 = (($5) + 48|0);
 $7 = (($6) + 256|0);
 HEAP32[$7>>2] = 18;
 $8 = $0;
 $9 = (($8) + 48|0);
 $10 = (($9) + 260|0);
 HEAP32[$10>>2] = 27;
 $11 = $0;
 $12 = (($11) + 48|0);
 $13 = (($12) + 168|0);
 HEAPF64[$13>>3] = 60.0;
 $14 = $0;
 $15 = (($14) + 48|0);
 $16 = (($15) + 176|0);
 HEAPF64[$16>>3] = 57.0;
 $17 = $0;
 $18 = (($17) + 48|0);
 $19 = (($18) + 184|0);
 HEAPF64[$19>>3] = 63.0;
 $20 = $0;
 $21 = (($20) + 48|0);
 $22 = (($21) + 208|0);
 HEAPF64[$22>>3] = 20.0;
 $23 = $0;
 $24 = (($23) + 48|0);
 $25 = (($24) + 192|0);
 HEAPF64[$25>>3] = -2147483648.0;
 $26 = $0;
 $27 = (($26) + 48|0);
 $28 = (($27) + 200|0);
 HEAPF64[$28>>3] = 80.0;
 $29 = $0;
 $30 = (($29) + 48|0);
 $31 = (($30) + 216|0);
 HEAPF64[$31>>3] = 50.0;
 $32 = $0;
 $33 = (($32) + 48|0);
 $34 = (($33) + 224|0);
 HEAPF64[$34>>3] = 0.0;
 $35 = $0;
 $36 = (($35) + 48|0);
 $37 = (($36) + 232|0);
 HEAPF64[$37>>3] = 0.0;
 $38 = $0;
 $39 = (($38) + 48|0);
 $40 = (($39) + 240|0);
 HEAPF64[$40>>3] = 50.0;
 $41 = $0;
 $42 = (($41) + 48|0);
 $43 = (($42) + 248|0);
 HEAP32[$43>>2] = 0;
 $44 = $0;
 $45 = (($44) + 48|0);
 $46 = (($45) + 280|0);
 HEAPF64[$46>>3] = 8.0;
 $47 = $0;
 $48 = (($47) + 48|0);
 $49 = (($48) + 288|0);
 HEAPF64[$49>>3] = 3.0;
 $50 = $0;
 $51 = (($50) + 48|0);
 $52 = (($51) + 296|0);
 HEAPF64[$52>>3] = 47.0;
 $53 = $0;
 $54 = (($53) + 48|0);
 $55 = (($54) + 304|0);
 HEAPF64[$55>>3] = 47.0;
 $56 = $0;
 $57 = (($56) + 48|0);
 $58 = (($57) + 312|0);
 HEAPF64[$58>>3] = 47.0;
 $59 = $0;
 $60 = (($59) + 48|0);
 $61 = (($60) + 264|0);
 HEAP32[$61>>2] = 5;
 $62 = $0;
 $63 = (($62) + 48|0);
 $64 = (($63) + 320|0);
 HEAPF64[$64>>3] = 12.0;
 $65 = $0;
 $66 = (($65) + 48|0);
 $67 = (($66) + 272|0);
 HEAP32[$67>>2] = 0;
 $68 = $0;
 $69 = (($68) + 48|0);
 $70 = (($69) + 268|0);
 HEAP32[$70>>2] = 0;
 $71 = $0;
 $72 = (($71) + 48|0);
 $73 = (($72) + 328|0);
 HEAPF64[$73>>3] = -100.0;
 $74 = $0;
 $75 = (($74) + 48|0);
 $76 = (($75) + 336|0);
 HEAPF64[$76>>3] = -100.0;
 $77 = $0;
 $78 = (($77) + 772|0);
 HEAP32[$78>>2] = 0;
 $79 = $0;
 $80 = (($79) + 768|0);
 HEAP32[$80>>2] = 5;
 $81 = $0;
 $82 = (($81) + 48|0);
 $83 = (($82) + 8|0);
 HEAPF64[$83>>3] = 0.0;
 $84 = $0;
 $85 = (($84) + 48|0);
 $86 = (($85) + 8|0);
 $87 = (($86) + 8|0);
 HEAPF64[$87>>3] = 0.0;
 $88 = $0;
 $89 = (($88) + 48|0);
 $90 = (($89) + 8|0);
 $91 = (($90) + 16|0);
 HEAPF64[$91>>3] = 0.0;
 $92 = $0;
 $93 = (($92) + 48|0);
 $94 = (($93) + 8|0);
 $95 = (($94) + 24|0);
 HEAPF64[$95>>3] = 0.0;
 $96 = $0;
 $97 = (($96) + 48|0);
 $98 = (($97) + 8|0);
 $99 = (($98) + 32|0);
 HEAPF64[$99>>3] = 0.0;
 $100 = $0;
 $101 = (($100) + 48|0);
 $102 = (($101) + 8|0);
 $103 = (($102) + 40|0);
 HEAPF64[$103>>3] = 0.0;
 $104 = $0;
 $105 = (($104) + 48|0);
 $106 = (($105) + 8|0);
 $107 = (($106) + 48|0);
 HEAPF64[$107>>3] = 0.0;
 $108 = $0;
 $109 = (($108) + 48|0);
 $110 = (($109) + 8|0);
 $111 = (($110) + 56|0);
 HEAPF64[$111>>3] = 0.0;
 $112 = $0;
 $113 = (($112) + 48|0);
 $114 = (($113) + 8|0);
 $115 = (($114) + 64|0);
 HEAPF64[$115>>3] = 0.0;
 $116 = $0;
 $117 = (($116) + 48|0);
 $118 = (($117) + 8|0);
 $119 = (($118) + 72|0);
 HEAPF64[$119>>3] = 1.0;
 $120 = $0;
 $121 = (($120) + 48|0);
 $122 = (($121) + 8|0);
 $123 = (($122) + 80|0);
 HEAPF64[$123>>3] = 1.0;
 $124 = $0;
 $125 = (($124) + 48|0);
 $126 = (($125) + 8|0);
 $127 = (($126) + 88|0);
 HEAPF64[$127>>3] = 0.0;
 $128 = $0;
 $129 = (($128) + 48|0);
 $130 = (($129) + 8|0);
 $131 = (($130) + 96|0);
 HEAPF64[$131>>3] = 1.0;
 $132 = $0;
 $133 = (($132) + 48|0);
 $134 = (($133) + 8|0);
 $135 = (($134) + 104|0);
 HEAPF64[$135>>3] = 0.0;
 $136 = $0;
 $137 = (($136) + 48|0);
 $138 = (($137) + 8|0);
 $139 = (($138) + 112|0);
 HEAPF64[$139>>3] = 0.0;
 $140 = $0;
 $141 = (($140) + 48|0);
 $142 = (($141) + 8|0);
 $143 = (($142) + 120|0);
 HEAPF64[$143>>3] = 5.0;
 $144 = $0;
 $145 = (($144) + 48|0);
 $146 = (($145) + 8|0);
 $147 = (($146) + 128|0);
 HEAPF64[$147>>3] = 1.0;
 $148 = $0;
 $149 = (($148) + 48|0);
 $150 = (($149) + 8|0);
 $151 = (($150) + 136|0);
 HEAPF64[$151>>3] = 1.0;
 $152 = $0;
 $153 = (($152) + 48|0);
 $154 = (($153) + 8|0);
 $155 = (($154) + 144|0);
 HEAPF64[$155>>3] = 0.0;
 $156 = $0;
 $157 = (($156) + 48|0);
 $158 = (($157) + 8|0);
 $159 = (($158) + 152|0);
 HEAPF64[$159>>3] = 0.0;
 $160 = $0;
 $161 = (($160) + 48|0);
 $162 = (($161) + 344|0);
 HEAP32[$162>>2] = 0;
 $163 = $0;
 $164 = (($163) + 48|0);
 $165 = (($164) + 348|0);
 HEAP32[$165>>2] = 0;
 $166 = $0;
 $167 = (($166) + 2512|0);
 HEAPF64[$167>>3] = 100.0;
 $168 = $0;
 $169 = (($168) + 752|0);
 HEAP32[$169>>2] = 0;
 $170 = $0;
 $171 = (($170) + 756|0);
 HEAP32[$171>>2] = 0;
 $172 = $0;
 $173 = (($172) + 2472|0);
 HEAPF64[$173>>3] = 8.0;
 $174 = $0;
 $175 = (($174) + 2488|0);
 HEAPF64[$175>>3] = 3.0;
 $176 = $0;
 $177 = (($176) + 2480|0);
 HEAPF64[$177>>3] = 47.0;
 $178 = $0;
 $179 = (($178) + 2496|0);
 HEAPF64[$179>>3] = 47.0;
 $180 = $0;
 $181 = (($180) + 2504|0);
 HEAP32[$181>>2] = 0;
 $182 = $0;
 $183 = (($182) + 2508|0);
 HEAP32[$183>>2] = 0;
 $184 = $0;
 $185 = (($184) + 24|0);
 HEAP32[$185>>2] = 0;
 $186 = $0;
 HEAP32[$186>>2] = 5;
 $187 = $0;
 $188 = (($187) + 4|0);
 HEAP32[$188>>2] = 1;
 $189 = $0;
 $190 = (($189) + 8|0);
 HEAP32[$190>>2] = 1;
 $191 = $0;
 $192 = (($191) + 12|0);
 HEAP32[$192>>2] = 0;
 $193 = $0;
 $194 = (($193) + 20|0);
 HEAP32[$194>>2] = 0;
 $195 = $0;
 $196 = (($195) + 28|0);
 HEAP32[$196>>2] = 5;
 $197 = $0;
 $198 = (($197) + 816|0);
 HEAP32[$198>>2] = 100;
 $199 = $0;
 $200 = (($199) + 1616|0);
 HEAP32[$200>>2] = 300;
 $201 = $0;
 $202 = (($201) + 2416|0);
 HEAP32[$202>>2] = 1;
 $203 = $0;
 $204 = (($203) + 2464|0);
 HEAPF64[$204>>3] = 24.0;
 $205 = $0;
 $206 = (($205) + 40|0);
 HEAP32[$206>>2] = 0;
 $207 = $0;
 $208 = (($207) + 44|0);
 HEAP32[$208>>2] = 100;
 $209 = $0;
 $210 = (($209) + 800|0);
 HEAPF64[$210>>3] = 0.0;
 $211 = $0;
 $212 = (($211) + 808|0);
 HEAPF64[$212>>3] = -1.0;
 $213 = $0;
 $214 = (($213) + 760|0);
 HEAPF64[$214>>3] = 100.0;
 $215 = $0;
 $216 = (($215) + 776|0);
 HEAP32[$216>>2] = 0;
 $217 = $0;
 $218 = (($217) + 2424|0);
 HEAPF64[$218>>3] = 1.0E+6;
 $219 = $0;
 $220 = (($219) + 2432|0);
 HEAPF64[$220>>3] = -1.0E+6;
 $221 = $0;
 $222 = (($221) + 2440|0);
 HEAPF64[$222>>3] = 2.22507385850720138309E-308;
 $223 = $0;
 $224 = (($223) + 2420|0);
 HEAP32[$224>>2] = -2147483648;
 $225 = $0;
 $226 = (($225) + 2448|0);
 HEAPF64[$226>>3] = -100.0;
 $227 = $0;
 $228 = (($227) + 2456|0);
 HEAPF64[$228>>3] = -100.0;
 $229 = $0;
 $230 = (($229) + 400|0);
 $231 = (($230) + 252|0);
 HEAP32[$231>>2] = 20;
 $232 = $0;
 $233 = (($232) + 400|0);
 $234 = (($233) + 256|0);
 HEAP32[$234>>2] = 18;
 $235 = $0;
 $236 = (($235) + 400|0);
 $237 = (($236) + 260|0);
 HEAP32[$237>>2] = 27;
 $238 = $0;
 $239 = (($238) + 400|0);
 $240 = (($239) + 168|0);
 HEAPF64[$240>>3] = 60.0;
 $241 = $0;
 $242 = (($241) + 400|0);
 $243 = (($242) + 176|0);
 HEAPF64[$243>>3] = 57.0;
 $244 = $0;
 $245 = (($244) + 400|0);
 $246 = (($245) + 184|0);
 HEAPF64[$246>>3] = 63.0;
 $247 = $0;
 $248 = (($247) + 400|0);
 $249 = (($248) + 208|0);
 HEAPF64[$249>>3] = 20.0;
 $250 = $0;
 $251 = (($250) + 400|0);
 $252 = (($251) + 200|0);
 HEAPF64[$252>>3] = 80.0;
 $253 = $0;
 $254 = (($253) + 400|0);
 $255 = (($254) + 192|0);
 HEAPF64[$255>>3] = -2147483648.0;
 $256 = $0;
 $257 = (($256) + 400|0);
 $258 = (($257) + 264|0);
 HEAP32[$258>>2] = 5;
 $259 = $0;
 $260 = (($259) + 400|0);
 $261 = (($260) + 216|0);
 HEAPF64[$261>>3] = 50.0;
 $262 = $0;
 $263 = (($262) + 400|0);
 $264 = (($263) + 224|0);
 HEAPF64[$264>>3] = 0.0;
 $265 = $0;
 $266 = (($265) + 400|0);
 $267 = (($266) + 232|0);
 HEAPF64[$267>>3] = 0.0;
 $268 = $0;
 $269 = (($268) + 400|0);
 $270 = (($269) + 240|0);
 HEAPF64[$270>>3] = 50.0;
 $271 = $0;
 $272 = (($271) + 400|0);
 $273 = (($272) + 248|0);
 HEAP32[$273>>2] = 0;
 $274 = $0;
 $275 = (($274) + 400|0);
 $276 = (($275) + 280|0);
 HEAPF64[$276>>3] = 12.0;
 $277 = $0;
 $278 = (($277) + 400|0);
 $279 = (($278) + 288|0);
 HEAPF64[$279>>3] = 12.0;
 $280 = $0;
 $281 = (($280) + 400|0);
 $282 = (($281) + 296|0);
 HEAPF64[$282>>3] = 47.0;
 $283 = $0;
 $284 = (($283) + 400|0);
 $285 = (($284) + 304|0);
 HEAPF64[$285>>3] = 47.0;
 $286 = $0;
 $287 = (($286) + 400|0);
 $288 = (($287) + 312|0);
 HEAPF64[$288>>3] = 47.0;
 $289 = $0;
 $290 = (($289) + 400|0);
 $291 = (($290) + 320|0);
 HEAPF64[$291>>3] = 12.0;
 $292 = $0;
 $293 = (($292) + 400|0);
 $294 = (($293) + 272|0);
 HEAP32[$294>>2] = 0;
 $295 = $0;
 $296 = (($295) + 400|0);
 $297 = (($296) + 268|0);
 HEAP32[$297>>2] = 0;
 $298 = $0;
 $299 = (($298) + 400|0);
 $300 = (($299) + 328|0);
 HEAPF64[$300>>3] = -100.0;
 $301 = $0;
 $302 = (($301) + 400|0);
 $303 = (($302) + 336|0);
 HEAPF64[$303>>3] = -100.0;
 $304 = $0;
 $305 = (($304) + 400|0);
 $306 = (($305) + 8|0);
 $307 = (($306) + 128|0);
 HEAPF64[$307>>3] = 1.0;
 $308 = $0;
 $309 = (($308) + 400|0);
 $310 = (($309) + 8|0);
 $311 = (($310) + 136|0);
 HEAPF64[$311>>3] = 1.0;
 $312 = $0;
 $313 = (($312) + 400|0);
 $314 = (($313) + 8|0);
 $315 = (($314) + 72|0);
 HEAPF64[$315>>3] = 1.0;
 $316 = $0;
 $317 = (($316) + 400|0);
 $318 = (($317) + 8|0);
 $319 = (($318) + 80|0);
 HEAPF64[$319>>3] = 1.0;
 $320 = $0;
 $321 = (($320) + 400|0);
 $322 = (($321) + 8|0);
 $323 = (($322) + 48|0);
 HEAPF64[$323>>3] = 0.0;
 $324 = $0;
 $325 = (($324) + 400|0);
 $326 = (($325) + 8|0);
 $327 = (($326) + 56|0);
 HEAPF64[$327>>3] = 0.0;
 $328 = $0;
 $329 = (($328) + 400|0);
 $330 = (($329) + 8|0);
 HEAPF64[$330>>3] = 0.0;
 $331 = $0;
 $332 = (($331) + 400|0);
 $333 = (($332) + 8|0);
 $334 = (($333) + 16|0);
 HEAPF64[$334>>3] = 0.0;
 $335 = $0;
 $336 = (($335) + 400|0);
 $337 = (($336) + 8|0);
 $338 = (($337) + 8|0);
 HEAPF64[$338>>3] = 0.0;
 $339 = $0;
 $340 = (($339) + 400|0);
 $341 = (($340) + 8|0);
 $342 = (($341) + 24|0);
 HEAPF64[$342>>3] = 0.0;
 $343 = $0;
 $344 = (($343) + 400|0);
 $345 = (($344) + 8|0);
 $346 = (($345) + 64|0);
 HEAPF64[$346>>3] = 0.0;
 $347 = $0;
 $348 = (($347) + 400|0);
 $349 = (($348) + 8|0);
 $350 = (($349) + 88|0);
 HEAPF64[$350>>3] = 0.0;
 $351 = $0;
 $352 = (($351) + 400|0);
 $353 = (($352) + 8|0);
 $354 = (($353) + 104|0);
 HEAPF64[$354>>3] = 0.0;
 $355 = $0;
 $356 = (($355) + 400|0);
 $357 = (($356) + 8|0);
 $358 = (($357) + 112|0);
 HEAPF64[$358>>3] = 0.0;
 $359 = $0;
 $360 = (($359) + 400|0);
 $361 = (($360) + 8|0);
 $362 = (($361) + 32|0);
 HEAPF64[$362>>3] = 0.0;
 $363 = $0;
 $364 = (($363) + 400|0);
 $365 = (($364) + 344|0);
 HEAP32[$365>>2] = 0;
 $366 = $0;
 $367 = (($366) + 400|0);
 $368 = (($367) + 348|0);
 HEAP32[$368>>2] = 0;
 $369 = $0;
 $370 = (($369) + 2520|0);
 HEAPF64[$370>>3] = 1.0;
 $371 = $0;
 $372 = (($371) + 2520|0);
 $373 = (($372) + 8|0);
 HEAPF64[$373>>3] = 0.0;
 $374 = $0;
 $375 = (($374) + 2520|0);
 $376 = (($375) + 16|0);
 HEAPF64[$376>>3] = 0.0;
 $377 = $0;
 $378 = (($377) + 2520|0);
 $379 = (($378) + 24|0);
 HEAPF64[$379>>3] = 0.0;
 $380 = $0;
 $381 = (($380) + 2520|0);
 $382 = (($381) + 40|0);
 HEAPF64[$382>>3] = 0.0;
 $383 = $0;
 $384 = (($383) + 2520|0);
 $385 = (($384) + 32|0);
 HEAPF64[$385>>3] = 0.0;
 $386 = $0;
 $387 = (($386) + 2520|0);
 $388 = (($387) + 48|0);
 HEAPF64[$388>>3] = 0.0;
 $389 = $0;
 $390 = (($389) + 2520|0);
 $391 = (($390) + 56|0);
 HEAPF64[$391>>3] = 5.0;
 $392 = $0;
 $393 = (($392) + 2520|0);
 $394 = (($393) + 96|0);
 HEAPF64[$394>>3] = 0.0;
 $395 = $0;
 $396 = (($395) + 2520|0);
 $397 = (($396) + 64|0);
 HEAPF64[$397>>3] = 0.0;
 $398 = $0;
 $399 = (($398) + 2520|0);
 $400 = (($399) + 72|0);
 HEAPF64[$400>>3] = 0.0;
 $401 = $0;
 $402 = (($401) + 2520|0);
 $403 = (($402) + 80|0);
 HEAPF64[$403>>3] = 0.0;
 $404 = $0;
 $405 = (($404) + 2520|0);
 $406 = (($405) + 88|0);
 HEAPF64[$406>>3] = 0.0;
 $407 = $0;
 $408 = (($407) + 36|0);
 HEAP32[$408>>2] = 1;
 $409 = $0;
 $410 = (($409) + 2640|0);
 HEAP32[$410>>2] = -1;
 $411 = $0;
 $412 = (($411) + 2644|0);
 HEAP32[$412>>2] = -1;
 $413 = $0;
 $414 = (($413) + 780|0);
 HEAP32[$414>>2] = 50;
 $415 = $0;
 $416 = (($415) + 780|0);
 $417 = (($416) + 4|0);
 HEAP32[$417>>2] = 500;
 $418 = $0;
 $419 = (($418) + 780|0);
 $420 = (($419) + 8|0);
 HEAP32[$420>>2] = 250;
 $421 = $0;
 $422 = (($421) + 780|0);
 $423 = (($422) + 12|0);
 HEAP32[$423>>2] = 20;
 $424 = $0;
 $425 = (($424) + 2648|0);
 HEAP32[$425>>2] = 7;
 $426 = $0;
 $427 = (($426) + 2652|0);
 HEAP32[$427>>2] = 4;
 STACKTOP = sp;return;
}
function __Z22create_dpal_arg_holderv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $h = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = (__ZL14pr_safe_mallocj(20)|0);
 $h = $0;
 $1 = (__ZL14pr_safe_mallocj(262192)|0);
 $2 = $h;
 HEAP32[$2>>2] = $1;
 $3 = $h;
 $4 = HEAP32[$3>>2]|0;
 _set_dpal_args(($4|0));
 $5 = $h;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = (__ZL14pr_safe_mallocj(262192)|0);
 $9 = $h;
 $10 = (($9) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = $h;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 _set_dpal_args(($13|0));
 $14 = $h;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 12|0);
 HEAP32[$17>>2] = 1;
 $18 = (__ZL14pr_safe_mallocj(262192)|0);
 $19 = $h;
 $20 = (($19) + 8|0);
 HEAP32[$20>>2] = $18;
 $21 = $h;
 $22 = (($21) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 _set_dpal_args(($23|0));
 $24 = $h;
 $25 = (($24) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 12|0);
 HEAP32[$27>>2] = 3;
 $28 = (__ZL14pr_safe_mallocj(262192)|0);
 $29 = $h;
 $30 = (($29) + 12|0);
 HEAP32[$30>>2] = $28;
 $31 = $h;
 $32 = (($31) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $h;
 $35 = HEAP32[$34>>2]|0;
 _memcpy(($33|0),($35|0),262192)|0;
 $36 = $h;
 $37 = (($36) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (_dpal_set_ambiguity_code_matrix(($38|0))|0);
 $40 = ($39|0)!=(0);
 if (!($40)) {
  $41 = HEAP32[_stderr>>2]|0;
  $42 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $42;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 56;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 903;
  $vararg_ptr3 = (($vararg_buffer) + 12|0);
  HEAP32[$vararg_ptr3>>2] = 72;
  (_fprintf(($41|0),(16|0),($vararg_buffer|0))|0);
  _abort();
  // unreachable;
 }
 $43 = (__ZL14pr_safe_mallocj(262192)|0);
 $44 = $h;
 $45 = (($44) + 16|0);
 HEAP32[$45>>2] = $43;
 $46 = $h;
 $47 = (($46) + 16|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $h;
 $50 = (($49) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 _memcpy(($48|0),($51|0),262192)|0;
 $52 = $h;
 $53 = (($52) + 16|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (_dpal_set_ambiguity_code_matrix(($54|0))|0);
 $56 = ($55|0)!=(0);
 if ($56) {
  $59 = $h;
  STACKTOP = sp;return ($59|0);
 } else {
  $57 = HEAP32[_stderr>>2]|0;
  $58 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $58;
  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
  HEAP32[$vararg_ptr7>>2] = 56;
  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
  HEAP32[$vararg_ptr8>>2] = 907;
  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
  HEAP32[$vararg_ptr9>>2] = 120;
  (_fprintf(($57|0),(16|0),($vararg_buffer4|0))|0);
  _abort();
  // unreachable;
 }
 return 0|0;
}
function __ZL14pr_safe_mallocj($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $x;
 $1 = $0;
 $2 = (_malloc($1)|0);
 $r = $2;
 $3 = $r;
 $4 = (0|0)==($3|0);
 if ($4) {
  _longjmp((264|0),1);
  // unreachable;
 } else {
  $5 = $r;
  STACKTOP = sp;return ($5|0);
 }
 return 0|0;
}
function __Z22create_thal_arg_holderPK28args_for_one_oligo_or_primer($po_args) {
 $po_args = $po_args|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, $h = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $po_args;
 $1 = (__ZL14pr_safe_mallocj(16)|0);
 $h = $1;
 $2 = (__ZL14pr_safe_mallocj(64)|0);
 $3 = $h;
 HEAP32[$3>>2] = $2;
 $4 = $h;
 $5 = HEAP32[$4>>2]|0;
 __Z21set_thal_default_argsP9thal_args(($5|0));
 $6 = $h;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 4|0);
 HEAP32[$8>>2] = 1;
 $9 = $0;
 $10 = (($9) + 216|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $h;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 16|0);
 HEAPF64[$14>>3] = $11;
 $15 = $0;
 $16 = (($15) + 224|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $h;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + 24|0);
 HEAPF64[$20>>3] = $17;
 $21 = $0;
 $22 = (($21) + 232|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $h;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 32|0);
 HEAPF64[$26>>3] = $23;
 $27 = $0;
 $28 = (($27) + 240|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $h;
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + 40|0);
 HEAPF64[$32>>3] = $29;
 $33 = (__ZL14pr_safe_mallocj(64)|0);
 $34 = $h;
 $35 = (($34) + 4|0);
 HEAP32[$35>>2] = $33;
 $36 = $h;
 $37 = (($36) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 __Z21set_thal_default_argsP9thal_args(($38|0));
 $39 = $h;
 $40 = (($39) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + 4|0);
 HEAP32[$42>>2] = 2;
 $43 = $0;
 $44 = (($43) + 216|0);
 $45 = +HEAPF64[$44>>3];
 $46 = $h;
 $47 = (($46) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($48) + 16|0);
 HEAPF64[$49>>3] = $45;
 $50 = $0;
 $51 = (($50) + 224|0);
 $52 = +HEAPF64[$51>>3];
 $53 = $h;
 $54 = (($53) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($55) + 24|0);
 HEAPF64[$56>>3] = $52;
 $57 = $0;
 $58 = (($57) + 232|0);
 $59 = +HEAPF64[$58>>3];
 $60 = $h;
 $61 = (($60) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($62) + 32|0);
 HEAPF64[$63>>3] = $59;
 $64 = $0;
 $65 = (($64) + 240|0);
 $66 = +HEAPF64[$65>>3];
 $67 = $h;
 $68 = (($67) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($69) + 40|0);
 HEAPF64[$70>>3] = $66;
 $71 = (__ZL14pr_safe_mallocj(64)|0);
 $72 = $h;
 $73 = (($72) + 8|0);
 HEAP32[$73>>2] = $71;
 $74 = $h;
 $75 = (($74) + 8|0);
 $76 = HEAP32[$75>>2]|0;
 __Z21set_thal_default_argsP9thal_args(($76|0));
 $77 = $h;
 $78 = (($77) + 8|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = (($79) + 4|0);
 HEAP32[$80>>2] = 3;
 $81 = $0;
 $82 = (($81) + 216|0);
 $83 = +HEAPF64[$82>>3];
 $84 = $h;
 $85 = (($84) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = (($86) + 16|0);
 HEAPF64[$87>>3] = $83;
 $88 = $0;
 $89 = (($88) + 224|0);
 $90 = +HEAPF64[$89>>3];
 $91 = $h;
 $92 = (($91) + 8|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = (($93) + 24|0);
 HEAPF64[$94>>3] = $90;
 $95 = $0;
 $96 = (($95) + 232|0);
 $97 = +HEAPF64[$96>>3];
 $98 = $h;
 $99 = (($98) + 8|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (($100) + 32|0);
 HEAPF64[$101>>3] = $97;
 $102 = $0;
 $103 = (($102) + 240|0);
 $104 = +HEAPF64[$103>>3];
 $105 = $h;
 $106 = (($105) + 8|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = (($107) + 40|0);
 HEAPF64[$108>>3] = $104;
 $109 = (__ZL14pr_safe_mallocj(64)|0);
 $110 = $h;
 $111 = (($110) + 12|0);
 HEAP32[$111>>2] = $109;
 $112 = $h;
 $113 = (($112) + 12|0);
 $114 = HEAP32[$113>>2]|0;
 __Z21set_thal_default_argsP9thal_args(($114|0));
 $115 = $h;
 $116 = (($115) + 12|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = (($117) + 4|0);
 HEAP32[$118>>2] = 4;
 $119 = $0;
 $120 = (($119) + 216|0);
 $121 = +HEAPF64[$120>>3];
 $122 = $h;
 $123 = (($122) + 12|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = (($124) + 16|0);
 HEAPF64[$125>>3] = $121;
 $126 = $0;
 $127 = (($126) + 224|0);
 $128 = +HEAPF64[$127>>3];
 $129 = $h;
 $130 = (($129) + 12|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = (($131) + 24|0);
 HEAPF64[$132>>3] = $128;
 $133 = $0;
 $134 = (($133) + 232|0);
 $135 = +HEAPF64[$134>>3];
 $136 = $h;
 $137 = (($136) + 12|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = (($138) + 32|0);
 HEAPF64[$139>>3] = $135;
 $140 = $0;
 $141 = (($140) + 240|0);
 $142 = +HEAPF64[$141>>3];
 $143 = $h;
 $144 = (($143) + 12|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = (($145) + 40|0);
 HEAPF64[$146>>3] = $142;
 $147 = $h;
 $148 = (($147) + 12|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = (($149) + 60|0);
 HEAP32[$150>>2] = 0;
 $151 = $h;
 STACKTOP = sp;return ($151|0);
}
function __Z23destroy_thal_arg_holderP15thal_arg_holder($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $h;
 $1 = $0;
 $2 = (0|0)!=($1|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 $5 = $0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 _free($7);
 $8 = $0;
 $9 = (($8) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 _free($10);
 $11 = $0;
 $12 = (($11) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 _free($13);
 $14 = $0;
 _free($14);
 STACKTOP = sp;return;
}
function _destroy_p3retval($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $state;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 __ZL21free_repeat_sim_scoreP8p3retval($3);
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 $6 = $0;
 $7 = (($6) + 232|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 $9 = $0;
 $10 = (($9) + 116|0);
 $11 = HEAP32[$10>>2]|0;
 _free($11);
 $12 = $0;
 $13 = (($12) + 348|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $0;
  $17 = (($16) + 348|0);
  $18 = (($17) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0|0);
  if ($20) {
   $21 = $0;
   $22 = (($21) + 348|0);
   $23 = (($22) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   _free($24);
  }
 }
 $25 = $0;
 $26 = (($25) + 428|0);
 _destroy_pr_append_str_data($26);
 $27 = $0;
 $28 = (($27) + 436|0);
 _destroy_pr_append_str_data($28);
 $29 = $0;
 $30 = (($29) + 444|0);
 _destroy_pr_append_str_data($30);
 $31 = $0;
 _free($31);
 STACKTOP = sp;return;
}
function __ZL21free_repeat_sim_scoreP8p3retval($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $state;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = $0;
  $3 = (($2) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($1|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + ($6<<7)|0);
  $10 = (($9) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0|0);
  if ($12) {
   $13 = $i;
   $14 = $0;
   $15 = HEAP32[$14>>2]|0;
   $16 = (($15) + ($13<<7)|0);
   $17 = (($16) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   _free($18);
   $19 = $i;
   $20 = $0;
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + ($19<<7)|0);
   $23 = (($22) + 8|0);
   HEAP32[$23>>2] = 0;
  }
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 $i = 0;
 while(1) {
  $26 = $i;
  $27 = $0;
  $28 = (($27) + 232|0);
  $29 = (($28) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($26|0)<($30|0);
  if (!($31)) {
   break;
  }
  $32 = $i;
  $33 = $0;
  $34 = (($33) + 232|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + ($32<<7)|0);
  $37 = (($36) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)!=(0|0);
  if ($39) {
   $40 = $i;
   $41 = $0;
   $42 = (($41) + 232|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + ($40<<7)|0);
   $45 = (($44) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   _free($46);
   $47 = $i;
   $48 = $0;
   $49 = (($48) + 232|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + ($47<<7)|0);
   $52 = (($51) + 8|0);
   HEAP32[$52>>2] = 0;
  }
  $53 = $i;
  $54 = (($53) + 1)|0;
  $i = $54;
 }
 $i = 0;
 while(1) {
  $55 = $i;
  $56 = $0;
  $57 = (($56) + 116|0);
  $58 = (($57) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($55|0)<($59|0);
  if (!($60)) {
   break;
  }
  $61 = $i;
  $62 = $0;
  $63 = (($62) + 116|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + ($61<<7)|0);
  $66 = (($65) + 8|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($67|0)!=(0|0);
  if ($68) {
   $69 = $i;
   $70 = $0;
   $71 = (($70) + 116|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($72) + ($69<<7)|0);
   $74 = (($73) + 8|0);
   $75 = HEAP32[$74>>2]|0;
   _free($75);
   $76 = $i;
   $77 = $0;
   $78 = (($77) + 116|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (($79) + ($76<<7)|0);
   $81 = (($80) + 8|0);
   HEAP32[$81>>2] = 0;
  }
  $82 = $i;
  $83 = (($82) + 1)|0;
  $i = $83;
 }
 STACKTOP = sp;return;
}
function _destroy_pr_append_str_data($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $str;
 $1 = $0;
 $2 = (0|0)==($1|0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  $3 = $0;
  $4 = (($3) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  _free($5);
  $6 = $0;
  $7 = (($6) + 4|0);
  HEAP32[$7>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _p3_get_rv_fwd($r) {
 $r = $r|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $r;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function _p3_get_rv_best_pairs($r) {
 $r = $r|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $r;
 $1 = $0;
 $2 = (($1) + 348|0);
 STACKTOP = sp;return ($2|0);
}
function _create_seq_arg() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = (_malloc(8912)|0);
 $r = $1;
 $2 = $r;
 $3 = (0|0)==($2|0);
 if ($3) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 } else {
  $4 = $r;
  _memset(($4|0),0,8912)|0;
  $5 = $r;
  $6 = (($5) + 8840|0);
  HEAP32[$6>>2] = -2000000;
  $7 = $r;
  $8 = (($7) + 8836|0);
  HEAP32[$8>>2] = -1;
  $9 = $r;
  $10 = (($9) + 8896|0);
  HEAP32[$10>>2] = -1000000;
  $11 = $r;
  $12 = (($11) + 8900|0);
  HEAP32[$12>>2] = -1000000;
  $13 = $r;
  $14 = (($13) + 8904|0);
  HEAP32[$14>>2] = -1000000;
  $15 = $r;
  $16 = (($15) + 8908|0);
  HEAP32[$16>>2] = -1000000;
  $17 = $r;
  $18 = (($17) + 8828|0);
  HEAP32[$18>>2] = 0;
  $19 = $r;
  $20 = (($19) + 8848|0);
  HEAP32[$20>>2] = 0;
  $21 = $r;
  $22 = (($21) + 8844|0);
  HEAP32[$22>>2] = 0;
  $23 = $r;
  $0 = $23;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 return 0|0;
}
function _choose_primers($pa,$sa) {
 $pa = $pa|0;
 $sa = $sa|0;
 var $$0 = 0, $$reg2mem118$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer123 = 0, $vararg_buffer129 = 0, $vararg_buffer131 = 0, $vararg_buffer133 = 0, $vararg_ptr120 = 0, $vararg_ptr121 = 0, $vararg_ptr122 = 0, $vararg_ptr126 = 0, $vararg_ptr127 = 0, $vararg_ptr128 = 0, _setjmpTable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer133 = sp + 48|0;
 $vararg_buffer131 = sp;
 $vararg_buffer129 = sp + 8|0;
 $vararg_buffer123 = sp + 16|0;
 $vararg_buffer = sp + 32|0;
 _setjmpTable = STACKTOP; STACKTOP=(STACKTOP+168)|0;HEAP32[_setjmpTable>>2]=0;
 __THREW__ = 0;
 $0 = (invoke_i(1)|0);
 $1 = __THREW__; __THREW__ = 0;
 if ((($1|0) != 0) & ((threwValue|0) != 0)) { $2 = _testSetjmp(HEAP32[$1>>2]|0, _setjmpTable)|0; if (($2|0) == 0) { _longjmp($1|0, threwValue|0); } tempRet0 = threwValue; } else { $2 = -1; };
 $3 = tempRet0;
 do {
  if ((($2|0) == 1)) {
   $$reg2mem118$0 = $3;
  } else {
   $4 = ($0|0)==(0|0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $5 = (0|0)!=($pa|0);
   if (!($5)) {
    $6 = HEAP32[_stderr>>2]|0;
    $7 = HEAP32[8>>2]|0;
    __THREW__ = 0;
    HEAP32[$vararg_buffer>>2] = $7;
    $vararg_ptr120 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr120>>2] = 56;
    $vararg_ptr121 = (($vararg_buffer) + 8|0);
    HEAP32[$vararg_ptr121>>2] = 1147;
    $vararg_ptr122 = (($vararg_buffer) + 12|0);
    HEAP32[$vararg_ptr122>>2] = 200;
    (invoke_iiii(23,($6|0),(16|0),($vararg_buffer|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    if ((($8|0) != 0) & ((threwValue|0) != 0)) { $9 = _testSetjmp(HEAP32[$8>>2]|0, _setjmpTable)|0; if (($9|0) == 0) { _longjmp($8|0, threwValue|0); } tempRet0 = threwValue; } else { $9 = -1; };
    $10 = tempRet0;
    if ((($9|0) == 1)) {
     $$reg2mem118$0 = $10;
     break;
    }
    __THREW__ = 0;
    invoke_v(1);
    $11 = __THREW__; __THREW__ = 0;
    if ((($11|0) != 0) & ((threwValue|0) != 0)) { $12 = _testSetjmp(HEAP32[$11>>2]|0, _setjmpTable)|0; if (($12|0) == 0) { _longjmp($11|0, threwValue|0); } tempRet0 = threwValue; } else { $12 = -1; };
    $13 = tempRet0;
    if ((($12|0) == 1)) {
     $$reg2mem118$0 = $13;
     break;
    }
    // unreachable;
   }
   $14 = (0|0)!=($sa|0);
   if (!($14)) {
    $15 = HEAP32[_stderr>>2]|0;
    $16 = HEAP32[8>>2]|0;
    __THREW__ = 0;
    HEAP32[$vararg_buffer123>>2] = $16;
    $vararg_ptr126 = (($vararg_buffer123) + 4|0);
    HEAP32[$vararg_ptr126>>2] = 56;
    $vararg_ptr127 = (($vararg_buffer123) + 8|0);
    HEAP32[$vararg_ptr127>>2] = 1148;
    $vararg_ptr128 = (($vararg_buffer123) + 12|0);
    HEAP32[$vararg_ptr128>>2] = 216;
    (invoke_iiii(23,($15|0),(16|0),($vararg_buffer123|0))|0);
    $17 = __THREW__; __THREW__ = 0;
    if ((($17|0) != 0) & ((threwValue|0) != 0)) { $18 = _testSetjmp(HEAP32[$17>>2]|0, _setjmpTable)|0; if (($18|0) == 0) { _longjmp($17|0, threwValue|0); } tempRet0 = threwValue; } else { $18 = -1; };
    $19 = tempRet0;
    if ((($18|0) == 1)) {
     $$reg2mem118$0 = $19;
     break;
    }
    __THREW__ = 0;
    invoke_v(1);
    $20 = __THREW__; __THREW__ = 0;
    if ((($20|0) != 0) & ((threwValue|0) != 0)) { $21 = _testSetjmp(HEAP32[$20>>2]|0, _setjmpTable)|0; if (($21|0) == 0) { _longjmp($20|0, threwValue|0); } tempRet0 = threwValue; } else { $21 = -1; };
    $22 = tempRet0;
    if ((($21|0) == 1)) {
     $$reg2mem118$0 = $22;
     break;
    }
    // unreachable;
   }
   $23 = (($pa) + 2656|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)!=(0);
   if ($25) {
    __THREW__ = 0;
    (invoke_iii(15,(232|0),($vararg_buffer129|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    if ((($26|0) != 0) & ((threwValue|0) != 0)) { $27 = _testSetjmp(HEAP32[$26>>2]|0, _setjmpTable)|0; if (($27|0) == 0) { _longjmp($26|0, threwValue|0); } tempRet0 = threwValue; } else { $27 = -1; };
    $28 = tempRet0;
    if ((($27|0) == 1)) {
     $$reg2mem118$0 = $28;
     break;
    }
    __THREW__ = 0;
    invoke_vii(39,($pa|0),($sa|0));
    $29 = __THREW__; __THREW__ = 0;
    if ((($29|0) != 0) & ((threwValue|0) != 0)) { $30 = _testSetjmp(HEAP32[$29>>2]|0, _setjmpTable)|0; if (($30|0) == 0) { _longjmp($29|0, threwValue|0); } tempRet0 = threwValue; } else { $30 = -1; };
    $31 = tempRet0;
    if ((($30|0) == 1)) {
     $$reg2mem118$0 = $31;
     break;
    }
   }
   $32 = (($pa) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)!=(0);
   if ($34) {
    $35 = (($pa) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)!=(0);
    if ($37) {
     $38 = (($0) + 424|0);
     HEAP32[$38>>2] = 0;
    } else {
     label = 19;
    }
   } else {
    label = 19;
   }
   if ((label|0) == 19) {
    $39 = (($0) + 424|0);
    HEAP32[$39>>2] = 1;
   }
   $40 = HEAP32[$pa>>2]|0;
   $41 = ($40|0)==(9);
   if ($41) {
    label = 22;
   } else {
    $42 = HEAP32[$pa>>2]|0;
    $43 = ($42|0)==(8);
    if ($43) {
     label = 22;
    }
   }
   if ((label|0) == 22) {
    $44 = (($0) + 424|0);
    HEAP32[$44>>2] = 1;
   }
   _saveSetjmp(264,1,_setjmpTable|0)|0;
   __THREW__ = 0;
   $45 = __THREW__; __THREW__ = 0;
   if ((($45|0) != 0) & ((threwValue|0) != 0)) { $46 = _testSetjmp(HEAP32[$45>>2]|0, _setjmpTable)|0; if (($46|0) == 0) { _longjmp($45|0, threwValue|0); } tempRet0 = threwValue; } else { $46 = -1; };
   $47 = tempRet0;
   if ((($46|0) == 1)) {
    $$reg2mem118$0 = $47;
   } else {
    $$reg2mem118$0 = 0;
   }
  }
 } while(0);
 while(1) {
  $48 = ($$reg2mem118$0|0)!=(0);
  if ($48) {
   $49 = HEAP32[424>>2]|0;
   $50 = ($49|0)==(1);
   if (!($50)) {
    __THREW__ = 0;
    invoke_vi(114,($0|0));
    $66 = __THREW__; __THREW__ = 0;
    if ((($66|0) != 0) & ((threwValue|0) != 0)) { $67 = _testSetjmp(HEAP32[$66>>2]|0, _setjmpTable)|0; if (($67|0) == 0) { _longjmp($66|0, threwValue|0); } tempRet0 = threwValue; } else { $67 = -1; };
    $68 = tempRet0;
    if ((($67|0) == 1)) {
     $$reg2mem118$0 = $68;
     continue;
    } else {
     label = 32;
     break;
    }
   }
   HEAP32[424>>2] = 0;
   $51 = (($0) + 436|0);
   $52 = HEAP32[432>>2]|0;
   __THREW__ = 0;
   invoke_vii(40,($51|0),($52|0));
   $53 = __THREW__; __THREW__ = 0;
   if ((($53|0) != 0) & ((threwValue|0) != 0)) { $54 = _testSetjmp(HEAP32[$53>>2]|0, _setjmpTable)|0; if (($54|0) == 0) { _longjmp($53|0, threwValue|0); } tempRet0 = threwValue; } else { $54 = -1; };
   $55 = tempRet0;
   if ((($54|0) == 1)) {
    $$reg2mem118$0 = $55;
    continue;
   }
   $56 = HEAP32[432>>2]|0;
   __THREW__ = 0;
   invoke_vi(112,($56|0));
   $57 = __THREW__; __THREW__ = 0;
   if ((($57|0) != 0) & ((threwValue|0) != 0)) { $58 = _testSetjmp(HEAP32[$57>>2]|0, _setjmpTable)|0; if (($58|0) == 0) { _longjmp($57|0, threwValue|0); } tempRet0 = threwValue; } else { $58 = -1; };
   $59 = tempRet0;
   if ((($58|0) == 1)) {
    $$reg2mem118$0 = $59;
    continue;
   }
   HEAP32[432>>2] = 0;
   $60 = (($0) + 232|0);
   $61 = (($60) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   __THREW__ = 0;
   invoke_vi(113,($62|0));
   $63 = __THREW__; __THREW__ = 0;
   if ((($63|0) != 0) & ((threwValue|0) != 0)) { $64 = _testSetjmp(HEAP32[$63>>2]|0, _setjmpTable)|0; if (($64|0) == 0) { _longjmp($63|0, threwValue|0); } tempRet0 = threwValue; } else { $64 = -1; };
   $65 = tempRet0;
   if ((($64|0) == 1)) {
    $$reg2mem118$0 = $65;
    continue;
   } else {
    label = 30;
    break;
   }
  }
  $69 = (($0) + 436|0);
  $70 = (($0) + 444|0);
  __THREW__ = 0;
  invoke_viiii(8,($pa|0),($sa|0),($69|0),($70|0));
  $71 = __THREW__; __THREW__ = 0;
  if ((($71|0) != 0) & ((threwValue|0) != 0)) { $72 = _testSetjmp(HEAP32[$71>>2]|0, _setjmpTable)|0; if (($72|0) == 0) { _longjmp($71|0, threwValue|0); } tempRet0 = threwValue; } else { $72 = -1; };
  $73 = tempRet0;
  if ((($72|0) == 1)) {
   $$reg2mem118$0 = $73;
   continue;
  }
  $74 = (($pa) + 2656|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($75|0)!=(0);
  if ($76) {
   __THREW__ = 0;
   (invoke_iii(15,(440|0),($vararg_buffer131|0))|0);
   $77 = __THREW__; __THREW__ = 0;
   if ((($77|0) != 0) & ((threwValue|0) != 0)) { $78 = _testSetjmp(HEAP32[$77>>2]|0, _setjmpTable)|0; if (($78|0) == 0) { _longjmp($77|0, threwValue|0); } tempRet0 = threwValue; } else { $78 = -1; };
   $79 = tempRet0;
   if ((($78|0) == 1)) {
    $$reg2mem118$0 = $79;
    continue;
   }
   __THREW__ = 0;
   invoke_vii(39,($pa|0),($sa|0));
   $80 = __THREW__; __THREW__ = 0;
   if ((($80|0) != 0) & ((threwValue|0) != 0)) { $81 = _testSetjmp(HEAP32[$80>>2]|0, _setjmpTable)|0; if (($81|0) == 0) { _longjmp($80|0, threwValue|0); } tempRet0 = threwValue; } else { $81 = -1; };
   $82 = tempRet0;
   if ((($81|0) == 1)) {
    $$reg2mem118$0 = $82;
    continue;
   }
  }
  $83 = (($0) + 436|0);
  __THREW__ = 0;
  $84 = (invoke_ii(64,($83|0))|0);
  $85 = __THREW__; __THREW__ = 0;
  if ((($85|0) != 0) & ((threwValue|0) != 0)) { $86 = _testSetjmp(HEAP32[$85>>2]|0, _setjmpTable)|0; if (($86|0) == 0) { _longjmp($85|0, threwValue|0); } tempRet0 = threwValue; } else { $86 = -1; };
  $87 = tempRet0;
  if ((($86|0) == 1)) {
   $$reg2mem118$0 = $87;
   continue;
  }
  $88 = ($84|0)!=(0);
  if (!($88)) {
   label = 40;
   break;
  }
  $89 = (($0) + 428|0);
  $90 = (($0) + 436|0);
  $91 = (($0) + 444|0);
  __THREW__ = 0;
  $92 = (invoke_iiiiii(13,($pa|0),($sa|0),($89|0),($90|0),($91|0))|0);
  $93 = __THREW__; __THREW__ = 0;
  if ((($93|0) != 0) & ((threwValue|0) != 0)) { $94 = _testSetjmp(HEAP32[$93>>2]|0, _setjmpTable)|0; if (($94|0) == 0) { _longjmp($93|0, threwValue|0); } tempRet0 = threwValue; } else { $94 = -1; };
  $95 = tempRet0;
  if ((($94|0) == 1)) {
   $$reg2mem118$0 = $95;
   continue;
  }
  $96 = ($92|0)!=(0);
  if ($96) {
   label = 43;
   break;
  }
  __THREW__ = 0;
  invoke_vii(41,($sa|0),($0|0));
  $97 = __THREW__; __THREW__ = 0;
  if ((($97|0) != 0) & ((threwValue|0) != 0)) { $98 = _testSetjmp(HEAP32[$97>>2]|0, _setjmpTable)|0; if (($98|0) == 0) { _longjmp($97|0, threwValue|0); } tempRet0 = threwValue; } else { $98 = -1; };
  $99 = tempRet0;
  if ((($98|0) == 1)) {
   $$reg2mem118$0 = $99;
   continue;
  }
  $100 = HEAP32[176>>2]|0;
  $101 = ($100|0)==(0|0);
  if ($101) {
   __THREW__ = 0;
   $102 = (invoke_i(2)|0);
   $103 = __THREW__; __THREW__ = 0;
   if ((($103|0) != 0) & ((threwValue|0) != 0)) { $104 = _testSetjmp(HEAP32[$103>>2]|0, _setjmpTable)|0; if (($104|0) == 0) { _longjmp($103|0, threwValue|0); } tempRet0 = threwValue; } else { $104 = -1; };
   $105 = tempRet0;
   if ((($104|0) == 1)) {
    $$reg2mem118$0 = $105;
    continue;
   }
   HEAP32[176>>2] = $102;
  }
  $106 = HEAP32[184>>2]|0;
  $107 = ($106|0)==(0|0);
  if ($107) {
   $108 = (($pa) + 48|0);
   __THREW__ = 0;
   $109 = (invoke_ii(65,($108|0))|0);
   $110 = __THREW__; __THREW__ = 0;
   if ((($110|0) != 0) & ((threwValue|0) != 0)) { $111 = _testSetjmp(HEAP32[$110>>2]|0, _setjmpTable)|0; if (($111|0) == 0) { _longjmp($110|0, threwValue|0); } tempRet0 = threwValue; } else { $111 = -1; };
   $112 = tempRet0;
   if ((($111|0) == 1)) {
    $$reg2mem118$0 = $112;
    continue;
   }
   HEAP32[184>>2] = $109;
  } else {
   $113 = HEAP32[184>>2]|0;
   __THREW__ = 0;
   invoke_vi(115,($113|0));
   $114 = __THREW__; __THREW__ = 0;
   if ((($114|0) != 0) & ((threwValue|0) != 0)) { $115 = _testSetjmp(HEAP32[$114>>2]|0, _setjmpTable)|0; if (($115|0) == 0) { _longjmp($114|0, threwValue|0); } tempRet0 = threwValue; } else { $115 = -1; };
   $116 = tempRet0;
   if ((($115|0) == 1)) {
    $$reg2mem118$0 = $116;
    continue;
   }
   $117 = (($pa) + 48|0);
   __THREW__ = 0;
   $118 = (invoke_ii(65,($117|0))|0);
   $119 = __THREW__; __THREW__ = 0;
   if ((($119|0) != 0) & ((threwValue|0) != 0)) { $120 = _testSetjmp(HEAP32[$119>>2]|0, _setjmpTable)|0; if (($120|0) == 0) { _longjmp($119|0, threwValue|0); } tempRet0 = threwValue; } else { $120 = -1; };
   $121 = tempRet0;
   if ((($120|0) == 1)) {
    $$reg2mem118$0 = $121;
    continue;
   }
   HEAP32[184>>2] = $118;
  }
  $122 = HEAP32[192>>2]|0;
  $123 = ($122|0)==(0|0);
  if ($123) {
   $124 = (($pa) + 400|0);
   __THREW__ = 0;
   $125 = (invoke_ii(65,($124|0))|0);
   $126 = __THREW__; __THREW__ = 0;
   if ((($126|0) != 0) & ((threwValue|0) != 0)) { $127 = _testSetjmp(HEAP32[$126>>2]|0, _setjmpTable)|0; if (($127|0) == 0) { _longjmp($126|0, threwValue|0); } tempRet0 = threwValue; } else { $127 = -1; };
   $128 = tempRet0;
   if ((($127|0) == 1)) {
    $$reg2mem118$0 = $128;
    continue;
   }
   HEAP32[192>>2] = $125;
  } else {
   $129 = HEAP32[192>>2]|0;
   __THREW__ = 0;
   invoke_vi(115,($129|0));
   $130 = __THREW__; __THREW__ = 0;
   if ((($130|0) != 0) & ((threwValue|0) != 0)) { $131 = _testSetjmp(HEAP32[$130>>2]|0, _setjmpTable)|0; if (($131|0) == 0) { _longjmp($130|0, threwValue|0); } tempRet0 = threwValue; } else { $131 = -1; };
   $132 = tempRet0;
   if ((($131|0) == 1)) {
    $$reg2mem118$0 = $132;
    continue;
   }
   $133 = (($pa) + 400|0);
   __THREW__ = 0;
   $134 = (invoke_ii(65,($133|0))|0);
   $135 = __THREW__; __THREW__ = 0;
   if ((($135|0) != 0) & ((threwValue|0) != 0)) { $136 = _testSetjmp(HEAP32[$135>>2]|0, _setjmpTable)|0; if (($136|0) == 0) { _longjmp($135|0, threwValue|0); } tempRet0 = threwValue; } else { $136 = -1; };
   $137 = tempRet0;
   if ((($136|0) == 1)) {
    $$reg2mem118$0 = $137;
    continue;
   }
   HEAP32[192>>2] = $134;
  }
  $138 = HEAP32[$pa>>2]|0;
  $139 = ($138|0)==(9);
  if ($139) {
   $140 = HEAP32[176>>2]|0;
   $141 = HEAP32[184>>2]|0;
   $142 = HEAP32[192>>2]|0;
   __THREW__ = 0;
   (invoke_iiiiiii(1,($0|0),($pa|0),($sa|0),($140|0),($141|0),($142|0))|0);
   $143 = __THREW__; __THREW__ = 0;
   if ((($143|0) != 0) & ((threwValue|0) != 0)) { $144 = _testSetjmp(HEAP32[$143>>2]|0, _setjmpTable)|0; if (($144|0) == 0) { _longjmp($143|0, threwValue|0); } tempRet0 = threwValue; } else { $144 = -1; };
   $145 = tempRet0;
   if ((($144|0) == 1)) {
    $$reg2mem118$0 = $145;
    continue;
   }
  } else {
   $146 = HEAP32[$pa>>2]|0;
   $147 = ($146|0)==(8);
   if ($147) {
    $148 = HEAP32[176>>2]|0;
    $149 = HEAP32[184>>2]|0;
    __THREW__ = 0;
    (invoke_iiiiii(14,($0|0),($pa|0),($sa|0),($148|0),($149|0))|0);
    $150 = __THREW__; __THREW__ = 0;
    if ((($150|0) != 0) & ((threwValue|0) != 0)) { $151 = _testSetjmp(HEAP32[$150>>2]|0, _setjmpTable)|0; if (($151|0) == 0) { _longjmp($150|0, threwValue|0); } tempRet0 = threwValue; } else { $151 = -1; };
    $152 = tempRet0;
    if ((($151|0) == 1)) {
     $$reg2mem118$0 = $152;
     continue;
    }
   } else {
    $153 = HEAP32[$pa>>2]|0;
    $154 = ($153|0)==(10);
    if ($154) {
     $155 = HEAP32[176>>2]|0;
     $156 = HEAP32[184>>2]|0;
     $157 = HEAP32[192>>2]|0;
     __THREW__ = 0;
     (invoke_iiiiiii(2,($0|0),($pa|0),($sa|0),($155|0),($156|0),($157|0))|0);
     $158 = __THREW__; __THREW__ = 0;
     if ((($158|0) != 0) & ((threwValue|0) != 0)) { $159 = _testSetjmp(HEAP32[$158>>2]|0, _setjmpTable)|0; if (($159|0) == 0) { _longjmp($158|0, threwValue|0); } tempRet0 = threwValue; } else { $159 = -1; };
     $160 = tempRet0;
     if ((($159|0) == 1)) {
      $$reg2mem118$0 = $160;
      continue;
     }
    } else {
     $161 = HEAP32[176>>2]|0;
     $162 = HEAP32[184>>2]|0;
     __THREW__ = 0;
     $163 = (invoke_iiiiii(15,($0|0),($pa|0),($sa|0),($161|0),($162|0))|0);
     $164 = __THREW__; __THREW__ = 0;
     if ((($164|0) != 0) & ((threwValue|0) != 0)) { $165 = _testSetjmp(HEAP32[$164>>2]|0, _setjmpTable)|0; if (($165|0) == 0) { _longjmp($164|0, threwValue|0); } tempRet0 = threwValue; } else { $165 = -1; };
     $166 = tempRet0;
     if ((($165|0) == 1)) {
      $$reg2mem118$0 = $166;
      continue;
     }
     $167 = ($163|0)!=(0);
     if ($167) {
      label = 71;
      break;
     }
     $168 = (($pa) + 12|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = ($169|0)!=(0);
     if ($170) {
      $171 = HEAP32[176>>2]|0;
      $172 = HEAP32[192>>2]|0;
      __THREW__ = 0;
      $173 = (invoke_iiiiii(16,($0|0),($pa|0),($sa|0),($171|0),($172|0))|0);
      $174 = __THREW__; __THREW__ = 0;
      if ((($174|0) != 0) & ((threwValue|0) != 0)) { $175 = _testSetjmp(HEAP32[$174>>2]|0, _setjmpTable)|0; if (($175|0) == 0) { _longjmp($174|0, threwValue|0); } tempRet0 = threwValue; } else { $175 = -1; };
      $176 = tempRet0;
      if ((($175|0) == 1)) {
       $$reg2mem118$0 = $176;
       continue;
      }
      $177 = ($173|0)!=(0);
      if ($177) {
       label = 75;
       break;
      }
     }
    }
   }
  }
  $178 = (($pa) + 8|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = ($179|0)!=(0);
  if ($180) {
   $181 = HEAP32[$pa>>2]|0;
   $182 = ($181|0)!=(8);
   if ($182) {
    $183 = (($0) + 232|0);
    __THREW__ = 0;
    invoke_vi(116,($183|0));
    $184 = __THREW__; __THREW__ = 0;
    if ((($184|0) != 0) & ((threwValue|0) != 0)) { $185 = _testSetjmp(HEAP32[$184>>2]|0, _setjmpTable)|0; if (($185|0) == 0) { _longjmp($184|0, threwValue|0); } tempRet0 = threwValue; } else { $185 = -1; };
    $186 = tempRet0;
    if ((($185|0) == 1)) {
     $$reg2mem118$0 = $186;
     continue;
    }
   }
  }
  $187 = (($pa) + 4|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = ($188|0)!=(0);
  if ($189) {
   $190 = HEAP32[$pa>>2]|0;
   $191 = ($190|0)!=(8);
   if ($191) {
    __THREW__ = 0;
    invoke_vi(116,($0|0));
    $192 = __THREW__; __THREW__ = 0;
    if ((($192|0) != 0) & ((threwValue|0) != 0)) { $193 = _testSetjmp(HEAP32[$192>>2]|0, _setjmpTable)|0; if (($193|0) == 0) { _longjmp($192|0, threwValue|0); } tempRet0 = threwValue; } else { $193 = -1; };
    $194 = tempRet0;
    if ((($193|0) == 1)) {
     $$reg2mem118$0 = $194;
     continue;
    }
   }
  }
  $195 = (($0) + 424|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = ($196|0)==(1);
  if ($197) {
   $198 = (($pa) + 12|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = ($199|0)==(1);
   if ($200) {
    $201 = (($0) + 116|0);
    __THREW__ = 0;
    invoke_vi(116,($201|0));
    $202 = __THREW__; __THREW__ = 0;
    if ((($202|0) != 0) & ((threwValue|0) != 0)) { $203 = _testSetjmp(HEAP32[$202>>2]|0, _setjmpTable)|0; if (($203|0) == 0) { _longjmp($202|0, threwValue|0); } tempRet0 = threwValue; } else { $203 = -1; };
    $204 = tempRet0;
    if ((($203|0) == 1)) {
     $$reg2mem118$0 = $204;
     continue;
    }
   }
  }
  $205 = (($0) + 424|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = ($206|0)==(0);
  if ($207) {
   $208 = HEAP32[176>>2]|0;
   $209 = HEAP32[184>>2]|0;
   $210 = HEAP32[192>>2]|0;
   $211 = (($0) + 348|0);
   __THREW__ = 0;
   invoke_viiiiiii(39,($0|0),($pa|0),($sa|0),($208|0),($209|0),($210|0),($211|0));
   $212 = __THREW__; __THREW__ = 0;
   if ((($212|0) != 0) & ((threwValue|0) != 0)) { $213 = _testSetjmp(HEAP32[$212>>2]|0, _setjmpTable)|0; if (($213|0) == 0) { _longjmp($212|0, threwValue|0); } tempRet0 = threwValue; } else { $213 = -1; };
   $214 = tempRet0;
   if ((($213|0) == 1)) {
    $$reg2mem118$0 = $214;
    continue;
   }
  }
  $215 = (($pa) + 2656|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = ($216|0)!=(0);
  if (!($217)) {
   break;
  }
  __THREW__ = 0;
  (invoke_iii(15,(464|0),($vararg_buffer133|0))|0);
  $218 = __THREW__; __THREW__ = 0;
  if ((($218|0) != 0) & ((threwValue|0) != 0)) { $219 = _testSetjmp(HEAP32[$218>>2]|0, _setjmpTable)|0; if (($219|0) == 0) { _longjmp($218|0, threwValue|0); } tempRet0 = threwValue; } else { $219 = -1; };
  $220 = tempRet0;
  if ((($219|0) == 1)) {
   $$reg2mem118$0 = $220;
   continue;
  }
  __THREW__ = 0;
  invoke_vii(39,($pa|0),($sa|0));
  $221 = __THREW__; __THREW__ = 0;
  if ((($221|0) != 0) & ((threwValue|0) != 0)) { $222 = _testSetjmp(HEAP32[$221>>2]|0, _setjmpTable)|0; if (($222|0) == 0) { _longjmp($221|0, threwValue|0); } tempRet0 = threwValue; } else { $222 = -1; };
  $223 = tempRet0;
  if ((($222|0) == 1)) {
   $$reg2mem118$0 = $223;
  } else {
   label = 98;
   break;
  }
 }
 if ((label|0) == 30) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 32) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 40) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 43) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 71) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 75) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 98) {
 }
 $$0 = $0;
 STACKTOP = sp;return ($$0|0);
}
function __ZL15create_p3retvalv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $state = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = (_malloc(460)|0);
 $state = $1;
 $2 = $state;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $0 = 0;
  $74 = $0;
  STACKTOP = sp;return ($74|0);
 }
 $4 = (_malloc(256000)|0);
 $5 = $state;
 HEAP32[$5>>2] = $4;
 $6 = (_malloc(256000)|0);
 $7 = $state;
 $8 = (($7) + 232|0);
 HEAP32[$8>>2] = $6;
 $9 = (_malloc(256000)|0);
 $10 = $state;
 $11 = (($10) + 116|0);
 HEAP32[$11>>2] = $9;
 $12 = $state;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $15 = $state;
  $16 = (($15) + 232|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   $19 = $state;
   $20 = (($19) + 116|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(0|0);
   if (!($22)) {
    $24 = $state;
    $25 = (($24) + 8|0);
    HEAP32[$25>>2] = 2000;
    $26 = $state;
    $27 = (($26) + 232|0);
    $28 = (($27) + 8|0);
    HEAP32[$28>>2] = 2000;
    $29 = $state;
    $30 = (($29) + 116|0);
    $31 = (($30) + 8|0);
    HEAP32[$31>>2] = 2000;
    $32 = $state;
    $33 = (($32) + 4|0);
    HEAP32[$33>>2] = 0;
    $34 = $state;
    $35 = (($34) + 232|0);
    $36 = (($35) + 4|0);
    HEAP32[$36>>2] = 0;
    $37 = $state;
    $38 = (($37) + 116|0);
    $39 = (($38) + 4|0);
    HEAP32[$39>>2] = 0;
    $40 = $state;
    $41 = (($40) + 12|0);
    HEAP32[$41>>2] = 0;
    $42 = $state;
    $43 = (($42) + 116|0);
    $44 = (($43) + 12|0);
    HEAP32[$44>>2] = 2;
    $45 = $state;
    $46 = (($45) + 232|0);
    $47 = (($46) + 12|0);
    HEAP32[$47>>2] = 1;
    $48 = $state;
    $49 = (($48) + 348|0);
    HEAP32[$49>>2] = 0;
    $50 = $state;
    $51 = (($50) + 348|0);
    $52 = (($51) + 8|0);
    HEAP32[$52>>2] = 0;
    $53 = $state;
    $54 = (($53) + 348|0);
    $55 = (($54) + 4|0);
    HEAP32[$55>>2] = 0;
    $56 = $state;
    $57 = (($56) + 428|0);
    _init_pr_append_str($57);
    $58 = $state;
    $59 = (($58) + 436|0);
    _init_pr_append_str($59);
    $60 = $state;
    $61 = (($60) + 444|0);
    _init_pr_append_str($61);
    $62 = $state;
    $63 = (($62) + 16|0);
    dest=$63+0|0; stop=dest+100|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    $64 = $state;
    $65 = (($64) + 232|0);
    $66 = (($65) + 16|0);
    dest=$66+0|0; stop=dest+100|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    $67 = $state;
    $68 = (($67) + 116|0);
    $69 = (($68) + 16|0);
    dest=$69+0|0; stop=dest+100|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    $70 = $state;
    $71 = (($70) + 348|0);
    $72 = (($71) + 12|0);
    dest=$72+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    $73 = $state;
    $0 = $73;
    $74 = $0;
    STACKTOP = sp;return ($74|0);
   }
  }
 }
 $23 = $state;
 _free($23);
 $0 = 0;
 $74 = $0;
 STACKTOP = sp;return ($74|0);
}
function _p3_print_args($p,$s) {
 $p = $p|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0, $294 = 0.0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0.0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0, $366 = 0.0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0, $378 = 0.0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0.0, $383 = 0, $384 = 0, $385 = 0, $386 = 0.0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0.0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0.0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0.0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0.0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0.0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0.0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0.0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0.0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0.0, $470 = 0.0, $471 = 0, $472 = 0, $473 = 0, $474 = 0.0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0.0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0, $486 = 0.0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0.0, $491 = 0, $492 = 0, $493 = 0, $494 = 0.0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0.0, $503 = 0, $504 = 0, $505 = 0, $506 = 0.0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0.0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0.0, $543 = 0, $544 = 0, $545 = 0, $546 = 0.0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0;
 var $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, $i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer101 = 0, $vararg_buffer104 = 0, $vararg_buffer107 = 0, $vararg_buffer11 = 0, $vararg_buffer110 = 0, $vararg_buffer113 = 0, $vararg_buffer116 = 0, $vararg_buffer119 = 0, $vararg_buffer122 = 0, $vararg_buffer125 = 0, $vararg_buffer127 = 0, $vararg_buffer130 = 0;
 var $vararg_buffer133 = 0, $vararg_buffer136 = 0, $vararg_buffer139 = 0, $vararg_buffer14 = 0, $vararg_buffer142 = 0, $vararg_buffer145 = 0, $vararg_buffer148 = 0, $vararg_buffer151 = 0, $vararg_buffer154 = 0, $vararg_buffer157 = 0, $vararg_buffer160 = 0, $vararg_buffer163 = 0, $vararg_buffer166 = 0, $vararg_buffer169 = 0, $vararg_buffer17 = 0, $vararg_buffer171 = 0, $vararg_buffer173 = 0, $vararg_buffer175 = 0, $vararg_buffer177 = 0, $vararg_buffer179 = 0;
 var $vararg_buffer182 = 0, $vararg_buffer185 = 0, $vararg_buffer188 = 0, $vararg_buffer191 = 0, $vararg_buffer194 = 0, $vararg_buffer197 = 0, $vararg_buffer20 = 0, $vararg_buffer200 = 0, $vararg_buffer203 = 0, $vararg_buffer206 = 0, $vararg_buffer209 = 0, $vararg_buffer212 = 0, $vararg_buffer215 = 0, $vararg_buffer218 = 0, $vararg_buffer221 = 0, $vararg_buffer224 = 0, $vararg_buffer227 = 0, $vararg_buffer23 = 0, $vararg_buffer230 = 0, $vararg_buffer233 = 0;
 var $vararg_buffer236 = 0, $vararg_buffer239 = 0, $vararg_buffer241 = 0, $vararg_buffer244 = 0, $vararg_buffer247 = 0, $vararg_buffer250 = 0, $vararg_buffer253 = 0, $vararg_buffer256 = 0, $vararg_buffer259 = 0, $vararg_buffer26 = 0, $vararg_buffer262 = 0, $vararg_buffer265 = 0, $vararg_buffer268 = 0, $vararg_buffer271 = 0, $vararg_buffer274 = 0, $vararg_buffer277 = 0, $vararg_buffer280 = 0, $vararg_buffer283 = 0, $vararg_buffer286 = 0, $vararg_buffer289 = 0;
 var $vararg_buffer29 = 0, $vararg_buffer292 = 0, $vararg_buffer295 = 0, $vararg_buffer298 = 0, $vararg_buffer3 = 0, $vararg_buffer301 = 0, $vararg_buffer304 = 0, $vararg_buffer307 = 0, $vararg_buffer310 = 0, $vararg_buffer313 = 0, $vararg_buffer315 = 0, $vararg_buffer317 = 0, $vararg_buffer319 = 0, $vararg_buffer32 = 0, $vararg_buffer322 = 0, $vararg_buffer325 = 0, $vararg_buffer328 = 0, $vararg_buffer331 = 0, $vararg_buffer334 = 0, $vararg_buffer337 = 0;
 var $vararg_buffer340 = 0, $vararg_buffer343 = 0, $vararg_buffer346 = 0, $vararg_buffer349 = 0, $vararg_buffer35 = 0, $vararg_buffer352 = 0, $vararg_buffer355 = 0, $vararg_buffer358 = 0, $vararg_buffer361 = 0, $vararg_buffer364 = 0, $vararg_buffer367 = 0, $vararg_buffer370 = 0, $vararg_buffer372 = 0, $vararg_buffer375 = 0, $vararg_buffer378 = 0, $vararg_buffer38 = 0, $vararg_buffer381 = 0, $vararg_buffer384 = 0, $vararg_buffer387 = 0, $vararg_buffer390 = 0;
 var $vararg_buffer393 = 0, $vararg_buffer396 = 0, $vararg_buffer399 = 0, $vararg_buffer402 = 0, $vararg_buffer405 = 0, $vararg_buffer408 = 0, $vararg_buffer41 = 0, $vararg_buffer411 = 0, $vararg_buffer414 = 0, $vararg_buffer417 = 0, $vararg_buffer420 = 0, $vararg_buffer423 = 0, $vararg_buffer426 = 0, $vararg_buffer429 = 0, $vararg_buffer431 = 0, $vararg_buffer433 = 0, $vararg_buffer435 = 0, $vararg_buffer437 = 0, $vararg_buffer439 = 0, $vararg_buffer44 = 0;
 var $vararg_buffer441 = 0, $vararg_buffer443 = 0, $vararg_buffer446 = 0, $vararg_buffer448 = 0, $vararg_buffer451 = 0, $vararg_buffer453 = 0, $vararg_buffer456 = 0, $vararg_buffer459 = 0, $vararg_buffer462 = 0, $vararg_buffer465 = 0, $vararg_buffer468 = 0, $vararg_buffer47 = 0, $vararg_buffer471 = 0, $vararg_buffer474 = 0, $vararg_buffer477 = 0, $vararg_buffer480 = 0, $vararg_buffer483 = 0, $vararg_buffer486 = 0, $vararg_buffer489 = 0, $vararg_buffer492 = 0;
 var $vararg_buffer495 = 0, $vararg_buffer498 = 0, $vararg_buffer5 = 0, $vararg_buffer50 = 0, $vararg_buffer501 = 0, $vararg_buffer504 = 0, $vararg_buffer507 = 0, $vararg_buffer510 = 0, $vararg_buffer512 = 0, $vararg_buffer514 = 0, $vararg_buffer53 = 0, $vararg_buffer56 = 0, $vararg_buffer59 = 0, $vararg_buffer62 = 0, $vararg_buffer65 = 0, $vararg_buffer68 = 0, $vararg_buffer71 = 0, $vararg_buffer73 = 0, $vararg_buffer77 = 0, $vararg_buffer8 = 0;
 var $vararg_buffer80 = 0, $vararg_buffer83 = 0, $vararg_buffer86 = 0, $vararg_buffer89 = 0, $vararg_buffer92 = 0, $vararg_buffer95 = 0, $vararg_buffer98 = 0, $vararg_ptr76 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1456|0;
 $vararg_buffer514 = sp + 336|0;
 $vararg_buffer512 = sp + 1440|0;
 $vararg_buffer510 = sp + 1432|0;
 $vararg_buffer507 = sp + 1424|0;
 $vararg_buffer504 = sp + 1416|0;
 $vararg_buffer501 = sp + 1408|0;
 $vararg_buffer498 = sp + 1400|0;
 $vararg_buffer495 = sp + 1392|0;
 $vararg_buffer492 = sp + 1384|0;
 $vararg_buffer489 = sp + 1376|0;
 $vararg_buffer486 = sp + 1368|0;
 $vararg_buffer483 = sp + 1360|0;
 $vararg_buffer480 = sp + 1352|0;
 $vararg_buffer477 = sp + 1344|0;
 $vararg_buffer474 = sp + 1336|0;
 $vararg_buffer471 = sp + 1328|0;
 $vararg_buffer468 = sp + 1320|0;
 $vararg_buffer465 = sp + 1312|0;
 $vararg_buffer462 = sp + 1304|0;
 $vararg_buffer459 = sp + 1296|0;
 $vararg_buffer456 = sp + 1288|0;
 $vararg_buffer453 = sp + 1280|0;
 $vararg_buffer451 = sp + 1272|0;
 $vararg_buffer448 = sp + 1264|0;
 $vararg_buffer446 = sp + 1256|0;
 $vararg_buffer443 = sp + 1248|0;
 $vararg_buffer441 = sp + 1240|0;
 $vararg_buffer439 = sp + 1232|0;
 $vararg_buffer437 = sp + 1224|0;
 $vararg_buffer435 = sp + 1216|0;
 $vararg_buffer433 = sp + 1208|0;
 $vararg_buffer431 = sp + 1200|0;
 $vararg_buffer429 = sp + 1192|0;
 $vararg_buffer426 = sp + 1184|0;
 $vararg_buffer423 = sp + 1176|0;
 $vararg_buffer420 = sp + 1168|0;
 $vararg_buffer417 = sp + 1160|0;
 $vararg_buffer414 = sp + 1152|0;
 $vararg_buffer411 = sp + 1144|0;
 $vararg_buffer408 = sp + 1136|0;
 $vararg_buffer405 = sp + 1128|0;
 $vararg_buffer402 = sp + 1120|0;
 $vararg_buffer399 = sp + 1112|0;
 $vararg_buffer396 = sp + 1104|0;
 $vararg_buffer393 = sp + 1096|0;
 $vararg_buffer390 = sp + 1088|0;
 $vararg_buffer387 = sp + 1080|0;
 $vararg_buffer384 = sp + 1072|0;
 $vararg_buffer381 = sp + 1064|0;
 $vararg_buffer378 = sp + 1056|0;
 $vararg_buffer375 = sp + 1048|0;
 $vararg_buffer372 = sp + 1040|0;
 $vararg_buffer370 = sp + 1032|0;
 $vararg_buffer367 = sp + 1024|0;
 $vararg_buffer364 = sp + 1016|0;
 $vararg_buffer361 = sp + 1008|0;
 $vararg_buffer358 = sp + 1000|0;
 $vararg_buffer355 = sp + 992|0;
 $vararg_buffer352 = sp + 984|0;
 $vararg_buffer349 = sp + 976|0;
 $vararg_buffer346 = sp + 968|0;
 $vararg_buffer343 = sp + 960|0;
 $vararg_buffer340 = sp + 952|0;
 $vararg_buffer337 = sp + 944|0;
 $vararg_buffer334 = sp + 936|0;
 $vararg_buffer331 = sp + 928|0;
 $vararg_buffer328 = sp + 920|0;
 $vararg_buffer325 = sp + 912|0;
 $vararg_buffer322 = sp + 904|0;
 $vararg_buffer319 = sp + 896|0;
 $vararg_buffer317 = sp + 888|0;
 $vararg_buffer315 = sp + 880|0;
 $vararg_buffer313 = sp + 872|0;
 $vararg_buffer310 = sp + 864|0;
 $vararg_buffer307 = sp + 856|0;
 $vararg_buffer304 = sp + 848|0;
 $vararg_buffer301 = sp + 840|0;
 $vararg_buffer298 = sp + 832|0;
 $vararg_buffer295 = sp + 824|0;
 $vararg_buffer292 = sp + 816|0;
 $vararg_buffer289 = sp + 808|0;
 $vararg_buffer286 = sp + 800|0;
 $vararg_buffer283 = sp + 792|0;
 $vararg_buffer280 = sp + 784|0;
 $vararg_buffer277 = sp + 776|0;
 $vararg_buffer274 = sp + 768|0;
 $vararg_buffer271 = sp + 760|0;
 $vararg_buffer268 = sp + 752|0;
 $vararg_buffer265 = sp + 744|0;
 $vararg_buffer262 = sp + 736|0;
 $vararg_buffer259 = sp + 344|0;
 $vararg_buffer256 = sp + 352|0;
 $vararg_buffer253 = sp + 728|0;
 $vararg_buffer250 = sp + 328|0;
 $vararg_buffer247 = sp + 320|0;
 $vararg_buffer244 = sp + 312|0;
 $vararg_buffer241 = sp + 304|0;
 $vararg_buffer239 = sp + 296|0;
 $vararg_buffer236 = sp + 288|0;
 $vararg_buffer233 = sp + 280|0;
 $vararg_buffer230 = sp + 272|0;
 $vararg_buffer227 = sp + 264|0;
 $vararg_buffer224 = sp + 256|0;
 $vararg_buffer221 = sp + 248|0;
 $vararg_buffer218 = sp + 240|0;
 $vararg_buffer215 = sp + 232|0;
 $vararg_buffer212 = sp + 224|0;
 $vararg_buffer209 = sp + 216|0;
 $vararg_buffer206 = sp + 208|0;
 $vararg_buffer203 = sp + 200|0;
 $vararg_buffer200 = sp + 192|0;
 $vararg_buffer197 = sp + 184|0;
 $vararg_buffer194 = sp + 176|0;
 $vararg_buffer191 = sp + 72|0;
 $vararg_buffer188 = sp + 64|0;
 $vararg_buffer185 = sp + 56|0;
 $vararg_buffer182 = sp + 48|0;
 $vararg_buffer179 = sp + 40|0;
 $vararg_buffer177 = sp + 32|0;
 $vararg_buffer175 = sp + 16|0;
 $vararg_buffer173 = sp + 8|0;
 $vararg_buffer171 = sp;
 $vararg_buffer169 = sp + 24|0;
 $vararg_buffer166 = sp + 80|0;
 $vararg_buffer163 = sp + 88|0;
 $vararg_buffer160 = sp + 96|0;
 $vararg_buffer157 = sp + 104|0;
 $vararg_buffer154 = sp + 112|0;
 $vararg_buffer151 = sp + 120|0;
 $vararg_buffer148 = sp + 128|0;
 $vararg_buffer145 = sp + 136|0;
 $vararg_buffer142 = sp + 144|0;
 $vararg_buffer139 = sp + 152|0;
 $vararg_buffer136 = sp + 160|0;
 $vararg_buffer133 = sp + 168|0;
 $vararg_buffer130 = sp + 360|0;
 $vararg_buffer127 = sp + 368|0;
 $vararg_buffer125 = sp + 376|0;
 $vararg_buffer122 = sp + 384|0;
 $vararg_buffer119 = sp + 392|0;
 $vararg_buffer116 = sp + 400|0;
 $vararg_buffer113 = sp + 408|0;
 $vararg_buffer110 = sp + 416|0;
 $vararg_buffer107 = sp + 424|0;
 $vararg_buffer104 = sp + 432|0;
 $vararg_buffer101 = sp + 440|0;
 $vararg_buffer98 = sp + 448|0;
 $vararg_buffer95 = sp + 456|0;
 $vararg_buffer92 = sp + 464|0;
 $vararg_buffer89 = sp + 472|0;
 $vararg_buffer86 = sp + 480|0;
 $vararg_buffer83 = sp + 488|0;
 $vararg_buffer80 = sp + 496|0;
 $vararg_buffer77 = sp + 504|0;
 $vararg_buffer73 = sp + 512|0;
 $vararg_buffer71 = sp + 520|0;
 $vararg_buffer68 = sp + 528|0;
 $vararg_buffer65 = sp + 536|0;
 $vararg_buffer62 = sp + 544|0;
 $vararg_buffer59 = sp + 552|0;
 $vararg_buffer56 = sp + 560|0;
 $vararg_buffer53 = sp + 568|0;
 $vararg_buffer50 = sp + 576|0;
 $vararg_buffer47 = sp + 584|0;
 $vararg_buffer44 = sp + 592|0;
 $vararg_buffer41 = sp + 600|0;
 $vararg_buffer38 = sp + 608|0;
 $vararg_buffer35 = sp + 616|0;
 $vararg_buffer32 = sp + 624|0;
 $vararg_buffer29 = sp + 632|0;
 $vararg_buffer26 = sp + 640|0;
 $vararg_buffer23 = sp + 648|0;
 $vararg_buffer20 = sp + 656|0;
 $vararg_buffer17 = sp + 664|0;
 $vararg_buffer14 = sp + 672|0;
 $vararg_buffer11 = sp + 680|0;
 $vararg_buffer8 = sp + 688|0;
 $vararg_buffer5 = sp + 696|0;
 $vararg_buffer3 = sp + 704|0;
 $vararg_buffer1 = sp + 712|0;
 $vararg_buffer = sp + 720|0;
 $0 = $p;
 $1 = $s;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  (_printf((896|0),($vararg_buffer|0))|0);
  (_printf((912|0),($vararg_buffer1|0))|0);
  $4 = $0;
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $5;
  (_printf((936|0),($vararg_buffer3|0))|0);
  $6 = $0;
  $7 = (($6) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $8;
  (_printf((960|0),($vararg_buffer5|0))|0);
  $9 = $0;
  $10 = (($9) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer8>>2] = $11;
  (_printf((984|0),($vararg_buffer8|0))|0);
  $12 = $0;
  $13 = (($12) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$vararg_buffer11>>2] = $14;
  (_printf((1008|0),($vararg_buffer11|0))|0);
  $15 = $0;
  $16 = (($15) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer14>>2] = $17;
  (_printf((1040|0),($vararg_buffer14|0))|0);
  $18 = $0;
  $19 = (($18) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  HEAP32[$vararg_buffer17>>2] = $20;
  (_printf((1056|0),($vararg_buffer17|0))|0);
  $21 = $0;
  $22 = (($21) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$vararg_buffer20>>2] = $23;
  (_printf((1080|0),($vararg_buffer20|0))|0);
  $24 = $0;
  $25 = (($24) + 28|0);
  $26 = HEAP32[$25>>2]|0;
  HEAP32[$vararg_buffer23>>2] = $26;
  (_printf((1104|0),($vararg_buffer23|0))|0);
  $27 = $0;
  $28 = (($27) + 32|0);
  $29 = HEAP32[$28>>2]|0;
  HEAP32[$vararg_buffer26>>2] = $29;
  (_printf((1128|0),($vararg_buffer26|0))|0);
  $30 = $0;
  $31 = (($30) + 36|0);
  $32 = HEAP32[$31>>2]|0;
  HEAP32[$vararg_buffer29>>2] = $32;
  (_printf((1152|0),($vararg_buffer29|0))|0);
  $33 = $0;
  $34 = (($33) + 40|0);
  $35 = HEAP32[$34>>2]|0;
  HEAP32[$vararg_buffer32>>2] = $35;
  (_printf((1192|0),($vararg_buffer32|0))|0);
  $36 = $0;
  $37 = (($36) + 44|0);
  $38 = HEAP32[$37>>2]|0;
  HEAP32[$vararg_buffer35>>2] = $38;
  (_printf((1216|0),($vararg_buffer35|0))|0);
  $39 = $0;
  $40 = (($39) + 752|0);
  $41 = HEAP32[$40>>2]|0;
  HEAP32[$vararg_buffer38>>2] = $41;
  (_printf((1240|0),($vararg_buffer38|0))|0);
  $42 = $0;
  $43 = (($42) + 756|0);
  $44 = HEAP32[$43>>2]|0;
  HEAP32[$vararg_buffer41>>2] = $44;
  (_printf((1264|0),($vararg_buffer41|0))|0);
  $45 = $0;
  $46 = (($45) + 760|0);
  $47 = +HEAPF64[$46>>3];
  HEAPF64[tempDoublePtr>>3]=$47;HEAP32[$vararg_buffer44>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer44+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((1288|0),($vararg_buffer44|0))|0);
  $48 = $0;
  $49 = (($48) + 772|0);
  $50 = HEAP32[$49>>2]|0;
  HEAP32[$vararg_buffer47>>2] = $50;
  (_printf((1312|0),($vararg_buffer47|0))|0);
  $51 = $0;
  $52 = (($51) + 768|0);
  $53 = HEAP32[$52>>2]|0;
  HEAP32[$vararg_buffer50>>2] = $53;
  (_printf((1328|0),($vararg_buffer50|0))|0);
  $54 = $0;
  $55 = (($54) + 776|0);
  $56 = HEAP32[$55>>2]|0;
  HEAP32[$vararg_buffer53>>2] = $56;
  (_printf((1352|0),($vararg_buffer53|0))|0);
  $57 = $0;
  $58 = (($57) + 2504|0);
  $59 = HEAP32[$58>>2]|0;
  HEAP32[$vararg_buffer56>>2] = $59;
  (_printf((1376|0),($vararg_buffer56|0))|0);
  $60 = $0;
  $61 = (($60) + 2508|0);
  $62 = HEAP32[$61>>2]|0;
  HEAP32[$vararg_buffer59>>2] = $62;
  (_printf((1416|0),($vararg_buffer59|0))|0);
  $63 = $0;
  $64 = (($63) + 800|0);
  $65 = +HEAPF64[$64>>3];
  HEAPF64[tempDoublePtr>>3]=$65;HEAP32[$vararg_buffer62>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer62+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((1456|0),($vararg_buffer62|0))|0);
  $66 = $0;
  $67 = (($66) + 808|0);
  $68 = +HEAPF64[$67>>3];
  HEAPF64[tempDoublePtr>>3]=$68;HEAP32[$vararg_buffer65>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer65+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((1480|0),($vararg_buffer65|0))|0);
  $69 = $0;
  $70 = (($69) + 2416|0);
  $71 = HEAP32[$70>>2]|0;
  HEAP32[$vararg_buffer68>>2] = $71;
  (_printf((1504|0),($vararg_buffer68|0))|0);
  (_printf((1544|0),($vararg_buffer71|0))|0);
  $i = 0;
  while(1) {
   $72 = $i;
   $73 = $0;
   $74 = (($73) + 2416|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ($72|0)<($75|0);
   if (!($76)) {
    break;
   }
   $77 = $i;
   $78 = $0;
   $79 = (($78) + 816|0);
   $80 = (($79) + ($77<<2)|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $i;
   $83 = $0;
   $84 = (($83) + 1616|0);
   $85 = (($84) + ($82<<2)|0);
   $86 = HEAP32[$85>>2]|0;
   HEAP32[$vararg_buffer73>>2] = $81;
   $vararg_ptr76 = (($vararg_buffer73) + 4|0);
   HEAP32[$vararg_ptr76>>2] = $86;
   (_printf((1568|0),($vararg_buffer73|0))|0);
   $87 = $i;
   $88 = (($87) + 1)|0;
   $i = $88;
  }
  $89 = $0;
  $90 = (($89) + 2420|0);
  $91 = HEAP32[$90>>2]|0;
  HEAP32[$vararg_buffer77>>2] = $91;
  (_printf((1584|0),($vararg_buffer77|0))|0);
  $92 = $0;
  $93 = (($92) + 2424|0);
  $94 = +HEAPF64[$93>>3];
  HEAPF64[tempDoublePtr>>3]=$94;HEAP32[$vararg_buffer80>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer80+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((1608|0),($vararg_buffer80|0))|0);
  $95 = $0;
  $96 = (($95) + 2432|0);
  $97 = +HEAPF64[$96>>3];
  HEAPF64[tempDoublePtr>>3]=$97;HEAP32[$vararg_buffer83>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer83+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((1632|0),($vararg_buffer83|0))|0);
  $98 = $0;
  $99 = (($98) + 2440|0);
  $100 = +HEAPF64[$99>>3];
  HEAPF64[tempDoublePtr>>3]=$100;HEAP32[$vararg_buffer86>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer86+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((1656|0),($vararg_buffer86|0))|0);
  $101 = $0;
  $102 = (($101) + 2448|0);
  $103 = +HEAPF64[$102>>3];
  HEAPF64[tempDoublePtr>>3]=$103;HEAP32[$vararg_buffer89>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer89+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((1680|0),($vararg_buffer89|0))|0);
  $104 = $0;
  $105 = (($104) + 2456|0);
  $106 = +HEAPF64[$105>>3];
  HEAPF64[tempDoublePtr>>3]=$106;HEAP32[$vararg_buffer92>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer92+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((1720|0),($vararg_buffer92|0))|0);
  $107 = $0;
  $108 = (($107) + 2464|0);
  $109 = +HEAPF64[$108>>3];
  HEAPF64[tempDoublePtr>>3]=$109;HEAP32[$vararg_buffer95>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer95+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((1760|0),($vararg_buffer95|0))|0);
  $110 = $0;
  $111 = (($110) + 2472|0);
  $112 = +HEAPF64[$111>>3];
  HEAPF64[tempDoublePtr>>3]=$112;HEAP32[$vararg_buffer98>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer98+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((1784|0),($vararg_buffer98|0))|0);
  $113 = $0;
  $114 = (($113) + 2488|0);
  $115 = +HEAPF64[$114>>3];
  HEAPF64[tempDoublePtr>>3]=$115;HEAP32[$vararg_buffer101>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer101+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((1808|0),($vararg_buffer101|0))|0);
  $116 = $0;
  $117 = (($116) + 2480|0);
  $118 = +HEAPF64[$117>>3];
  HEAPF64[tempDoublePtr>>3]=$118;HEAP32[$vararg_buffer104>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer104+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((1832|0),($vararg_buffer104|0))|0);
  $119 = $0;
  $120 = (($119) + 2496|0);
  $121 = +HEAPF64[$120>>3];
  HEAPF64[tempDoublePtr>>3]=$121;HEAP32[$vararg_buffer107>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer107+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((1856|0),($vararg_buffer107|0))|0);
  $122 = $0;
  $123 = (($122) + 2640|0);
  $124 = HEAP32[$123>>2]|0;
  HEAP32[$vararg_buffer110>>2] = $124;
  (_printf((1880|0),($vararg_buffer110|0))|0);
  $125 = $0;
  $126 = (($125) + 2644|0);
  $127 = HEAP32[$126>>2]|0;
  HEAP32[$vararg_buffer113>>2] = $127;
  (_printf((1920|0),($vararg_buffer113|0))|0);
  $128 = $0;
  $129 = (($128) + 2648|0);
  $130 = HEAP32[$129>>2]|0;
  HEAP32[$vararg_buffer116>>2] = $130;
  (_printf((1960|0),($vararg_buffer116|0))|0);
  $131 = $0;
  $132 = (($131) + 2652|0);
  $133 = HEAP32[$132>>2]|0;
  HEAP32[$vararg_buffer119>>2] = $133;
  (_printf((2000|0),($vararg_buffer119|0))|0);
  $134 = $0;
  $135 = (($134) + 2656|0);
  $136 = HEAP32[$135>>2]|0;
  HEAP32[$vararg_buffer122>>2] = $136;
  (_printf((2040|0),($vararg_buffer122|0))|0);
  (_printf((2056|0),($vararg_buffer125|0))|0);
  $137 = $0;
  $138 = (($137) + 2520|0);
  $139 = +HEAPF64[$138>>3];
  HEAPF64[tempDoublePtr>>3]=$139;HEAP32[$vararg_buffer127>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer127+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2088|0),($vararg_buffer127|0))|0);
  $140 = $0;
  $141 = (($140) + 2520|0);
  $142 = (($141) + 8|0);
  $143 = +HEAPF64[$142>>3];
  HEAPF64[tempDoublePtr>>3]=$143;HEAP32[$vararg_buffer130>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer130+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2112|0),($vararg_buffer130|0))|0);
  $144 = $0;
  $145 = (($144) + 2520|0);
  $146 = (($145) + 16|0);
  $147 = +HEAPF64[$146>>3];
  HEAPF64[tempDoublePtr>>3]=$147;HEAP32[$vararg_buffer133>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer133+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2136|0),($vararg_buffer133|0))|0);
  $148 = $0;
  $149 = (($148) + 2520|0);
  $150 = (($149) + 24|0);
  $151 = +HEAPF64[$150>>3];
  HEAPF64[tempDoublePtr>>3]=$151;HEAP32[$vararg_buffer136>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer136+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2152|0),($vararg_buffer136|0))|0);
  $152 = $0;
  $153 = (($152) + 2520|0);
  $154 = (($153) + 40|0);
  $155 = +HEAPF64[$154>>3];
  HEAPF64[tempDoublePtr>>3]=$155;HEAP32[$vararg_buffer139>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer139+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2176|0),($vararg_buffer139|0))|0);
  $156 = $0;
  $157 = (($156) + 2520|0);
  $158 = (($157) + 32|0);
  $159 = +HEAPF64[$158>>3];
  HEAPF64[tempDoublePtr>>3]=$159;HEAP32[$vararg_buffer142>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer142+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2200|0),($vararg_buffer142|0))|0);
  $160 = $0;
  $161 = (($160) + 2520|0);
  $162 = (($161) + 48|0);
  $163 = +HEAPF64[$162>>3];
  HEAPF64[tempDoublePtr>>3]=$163;HEAP32[$vararg_buffer145>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer145+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2224|0),($vararg_buffer145|0))|0);
  $164 = $0;
  $165 = (($164) + 2520|0);
  $166 = (($165) + 64|0);
  $167 = +HEAPF64[$166>>3];
  HEAPF64[tempDoublePtr>>3]=$167;HEAP32[$vararg_buffer148>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer148+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2248|0),($vararg_buffer148|0))|0);
  $168 = $0;
  $169 = (($168) + 2520|0);
  $170 = (($169) + 72|0);
  $171 = +HEAPF64[$170>>3];
  HEAPF64[tempDoublePtr>>3]=$171;HEAP32[$vararg_buffer151>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer151+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2272|0),($vararg_buffer151|0))|0);
  $172 = $0;
  $173 = (($172) + 2520|0);
  $174 = (($173) + 80|0);
  $175 = +HEAPF64[$174>>3];
  HEAPF64[tempDoublePtr>>3]=$175;HEAP32[$vararg_buffer154>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer154+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2296|0),($vararg_buffer154|0))|0);
  $176 = $0;
  $177 = (($176) + 2520|0);
  $178 = (($177) + 88|0);
  $179 = +HEAPF64[$178>>3];
  HEAPF64[tempDoublePtr>>3]=$179;HEAP32[$vararg_buffer157>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer157+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2320|0),($vararg_buffer157|0))|0);
  $180 = $0;
  $181 = (($180) + 2520|0);
  $182 = (($181) + 96|0);
  $183 = +HEAPF64[$182>>3];
  HEAPF64[tempDoublePtr>>3]=$183;HEAP32[$vararg_buffer160>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer160+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2344|0),($vararg_buffer160|0))|0);
  $184 = $0;
  $185 = (($184) + 2520|0);
  $186 = (($185) + 104|0);
  $187 = +HEAPF64[$186>>3];
  HEAPF64[tempDoublePtr>>3]=$187;HEAP32[$vararg_buffer163>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer163+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2368|0),($vararg_buffer163|0))|0);
  $188 = $0;
  $189 = (($188) + 2520|0);
  $190 = (($189) + 112|0);
  $191 = +HEAPF64[$190>>3];
  HEAPF64[tempDoublePtr>>3]=$191;HEAP32[$vararg_buffer166>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer166+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2400|0),($vararg_buffer166|0))|0);
  (_printf((2432|0),($vararg_buffer169|0))|0);
  (_printf((2456|0),($vararg_buffer171|0))|0);
  (_printf((896|0),($vararg_buffer173|0))|0);
  (_printf((2464|0),($vararg_buffer175|0))|0);
  (_printf((2488|0),($vararg_buffer177|0))|0);
  $192 = $0;
  $193 = (($192) + 48|0);
  $194 = (($193) + 8|0);
  $195 = (($194) + 128|0);
  $196 = +HEAPF64[$195>>3];
  HEAPF64[tempDoublePtr>>3]=$196;HEAP32[$vararg_buffer179>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer179+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2512|0),($vararg_buffer179|0))|0);
  $197 = $0;
  $198 = (($197) + 48|0);
  $199 = (($198) + 8|0);
  $200 = (($199) + 128|0);
  $201 = +HEAPF64[$200>>3];
  HEAPF64[tempDoublePtr>>3]=$201;HEAP32[$vararg_buffer182>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer182+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2512|0),($vararg_buffer182|0))|0);
  $202 = $0;
  $203 = (($202) + 48|0);
  $204 = (($203) + 8|0);
  $205 = (($204) + 136|0);
  $206 = +HEAPF64[$205>>3];
  HEAPF64[tempDoublePtr>>3]=$206;HEAP32[$vararg_buffer185>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer185+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2528|0),($vararg_buffer185|0))|0);
  $207 = $0;
  $208 = (($207) + 48|0);
  $209 = (($208) + 8|0);
  $210 = (($209) + 48|0);
  $211 = +HEAPF64[$210>>3];
  HEAPF64[tempDoublePtr>>3]=$211;HEAP32[$vararg_buffer188>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer188+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2544|0),($vararg_buffer188|0))|0);
  $212 = $0;
  $213 = (($212) + 48|0);
  $214 = (($213) + 8|0);
  $215 = (($214) + 56|0);
  $216 = +HEAPF64[$215>>3];
  HEAPF64[tempDoublePtr>>3]=$216;HEAP32[$vararg_buffer191>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer191+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2568|0),($vararg_buffer191|0))|0);
  $217 = $0;
  $218 = (($217) + 48|0);
  $219 = (($218) + 8|0);
  $220 = +HEAPF64[$219>>3];
  HEAPF64[tempDoublePtr>>3]=$220;HEAP32[$vararg_buffer194>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer194+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2592|0),($vararg_buffer194|0))|0);
  $221 = $0;
  $222 = (($221) + 48|0);
  $223 = (($222) + 8|0);
  $224 = (($223) + 16|0);
  $225 = +HEAPF64[$224>>3];
  HEAPF64[tempDoublePtr>>3]=$225;HEAP32[$vararg_buffer197>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer197+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2608|0),($vararg_buffer197|0))|0);
  $226 = $0;
  $227 = (($226) + 48|0);
  $228 = (($227) + 8|0);
  $229 = (($228) + 8|0);
  $230 = +HEAPF64[$229>>3];
  HEAPF64[tempDoublePtr>>3]=$230;HEAP32[$vararg_buffer200>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer200+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2624|0),($vararg_buffer200|0))|0);
  $231 = $0;
  $232 = (($231) + 48|0);
  $233 = (($232) + 8|0);
  $234 = (($233) + 24|0);
  $235 = +HEAPF64[$234>>3];
  HEAPF64[tempDoublePtr>>3]=$235;HEAP32[$vararg_buffer203>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer203+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2648|0),($vararg_buffer203|0))|0);
  $236 = $0;
  $237 = (($236) + 48|0);
  $238 = (($237) + 8|0);
  $239 = (($238) + 64|0);
  $240 = +HEAPF64[$239>>3];
  HEAPF64[tempDoublePtr>>3]=$240;HEAP32[$vararg_buffer206>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer206+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2672|0),($vararg_buffer206|0))|0);
  $241 = $0;
  $242 = (($241) + 48|0);
  $243 = (($242) + 8|0);
  $244 = (($243) + 104|0);
  $245 = +HEAPF64[$244>>3];
  HEAPF64[tempDoublePtr>>3]=$245;HEAP32[$vararg_buffer209>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer209+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2688|0),($vararg_buffer209|0))|0);
  $246 = $0;
  $247 = (($246) + 48|0);
  $248 = (($247) + 8|0);
  $249 = (($248) + 80|0);
  $250 = +HEAPF64[$249>>3];
  HEAPF64[tempDoublePtr>>3]=$250;HEAP32[$vararg_buffer212>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer212+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2704|0),($vararg_buffer212|0))|0);
  $251 = $0;
  $252 = (($251) + 48|0);
  $253 = (($252) + 8|0);
  $254 = (($253) + 72|0);
  $255 = +HEAPF64[$254>>3];
  HEAPF64[tempDoublePtr>>3]=$255;HEAP32[$vararg_buffer215>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer215+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2720|0),($vararg_buffer215|0))|0);
  $256 = $0;
  $257 = (($256) + 48|0);
  $258 = (($257) + 8|0);
  $259 = (($258) + 112|0);
  $260 = +HEAPF64[$259>>3];
  HEAPF64[tempDoublePtr>>3]=$260;HEAP32[$vararg_buffer218>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer218+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2736|0),($vararg_buffer218|0))|0);
  $261 = $0;
  $262 = (($261) + 48|0);
  $263 = (($262) + 8|0);
  $264 = (($263) + 32|0);
  $265 = +HEAPF64[$264>>3];
  HEAPF64[tempDoublePtr>>3]=$265;HEAP32[$vararg_buffer221>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer221+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2752|0),($vararg_buffer221|0))|0);
  $266 = $0;
  $267 = (($266) + 48|0);
  $268 = (($267) + 8|0);
  $269 = (($268) + 96|0);
  $270 = +HEAPF64[$269>>3];
  HEAPF64[tempDoublePtr>>3]=$270;HEAP32[$vararg_buffer224>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer224+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2768|0),($vararg_buffer224|0))|0);
  $271 = $0;
  $272 = (($271) + 48|0);
  $273 = (($272) + 8|0);
  $274 = (($273) + 40|0);
  $275 = +HEAPF64[$274>>3];
  HEAPF64[tempDoublePtr>>3]=$275;HEAP32[$vararg_buffer227>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer227+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2784|0),($vararg_buffer227|0))|0);
  $276 = $0;
  $277 = (($276) + 48|0);
  $278 = (($277) + 8|0);
  $279 = (($278) + 88|0);
  $280 = +HEAPF64[$279>>3];
  HEAPF64[tempDoublePtr>>3]=$280;HEAP32[$vararg_buffer230>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer230+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2808|0),($vararg_buffer230|0))|0);
  $281 = $0;
  $282 = (($281) + 48|0);
  $283 = (($282) + 8|0);
  $284 = (($283) + 144|0);
  $285 = +HEAPF64[$284>>3];
  HEAPF64[tempDoublePtr>>3]=$285;HEAP32[$vararg_buffer233>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer233+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2824|0),($vararg_buffer233|0))|0);
  $286 = $0;
  $287 = (($286) + 48|0);
  $288 = (($287) + 8|0);
  $289 = (($288) + 152|0);
  $290 = +HEAPF64[$289>>3];
  HEAPF64[tempDoublePtr>>3]=$290;HEAP32[$vararg_buffer236>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer236+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2848|0),($vararg_buffer236|0))|0);
  (_printf((2880|0),($vararg_buffer239|0))|0);
  $291 = $0;
  $292 = (($291) + 48|0);
  $293 = (($292) + 168|0);
  $294 = +HEAPF64[$293>>3];
  HEAPF64[tempDoublePtr>>3]=$294;HEAP32[$vararg_buffer241>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer241+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2904|0),($vararg_buffer241|0))|0);
  $295 = $0;
  $296 = (($295) + 48|0);
  $297 = (($296) + 176|0);
  $298 = +HEAPF64[$297>>3];
  HEAPF64[tempDoublePtr>>3]=$298;HEAP32[$vararg_buffer244>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer244+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2920|0),($vararg_buffer244|0))|0);
  $299 = $0;
  $300 = (($299) + 48|0);
  $301 = (($300) + 184|0);
  $302 = +HEAPF64[$301>>3];
  HEAPF64[tempDoublePtr>>3]=$302;HEAP32[$vararg_buffer247>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer247+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2936|0),($vararg_buffer247|0))|0);
  $303 = $0;
  $304 = (($303) + 48|0);
  $305 = (($304) + 192|0);
  $306 = +HEAPF64[$305>>3];
  HEAPF64[tempDoublePtr>>3]=$306;HEAP32[$vararg_buffer250>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer250+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2952|0),($vararg_buffer250|0))|0);
  $307 = $0;
  $308 = (($307) + 48|0);
  $309 = (($308) + 200|0);
  $310 = +HEAPF64[$309>>3];
  HEAPF64[tempDoublePtr>>3]=$310;HEAP32[$vararg_buffer253>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer253+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2976|0),($vararg_buffer253|0))|0);
  $311 = $0;
  $312 = (($311) + 48|0);
  $313 = (($312) + 208|0);
  $314 = +HEAPF64[$313>>3];
  HEAPF64[tempDoublePtr>>3]=$314;HEAP32[$vararg_buffer256>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer256+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2992|0),($vararg_buffer256|0))|0);
  $315 = $0;
  $316 = (($315) + 48|0);
  $317 = (($316) + 224|0);
  $318 = +HEAPF64[$317>>3];
  HEAPF64[tempDoublePtr>>3]=$318;HEAP32[$vararg_buffer259>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer259+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3008|0),($vararg_buffer259|0))|0);
  $319 = $0;
  $320 = (($319) + 48|0);
  $321 = (($320) + 232|0);
  $322 = +HEAPF64[$321>>3];
  HEAPF64[tempDoublePtr>>3]=$322;HEAP32[$vararg_buffer262>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer262+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3032|0),($vararg_buffer262|0))|0);
  $323 = $0;
  $324 = (($323) + 48|0);
  $325 = (($324) + 240|0);
  $326 = +HEAPF64[$325>>3];
  HEAPF64[tempDoublePtr>>3]=$326;HEAP32[$vararg_buffer265>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer265+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3048|0),($vararg_buffer265|0))|0);
  $327 = $0;
  $328 = (($327) + 48|0);
  $329 = (($328) + 248|0);
  $330 = HEAP32[$329>>2]|0;
  HEAP32[$vararg_buffer268>>2] = $330;
  (_printf((3064|0),($vararg_buffer268|0))|0);
  $331 = $0;
  $332 = (($331) + 48|0);
  $333 = (($332) + 252|0);
  $334 = HEAP32[$333>>2]|0;
  HEAP32[$vararg_buffer271>>2] = $334;
  (_printf((3088|0),($vararg_buffer271|0))|0);
  $335 = $0;
  $336 = (($335) + 48|0);
  $337 = (($336) + 256|0);
  $338 = HEAP32[$337>>2]|0;
  HEAP32[$vararg_buffer274>>2] = $338;
  (_printf((3104|0),($vararg_buffer274|0))|0);
  $339 = $0;
  $340 = (($339) + 48|0);
  $341 = (($340) + 260|0);
  $342 = HEAP32[$341>>2]|0;
  HEAP32[$vararg_buffer277>>2] = $342;
  (_printf((3120|0),($vararg_buffer277|0))|0);
  $343 = $0;
  $344 = (($343) + 48|0);
  $345 = (($344) + 264|0);
  $346 = HEAP32[$345>>2]|0;
  HEAP32[$vararg_buffer280>>2] = $346;
  (_printf((3136|0),($vararg_buffer280|0))|0);
  $347 = $0;
  $348 = (($347) + 48|0);
  $349 = (($348) + 268|0);
  $350 = HEAP32[$349>>2]|0;
  HEAP32[$vararg_buffer283>>2] = $350;
  (_printf((3152|0),($vararg_buffer283|0))|0);
  $351 = $0;
  $352 = (($351) + 48|0);
  $353 = (($352) + 272|0);
  $354 = HEAP32[$353>>2]|0;
  HEAP32[$vararg_buffer286>>2] = $354;
  (_printf((3176|0),($vararg_buffer286|0))|0);
  $355 = $0;
  $356 = (($355) + 48|0);
  $357 = (($356) + 280|0);
  $358 = +HEAPF64[$357>>3];
  HEAPF64[tempDoublePtr>>3]=$358;HEAP32[$vararg_buffer289>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer289+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3192|0),($vararg_buffer289|0))|0);
  $359 = $0;
  $360 = (($359) + 48|0);
  $361 = (($360) + 288|0);
  $362 = +HEAPF64[$361>>3];
  HEAPF64[tempDoublePtr>>3]=$362;HEAP32[$vararg_buffer292>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer292+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3216|0),($vararg_buffer292|0))|0);
  $363 = $0;
  $364 = (($363) + 48|0);
  $365 = (($364) + 296|0);
  $366 = +HEAPF64[$365>>3];
  HEAPF64[tempDoublePtr>>3]=$366;HEAP32[$vararg_buffer295>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer295+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3240|0),($vararg_buffer295|0))|0);
  $367 = $0;
  $368 = (($367) + 48|0);
  $369 = (($368) + 304|0);
  $370 = +HEAPF64[$369>>3];
  HEAPF64[tempDoublePtr>>3]=$370;HEAP32[$vararg_buffer298>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer298+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3264|0),($vararg_buffer298|0))|0);
  $371 = $0;
  $372 = (($371) + 48|0);
  $373 = (($372) + 312|0);
  $374 = +HEAPF64[$373>>3];
  HEAPF64[tempDoublePtr>>3]=$374;HEAP32[$vararg_buffer301>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer301+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3288|0),($vararg_buffer301|0))|0);
  $375 = $0;
  $376 = (($375) + 48|0);
  $377 = (($376) + 320|0);
  $378 = +HEAPF64[$377>>3];
  HEAPF64[tempDoublePtr>>3]=$378;HEAP32[$vararg_buffer304>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer304+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3304|0),($vararg_buffer304|0))|0);
  $379 = $0;
  $380 = (($379) + 48|0);
  $381 = (($380) + 328|0);
  $382 = +HEAPF64[$381>>3];
  HEAPF64[tempDoublePtr>>3]=$382;HEAP32[$vararg_buffer307>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer307+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3328|0),($vararg_buffer307|0))|0);
  $383 = $0;
  $384 = (($383) + 48|0);
  $385 = (($384) + 336|0);
  $386 = +HEAPF64[$385>>3];
  HEAPF64[tempDoublePtr>>3]=$386;HEAP32[$vararg_buffer310>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer310+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3360|0),($vararg_buffer310|0))|0);
  (_printf((3392|0),($vararg_buffer313|0))|0);
  (_printf((3416|0),($vararg_buffer315|0))|0);
  (_printf((3456|0),($vararg_buffer317|0))|0);
  $387 = $0;
  $388 = (($387) + 400|0);
  $389 = (($388) + 8|0);
  $390 = (($389) + 128|0);
  $391 = +HEAPF64[$390>>3];
  HEAPF64[tempDoublePtr>>3]=$391;HEAP32[$vararg_buffer319>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer319+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3512|0),($vararg_buffer319|0))|0);
  $392 = $0;
  $393 = (($392) + 400|0);
  $394 = (($393) + 8|0);
  $395 = (($394) + 136|0);
  $396 = +HEAPF64[$395>>3];
  HEAPF64[tempDoublePtr>>3]=$396;HEAP32[$vararg_buffer322>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer322+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3528|0),($vararg_buffer322|0))|0);
  $397 = $0;
  $398 = (($397) + 400|0);
  $399 = (($398) + 8|0);
  $400 = (($399) + 48|0);
  $401 = +HEAPF64[$400>>3];
  HEAPF64[tempDoublePtr>>3]=$401;HEAP32[$vararg_buffer325>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer325+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3544|0),($vararg_buffer325|0))|0);
  $402 = $0;
  $403 = (($402) + 400|0);
  $404 = (($403) + 8|0);
  $405 = (($404) + 56|0);
  $406 = +HEAPF64[$405>>3];
  HEAPF64[tempDoublePtr>>3]=$406;HEAP32[$vararg_buffer328>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer328+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3568|0),($vararg_buffer328|0))|0);
  $407 = $0;
  $408 = (($407) + 400|0);
  $409 = (($408) + 8|0);
  $410 = +HEAPF64[$409>>3];
  HEAPF64[tempDoublePtr>>3]=$410;HEAP32[$vararg_buffer331>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer331+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2152|0),($vararg_buffer331|0))|0);
  $411 = $0;
  $412 = (($411) + 400|0);
  $413 = (($412) + 8|0);
  $414 = (($413) + 16|0);
  $415 = +HEAPF64[$414>>3];
  HEAPF64[tempDoublePtr>>3]=$415;HEAP32[$vararg_buffer334>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer334+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2176|0),($vararg_buffer334|0))|0);
  $416 = $0;
  $417 = (($416) + 400|0);
  $418 = (($417) + 8|0);
  $419 = (($418) + 8|0);
  $420 = +HEAPF64[$419>>3];
  HEAPF64[tempDoublePtr>>3]=$420;HEAP32[$vararg_buffer337>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer337+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2200|0),($vararg_buffer337|0))|0);
  $421 = $0;
  $422 = (($421) + 400|0);
  $423 = (($422) + 8|0);
  $424 = (($423) + 24|0);
  $425 = +HEAPF64[$424>>3];
  HEAPF64[tempDoublePtr>>3]=$425;HEAP32[$vararg_buffer340>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer340+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2224|0),($vararg_buffer340|0))|0);
  $426 = $0;
  $427 = (($426) + 400|0);
  $428 = (($427) + 8|0);
  $429 = (($428) + 64|0);
  $430 = +HEAPF64[$429>>3];
  HEAPF64[tempDoublePtr>>3]=$430;HEAP32[$vararg_buffer343>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer343+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3592|0),($vararg_buffer343|0))|0);
  $431 = $0;
  $432 = (($431) + 400|0);
  $433 = (($432) + 8|0);
  $434 = (($433) + 104|0);
  $435 = +HEAPF64[$434>>3];
  HEAPF64[tempDoublePtr>>3]=$435;HEAP32[$vararg_buffer346>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer346+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((2344|0),($vararg_buffer346|0))|0);
  $436 = $0;
  $437 = (($436) + 400|0);
  $438 = (($437) + 8|0);
  $439 = (($438) + 80|0);
  $440 = +HEAPF64[$439>>3];
  HEAPF64[tempDoublePtr>>3]=$440;HEAP32[$vararg_buffer349>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer349+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3608|0),($vararg_buffer349|0))|0);
  $441 = $0;
  $442 = (($441) + 400|0);
  $443 = (($442) + 8|0);
  $444 = (($443) + 72|0);
  $445 = +HEAPF64[$444>>3];
  HEAPF64[tempDoublePtr>>3]=$445;HEAP32[$vararg_buffer352>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer352+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3632|0),($vararg_buffer352|0))|0);
  $446 = $0;
  $447 = (($446) + 400|0);
  $448 = (($447) + 8|0);
  $449 = (($448) + 112|0);
  $450 = +HEAPF64[$449>>3];
  HEAPF64[tempDoublePtr>>3]=$450;HEAP32[$vararg_buffer355>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer355+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3656|0),($vararg_buffer355|0))|0);
  $451 = $0;
  $452 = (($451) + 400|0);
  $453 = (($452) + 8|0);
  $454 = (($453) + 32|0);
  $455 = +HEAPF64[$454>>3];
  HEAPF64[tempDoublePtr>>3]=$455;HEAP32[$vararg_buffer358>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer358+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3680|0),($vararg_buffer358|0))|0);
  $456 = $0;
  $457 = (($456) + 400|0);
  $458 = (($457) + 8|0);
  $459 = (($458) + 96|0);
  $460 = +HEAPF64[$459>>3];
  HEAPF64[tempDoublePtr>>3]=$460;HEAP32[$vararg_buffer361>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer361+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3704|0),($vararg_buffer361|0))|0);
  $461 = $0;
  $462 = (($461) + 400|0);
  $463 = (($462) + 8|0);
  $464 = (($463) + 40|0);
  $465 = +HEAPF64[$464>>3];
  HEAPF64[tempDoublePtr>>3]=$465;HEAP32[$vararg_buffer364>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer364+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3728|0),($vararg_buffer364|0))|0);
  $466 = $0;
  $467 = (($466) + 400|0);
  $468 = (($467) + 8|0);
  $469 = (($468) + 88|0);
  $470 = +HEAPF64[$469>>3];
  HEAPF64[tempDoublePtr>>3]=$470;HEAP32[$vararg_buffer367>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer367+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3752|0),($vararg_buffer367|0))|0);
  (_printf((3768|0),($vararg_buffer370|0))|0);
  $471 = $0;
  $472 = (($471) + 400|0);
  $473 = (($472) + 168|0);
  $474 = +HEAPF64[$473>>3];
  HEAPF64[tempDoublePtr>>3]=$474;HEAP32[$vararg_buffer372>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer372+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3800|0),($vararg_buffer372|0))|0);
  $475 = $0;
  $476 = (($475) + 400|0);
  $477 = (($476) + 176|0);
  $478 = +HEAPF64[$477>>3];
  HEAPF64[tempDoublePtr>>3]=$478;HEAP32[$vararg_buffer375>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer375+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3816|0),($vararg_buffer375|0))|0);
  $479 = $0;
  $480 = (($479) + 400|0);
  $481 = (($480) + 184|0);
  $482 = +HEAPF64[$481>>3];
  HEAPF64[tempDoublePtr>>3]=$482;HEAP32[$vararg_buffer378>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer378+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3832|0),($vararg_buffer378|0))|0);
  $483 = $0;
  $484 = (($483) + 400|0);
  $485 = (($484) + 192|0);
  $486 = +HEAPF64[$485>>3];
  HEAPF64[tempDoublePtr>>3]=$486;HEAP32[$vararg_buffer381>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer381+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3848|0),($vararg_buffer381|0))|0);
  $487 = $0;
  $488 = (($487) + 400|0);
  $489 = (($488) + 200|0);
  $490 = +HEAPF64[$489>>3];
  HEAPF64[tempDoublePtr>>3]=$490;HEAP32[$vararg_buffer384>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer384+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3872|0),($vararg_buffer384|0))|0);
  $491 = $0;
  $492 = (($491) + 400|0);
  $493 = (($492) + 208|0);
  $494 = +HEAPF64[$493>>3];
  HEAPF64[tempDoublePtr>>3]=$494;HEAP32[$vararg_buffer387>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer387+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3888|0),($vararg_buffer387|0))|0);
  $495 = $0;
  $496 = (($495) + 400|0);
  $497 = (($496) + 224|0);
  $498 = +HEAPF64[$497>>3];
  HEAPF64[tempDoublePtr>>3]=$498;HEAP32[$vararg_buffer390>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer390+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3904|0),($vararg_buffer390|0))|0);
  $499 = $0;
  $500 = (($499) + 400|0);
  $501 = (($500) + 232|0);
  $502 = +HEAPF64[$501>>3];
  HEAPF64[tempDoublePtr>>3]=$502;HEAP32[$vararg_buffer393>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer393+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3928|0),($vararg_buffer393|0))|0);
  $503 = $0;
  $504 = (($503) + 400|0);
  $505 = (($504) + 240|0);
  $506 = +HEAPF64[$505>>3];
  HEAPF64[tempDoublePtr>>3]=$506;HEAP32[$vararg_buffer396>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer396+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((3944|0),($vararg_buffer396|0))|0);
  $507 = $0;
  $508 = (($507) + 400|0);
  $509 = (($508) + 248|0);
  $510 = HEAP32[$509>>2]|0;
  HEAP32[$vararg_buffer399>>2] = $510;
  (_printf((3960|0),($vararg_buffer399|0))|0);
  $511 = $0;
  $512 = (($511) + 400|0);
  $513 = (($512) + 252|0);
  $514 = HEAP32[$513>>2]|0;
  HEAP32[$vararg_buffer402>>2] = $514;
  (_printf((3984|0),($vararg_buffer402|0))|0);
  $515 = $0;
  $516 = (($515) + 400|0);
  $517 = (($516) + 256|0);
  $518 = HEAP32[$517>>2]|0;
  HEAP32[$vararg_buffer405>>2] = $518;
  (_printf((4000|0),($vararg_buffer405|0))|0);
  $519 = $0;
  $520 = (($519) + 400|0);
  $521 = (($520) + 260|0);
  $522 = HEAP32[$521>>2]|0;
  HEAP32[$vararg_buffer408>>2] = $522;
  (_printf((4016|0),($vararg_buffer408|0))|0);
  $523 = $0;
  $524 = (($523) + 400|0);
  $525 = (($524) + 264|0);
  $526 = HEAP32[$525>>2]|0;
  HEAP32[$vararg_buffer411>>2] = $526;
  (_printf((4032|0),($vararg_buffer411|0))|0);
  $527 = $0;
  $528 = (($527) + 400|0);
  $529 = (($528) + 268|0);
  $530 = HEAP32[$529>>2]|0;
  HEAP32[$vararg_buffer414>>2] = $530;
  (_printf((4056|0),($vararg_buffer414|0))|0);
  $531 = $0;
  $532 = (($531) + 400|0);
  $533 = (($532) + 272|0);
  $534 = HEAP32[$533>>2]|0;
  HEAP32[$vararg_buffer417>>2] = $534;
  (_printf((4080|0),($vararg_buffer417|0))|0);
  $535 = $0;
  $536 = (($535) + 400|0);
  $537 = (($536) + 280|0);
  $538 = +HEAPF64[$537>>3];
  HEAPF64[tempDoublePtr>>3]=$538;HEAP32[$vararg_buffer420>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer420+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((4104|0),($vararg_buffer420|0))|0);
  $539 = $0;
  $540 = (($539) + 400|0);
  $541 = (($540) + 288|0);
  $542 = +HEAPF64[$541>>3];
  HEAPF64[tempDoublePtr>>3]=$542;HEAP32[$vararg_buffer423>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer423+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((4128|0),($vararg_buffer423|0))|0);
  $543 = $0;
  $544 = (($543) + 400|0);
  $545 = (($544) + 320|0);
  $546 = +HEAPF64[$545>>3];
  HEAPF64[tempDoublePtr>>3]=$546;HEAP32[$vararg_buffer426>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer426+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_printf((4152|0),($vararg_buffer426|0))|0);
  (_printf((4176|0),($vararg_buffer429|0))|0);
  (_printf((4208|0),($vararg_buffer431|0))|0);
  (_printf((4216|0),($vararg_buffer433|0))|0);
  (_printf((896|0),($vararg_buffer435|0))|0);
  (_printf((4208|0),($vararg_buffer437|0))|0);
 }
 $547 = $1;
 $548 = ($547|0)!=(0|0);
 if (!($548)) {
  STACKTOP = sp;return;
 }
 (_printf((896|0),($vararg_buffer439|0))|0);
 (_printf((4240|0),($vararg_buffer441|0))|0);
 $549 = $1;
 $550 = (($549) + 8828|0);
 $551 = HEAP32[$550>>2]|0;
 $552 = ($551|0)>(0);
 if ($552) {
  $553 = $1;
  $554 = (($553) + 8828|0);
  $555 = HEAP32[$554>>2]|0;
  HEAP32[$vararg_buffer443>>2] = $555;
  (_printf((4264|0),($vararg_buffer443|0))|0);
  (_printf((4304|0),($vararg_buffer446|0))|0);
  $i = 0;
  while(1) {
   $556 = $i;
   $557 = $1;
   $558 = (($557) + 8828|0);
   $559 = HEAP32[$558>>2]|0;
   $560 = ($556|0)<($559|0);
   if (!($560)) {
    break;
   }
   $561 = $i;
   $562 = $1;
   $563 = (($562) + 8028|0);
   $564 = (($563) + ($561<<2)|0);
   $565 = HEAP32[$564>>2]|0;
   HEAP32[$vararg_buffer448>>2] = $565;
   (_printf((4344|0),($vararg_buffer448|0))|0);
   $566 = $i;
   $567 = (($566) + 1)|0;
   $i = $567;
  }
  (_printf((4352|0),($vararg_buffer451|0))|0);
 }
 $568 = $1;
 $569 = (($568) + 8832|0);
 $570 = HEAP32[$569>>2]|0;
 HEAP32[$vararg_buffer453>>2] = $570;
 (_printf((4360|0),($vararg_buffer453|0))|0);
 $571 = $1;
 $572 = (($571) + 8836|0);
 $573 = HEAP32[$572>>2]|0;
 HEAP32[$vararg_buffer456>>2] = $573;
 (_printf((4376|0),($vararg_buffer456|0))|0);
 $574 = $1;
 $575 = (($574) + 8840|0);
 $576 = HEAP32[$575>>2]|0;
 HEAP32[$vararg_buffer459>>2] = $576;
 (_printf((4392|0),($vararg_buffer459|0))|0);
 $577 = $1;
 $578 = (($577) + 8848|0);
 $579 = HEAP32[$578>>2]|0;
 HEAP32[$vararg_buffer462>>2] = $579;
 (_printf((4416|0),($vararg_buffer462|0))|0);
 $580 = $1;
 $581 = (($580) + 8852|0);
 $582 = HEAP32[$581>>2]|0;
 HEAP32[$vararg_buffer465>>2] = $582;
 (_printf((4432|0),($vararg_buffer465|0))|0);
 $583 = $1;
 $584 = (($583) + 8856|0);
 $585 = HEAP32[$584>>2]|0;
 HEAP32[$vararg_buffer468>>2] = $585;
 (_printf((4464|0),($vararg_buffer468|0))|0);
 $586 = $1;
 $587 = (($586) + 8860|0);
 $588 = HEAP32[$587>>2]|0;
 HEAP32[$vararg_buffer471>>2] = $588;
 (_printf((4480|0),($vararg_buffer471|0))|0);
 $589 = $1;
 $590 = (($589) + 8864|0);
 $591 = HEAP32[$590>>2]|0;
 HEAP32[$vararg_buffer474>>2] = $591;
 (_printf((4504|0),($vararg_buffer474|0))|0);
 $592 = $1;
 $593 = (($592) + 8868|0);
 $594 = HEAP32[$593>>2]|0;
 HEAP32[$vararg_buffer477>>2] = $594;
 (_printf((4528|0),($vararg_buffer477|0))|0);
 $595 = $1;
 $596 = (($595) + 8872|0);
 $597 = HEAP32[$596>>2]|0;
 HEAP32[$vararg_buffer480>>2] = $597;
 (_printf((4552|0),($vararg_buffer480|0))|0);
 $598 = $1;
 $599 = (($598) + 8876|0);
 $600 = HEAP32[$599>>2]|0;
 HEAP32[$vararg_buffer483>>2] = $600;
 (_printf((4576|0),($vararg_buffer483|0))|0);
 $601 = $1;
 $602 = (($601) + 8880|0);
 $603 = HEAP32[$602>>2]|0;
 HEAP32[$vararg_buffer486>>2] = $603;
 (_printf((4600|0),($vararg_buffer486|0))|0);
 $604 = $1;
 $605 = (($604) + 8884|0);
 $606 = HEAP32[$605>>2]|0;
 HEAP32[$vararg_buffer489>>2] = $606;
 (_printf((4624|0),($vararg_buffer489|0))|0);
 $607 = $1;
 $608 = (($607) + 8888|0);
 $609 = HEAP32[$608>>2]|0;
 HEAP32[$vararg_buffer492>>2] = $609;
 (_printf((4640|0),($vararg_buffer492|0))|0);
 $610 = $1;
 $611 = (($610) + 8892|0);
 $612 = HEAP32[$611>>2]|0;
 HEAP32[$vararg_buffer495>>2] = $612;
 (_printf((4664|0),($vararg_buffer495|0))|0);
 $613 = $1;
 $614 = (($613) + 8896|0);
 $615 = HEAP32[$614>>2]|0;
 HEAP32[$vararg_buffer498>>2] = $615;
 (_printf((4688|0),($vararg_buffer498|0))|0);
 $616 = $1;
 $617 = (($616) + 8900|0);
 $618 = HEAP32[$617>>2]|0;
 HEAP32[$vararg_buffer501>>2] = $618;
 (_printf((4712|0),($vararg_buffer501|0))|0);
 $619 = $1;
 $620 = (($619) + 8904|0);
 $621 = HEAP32[$620>>2]|0;
 HEAP32[$vararg_buffer504>>2] = $621;
 (_printf((4736|0),($vararg_buffer504|0))|0);
 $622 = $1;
 $623 = (($622) + 8908|0);
 $624 = HEAP32[$623>>2]|0;
 HEAP32[$vararg_buffer507>>2] = $624;
 (_printf((4760|0),($vararg_buffer507|0))|0);
 (_printf((4784|0),($vararg_buffer510|0))|0);
 (_printf((896|0),($vararg_buffer512|0))|0);
 (_printf((4208|0),($vararg_buffer514|0))|0);
 STACKTOP = sp;return;
}
function __ZL19pr_append_new_chunkP13pr_append_strPKc($x,$s) {
 $x = $x|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = $x;
 $1 = $s;
 $2 = $0;
 $3 = (0|0)!=($2|0);
 if (!($3)) {
  $4 = HEAP32[_stderr>>2]|0;
  $5 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 56;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 5667;
  $vararg_ptr3 = (($vararg_buffer) + 12|0);
  HEAP32[$vararg_ptr3>>2] = 856;
  (_fprintf(($4|0),(16|0),($vararg_buffer|0))|0);
  _abort();
  // unreachable;
 }
 $6 = $1;
 $7 = (0|0)==($6|0);
 if ($7) {
  STACKTOP = sp;return;
 } else {
  $8 = $0;
  $9 = $1;
  __ZL15pr_append_w_sepP13pr_append_strPKcS2_($8,864,$9);
  STACKTOP = sp;return;
 }
}
function __ZL16free_pair_memoryi($rev_num_elem) {
 $rev_num_elem = $rev_num_elem|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i1$i$i = 0, $__i1$i$i1 = 0, $hmap = 0, $i = 0, $it = 0, $pp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $__i1$i$i1 = sp + 24|0;
 $2 = sp + 8|0;
 $12 = sp + 200|0;
 $14 = sp + 192|0;
 $16 = sp + 184|0;
 $__i1$i$i = sp;
 $33 = sp + 16|0;
 $42 = sp + 56|0;
 $it = sp + 108|0;
 $48 = sp + 120|0;
 $49 = sp + 124|0;
 $50 = sp + 128|0;
 $47 = $rev_num_elem;
 $46 = $it;
 $53 = $46;
 $45 = $53;
 $54 = $45;
 $44 = $54;
 $55 = $44;
 $43 = $55;
 $56 = HEAP32[12840>>2]|0;
 _free($56);
 $i = 0;
 while(1) {
  $57 = $i;
  $58 = $47;
  $59 = ($57|0)<($58|0);
  if (!($59)) {
   label = 19;
   break;
  }
  $60 = $i;
  $61 = HEAP32[12832>>2]|0;
  $62 = (($61) + ($60<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $hmap = $63;
  $64 = $hmap;
  $65 = ($64|0)!=(0|0);
  if ($65) {
   $66 = $hmap;
   $41 = $66;
   $67 = $41;
   $40 = $67;
   $68 = $40;
   $69 = (($68) + 8|0);
   $39 = $69;
   $70 = $39;
   $38 = $70;
   $71 = $38;
   $72 = HEAP32[$71>>2]|0;
   $36 = $42;
   $37 = $72;
   $73 = $36;
   $74 = $37;
   $34 = $73;
   $35 = $74;
   $75 = $34;
   $76 = $35;
   HEAP32[$75>>2] = $76;
   ;HEAP8[$33+0|0]=HEAP8[$42+0|0]|0;HEAP8[$33+1|0]=HEAP8[$42+1|0]|0;HEAP8[$33+2|0]=HEAP8[$42+2|0]|0;HEAP8[$33+3|0]=HEAP8[$42+3|0]|0;
   $32 = $48;
   $77 = $32;
   ;HEAP8[$__i1$i$i+0|0]=HEAP8[$33+0|0]|0;HEAP8[$__i1$i$i+1|0]=HEAP8[$33+1|0]|0;HEAP8[$__i1$i$i+2|0]=HEAP8[$33+2|0]|0;HEAP8[$__i1$i$i+3|0]=HEAP8[$33+3|0]|0;
   $31 = $77;
   $78 = $31;
   ;HEAP32[$78+0>>2]=HEAP32[$__i1$i$i+0>>2]|0;
   ;HEAP32[$it+0>>2]=HEAP32[$48+0>>2]|0;
   while(1) {
    $79 = $hmap;
    $15 = $79;
    $80 = $15;
    $13 = $80;
    $10 = $12;
    $11 = -1;
    $81 = $10;
    $82 = $11;
    $8 = $81;
    $9 = $82;
    $83 = $8;
    HEAP32[$83>>2] = 0;
    $84 = HEAP32[$12>>2]|0;
    HEAP32[$14>>2] = $84;
    $3 = $14;
    $6 = $16;
    $7 = 0;
    $85 = $6;
    $86 = $7;
    $4 = $85;
    $5 = $86;
    $87 = $4;
    $88 = $5;
    HEAP32[$87>>2] = $88;
    ;HEAP8[$2+0|0]=HEAP8[$16+0|0]|0;HEAP8[$2+1|0]=HEAP8[$16+1|0]|0;HEAP8[$2+2|0]=HEAP8[$16+2|0]|0;HEAP8[$2+3|0]=HEAP8[$16+3|0]|0;
    $1 = $49;
    $89 = $1;
    ;HEAP8[$__i1$i$i1+0|0]=HEAP8[$2+0|0]|0;HEAP8[$__i1$i$i1+1|0]=HEAP8[$2+1|0]|0;HEAP8[$__i1$i$i1+2|0]=HEAP8[$2+2|0]|0;HEAP8[$__i1$i$i1+3|0]=HEAP8[$2+3|0]|0;
    $0 = $89;
    $90 = $0;
    ;HEAP32[$90+0>>2]=HEAP32[$__i1$i$i1+0>>2]|0;
    $21 = $it;
    $22 = $49;
    $91 = $21;
    $92 = $22;
    $19 = $91;
    $20 = $92;
    $93 = $19;
    $94 = $20;
    $17 = $93;
    $18 = $94;
    $95 = $17;
    $96 = HEAP32[$95>>2]|0;
    $97 = $18;
    $98 = HEAP32[$97>>2]|0;
    $99 = ($96|0)==($98|0);
    $100 = $99 ^ 1;
    if (!($100)) {
     break;
    }
    $26 = $it;
    $101 = $26;
    $25 = $101;
    $102 = $25;
    $103 = HEAP32[$102>>2]|0;
    $104 = (($103) + 8|0);
    $24 = $104;
    $105 = $24;
    $23 = $105;
    $106 = $23;
    $107 = (($106) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $pp = $108;
    $109 = $pp;
    $110 = ($109|0)!=(0|0);
    if ($110) {
     $111 = $pp;
     $112 = ($111|0)==(0|0);
     if (!($112)) {
      __ZdlPv($111);
     }
    }
    $29 = $it;
    $30 = 0;
    $113 = $29;
    ;HEAP32[$50+0>>2]=HEAP32[$113+0>>2]|0;
    $28 = $113;
    $114 = $28;
    $27 = $114;
    $115 = $27;
    $116 = HEAP32[$115>>2]|0;
    $117 = HEAP32[$116>>2]|0;
    HEAP32[$115>>2] = $117;
   }
   $118 = $hmap;
   $119 = ($118|0)==(0|0);
   if (!($119)) {
    __THREW__ = 0;
    invoke_vi(117,($118|0));
    $120 = __THREW__; __THREW__ = 0;
    $121 = $120&1;
    if ($121) {
     break;
    }
    __ZdlPv($118);
   }
  }
  $124 = $i;
  $125 = (($124) + 1)|0;
  $i = $125;
 }
 if ((label|0) == 19) {
  $126 = HEAP32[12832>>2]|0;
  _free($126);
  STACKTOP = sp;return;
 }
 $122 = ___cxa_find_matching_catch(-1,-1)|0;
 $123 = tempRet0;
 $51 = $122;
 $52 = $123;
 __ZdlPv($118);
 $127 = $51;
 $128 = $52;
 ___resumeException($127|0);
 // unreachable;
}
function __ZL16_adjust_seq_argsPK18p3_global_settingsP8seq_argsP13pr_append_strS5_($pa,$sa,$nonfatal_err,$warning) {
 $pa = $pa|0;
 $sa = $sa|0;
 $nonfatal_err = $nonfatal_err|0;
 $warning = $warning|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $inc_len = 0, $seq_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $pa;
 $1 = $sa;
 $2 = $nonfatal_err;
 $3 = $warning;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(10);
 if ($6) {
  $7 = $1;
  $8 = (($7) + 8856|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (0|0)==($9|0);
  if ($10) {
   $11 = $1;
   $12 = $0;
   (__ZL15fake_a_sequenceP8seq_argsPK18p3_global_settings($11,$12)|0);
  }
 }
 $13 = $0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(8);
 if ($15) {
  $16 = $1;
  $17 = (($16) + 8836|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)!=(-1);
  if ($19) {
   $20 = $2;
   __ZL19pr_append_new_chunkP13pr_append_strPKc($20,10648);
   STACKTOP = sp;return;
  }
 }
 $21 = $1;
 $22 = (($21) + 8856|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (0|0)==($23|0);
 if ($24) {
  $25 = $0;
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(10);
  if ($27) {
   $28 = $2;
   __ZL19pr_append_new_chunkP13pr_append_strPKc($28,10720);
  } else {
   $29 = $2;
   __ZL19pr_append_new_chunkP13pr_append_strPKc($29,10744);
  }
  STACKTOP = sp;return;
 }
 $30 = $1;
 $31 = (($30) + 8856|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (_strlen(($32|0))|0);
 $seq_len = $33;
 $34 = $0;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(6);
 if ($36) {
  $37 = $1;
  $38 = (($37) + 8836|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==(-1);
  if ($40) {
   $41 = $0;
   $42 = (($41) + 20|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $1;
   $45 = (($44) + 8896|0);
   HEAP32[$45>>2] = $43;
   $46 = $seq_len;
   $47 = $0;
   $48 = (($47) + 20|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($46) + ($49))|0;
   $51 = (($50) - 1)|0;
   $52 = $1;
   $53 = (($52) + 8904|0);
   HEAP32[$53>>2] = $51;
  } else {
   $54 = $1;
   $55 = (($54) + 8832|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $1;
   $58 = (($57) + 8896|0);
   HEAP32[$58>>2] = $56;
   $59 = $1;
   $60 = (($59) + 8832|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $1;
   $63 = (($62) + 8836|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($61) + ($64))|0;
   $66 = (($65) - 1)|0;
   $67 = $1;
   $68 = (($67) + 8904|0);
   HEAP32[$68>>2] = $66;
  }
 }
 $69 = $0;
 $70 = HEAP32[$69>>2]|0;
 $71 = ($70|0)==(7);
 if ($71) {
  $72 = $1;
  $73 = (($72) + 1600|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($74|0)!=(1);
  if ($75) {
   $76 = $2;
   __ZL19pr_append_new_chunkP13pr_append_strPKc($76,10768);
  }
  $77 = $1;
  $78 = HEAP32[$77>>2]|0;
  $79 = $1;
  $80 = (($79) + 8900|0);
  HEAP32[$80>>2] = $78;
  $81 = $1;
  $82 = HEAP32[$81>>2]|0;
  $83 = $1;
  $84 = (($83) + 4|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($82) + ($85))|0;
  $87 = (($86) - 1)|0;
  $88 = $1;
  $89 = (($88) + 8908|0);
  HEAP32[$89>>2] = $87;
 }
 $90 = $1;
 $91 = (($90) + 8836|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ($92|0)==(-1);
 if ($93) {
  $94 = $seq_len;
  $95 = $1;
  $96 = (($95) + 8836|0);
  HEAP32[$96>>2] = $94;
  $97 = $0;
  $98 = (($97) + 20|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $1;
  $101 = (($100) + 8832|0);
  HEAP32[$101>>2] = $99;
 }
 $102 = $0;
 $103 = HEAP32[$102>>2]|0;
 $104 = ($103|0)==(8);
 if ($104) {
  $105 = $1;
  $106 = (($105) + 1600|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ($107|0)==(0);
  if ($108) {
   $109 = $0;
   $110 = (($109) + 20|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $1;
   HEAP32[$112>>2] = $111;
   $113 = $seq_len;
   $114 = $1;
   $115 = (($114) + 4|0);
   HEAP32[$115>>2] = $113;
   $116 = $1;
   $117 = (($116) + 1600|0);
   HEAP32[$117>>2] = 1;
  }
 }
 $118 = $0;
 $119 = (($118) + 20|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = $1;
 $122 = (($121) + 8832|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = (($123) - ($120))|0;
 HEAP32[$122>>2] = $124;
 $125 = $0;
 $126 = (($125) + 20|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = $1;
 $129 = (($128) + 8840|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = (($130) - ($127))|0;
 HEAP32[$129>>2] = $131;
 $132 = $0;
 $133 = (($132) + 20|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = $1;
 $136 = (($135) + 8896|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = (($137) - ($134))|0;
 HEAP32[$136>>2] = $138;
 $139 = $0;
 $140 = (($139) + 20|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = $1;
 $143 = (($142) + 8900|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = (($144) - ($141))|0;
 HEAP32[$143>>2] = $145;
 $146 = $0;
 $147 = (($146) + 20|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = $1;
 $150 = (($149) + 8904|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = (($151) - ($148))|0;
 HEAP32[$150>>2] = $152;
 $153 = $0;
 $154 = (($153) + 20|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = $1;
 $157 = (($156) + 8908|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = (($158) - ($155))|0;
 HEAP32[$157>>2] = $159;
 $160 = $1;
 $161 = (($160) + 8832|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = $1;
 $164 = (($163) + 8896|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = (($165) - ($162))|0;
 HEAP32[$164>>2] = $166;
 $167 = $1;
 $168 = (($167) + 8832|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = $1;
 $171 = (($170) + 8900|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = (($172) - ($169))|0;
 HEAP32[$171>>2] = $173;
 $174 = $1;
 $175 = (($174) + 8832|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = $1;
 $178 = (($177) + 8904|0);
 $179 = HEAP32[$178>>2]|0;
 $180 = (($179) - ($176))|0;
 HEAP32[$178>>2] = $180;
 $181 = $1;
 $182 = (($181) + 8832|0);
 $183 = HEAP32[$182>>2]|0;
 $184 = $1;
 $185 = (($184) + 8908|0);
 $186 = HEAP32[$185>>2]|0;
 $187 = (($186) - ($183))|0;
 HEAP32[$185>>2] = $187;
 $188 = $1;
 $189 = (($188) + 8832|0);
 $190 = HEAP32[$189>>2]|0;
 $191 = $1;
 $192 = (($191) + 8836|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = (($190) + ($193))|0;
 $195 = (($194) - 1)|0;
 $inc_len = $195;
 $196 = $1;
 $197 = (($196) + 8836|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = ($198|0)<(2147483647);
 if ($199) {
  $200 = $1;
  $201 = (($200) + 8832|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = ($202|0)>(-1);
  if ($203) {
   $204 = $1;
   $205 = (($204) + 8836|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = ($206|0)>(-1);
   if ($207) {
    $208 = $inc_len;
    $209 = $seq_len;
    $210 = ($208|0)<($209|0);
    if ($210) {
     $211 = $1;
     $212 = (($211) + 8836|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = (($213) + 1)|0;
     $215 = (__ZL14pr_safe_mallocj($214)|0);
     $216 = $1;
     $217 = (($216) + 8868|0);
     HEAP32[$217>>2] = $215;
     $218 = $1;
     $219 = (($218) + 8856|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = $1;
     $222 = (($221) + 8832|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = $1;
     $225 = (($224) + 8836|0);
     $226 = HEAP32[$225>>2]|0;
     $227 = $1;
     $228 = (($227) + 8868|0);
     $229 = HEAP32[$228>>2]|0;
     __ZL10_pr_substrPKciiPc($220,$223,$226,$229);
     $230 = $1;
     $231 = (($230) + 8836|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = (($232) + 1)|0;
     $234 = (__ZL14pr_safe_mallocj($233)|0);
     $235 = $1;
     $236 = (($235) + 8872|0);
     HEAP32[$236>>2] = $234;
     $237 = $1;
     $238 = (($237) + 8856|0);
     $239 = HEAP32[$238>>2]|0;
     $240 = $1;
     $241 = (($240) + 8832|0);
     $242 = HEAP32[$241>>2]|0;
     $243 = $1;
     $244 = (($243) + 8836|0);
     $245 = HEAP32[$244>>2]|0;
     $246 = $1;
     $247 = (($246) + 8872|0);
     $248 = HEAP32[$247>>2]|0;
     __ZL10_pr_substrPKciiPc($239,$242,$245,$248);
     $249 = $1;
     $250 = (($249) + 8856|0);
     $251 = HEAP32[$250>>2]|0;
     $252 = (_strlen(($251|0))|0);
     $253 = (($252) + 1)|0;
     $254 = (__ZL14pr_safe_mallocj($253)|0);
     $255 = $1;
     $256 = (($255) + 8876|0);
     HEAP32[$256>>2] = $254;
     $257 = $1;
     $258 = (($257) + 8876|0);
     $259 = HEAP32[$258>>2]|0;
     $260 = $1;
     $261 = (($260) + 8856|0);
     $262 = HEAP32[$261>>2]|0;
     (_strcpy(($259|0),($262|0))|0);
     $263 = $1;
     $264 = (($263) + 8876|0);
     $265 = HEAP32[$264>>2]|0;
     (__ZL12dna_to_upperPci($265,1)|0);
     $266 = $1;
     $267 = (($266) + 8856|0);
     $268 = HEAP32[$267>>2]|0;
     $269 = (_strlen(($268|0))|0);
     $270 = (($269) + 1)|0;
     $271 = (__ZL14pr_safe_mallocj($270)|0);
     $272 = $1;
     $273 = (($272) + 8880|0);
     HEAP32[$273>>2] = $271;
     $274 = $1;
     $275 = (($274) + 8876|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = $1;
     $278 = (($277) + 8880|0);
     $279 = HEAP32[$278>>2]|0;
     _p3_reverse_complement($276,$279);
    }
   }
  }
 }
 $280 = $1;
 $281 = $seq_len;
 $282 = $0;
 $283 = (($282) + 20|0);
 $284 = HEAP32[$283>>2]|0;
 $285 = $2;
 $286 = $3;
 $287 = (__ZL27_check_and_adjust_intervalsP8seq_argsiiP13pr_append_strS2_($280,$281,$284,$285,$286)|0);
 $288 = ($287|0)!=(0);
 if ($288) {
  STACKTOP = sp;return;
 }
 $289 = $1;
 $290 = $1;
 $291 = (($290) + 8028|0);
 $292 = $1;
 $293 = (($292) + 8828|0);
 $294 = $seq_len;
 $295 = $0;
 $296 = (($295) + 20|0);
 $297 = HEAP32[$296>>2]|0;
 $298 = $2;
 $299 = $3;
 $300 = (__ZL29_check_and_adjust_overlap_posP8seq_argsPiS1_PKciiP13pr_append_strS5_($289,$291,$293,10840,$294,$297,$298,$299)|0);
 $301 = ($300|0)!=(0);
 if ($301) {
  STACKTOP = sp;return;
 }
 $302 = $1;
 $303 = (($302) + 4812|0);
 $304 = (($303) + 3212|0);
 $305 = HEAP32[$304>>2]|0;
 $306 = ($305|0)>(0);
 if (!($306)) {
  STACKTOP = sp;return;
 }
 $307 = $0;
 $308 = $1;
 __ZL25_optimize_ok_regions_listPK18p3_global_settingsP8seq_args($307,$308);
 STACKTOP = sp;return;
}
function _pr_is_empty($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = $x;
 $1 = $0;
 $2 = (0|0)!=($1|0);
 if (!($2)) {
  $3 = HEAP32[_stderr>>2]|0;
  $4 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $4;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 56;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 5706;
  $vararg_ptr3 = (($vararg_buffer) + 12|0);
  HEAP32[$vararg_ptr3>>2] = 856;
  (_fprintf(($3|0),(16|0),($vararg_buffer|0))|0);
  _abort();
  // unreachable;
 }
 $5 = $0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (0|0)==($7|0);
 if ($8) {
  $16 = 1;
  $15 = $16&1;
  STACKTOP = sp;return ($15|0);
 }
 $9 = $0;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP8[$11]|0;
 $13 = $12 << 24 >> 24;
 $14 = (0)==($13|0);
 $16 = $14;
 $15 = $16&1;
 STACKTOP = sp;return ($15|0);
}
function __ZL16_pr_data_controlPK18p3_global_settingsPK8seq_argsP13pr_append_strS6_S6_($pa,$sa,$glob_err,$nonfatal_err,$warning) {
 $pa = $pa|0;
 $sa = $sa|0;
 $glob_err = $glob_err|0;
 $nonfatal_err = $nonfatal_err|0;
 $warning = $warning|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $1000 = 0, $1001 = 0.0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0.0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0.0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0.0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0.0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0.0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0.0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0.0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0.0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0.0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0.0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0.0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0.0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0.0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0.0, $1100 = 0, $1101 = 0.0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0.0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0.0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0.0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0.0, $373 = 0, $374 = 0, $375 = 0, $376 = 0.0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0.0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0.0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0.0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0.0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0.0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0.0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0.0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0.0, $606 = 0, $607 = 0, $608 = 0, $609 = 0.0, $61 = 0.0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0.0, $616 = 0, $617 = 0, $618 = 0, $619 = 0.0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0.0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0.0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0.0, $636 = 0, $637 = 0, $638 = 0, $639 = 0.0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0.0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0.0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0.0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0.0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0.0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0.0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0.0, $691 = 0, $692 = 0, $693 = 0, $694 = 0.0, $695 = 0, $696 = 0, $697 = 0, $698 = 0.0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0.0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0.0, $71 = 0.0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0.0, $715 = 0, $716 = 0, $717 = 0, $718 = 0.0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0.0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0.0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0.0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0.0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0.0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0.0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0.0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0.0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0.0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0.0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0.0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0.0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0.0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0.0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0.0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0.0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0.0;
 var $809 = 0, $81 = 0.0, $810 = 0, $811 = 0, $812 = 0, $813 = 0.0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0.0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0.0, $823 = 0, $824 = 0, $825 = 0, $826 = 0;
 var $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0.0, $833 = 0, $834 = 0, $835 = 0, $836 = 0.0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0;
 var $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0;
 var $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0;
 var $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0;
 var $9 = 0, $90 = 0.0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0;
 var $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0;
 var $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0;
 var $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0;
 var $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0;
 var $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $i = 0, $offending_char = 0, $pr_min = 0, $seq_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $pa;
 $2 = $sa;
 $3 = $glob_err;
 $4 = $nonfatal_err;
 $5 = $warning;
 $offending_char = 0;
 $6 = $2;
 $7 = (($6) + 8856|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_strlen(($8|0))|0);
 $seq_len = $9;
 $10 = $2;
 $11 = (($10) + 8848|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $2;
  $15 = (($14) + 8848|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $seq_len;
  $18 = ($16|0)!=($17|0);
  if ($18) {
   $19 = $4;
   __ZL19pr_append_new_chunkP13pr_append_strPKc($19,4848);
  }
 }
 $20 = $1;
 $21 = (($20) + 2640|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)<(-1);
 if ($23) {
  label = 6;
 } else {
  $24 = $1;
  $25 = (($24) + 2644|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)<(-1);
  if ($27) {
   label = 6;
  }
 }
 if ((label|0) == 6) {
  $28 = $4;
  __ZL19pr_append_new_chunkP13pr_append_strPKc($28,4880);
 }
 $29 = $1;
 $30 = (($29) + 48|0);
 $31 = (($30) + 272|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0);
 if ($33) {
  label = 9;
 } else {
  $34 = $1;
  $35 = (($34) + 400|0);
  $36 = (($35) + 272|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)!=(0);
  if ($38) {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $39 = $2;
  $40 = (($39) + 8848|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)==(0);
  if ($42) {
   $43 = $4;
   __ZL19pr_append_new_chunkP13pr_append_strPKc($43,4944);
  }
 }
 $44 = $1;
 $45 = (($44) + 20|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)<(-1000000);
 if ($47) {
  $48 = $3;
  __ZL19pr_append_new_chunkP13pr_append_strPKc($48,4976);
  $0 = 1;
  $1310 = $0;
  STACKTOP = sp;return ($1310|0);
 }
 $49 = $1;
 $50 = (($49) + 48|0);
 $51 = (($50) + 328|0);
 $52 = +HEAPF64[$51>>3];
 $53 = $52 > 32767.0;
 if ($53) {
  $54 = $1;
  $55 = (($54) + 2508|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)==(0);
  if ($57) {
   $58 = $3;
   __ZL19pr_append_new_chunkP13pr_append_strPKc($58,5024);
   $0 = 1;
   $1310 = $0;
   STACKTOP = sp;return ($1310|0);
  }
 }
 $59 = $1;
 $60 = (($59) + 2448|0);
 $61 = +HEAPF64[$60>>3];
 $62 = $61 > 32767.0;
 if ($62) {
  $63 = $1;
  $64 = (($63) + 2508|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)==(0);
  if ($66) {
   $67 = $3;
   __ZL19pr_append_new_chunkP13pr_append_strPKc($67,5080);
   $0 = 1;
   $1310 = $0;
   STACKTOP = sp;return ($1310|0);
  }
 }
 $68 = $1;
 $69 = (($68) + 48|0);
 $70 = (($69) + 320|0);
 $71 = +HEAPF64[$70>>3];
 $72 = $71 > 32767.0;
 if ($72) {
  $73 = $1;
  $74 = (($73) + 2504|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($75|0)==(0);
  if ($76) {
   $77 = $3;
   __ZL19pr_append_new_chunkP13pr_append_strPKc($77,5144);
   $0 = 1;
   $1310 = $0;
   STACKTOP = sp;return ($1310|0);
  }
 }
 $78 = $1;
 $79 = (($78) + 400|0);
 $80 = (($79) + 320|0);
 $81 = +HEAPF64[$80>>3];
 $82 = $81 > 32767.0;
 if ($82) {
  $83 = $1;
  $84 = (($83) + 2504|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)==(0);
  if ($86) {
   $87 = $3;
   __ZL19pr_append_new_chunkP13pr_append_strPKc($87,5200);
   $0 = 1;
   $1310 = $0;
   STACKTOP = sp;return ($1310|0);
  }
 }
 $88 = $1;
 $89 = (($88) + 2464|0);
 $90 = +HEAPF64[$89>>3];
 $91 = $90 > 32767.0;
 if ($91) {
  $92 = $1;
  $93 = (($92) + 2504|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ($94|0)==(0);
  if ($95) {
   $96 = $3;
   __ZL19pr_append_new_chunkP13pr_append_strPKc($96,5264);
   $0 = 1;
   $1310 = $0;
   STACKTOP = sp;return ($1310|0);
  }
 }
 $97 = $1;
 $98 = (($97) + 400|0);
 $99 = (($98) + 328|0);
 $100 = +HEAPF64[$99>>3];
 $101 = $100 >= 0.0;
 if ($101) {
  $102 = $1;
  $103 = (($102) + 2508|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ($104|0)==(0);
  if ($105) {
   $106 = $3;
   __ZL19pr_append_new_chunkP13pr_append_strPKc($106,5328);
  }
 }
 $107 = $1;
 $108 = (($107) + 400|0);
 $109 = (($108) + 336|0);
 $110 = +HEAPF64[$109>>3];
 $111 = $110 >= 0.0;
 if ($111) {
  $112 = $1;
  $113 = (($112) + 2508|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = ($114|0)==(1);
  if ($115) {
   $116 = $3;
   __ZL19pr_append_new_chunkP13pr_append_strPKc($116,5384);
  }
 }
 $117 = $1;
 $118 = (($117) + 48|0);
 $119 = (($118) + 256|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = ($120|0)<(1);
 if ($121) {
  $122 = $3;
  __ZL19pr_append_new_chunkP13pr_append_strPKc($122,5440);
 }
 $123 = $1;
 $124 = (($123) + 48|0);
 $125 = (($124) + 260|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = ($126|0)>(36);
 if ($127) {
  $128 = $3;
  __ZL19pr_append_new_chunkP13pr_append_strPKc($128,5472);
  $129 = $3;
  __ZL9pr_appendP13pr_append_strPKc($129,5520);
  $0 = 1;
  $1310 = $0;
  STACKTOP = sp;return ($1310|0);
 }
 $130 = $1;
 $131 = (($130) + 48|0);
 $132 = (($131) + 252|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = $1;
 $135 = (($134) + 48|0);
 $136 = (($135) + 260|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = ($133|0)>($137|0);
 if ($138) {
  $139 = $3;
  __ZL19pr_append_new_chunkP13pr_append_strPKc($139,5528);
  $0 = 1;
  $1310 = $0;
  STACKTOP = sp;return ($1310|0);
 }
 $140 = $1;
 $141 = (($140) + 48|0);
 $142 = (($141) + 252|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = $1;
 $145 = (($144) + 48|0);
 $146 = (($145) + 256|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = ($143|0)<($147|0);
 if ($148) {
  $149 = $3;
  __ZL19pr_append_new_chunkP13pr_append_strPKc($149,5576);
  $0 = 1;
  $1310 = $0;
  STACKTOP = sp;return ($1310|0);
 }
 $150 = $1;
 $151 = (($150) + 400|0);
 $152 = (($151) + 260|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = ($153|0)>(36);
 if ($154) {
  $155 = $3;
  __ZL19pr_append_new_chunkP13pr_append_strPKc($155,5624);
  $0 = 1;
  $1310 = $0;
  STACKTOP = sp;return ($1310|0);
 }
 $156 = $1;
 $157 = (($156) + 400|0);
 $158 = (($157) + 252|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = $1;
 $161 = (($160) + 400|0);
 $162 = (($161) + 260|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = ($159|0)>($163|0);
 if ($164) {
  $165 = $3;
  __ZL19pr_append_new_chunkP13pr_append_strPKc($165,5680);
  $0 = 1;
  $1310 = $0;
  STACKTOP = sp;return ($1310|0);
 }
 $166 = $1;
 $167 = (($166) + 400|0);
 $168 = (($167) + 252|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = $1;
 $171 = (($170) + 400|0);
 $172 = (($171) + 256|0);
 $173 = HEAP32[$172>>2]|0;
 $174 = ($169|0)<($173|0);
 if ($174) {
  $175 = $3;
  __ZL19pr_append_new_chunkP13pr_append_strPKc($175,5728);
  $0 = 1;
  $1310 = $0;
  STACKTOP = sp;return ($1310|0);
 }
 $176 = $1;
 $177 = (($176) + 772|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = $1;
 $180 = (($179) + 48|0);
 $181 = (($180) + 256|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = ($178|0)>($182|0);
 if ($183) {
  $184 = $3;
  __ZL19pr_append_new_chunkP13pr_append_strPKc($184,5776);
  $0 = 1;
  $1310 = $0;
  STACKTOP = sp;return ($1310|0);
 }
 $185 = $1;
 $186 = (($185) + 768|0);
 $187 = HEAP32[$186>>2]|0;
 $188 = ($187|0)<(0);
 if (!($188)) {
  $189 = $1;
  $190 = (($189) + 768|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = ($191|0)>(5);
  if (!($192)) {
   $194 = $1;
   $195 = (($194) + 2416|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = (0)==($196|0);
   if ($197) {
    $198 = $3;
    __ZL19pr_append_new_chunkP13pr_append_strPKc($198,5864);
    $0 = 1;
    $1310 = $0;
    STACKTOP = sp;return ($1310|0);
   }
   $i = 0;
   while(1) {
    $199 = $i;
    $200 = $1;
    $201 = (($200) + 2416|0);
    $202 = HEAP32[$201>>2]|0;
    $203 = ($199|0)<($202|0);
    if (!($203)) {
     break;
    }
    $204 = $i;
    $205 = $1;
    $206 = (($205) + 816|0);
    $207 = (($206) + ($204<<2)|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = $i;
    $210 = $1;
    $211 = (($210) + 1616|0);
    $212 = (($211) + ($209<<2)|0);
    $213 = HEAP32[$212>>2]|0;
    $214 = ($208|0)>($213|0);
    if ($214) {
     label = 59;
     break;
    }
    $215 = $i;
    $216 = $1;
    $217 = (($216) + 816|0);
    $218 = (($217) + ($215<<2)|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = ($219|0)<(0);
    if ($220) {
     label = 59;
     break;
    }
    $222 = $i;
    $223 = (($222) + 1)|0;
    $i = $223;
   }
   if ((label|0) == 59) {
    $221 = $3;
    __ZL19pr_append_new_chunkP13pr_append_strPKc($221,5912);
    $0 = 1;
    $1310 = $0;
    STACKTOP = sp;return ($1310|0);
   }
   $pr_min = 2147483647;
   $i = 0;
   while(1) {
    $224 = $i;
    $225 = $1;
    $226 = (($225) + 2416|0);
    $227 = HEAP32[$226>>2]|0;
    $228 = ($224|0)<($227|0);
    if (!($228)) {
     break;
    }
    $229 = $i;
    $230 = $1;
    $231 = (($230) + 816|0);
    $232 = (($231) + ($229<<2)|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = $pr_min;
    $235 = ($233|0)<($234|0);
    if ($235) {
     $236 = $i;
     $237 = $1;
     $238 = (($237) + 816|0);
     $239 = (($238) + ($236<<2)|0);
     $240 = HEAP32[$239>>2]|0;
     $pr_min = $240;
    }
    $241 = $i;
    $242 = (($241) + 1)|0;
    $i = $242;
   }
   $243 = $1;
   $244 = (($243) + 48|0);
   $245 = (($244) + 260|0);
   $246 = HEAP32[$245>>2]|0;
   $247 = $pr_min;
   $248 = ($246|0)>($247|0);
   if ($248) {
    $249 = $3;
    __ZL19pr_append_new_chunkP13pr_append_strPKc($249,5960);
    $0 = 1;
    $1310 = $0;
    STACKTOP = sp;return ($1310|0);
   }
   $250 = $1;
   $251 = (($250) + 12|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = ($252|0)==(1);
   if ($253) {
    $254 = $1;
    $255 = (($254) + 400|0);
    $256 = (($255) + 260|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = $pr_min;
    $259 = ($257|0)>($258|0);
    if ($259) {
     $260 = $3;
     __ZL19pr_append_new_chunkP13pr_append_strPKc($260,6008);
     $0 = 1;
     $1310 = $0;
     STACKTOP = sp;return ($1310|0);
    }
   }
   $261 = $1;
   $262 = (($261) + 28|0);
   $263 = HEAP32[$262>>2]|0;
   $264 = ($263|0)<(1);
   if ($264) {
    $265 = $3;
    __ZL19pr_append_new_chunkP13pr_append_strPKc($265,6072);
    $0 = 1;
    $1310 = $0;
    STACKTOP = sp;return ($1310|0);
   }
   $266 = $1;
   $267 = (($266) + 48|0);
   $268 = (($267) + 344|0);
   $269 = HEAP32[$268>>2]|0;
   $270 = ($269|0)!=(0|0);
   if ($270) {
    $271 = $1;
    $272 = (($271) + 48|0);
    $273 = (($272) + 344|0);
    $274 = HEAP32[$273>>2]|0;
    $275 = (_strlen(($274|0))|0);
    $276 = ($275|0)!=(5);
    if ($276) {
     $277 = $3;
     __ZL19pr_append_new_chunkP13pr_append_strPKc($277,6096);
     $0 = 1;
     $1310 = $0;
     STACKTOP = sp;return ($1310|0);
    }
   }
   $278 = $1;
   $279 = (($278) + 48|0);
   $280 = (($279) + 348|0);
   $281 = HEAP32[$280>>2]|0;
   $282 = ($281|0)!=(0|0);
   if ($282) {
    $283 = $1;
    $284 = (($283) + 48|0);
    $285 = (($284) + 348|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = (_strlen(($286|0))|0);
    $288 = ($287|0)!=(5);
    if ($288) {
     $289 = $3;
     __ZL19pr_append_new_chunkP13pr_append_strPKc($289,6152);
     $0 = 1;
     $1310 = $0;
     STACKTOP = sp;return ($1310|0);
    }
   }
   $290 = $1;
   $291 = (($290) + 400|0);
   $292 = (($291) + 344|0);
   $293 = HEAP32[$292>>2]|0;
   $294 = ($293|0)!=(0|0);
   if ($294) {
    $295 = $1;
    $296 = (($295) + 400|0);
    $297 = (($296) + 344|0);
    $298 = HEAP32[$297>>2]|0;
    $299 = (_strlen(($298|0))|0);
    $300 = ($299|0)!=(5);
    if ($300) {
     $301 = $3;
     __ZL19pr_append_new_chunkP13pr_append_strPKc($301,6208);
     $0 = 1;
     $1310 = $0;
     STACKTOP = sp;return ($1310|0);
    }
   }
   $302 = $1;
   $303 = (($302) + 400|0);
   $304 = (($303) + 348|0);
   $305 = HEAP32[$304>>2]|0;
   $306 = ($305|0)!=(0|0);
   if ($306) {
    $307 = $1;
    $308 = (($307) + 400|0);
    $309 = (($308) + 348|0);
    $310 = HEAP32[$309>>2]|0;
    $311 = (_strlen(($310|0))|0);
    $312 = ($311|0)!=(5);
    if ($312) {
     $313 = $3;
     __ZL19pr_append_new_chunkP13pr_append_strPKc($313,6272);
     $0 = 1;
     $1310 = $0;
     STACKTOP = sp;return ($1310|0);
    }
   }
   $314 = $2;
   $315 = (($314) + 8836|0);
   $316 = HEAP32[$315>>2]|0;
   $317 = ($316|0)>=(2147483647);
   if ($317) {
    $318 = $4;
    __ZL19pr_append_new_chunkP13pr_append_strPKc($318,6336);
    $0 = 1;
    $1310 = $0;
    STACKTOP = sp;return ($1310|0);
   }
   $319 = $2;
   $320 = (($319) + 8832|0);
   $321 = HEAP32[$320>>2]|0;
   $322 = ($321|0)<(0);
   if (!($322)) {
    $323 = $2;
    $324 = (($323) + 8836|0);
    $325 = HEAP32[$324>>2]|0;
    $326 = ($325|0)<(0);
    if (!($326)) {
     $327 = $2;
     $328 = (($327) + 8832|0);
     $329 = HEAP32[$328>>2]|0;
     $330 = $2;
     $331 = (($330) + 8836|0);
     $332 = HEAP32[$331>>2]|0;
     $333 = (($329) + ($332))|0;
     $334 = $seq_len;
     $335 = ($333|0)>($334|0);
     if (!($335)) {
      $337 = $2;
      $338 = (($337) + 8836|0);
      $339 = HEAP32[$338>>2]|0;
      $340 = $pr_min;
      $341 = ($339|0)<($340|0);
      do {
       if ($341) {
        $342 = $1;
        $343 = (($342) + 4|0);
        $344 = HEAP32[$343>>2]|0;
        $345 = ($344|0)==(1);
        if ($345) {
         $346 = $1;
         $347 = (($346) + 8|0);
         $348 = HEAP32[$347>>2]|0;
         $349 = ($348|0)==(1);
         if ($349) {
          $350 = $1;
          $351 = HEAP32[$350>>2]|0;
          $352 = ($351|0)==(10);
          if ($352) {
           $353 = $5;
           __ZL19pr_append_new_chunkP13pr_append_strPKc($353,6432);
          } else {
           $354 = $1;
           $355 = HEAP32[$354>>2]|0;
           $356 = ($355|0)!=(9);
           if ($356) {
            $357 = $4;
            __ZL19pr_append_new_chunkP13pr_append_strPKc($357,6432);
           }
          }
          $358 = $1;
          $359 = HEAP32[$358>>2]|0;
          $360 = ($359|0)==(5);
          if (!($360)) {
           break;
          }
          $0 = 1;
          $1310 = $0;
          STACKTOP = sp;return ($1310|0);
         }
        }
       }
      } while(0);
      $361 = $1;
      $362 = (($361) + 760|0);
      $363 = +HEAPF64[$362>>3];
      $364 = $363 < 0.0;
      if ($364) {
       $365 = $4;
       __ZL19pr_append_new_chunkP13pr_append_strPKc($365,6496);
       $0 = 1;
       $1310 = $0;
       STACKTOP = sp;return ($1310|0);
      }
      $366 = $2;
      $367 = (($366) + 8840|0);
      $368 = HEAP32[$367>>2]|0;
      $369 = ($368|0)<=(-1000000);
      if (!($369)) {
       $370 = $1;
       $371 = (($370) + 808|0);
       $372 = +HEAPF64[$371>>3];
       $373 = -1.0 == $372;
       if ($373) {
        $374 = $1;
        $375 = (($374) + 800|0);
        $376 = +HEAPF64[$375>>3];
        $377 = 0.0 == $376;
        if (!($377)) {
         label = 109;
        }
       } else {
        label = 109;
       }
       if ((label|0) == 109) {
        $378 = $4;
        __ZL19pr_append_new_chunkP13pr_append_strPKc($378,6544);
        $379 = $4;
        __ZL9pr_appendP13pr_append_strPKc($379,6616);
       }
       $380 = $2;
       $381 = (($380) + 8840|0);
       $382 = HEAP32[$381>>2]|0;
       $383 = $2;
       $384 = (($383) + 8832|0);
       $385 = HEAP32[$384>>2]|0;
       $386 = $2;
       $387 = (($386) + 8836|0);
       $388 = HEAP32[$387>>2]|0;
       $389 = (($385) + ($388))|0;
       $390 = (($389) - 3)|0;
       $391 = ($382|0)>($390|0);
       if ($391) {
        $392 = $4;
        __ZL19pr_append_new_chunkP13pr_append_strPKc($392,6680);
        $0 = 1;
        $1310 = $0;
        STACKTOP = sp;return ($1310|0);
       }
       $393 = $2;
       $394 = (($393) + 8840|0);
       $395 = HEAP32[$394>>2]|0;
       $396 = ($395|0)>=(0);
       L181: do {
        if ($396) {
         $397 = $2;
         $398 = (($397) + 8840|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = $2;
         $401 = (($400) + 8856|0);
         $402 = HEAP32[$401>>2]|0;
         $403 = (($402) + ($399)|0);
         $404 = HEAP8[$403]|0;
         $405 = $404 << 24 >> 24;
         $406 = ($405|0)!=(65);
         if ($406) {
          $407 = $2;
          $408 = (($407) + 8840|0);
          $409 = HEAP32[$408>>2]|0;
          $410 = $2;
          $411 = (($410) + 8856|0);
          $412 = HEAP32[$411>>2]|0;
          $413 = (($412) + ($409)|0);
          $414 = HEAP8[$413]|0;
          $415 = $414 << 24 >> 24;
          $416 = ($415|0)!=(97);
          if (!($416)) {
           label = 115;
          }
         } else {
          label = 115;
         }
         do {
          if ((label|0) == 115) {
           $417 = $2;
           $418 = (($417) + 8840|0);
           $419 = HEAP32[$418>>2]|0;
           $420 = (($419) + 1)|0;
           $421 = $2;
           $422 = (($421) + 8856|0);
           $423 = HEAP32[$422>>2]|0;
           $424 = (($423) + ($420)|0);
           $425 = HEAP8[$424]|0;
           $426 = $425 << 24 >> 24;
           $427 = ($426|0)!=(84);
           if ($427) {
            $428 = $2;
            $429 = (($428) + 8840|0);
            $430 = HEAP32[$429>>2]|0;
            $431 = (($430) + 1)|0;
            $432 = $2;
            $433 = (($432) + 8856|0);
            $434 = HEAP32[$433>>2]|0;
            $435 = (($434) + ($431)|0);
            $436 = HEAP8[$435]|0;
            $437 = $436 << 24 >> 24;
            $438 = ($437|0)!=(116);
            if ($438) {
             break;
            }
           }
           $439 = $2;
           $440 = (($439) + 8840|0);
           $441 = HEAP32[$440>>2]|0;
           $442 = (($441) + 2)|0;
           $443 = $2;
           $444 = (($443) + 8856|0);
           $445 = HEAP32[$444>>2]|0;
           $446 = (($445) + ($442)|0);
           $447 = HEAP8[$446]|0;
           $448 = $447 << 24 >> 24;
           $449 = ($448|0)!=(71);
           if (!($449)) {
            break L181;
           }
           $450 = $2;
           $451 = (($450) + 8840|0);
           $452 = HEAP32[$451>>2]|0;
           $453 = (($452) + 2)|0;
           $454 = $2;
           $455 = (($454) + 8856|0);
           $456 = HEAP32[$455>>2]|0;
           $457 = (($456) + ($453)|0);
           $458 = HEAP8[$457]|0;
           $459 = $458 << 24 >> 24;
           $460 = ($459|0)!=(103);
           if (!($460)) {
            break L181;
           }
          }
         } while(0);
         $461 = $4;
         __ZL19pr_append_new_chunkP13pr_append_strPKc($461,6744);
         $0 = 1;
         $1310 = $0;
         STACKTOP = sp;return ($1310|0);
        }
       } while(0);
      }
      $462 = $2;
      $463 = (($462) + 8844|0);
      $464 = HEAP32[$463>>2]|0;
      $465 = (0|0)!=($464|0);
      do {
       if ($465) {
        $466 = $1;
        $467 = (($466) + 48|0);
        $468 = (($467) + 272|0);
        $469 = HEAP32[$468>>2]|0;
        $470 = ($469|0)!=(0);
        if ($470) {
         $471 = $1;
         $472 = (($471) + 48|0);
         $473 = (($472) + 272|0);
         $474 = HEAP32[$473>>2]|0;
         $475 = $1;
         $476 = (($475) + 40|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = ($474|0)<($477|0);
         if ($478) {
          $479 = $3;
          __ZL19pr_append_new_chunkP13pr_append_strPKc($479,6792);
          $0 = 1;
          $1310 = $0;
          STACKTOP = sp;return ($1310|0);
         }
        }
        $480 = $1;
        $481 = (($480) + 48|0);
        $482 = (($481) + 272|0);
        $483 = HEAP32[$482>>2]|0;
        $484 = ($483|0)!=(0);
        if ($484) {
         $485 = $1;
         $486 = (($485) + 48|0);
         $487 = (($486) + 272|0);
         $488 = HEAP32[$487>>2]|0;
         $489 = $1;
         $490 = (($489) + 44|0);
         $491 = HEAP32[$490>>2]|0;
         $492 = ($488|0)>($491|0);
         if ($492) {
          $493 = $3;
          __ZL19pr_append_new_chunkP13pr_append_strPKc($493,6840);
          $0 = 1;
          $1310 = $0;
          STACKTOP = sp;return ($1310|0);
         }
        }
        $494 = $1;
        $495 = (($494) + 400|0);
        $496 = (($495) + 272|0);
        $497 = HEAP32[$496>>2]|0;
        $498 = ($497|0)!=(0);
        if ($498) {
         $499 = $1;
         $500 = (($499) + 400|0);
         $501 = (($500) + 272|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = $1;
         $504 = (($503) + 40|0);
         $505 = HEAP32[$504>>2]|0;
         $506 = ($502|0)<($505|0);
         if ($506) {
          $507 = $3;
          __ZL19pr_append_new_chunkP13pr_append_strPKc($507,6888);
          $0 = 1;
          $1310 = $0;
          STACKTOP = sp;return ($1310|0);
         }
        }
        $508 = $1;
        $509 = (($508) + 400|0);
        $510 = (($509) + 272|0);
        $511 = HEAP32[$510>>2]|0;
        $512 = ($511|0)!=(0);
        if ($512) {
         $513 = $1;
         $514 = (($513) + 400|0);
         $515 = (($514) + 272|0);
         $516 = HEAP32[$515>>2]|0;
         $517 = $1;
         $518 = (($517) + 44|0);
         $519 = HEAP32[$518>>2]|0;
         $520 = ($516|0)>($519|0);
         if ($520) {
          $521 = $3;
          __ZL19pr_append_new_chunkP13pr_append_strPKc($521,6944);
          $0 = 1;
          $1310 = $0;
          STACKTOP = sp;return ($1310|0);
         }
        }
        $i = 0;
        while(1) {
         $522 = $i;
         $523 = $2;
         $524 = (($523) + 8848|0);
         $525 = HEAP32[$524>>2]|0;
         $526 = ($522|0)<($525|0);
         if (!($526)) {
          label = 142;
          break;
         }
         $527 = $i;
         $528 = $2;
         $529 = (($528) + 8844|0);
         $530 = HEAP32[$529>>2]|0;
         $531 = (($530) + ($527<<2)|0);
         $532 = HEAP32[$531>>2]|0;
         $533 = $1;
         $534 = (($533) + 40|0);
         $535 = HEAP32[$534>>2]|0;
         $536 = ($532|0)<($535|0);
         if ($536) {
          break;
         }
         $537 = $i;
         $538 = $2;
         $539 = (($538) + 8844|0);
         $540 = HEAP32[$539>>2]|0;
         $541 = (($540) + ($537<<2)|0);
         $542 = HEAP32[$541>>2]|0;
         $543 = $1;
         $544 = (($543) + 44|0);
         $545 = HEAP32[$544>>2]|0;
         $546 = ($542|0)>($545|0);
         if ($546) {
          break;
         }
         $548 = $i;
         $549 = (($548) + 1)|0;
         $i = $549;
        }
        if ((label|0) == 142) {
         break;
        }
        $547 = $4;
        __ZL19pr_append_new_chunkP13pr_append_strPKc($547,7000);
        $0 = 1;
        $1310 = $0;
        STACKTOP = sp;return ($1310|0);
       } else {
        $550 = $1;
        $551 = (($550) + 48|0);
        $552 = (($551) + 8|0);
        $553 = (($552) + 112|0);
        $554 = +HEAPF64[$553>>3];
        $555 = $554 != 0.0;
        if (!($555)) {
         $556 = $1;
         $557 = (($556) + 400|0);
         $558 = (($557) + 8|0);
         $559 = (($558) + 112|0);
         $560 = +HEAPF64[$559>>3];
         $561 = $560 != 0.0;
         if (!($561)) {
          break;
         }
        }
        $562 = $4;
        __ZL19pr_append_new_chunkP13pr_append_strPKc($562,7040);
        $0 = 1;
        $1310 = $0;
        STACKTOP = sp;return ($1310|0);
       }
      } while(0);
      $563 = $2;
      $564 = (($563) + 8868|0);
      $565 = HEAP32[$564>>2]|0;
      $566 = (__ZL12dna_to_upperPci($565,0)|0);
      $offending_char = $566;
      $567 = ($566<<24>>24)!=(0);
      do {
       if ($567) {
        $568 = $1;
        $569 = (($568) + 24|0);
        $570 = HEAP32[$569>>2]|0;
        $571 = ($570|0)!=(0);
        if ($571) {
         $572 = $5;
         __ZL19pr_append_new_chunkP13pr_append_strPKc($572,7128);
         break;
        } else {
         $573 = $4;
         __ZL19pr_append_new_chunkP13pr_append_strPKc($573,7128);
         $0 = 1;
         $1310 = $0;
         STACKTOP = sp;return ($1310|0);
        }
       }
      } while(0);
      $574 = $1;
      $575 = (($574) + 48|0);
      $576 = (($575) + 168|0);
      $577 = +HEAPF64[$576>>3];
      $578 = $1;
      $579 = (($578) + 48|0);
      $580 = (($579) + 176|0);
      $581 = +HEAPF64[$580>>3];
      $582 = $577 < $581;
      if (!($582)) {
       $583 = $1;
       $584 = (($583) + 48|0);
       $585 = (($584) + 168|0);
       $586 = +HEAPF64[$585>>3];
       $587 = $1;
       $588 = (($587) + 48|0);
       $589 = (($588) + 184|0);
       $590 = +HEAPF64[$589>>3];
       $591 = $586 > $590;
       if (!($591)) {
        $593 = $1;
        $594 = (($593) + 400|0);
        $595 = (($594) + 168|0);
        $596 = +HEAPF64[$595>>3];
        $597 = $1;
        $598 = (($597) + 400|0);
        $599 = (($598) + 176|0);
        $600 = +HEAPF64[$599>>3];
        $601 = $596 < $600;
        if (!($601)) {
         $602 = $1;
         $603 = (($602) + 400|0);
         $604 = (($603) + 168|0);
         $605 = +HEAPF64[$604>>3];
         $606 = $1;
         $607 = (($606) + 400|0);
         $608 = (($607) + 184|0);
         $609 = +HEAPF64[$608>>3];
         $610 = $605 > $609;
         if (!($610)) {
          $612 = $1;
          $613 = (($612) + 48|0);
          $614 = (($613) + 208|0);
          $615 = +HEAPF64[$614>>3];
          $616 = $1;
          $617 = (($616) + 48|0);
          $618 = (($617) + 200|0);
          $619 = +HEAPF64[$618>>3];
          $620 = $615 > $619;
          if (!($620)) {
           $621 = $1;
           $622 = (($621) + 48|0);
           $623 = (($622) + 208|0);
           $624 = +HEAPF64[$623>>3];
           $625 = $624 > 100.0;
           if (!($625)) {
            $626 = $1;
            $627 = (($626) + 48|0);
            $628 = (($627) + 200|0);
            $629 = +HEAPF64[$628>>3];
            $630 = $629 < 0.0;
            if (!($630)) {
             $632 = $1;
             $633 = (($632) + 400|0);
             $634 = (($633) + 208|0);
             $635 = +HEAPF64[$634>>3];
             $636 = $1;
             $637 = (($636) + 400|0);
             $638 = (($637) + 200|0);
             $639 = +HEAPF64[$638>>3];
             $640 = $635 > $639;
             if (!($640)) {
              $641 = $1;
              $642 = (($641) + 400|0);
              $643 = (($642) + 208|0);
              $644 = +HEAPF64[$643>>3];
              $645 = $644 > 100.0;
              if (!($645)) {
               $646 = $1;
               $647 = (($646) + 400|0);
               $648 = (($647) + 200|0);
               $649 = +HEAPF64[$648>>3];
               $650 = $649 < 0.0;
               if (!($650)) {
                $652 = $1;
                $653 = (($652) + 48|0);
                $654 = (($653) + 248|0);
                $655 = HEAP32[$654>>2]|0;
                $656 = ($655|0)<(0);
                if ($656) {
                 $657 = $3;
                 __ZL19pr_append_new_chunkP13pr_append_strPKc($657,7408);
                 $0 = 1;
                 $1310 = $0;
                 STACKTOP = sp;return ($1310|0);
                }
                $658 = $1;
                $659 = (($658) + 400|0);
                $660 = (($659) + 248|0);
                $661 = HEAP32[$660>>2]|0;
                $662 = ($661|0)<(0);
                if ($662) {
                 $663 = $3;
                 __ZL19pr_append_new_chunkP13pr_append_strPKc($663,7456);
                 $0 = 1;
                 $1310 = $0;
                 STACKTOP = sp;return ($1310|0);
                }
                $664 = $1;
                $665 = (($664) + 48|0);
                $666 = (($665) + 280|0);
                $667 = +HEAPF64[$666>>3];
                $668 = $667 < 0.0;
                if (!($668)) {
                 $669 = $1;
                 $670 = (($669) + 48|0);
                 $671 = (($670) + 280|0);
                 $672 = +HEAPF64[$671>>3];
                 $673 = $672 > 32767.0;
                 if (!($673)) {
                  $674 = $1;
                  $675 = (($674) + 48|0);
                  $676 = (($675) + 288|0);
                  $677 = +HEAPF64[$676>>3];
                  $678 = $677 < 0.0;
                  if (!($678)) {
                   $679 = $1;
                   $680 = (($679) + 48|0);
                   $681 = (($680) + 288|0);
                   $682 = +HEAPF64[$681>>3];
                   $683 = $682 > 32767.0;
                   if (!($683)) {
                    $684 = $1;
                    $685 = (($684) + 2472|0);
                    $686 = +HEAPF64[$685>>3];
                    $687 = $686 < 0.0;
                    if (!($687)) {
                     $688 = $1;
                     $689 = (($688) + 2472|0);
                     $690 = +HEAPF64[$689>>3];
                     $691 = $690 > 32767.0;
                     if (!($691)) {
                      $692 = $1;
                      $693 = (($692) + 2488|0);
                      $694 = +HEAPF64[$693>>3];
                      $695 = $694 < 0.0;
                      if (!($695)) {
                       $696 = $1;
                       $697 = (($696) + 2488|0);
                       $698 = +HEAPF64[$697>>3];
                       $699 = $698 > 32767.0;
                       if (!($699)) {
                        $701 = $1;
                        $702 = (($701) + 48|0);
                        $703 = (($702) + 296|0);
                        $704 = +HEAPF64[$703>>3];
                        $705 = $704 < 0.0;
                        if (!($705)) {
                         $706 = $1;
                         $707 = (($706) + 48|0);
                         $708 = (($707) + 304|0);
                         $709 = +HEAPF64[$708>>3];
                         $710 = $709 < 0.0;
                         if (!($710)) {
                          $711 = $1;
                          $712 = (($711) + 48|0);
                          $713 = (($712) + 312|0);
                          $714 = +HEAPF64[$713>>3];
                          $715 = $714 < 0.0;
                          if (!($715)) {
                           $716 = $1;
                           $717 = (($716) + 2480|0);
                           $718 = +HEAPF64[$717>>3];
                           $719 = $718 < 0.0;
                           if (!($719)) {
                            $720 = $1;
                            $721 = (($720) + 2496|0);
                            $722 = +HEAPF64[$721>>3];
                            $723 = $722 < 0.0;
                            if (!($723)) {
                             $725 = $1;
                             $726 = (($725) + 400|0);
                             $727 = (($726) + 280|0);
                             $728 = +HEAPF64[$727>>3];
                             $729 = $728 < 0.0;
                             if (!($729)) {
                              $730 = $1;
                              $731 = (($730) + 400|0);
                              $732 = (($731) + 280|0);
                              $733 = +HEAPF64[$732>>3];
                              $734 = $733 > 32767.0;
                              if (!($734)) {
                               $735 = $1;
                               $736 = (($735) + 400|0);
                               $737 = (($736) + 288|0);
                               $738 = +HEAPF64[$737>>3];
                               $739 = $738 < 0.0;
                               if (!($739)) {
                                $740 = $1;
                                $741 = (($740) + 400|0);
                                $742 = (($741) + 288|0);
                                $743 = +HEAPF64[$742>>3];
                                $744 = $743 > 32767.0;
                                if (!($744)) {
                                 $746 = $1;
                                 $747 = (($746) + 400|0);
                                 $748 = (($747) + 296|0);
                                 $749 = +HEAPF64[$748>>3];
                                 $750 = $749 < 0.0;
                                 if (!($750)) {
                                  $751 = $1;
                                  $752 = (($751) + 400|0);
                                  $753 = (($752) + 304|0);
                                  $754 = +HEAPF64[$753>>3];
                                  $755 = $754 < 0.0;
                                  if (!($755)) {
                                   $756 = $1;
                                   $757 = (($756) + 400|0);
                                   $758 = (($757) + 312|0);
                                   $759 = +HEAPF64[$758>>3];
                                   $760 = $759 < 0.0;
                                   if (!($760)) {
                                    $762 = $1;
                                    $763 = (($762) + 48|0);
                                    $764 = (($763) + 216|0);
                                    $765 = +HEAPF64[$764>>3];
                                    $766 = $765 <= 0.0;
                                    if (!($766)) {
                                     $767 = $1;
                                     $768 = (($767) + 48|0);
                                     $769 = (($768) + 240|0);
                                     $770 = +HEAPF64[$769>>3];
                                     $771 = $770 <= 0.0;
                                     if (!($771)) {
                                      $773 = $1;
                                      $774 = (($773) + 48|0);
                                      $775 = (($774) + 232|0);
                                      $776 = +HEAPF64[$775>>3];
                                      $777 = $776 < 0.0;
                                      if ($777) {
                                       $778 = $1;
                                       $779 = (($778) + 48|0);
                                       $780 = (($779) + 224|0);
                                       $781 = +HEAPF64[$780>>3];
                                       $782 = $781 != 0.0;
                                       if (!($782)) {
                                        label = 199;
                                       }
                                      } else {
                                       label = 199;
                                      }
                                      if ((label|0) == 199) {
                                       $783 = $1;
                                       $784 = (($783) + 48|0);
                                       $785 = (($784) + 224|0);
                                       $786 = +HEAPF64[$785>>3];
                                       $787 = $786 < 0.0;
                                       if (!($787)) {
                                        $789 = $1;
                                        $790 = (($789) + 400|0);
                                        $791 = (($790) + 216|0);
                                        $792 = +HEAPF64[$791>>3];
                                        $793 = $792 <= 0.0;
                                        if (!($793)) {
                                         $794 = $1;
                                         $795 = (($794) + 400|0);
                                         $796 = (($795) + 240|0);
                                         $797 = +HEAPF64[$796>>3];
                                         $798 = $797 <= 0.0;
                                         if (!($798)) {
                                          $800 = $1;
                                          $801 = (($800) + 400|0);
                                          $802 = (($801) + 232|0);
                                          $803 = +HEAPF64[$802>>3];
                                          $804 = $803 < 0.0;
                                          if ($804) {
                                           $805 = $1;
                                           $806 = (($805) + 400|0);
                                           $807 = (($806) + 224|0);
                                           $808 = +HEAPF64[$807>>3];
                                           $809 = $808 != 0.0;
                                           if (!($809)) {
                                            label = 206;
                                           }
                                          } else {
                                           label = 206;
                                          }
                                          if ((label|0) == 206) {
                                           $810 = $1;
                                           $811 = (($810) + 400|0);
                                           $812 = (($811) + 224|0);
                                           $813 = +HEAPF64[$812>>3];
                                           $814 = $813 < 0.0;
                                           if (!($814)) {
                                            $816 = $1;
                                            $817 = (($816) + 808|0);
                                            $818 = +HEAPF64[$817>>3];
                                            $819 = -1.0 == $818;
                                            if ($819) {
                                             $820 = $1;
                                             $821 = (($820) + 800|0);
                                             $822 = +HEAPF64[$821>>3];
                                             $823 = 0.0 == $822;
                                             if (!($823)) {
                                              label = 210;
                                             }
                                            } else {
                                             label = 210;
                                            }
                                            if ((label|0) == 210) {
                                             $824 = $2;
                                             $825 = (($824) + 1600|0);
                                             $826 = HEAP32[$825>>2]|0;
                                             $827 = ($826|0)>(1);
                                             if ($827) {
                                              $828 = $4;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($828,7968);
                                              $829 = $4;
                                              __ZL9pr_appendP13pr_append_strPKc($829,8016);
                                             }
                                            }
                                            $830 = $1;
                                            $831 = (($830) + 808|0);
                                            $832 = +HEAPF64[$831>>3];
                                            $833 = -1.0 == $832;
                                            if ($833) {
                                             $834 = $1;
                                             $835 = (($834) + 800|0);
                                             $836 = +HEAPF64[$835>>3];
                                             $837 = 0.0 == $836;
                                             if (!($837)) {
                                              label = 214;
                                             }
                                            } else {
                                             label = 214;
                                            }
                                            if ((label|0) == 214) {
                                             $838 = $2;
                                             $839 = (($838) + 1600|0);
                                             $840 = HEAP32[$839>>2]|0;
                                             $841 = (0)==($840|0);
                                             if ($841) {
                                              $842 = $5;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($842,7968);
                                              $843 = $5;
                                              __ZL9pr_appendP13pr_append_strPKc($843,8064);
                                             }
                                            }
                                            $844 = $1;
                                            $845 = (($844) + 12|0);
                                            $846 = HEAP32[$845>>2]|0;
                                            $847 = ($846|0)!=(1);
                                            if ($847) {
                                             $848 = $2;
                                             $849 = (($848) + 8892|0);
                                             $850 = HEAP32[$849>>2]|0;
                                             $851 = ($850|0)!=(0|0);
                                             if ($851) {
                                              $852 = $4;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($852,8112);
                                              $853 = $4;
                                              __ZL9pr_appendP13pr_append_strPKc($853,8152);
                                             }
                                            }
                                            $854 = $2;
                                            $855 = (($854) + 8892|0);
                                            $856 = HEAP32[$855>>2]|0;
                                            $857 = ($856|0)!=(0|0);
                                            if ($857) {
                                             $858 = $2;
                                             $859 = (($858) + 8892|0);
                                             $860 = HEAP32[$859>>2]|0;
                                             $861 = (_strlen(($860|0))|0);
                                             $862 = ($861>>>0)>(36);
                                             if ($862) {
                                              $863 = $3;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($863,8200);
                                              $864 = $3;
                                              __ZL9pr_appendP13pr_append_strPKc($864,5520);
                                              $0 = 1;
                                              $1310 = $0;
                                              STACKTOP = sp;return ($1310|0);
                                             }
                                             $865 = $2;
                                             $866 = (($865) + 8892|0);
                                             $867 = HEAP32[$866>>2]|0;
                                             $868 = (_strlen(($867|0))|0);
                                             $869 = $1;
                                             $870 = (($869) + 400|0);
                                             $871 = (($870) + 260|0);
                                             $872 = HEAP32[$871>>2]|0;
                                             $873 = ($868>>>0)>($872>>>0);
                                             if ($873) {
                                              $874 = $5;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($874,8256);
                                             }
                                             $875 = $2;
                                             $876 = (($875) + 8892|0);
                                             $877 = HEAP32[$876>>2]|0;
                                             $878 = (_strlen(($877|0))|0);
                                             $879 = $1;
                                             $880 = (($879) + 400|0);
                                             $881 = (($880) + 256|0);
                                             $882 = HEAP32[$881>>2]|0;
                                             $883 = ($878>>>0)<($882>>>0);
                                             if ($883) {
                                              $884 = $5;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($884,8312);
                                             }
                                             $885 = $2;
                                             $886 = (($885) + 8856|0);
                                             $887 = HEAP32[$886>>2]|0;
                                             $888 = $2;
                                             $889 = (($888) + 8892|0);
                                             $890 = HEAP32[$889>>2]|0;
                                             $891 = (__ZL13strstr_nocasePcS_($887,$890)|0);
                                             $892 = ($891|0)!=(0|0);
                                             if ($892) {
                                              $894 = $2;
                                              $895 = (($894) + 8868|0);
                                              $896 = HEAP32[$895>>2]|0;
                                              $897 = $2;
                                              $898 = (($897) + 8892|0);
                                              $899 = HEAP32[$898>>2]|0;
                                              $900 = (__ZL13strstr_nocasePcS_($896,$899)|0);
                                              $901 = ($900|0)!=(0|0);
                                              if (!($901)) {
                                               $902 = $4;
                                               __ZL19pr_append_new_chunkP13pr_append_strPKc($902,8416);
                                              }
                                             } else {
                                              $893 = $4;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($893,8368);
                                             }
                                            }
                                            $903 = $2;
                                            $904 = (($903) + 8884|0);
                                            $905 = HEAP32[$904>>2]|0;
                                            $906 = ($905|0)!=(0|0);
                                            if ($906) {
                                             $907 = $2;
                                             $908 = (($907) + 8884|0);
                                             $909 = HEAP32[$908>>2]|0;
                                             $910 = (_strlen(($909|0))|0);
                                             $911 = ($910>>>0)>(36);
                                             if ($911) {
                                              $912 = $3;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($912,8464);
                                              $913 = $3;
                                              __ZL9pr_appendP13pr_append_strPKc($913,5520);
                                              $0 = 1;
                                              $1310 = $0;
                                              STACKTOP = sp;return ($1310|0);
                                             }
                                             $914 = $2;
                                             $915 = (($914) + 8884|0);
                                             $916 = HEAP32[$915>>2]|0;
                                             $917 = (_strlen(($916|0))|0);
                                             $918 = $1;
                                             $919 = (($918) + 48|0);
                                             $920 = (($919) + 260|0);
                                             $921 = HEAP32[$920>>2]|0;
                                             $922 = ($917>>>0)>($921>>>0);
                                             if ($922) {
                                              $923 = $5;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($923,8520);
                                             }
                                             $924 = $2;
                                             $925 = (($924) + 8884|0);
                                             $926 = HEAP32[$925>>2]|0;
                                             $927 = (_strlen(($926|0))|0);
                                             $928 = $1;
                                             $929 = (($928) + 48|0);
                                             $930 = (($929) + 256|0);
                                             $931 = HEAP32[$930>>2]|0;
                                             $932 = ($927>>>0)<($931>>>0);
                                             if ($932) {
                                              $933 = $5;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($933,8560);
                                             }
                                             $934 = $2;
                                             $935 = (($934) + 8856|0);
                                             $936 = HEAP32[$935>>2]|0;
                                             $937 = $2;
                                             $938 = (($937) + 8884|0);
                                             $939 = HEAP32[$938>>2]|0;
                                             $940 = (__ZL13strstr_nocasePcS_($936,$939)|0);
                                             $941 = ($940|0)!=(0|0);
                                             if ($941) {
                                              $943 = $2;
                                              $944 = (($943) + 8868|0);
                                              $945 = HEAP32[$944>>2]|0;
                                              $946 = $2;
                                              $947 = (($946) + 8884|0);
                                              $948 = HEAP32[$947>>2]|0;
                                              $949 = (__ZL13strstr_nocasePcS_($945,$948)|0);
                                              $950 = ($949|0)!=(0|0);
                                              if (!($950)) {
                                               $951 = $4;
                                               __ZL19pr_append_new_chunkP13pr_append_strPKc($951,8640);
                                              }
                                             } else {
                                              $942 = $4;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($942,8600);
                                             }
                                            }
                                            $952 = $2;
                                            $953 = (($952) + 8888|0);
                                            $954 = HEAP32[$953>>2]|0;
                                            $955 = ($954|0)!=(0|0);
                                            if ($955) {
                                             $956 = $2;
                                             $957 = (($956) + 8888|0);
                                             $958 = HEAP32[$957>>2]|0;
                                             $959 = (_strlen(($958|0))|0);
                                             $960 = ($959>>>0)>(36);
                                             if ($960) {
                                              $961 = $3;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($961,8688);
                                              $962 = $3;
                                              __ZL9pr_appendP13pr_append_strPKc($962,5520);
                                              $0 = 1;
                                              $1310 = $0;
                                              STACKTOP = sp;return ($1310|0);
                                             }
                                             $963 = $2;
                                             $964 = (($963) + 8888|0);
                                             $965 = HEAP32[$964>>2]|0;
                                             $966 = (_strlen(($965|0))|0);
                                             $967 = $1;
                                             $968 = (($967) + 48|0);
                                             $969 = (($968) + 256|0);
                                             $970 = HEAP32[$969>>2]|0;
                                             $971 = ($966>>>0)<($970>>>0);
                                             if ($971) {
                                              $972 = $5;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($972,8744);
                                             }
                                             $973 = $2;
                                             $974 = (($973) + 8888|0);
                                             $975 = HEAP32[$974>>2]|0;
                                             $976 = (_strlen(($975|0))|0);
                                             $977 = $1;
                                             $978 = (($977) + 48|0);
                                             $979 = (($978) + 260|0);
                                             $980 = HEAP32[$979>>2]|0;
                                             $981 = ($976>>>0)>($980>>>0);
                                             if ($981) {
                                              $982 = $5;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($982,8792);
                                             } else {
                                              $983 = $2;
                                              $984 = (($983) + 8888|0);
                                              $985 = HEAP32[$984>>2]|0;
                                              _p3_reverse_complement($985,4808);
                                              $986 = $2;
                                              $987 = (($986) + 8856|0);
                                              $988 = HEAP32[$987>>2]|0;
                                              $989 = (__ZL13strstr_nocasePcS_($988,4808)|0);
                                              $990 = ($989|0)!=(0|0);
                                              if ($990) {
                                               $992 = $2;
                                               $993 = (($992) + 8868|0);
                                               $994 = HEAP32[$993>>2]|0;
                                               $995 = (__ZL13strstr_nocasePcS_($994,4808)|0);
                                               $996 = ($995|0)!=(0|0);
                                               if (!($996)) {
                                                $997 = $4;
                                                __ZL19pr_append_new_chunkP13pr_append_strPKc($997,8880);
                                               }
                                              } else {
                                               $991 = $4;
                                               __ZL19pr_append_new_chunkP13pr_append_strPKc($991,8840);
                                              }
                                             }
                                            }
                                            $998 = $1;
                                            $999 = (($998) + 2520|0);
                                            $1000 = (($999) + 64|0);
                                            $1001 = +HEAPF64[$1000>>3];
                                            $1002 = $1001 != 0.0;
                                            if ($1002) {
                                             label = 261;
                                            } else {
                                             $1003 = $1;
                                             $1004 = (($1003) + 2520|0);
                                             $1005 = (($1004) + 72|0);
                                             $1006 = +HEAPF64[$1005>>3];
                                             $1007 = $1006 != 0.0;
                                             if ($1007) {
                                              label = 261;
                                             }
                                            }
                                            if ((label|0) == 261) {
                                             $1008 = $1;
                                             $1009 = (($1008) + 2440|0);
                                             $1010 = +HEAPF64[$1009>>3];
                                             $1011 = $1010 == 2.22507385850720138309E-308;
                                             if ($1011) {
                                              $1012 = $3;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($1012,8928);
                                              $0 = 1;
                                              $1310 = $0;
                                              STACKTOP = sp;return ($1310|0);
                                             }
                                            }
                                            $1013 = $1;
                                            $1014 = (($1013) + 2520|0);
                                            $1015 = (($1014) + 80|0);
                                            $1016 = +HEAPF64[$1015>>3];
                                            $1017 = $1016 != 0.0;
                                            if ($1017) {
                                             label = 265;
                                            } else {
                                             $1018 = $1;
                                             $1019 = (($1018) + 2520|0);
                                             $1020 = (($1019) + 88|0);
                                             $1021 = +HEAPF64[$1020>>3];
                                             $1022 = $1021 != 0.0;
                                             if ($1022) {
                                              label = 265;
                                             }
                                            }
                                            if ((label|0) == 265) {
                                             $1023 = $1;
                                             $1024 = (($1023) + 2420|0);
                                             $1025 = HEAP32[$1024>>2]|0;
                                             $1026 = ($1025|0)==(-2147483648);
                                             if ($1026) {
                                              $1027 = $3;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($1027,9024);
                                              $0 = 1;
                                              $1310 = $0;
                                              STACKTOP = sp;return ($1310|0);
                                             }
                                            }
                                            $1028 = $1;
                                            $1029 = (($1028) + 48|0);
                                            $1030 = (($1029) + 8|0);
                                            $1031 = (($1030) + 56|0);
                                            $1032 = +HEAPF64[$1031>>3];
                                            $1033 = $1032 != 0.0;
                                            if ($1033) {
                                             label = 269;
                                            } else {
                                             $1034 = $1;
                                             $1035 = (($1034) + 48|0);
                                             $1036 = (($1035) + 8|0);
                                             $1037 = (($1036) + 48|0);
                                             $1038 = +HEAPF64[$1037>>3];
                                             $1039 = $1038 != 0.0;
                                             if ($1039) {
                                              label = 269;
                                             }
                                            }
                                            if ((label|0) == 269) {
                                             $1040 = $1;
                                             $1041 = (($1040) + 48|0);
                                             $1042 = (($1041) + 192|0);
                                             $1043 = +HEAPF64[$1042>>3];
                                             $1044 = $1043 == -2147483648.0;
                                             if ($1044) {
                                              $1045 = $3;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($1045,9104);
                                              $0 = 1;
                                              $1310 = $0;
                                              STACKTOP = sp;return ($1310|0);
                                             }
                                            }
                                            $1046 = $1;
                                            $1047 = (($1046) + 400|0);
                                            $1048 = (($1047) + 8|0);
                                            $1049 = (($1048) + 56|0);
                                            $1050 = +HEAPF64[$1049>>3];
                                            $1051 = $1050 != 0.0;
                                            if ($1051) {
                                             label = 273;
                                            } else {
                                             $1052 = $1;
                                             $1053 = (($1052) + 400|0);
                                             $1054 = (($1053) + 8|0);
                                             $1055 = (($1054) + 48|0);
                                             $1056 = +HEAPF64[$1055>>3];
                                             $1057 = $1056 != 0.0;
                                             if ($1057) {
                                              label = 273;
                                             }
                                            }
                                            if ((label|0) == 273) {
                                             $1058 = $1;
                                             $1059 = (($1058) + 400|0);
                                             $1060 = (($1059) + 192|0);
                                             $1061 = +HEAPF64[$1060>>3];
                                             $1062 = $1061 == -2147483648.0;
                                             if ($1062) {
                                              $1063 = $3;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($1063,9192);
                                              $0 = 1;
                                              $1310 = $0;
                                              STACKTOP = sp;return ($1310|0);
                                             }
                                            }
                                            $1064 = $1;
                                            $1065 = (($1064) + 12|0);
                                            $1066 = HEAP32[$1065>>2]|0;
                                            $1067 = ($1066|0)!=(1);
                                            if ($1067) {
                                             $1068 = $1;
                                             $1069 = (($1068) + 2520|0);
                                             $1070 = (($1069) + 8|0);
                                             $1071 = +HEAPF64[$1070>>3];
                                             $1072 = $1071 != 0.0;
                                             if ($1072) {
                                              $1073 = $3;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($1073,9288);
                                              $0 = 1;
                                              $1310 = $0;
                                              STACKTOP = sp;return ($1310|0);
                                             }
                                            }
                                            $1074 = $1;
                                            $1075 = (($1074) + 48|0);
                                            $1076 = (($1075) + 8|0);
                                            $1077 = (($1076) + 104|0);
                                            $1078 = +HEAPF64[$1077>>3];
                                            $1079 = $1078 != 0.0;
                                            if ($1079) {
                                             $1080 = $1;
                                             $1081 = (($1080) + 48|0);
                                             $1082 = HEAP32[$1081>>2]|0;
                                             $1083 = (_seq_lib_num_seq($1082)|0);
                                             $1084 = ($1083|0)!=(0);
                                             if (!($1084)) {
                                              $1085 = $3;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($1085,9392);
                                              $0 = 1;
                                              $1310 = $0;
                                              STACKTOP = sp;return ($1310|0);
                                             }
                                            }
                                            $1086 = $1;
                                            $1087 = (($1086) + 400|0);
                                            $1088 = (($1087) + 8|0);
                                            $1089 = (($1088) + 104|0);
                                            $1090 = +HEAPF64[$1089>>3];
                                            $1091 = $1090 != 0.0;
                                            if ($1091) {
                                             $1092 = $1;
                                             $1093 = (($1092) + 400|0);
                                             $1094 = HEAP32[$1093>>2]|0;
                                             $1095 = (_seq_lib_num_seq($1094)|0);
                                             $1096 = ($1095|0)!=(0);
                                             if (!($1096)) {
                                              $1097 = $3;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($1097,9480);
                                              $0 = 1;
                                              $1310 = $0;
                                              STACKTOP = sp;return ($1310|0);
                                             }
                                            }
                                            $1098 = $1;
                                            $1099 = (($1098) + 2520|0);
                                            $1100 = (($1099) + 96|0);
                                            $1101 = +HEAPF64[$1100>>3];
                                            $1102 = $1101 != 0.0;
                                            if ($1102) {
                                             $1103 = $1;
                                             $1104 = (($1103) + 48|0);
                                             $1105 = HEAP32[$1104>>2]|0;
                                             $1106 = (_seq_lib_num_seq($1105)|0);
                                             $1107 = ($1106|0)!=(0);
                                             if (!($1107)) {
                                              $1108 = $3;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($1108,9392);
                                              $0 = 1;
                                              $1310 = $0;
                                              STACKTOP = sp;return ($1310|0);
                                             }
                                            }
                                            $1109 = $1;
                                            $1110 = (($1109) + 2520|0);
                                            $1111 = (($1110) + 8|0);
                                            $1112 = +HEAPF64[$1111>>3];
                                            $1113 = $1112 != 0.0;
                                            if ($1113) {
                                             $1114 = $1;
                                             $1115 = (($1114) + 12|0);
                                             $1116 = HEAP32[$1115>>2]|0;
                                             $1117 = ($1116|0)==(0);
                                             if ($1117) {
                                              $1118 = $3;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($1118,9288);
                                              $0 = 1;
                                              $1310 = $0;
                                              STACKTOP = sp;return ($1310|0);
                                             }
                                            }
                                            $1119 = $1;
                                            $1120 = (($1119) + 780|0);
                                            $1121 = HEAP32[$1120>>2]|0;
                                            $1122 = ($1121|0)<(0);
                                            if ($1122) {
                                             $1123 = $3;
                                             __ZL19pr_append_new_chunkP13pr_append_strPKc($1123,9584);
                                             $0 = 1;
                                             $1310 = $0;
                                             STACKTOP = sp;return ($1310|0);
                                            }
                                            $1124 = $1;
                                            $1125 = (($1124) + 780|0);
                                            $1126 = (($1125) + 8|0);
                                            $1127 = HEAP32[$1126>>2]|0;
                                            $1128 = ($1127|0)<(0);
                                            if ($1128) {
                                             $1129 = $3;
                                             __ZL19pr_append_new_chunkP13pr_append_strPKc($1129,9632);
                                             $0 = 1;
                                             $1310 = $0;
                                             STACKTOP = sp;return ($1310|0);
                                            }
                                            $1130 = $1;
                                            $1131 = (($1130) + 780|0);
                                            $1132 = (($1131) + 12|0);
                                            $1133 = HEAP32[$1132>>2]|0;
                                            $1134 = ($1133|0)<(0);
                                            if ($1134) {
                                             $1135 = $3;
                                             __ZL19pr_append_new_chunkP13pr_append_strPKc($1135,9680);
                                             $0 = 1;
                                             $1310 = $0;
                                             STACKTOP = sp;return ($1310|0);
                                            }
                                            $1136 = $1;
                                            $1137 = (($1136) + 780|0);
                                            $1138 = (($1137) + 4|0);
                                            $1139 = HEAP32[$1138>>2]|0;
                                            $1140 = ($1139|0)<(0);
                                            if ($1140) {
                                             $1141 = $3;
                                             __ZL19pr_append_new_chunkP13pr_append_strPKc($1141,9728);
                                             $0 = 1;
                                             $1310 = $0;
                                             STACKTOP = sp;return ($1310|0);
                                            }
                                            $1142 = $1;
                                            $1143 = (($1142) + 780|0);
                                            $1144 = (($1143) + 8|0);
                                            $1145 = HEAP32[$1144>>2]|0;
                                            $1146 = $1;
                                            $1147 = (($1146) + 780|0);
                                            $1148 = (($1147) + 4|0);
                                            $1149 = HEAP32[$1148>>2]|0;
                                            $1150 = ($1145|0)>($1149|0);
                                            if ($1150) {
                                             $1151 = $3;
                                             __ZL19pr_append_new_chunkP13pr_append_strPKc($1151,9776);
                                             $0 = 1;
                                             $1310 = $0;
                                             STACKTOP = sp;return ($1310|0);
                                            }
                                            $1152 = $1;
                                            $1153 = (($1152) + 780|0);
                                            $1154 = (($1153) + 12|0);
                                            $1155 = HEAP32[$1154>>2]|0;
                                            $1156 = $1;
                                            $1157 = (($1156) + 780|0);
                                            $1158 = (($1157) + 4|0);
                                            $1159 = HEAP32[$1158>>2]|0;
                                            $1160 = ($1155|0)>($1159|0);
                                            if ($1160) {
                                             $1161 = $3;
                                             __ZL19pr_append_new_chunkP13pr_append_strPKc($1161,9832);
                                             $0 = 1;
                                             $1310 = $0;
                                             STACKTOP = sp;return ($1310|0);
                                            }
                                            $1162 = $1;
                                            $1163 = (($1162) + 780|0);
                                            $1164 = HEAP32[$1163>>2]|0;
                                            $1165 = $1;
                                            $1166 = (($1165) + 780|0);
                                            $1167 = (($1166) + 4|0);
                                            $1168 = HEAP32[$1167>>2]|0;
                                            $1169 = ($1164|0)>($1168|0);
                                            if ($1169) {
                                             $1170 = $3;
                                             __ZL19pr_append_new_chunkP13pr_append_strPKc($1170,9888);
                                             $0 = 1;
                                             $1310 = $0;
                                             STACKTOP = sp;return ($1310|0);
                                            }
                                            $1171 = $2;
                                            $1172 = (($1171) + 8896|0);
                                            $1173 = HEAP32[$1172>>2]|0;
                                            $1174 = ($1173|0)>(-1);
                                            if ($1174) {
                                             $1175 = $2;
                                             $1176 = (($1175) + 8900|0);
                                             $1177 = HEAP32[$1176>>2]|0;
                                             $1178 = ($1177|0)>(-1);
                                             if ($1178) {
                                              $1179 = $2;
                                              $1180 = (($1179) + 8896|0);
                                              $1181 = HEAP32[$1180>>2]|0;
                                              $1182 = $2;
                                              $1183 = (($1182) + 8900|0);
                                              $1184 = HEAP32[$1183>>2]|0;
                                              $1185 = ($1181|0)>($1184|0);
                                              if ($1185) {
                                               $1186 = $3;
                                               __ZL19pr_append_new_chunkP13pr_append_strPKc($1186,9944);
                                               $0 = 1;
                                               $1310 = $0;
                                               STACKTOP = sp;return ($1310|0);
                                              }
                                             }
                                            }
                                            $1187 = $2;
                                            $1188 = (($1187) + 8908|0);
                                            $1189 = HEAP32[$1188>>2]|0;
                                            $1190 = ($1189|0)>(-1);
                                            if ($1190) {
                                             $1191 = $2;
                                             $1192 = (($1191) + 8904|0);
                                             $1193 = HEAP32[$1192>>2]|0;
                                             $1194 = ($1193|0)>(-1);
                                             if ($1194) {
                                              $1195 = $2;
                                              $1196 = (($1195) + 8908|0);
                                              $1197 = HEAP32[$1196>>2]|0;
                                              $1198 = $2;
                                              $1199 = (($1198) + 8904|0);
                                              $1200 = HEAP32[$1199>>2]|0;
                                              $1201 = ($1197|0)>($1200|0);
                                              if ($1201) {
                                               $1202 = $3;
                                               __ZL19pr_append_new_chunkP13pr_append_strPKc($1202,10000);
                                               $0 = 1;
                                               $1310 = $0;
                                               STACKTOP = sp;return ($1310|0);
                                              }
                                             }
                                            }
                                            $1203 = $1;
                                            $1204 = (($1203) + 2648|0);
                                            $1205 = HEAP32[$1204>>2]|0;
                                            $1206 = ($1205|0)<(1);
                                            if ($1206) {
                                             $1207 = $3;
                                             __ZL19pr_append_new_chunkP13pr_append_strPKc($1207,10056);
                                             $0 = 1;
                                             $1310 = $0;
                                             STACKTOP = sp;return ($1310|0);
                                            }
                                            $1208 = $1;
                                            $1209 = (($1208) + 2652|0);
                                            $1210 = HEAP32[$1209>>2]|0;
                                            $1211 = ($1210|0)<(1);
                                            if ($1211) {
                                             $1212 = $3;
                                             __ZL19pr_append_new_chunkP13pr_append_strPKc($1212,10120);
                                             $0 = 1;
                                             $1310 = $0;
                                             STACKTOP = sp;return ($1310|0);
                                            }
                                            $1213 = $2;
                                            $1214 = (($1213) + 8828|0);
                                            $1215 = HEAP32[$1214>>2]|0;
                                            $1216 = ($1215|0)>(0);
                                            if ($1216) {
                                             $1217 = $1;
                                             $1218 = (($1217) + 2648|0);
                                             $1219 = HEAP32[$1218>>2]|0;
                                             $1220 = $1;
                                             $1221 = (($1220) + 48|0);
                                             $1222 = (($1221) + 260|0);
                                             $1223 = HEAP32[$1222>>2]|0;
                                             $1224 = (($1223|0) / 2)&-1;
                                             $1225 = ($1219|0)>($1224|0);
                                             if ($1225) {
                                              $1226 = $3;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($1226,10184);
                                              $0 = 1;
                                              $1310 = $0;
                                              STACKTOP = sp;return ($1310|0);
                                             }
                                            }
                                            $1227 = $2;
                                            $1228 = (($1227) + 8828|0);
                                            $1229 = HEAP32[$1228>>2]|0;
                                            $1230 = ($1229|0)>(0);
                                            if ($1230) {
                                             $1231 = $1;
                                             $1232 = (($1231) + 2652|0);
                                             $1233 = HEAP32[$1232>>2]|0;
                                             $1234 = $1;
                                             $1235 = (($1234) + 48|0);
                                             $1236 = (($1235) + 260|0);
                                             $1237 = HEAP32[$1236>>2]|0;
                                             $1238 = (($1237|0) / 2)&-1;
                                             $1239 = ($1233|0)>($1238|0);
                                             if ($1239) {
                                              $1240 = $3;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($1240,10248);
                                              $0 = 1;
                                              $1310 = $0;
                                              STACKTOP = sp;return ($1310|0);
                                             }
                                            }
                                            $1241 = $1;
                                            $1242 = (($1241) + 48|0);
                                            $1243 = (($1242) + 224|0);
                                            $1244 = +HEAPF64[$1243>>3];
                                            $1245 = $1244 > 0.0;
                                            if ($1245) {
                                             $1246 = $1;
                                             $1247 = (($1246) + 48|0);
                                             $1248 = (($1247) + 232|0);
                                             $1249 = +HEAPF64[$1248>>3];
                                             $1250 = $1249 <= 0.0;
                                             if ($1250) {
                                              $1251 = $5;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($1251,10312);
                                             }
                                            }
                                            $1252 = $1;
                                            $1253 = (($1252) + 48|0);
                                            $1254 = (($1253) + 344|0);
                                            $1255 = HEAP32[$1254>>2]|0;
                                            $1256 = ($1255|0)!=(0|0);
                                            if ($1256) {
                                             $1257 = $1;
                                             $1258 = (($1257) + 48|0);
                                             $1259 = (($1258) + 344|0);
                                             $1260 = HEAP32[$1259>>2]|0;
                                             $1261 = (__ZL26test_must_match_parametersPc($1260)|0);
                                             $1262 = ($1261|0)!=(0);
                                             if ($1262) {
                                              $1263 = $3;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($1263,10416);
                                              $0 = 1;
                                              $1310 = $0;
                                              STACKTOP = sp;return ($1310|0);
                                             }
                                            }
                                            $1264 = $1;
                                            $1265 = (($1264) + 48|0);
                                            $1266 = (($1265) + 348|0);
                                            $1267 = HEAP32[$1266>>2]|0;
                                            $1268 = ($1267|0)!=(0|0);
                                            if ($1268) {
                                             $1269 = $1;
                                             $1270 = (($1269) + 48|0);
                                             $1271 = (($1270) + 348|0);
                                             $1272 = HEAP32[$1271>>2]|0;
                                             $1273 = (__ZL26test_must_match_parametersPc($1272)|0);
                                             $1274 = ($1273|0)!=(0);
                                             if ($1274) {
                                              $1275 = $3;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($1275,10464);
                                              $0 = 1;
                                              $1310 = $0;
                                              STACKTOP = sp;return ($1310|0);
                                             }
                                            }
                                            $1276 = $1;
                                            $1277 = (($1276) + 400|0);
                                            $1278 = (($1277) + 344|0);
                                            $1279 = HEAP32[$1278>>2]|0;
                                            $1280 = ($1279|0)!=(0|0);
                                            if ($1280) {
                                             $1281 = $1;
                                             $1282 = (($1281) + 400|0);
                                             $1283 = (($1282) + 344|0);
                                             $1284 = HEAP32[$1283>>2]|0;
                                             $1285 = (__ZL26test_must_match_parametersPc($1284)|0);
                                             $1286 = ($1285|0)!=(0);
                                             if ($1286) {
                                              $1287 = $3;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($1287,10520);
                                              $0 = 1;
                                              $1310 = $0;
                                              STACKTOP = sp;return ($1310|0);
                                             }
                                            }
                                            $1288 = $1;
                                            $1289 = (($1288) + 400|0);
                                            $1290 = (($1289) + 348|0);
                                            $1291 = HEAP32[$1290>>2]|0;
                                            $1292 = ($1291|0)!=(0|0);
                                            if ($1292) {
                                             $1293 = $1;
                                             $1294 = (($1293) + 400|0);
                                             $1295 = (($1294) + 348|0);
                                             $1296 = HEAP32[$1295>>2]|0;
                                             $1297 = (__ZL26test_must_match_parametersPc($1296)|0);
                                             $1298 = ($1297|0)!=(0);
                                             if ($1298) {
                                              $1299 = $3;
                                              __ZL19pr_append_new_chunkP13pr_append_strPKc($1299,10584);
                                              $0 = 1;
                                              $1310 = $0;
                                              STACKTOP = sp;return ($1310|0);
                                             }
                                            }
                                            $1300 = $4;
                                            $1301 = (($1300) + 4|0);
                                            $1302 = HEAP32[$1301>>2]|0;
                                            $1303 = (0|0)==($1302|0);
                                            if ($1303) {
                                             $1304 = $3;
                                             $1305 = (($1304) + 4|0);
                                             $1306 = HEAP32[$1305>>2]|0;
                                             $1307 = (0|0)==($1306|0);
                                             $1309 = $1307;
                                            } else {
                                             $1309 = 0;
                                            }
                                            $1308 = $1309 ? 0 : 1;
                                            $0 = $1308;
                                            $1310 = $0;
                                            STACKTOP = sp;return ($1310|0);
                                           }
                                          }
                                          $815 = $3;
                                          __ZL19pr_append_new_chunkP13pr_append_strPKc($815,7896);
                                          $0 = 1;
                                          $1310 = $0;
                                          STACKTOP = sp;return ($1310|0);
                                         }
                                        }
                                        $799 = $3;
                                        __ZL19pr_append_new_chunkP13pr_append_strPKc($799,7832);
                                        $0 = 1;
                                        $1310 = $0;
                                        STACKTOP = sp;return ($1310|0);
                                       }
                                      }
                                      $788 = $3;
                                      __ZL19pr_append_new_chunkP13pr_append_strPKc($788,7768);
                                      $0 = 1;
                                      $1310 = $0;
                                      STACKTOP = sp;return ($1310|0);
                                     }
                                    }
                                    $772 = $3;
                                    __ZL19pr_append_new_chunkP13pr_append_strPKc($772,7712);
                                    $0 = 1;
                                    $1310 = $0;
                                    STACKTOP = sp;return ($1310|0);
                                   }
                                  }
                                 }
                                 $761 = $3;
                                 __ZL19pr_append_new_chunkP13pr_append_strPKc($761,7648);
                                 $0 = 1;
                                 $1310 = $0;
                                 STACKTOP = sp;return ($1310|0);
                                }
                               }
                              }
                             }
                             $745 = $3;
                             __ZL19pr_append_new_chunkP13pr_append_strPKc($745,7648);
                             $0 = 1;
                             $1310 = $0;
                             STACKTOP = sp;return ($1310|0);
                            }
                           }
                          }
                         }
                        }
                        $724 = $3;
                        __ZL19pr_append_new_chunkP13pr_append_strPKc($724,7568);
                        $0 = 1;
                        $1310 = $0;
                        STACKTOP = sp;return ($1310|0);
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
                $700 = $3;
                __ZL19pr_append_new_chunkP13pr_append_strPKc($700,7512);
                $0 = 1;
                $1310 = $0;
                STACKTOP = sp;return ($1310|0);
               }
              }
             }
             $651 = $3;
             __ZL19pr_append_new_chunkP13pr_append_strPKc($651,7360);
             $0 = 1;
             $1310 = $0;
             STACKTOP = sp;return ($1310|0);
            }
           }
          }
          $631 = $3;
          __ZL19pr_append_new_chunkP13pr_append_strPKc($631,7304);
          $0 = 1;
          $1310 = $0;
          STACKTOP = sp;return ($1310|0);
         }
        }
        $611 = $3;
        __ZL19pr_append_new_chunkP13pr_append_strPKc($611,7232);
        $0 = 1;
        $1310 = $0;
        STACKTOP = sp;return ($1310|0);
       }
      }
      $592 = $3;
      __ZL19pr_append_new_chunkP13pr_append_strPKc($592,7168);
      $0 = 1;
      $1310 = $0;
      STACKTOP = sp;return ($1310|0);
     }
    }
   }
   $336 = $4;
   __ZL19pr_append_new_chunkP13pr_append_strPKc($336,6384);
   $0 = 1;
   $1310 = $0;
   STACKTOP = sp;return ($1310|0);
  }
 }
 $193 = $3;
 __ZL19pr_append_new_chunkP13pr_append_strPKc($193,5816);
 $0 = 1;
 $1310 = $0;
 STACKTOP = sp;return ($1310|0);
}
function __ZL27set_retval_both_stop_codonsPK8seq_argsP8p3retval($sa,$retval) {
 $sa = $sa|0;
 $retval = $retval|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $sa;
 $1 = $retval;
 $2 = $0;
 $3 = (($2) + 8868|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = (($5) + 8840|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZL15find_stop_codonPKcii($4,$7,-1)|0);
 $9 = $1;
 $10 = (($9) + 456|0);
 HEAP32[$10>>2] = $8;
 $11 = $0;
 $12 = (($11) + 8832|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 $15 = (($14) + 456|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($13))|0;
 HEAP32[$15>>2] = $17;
 $18 = $0;
 $19 = (($18) + 8868|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $0;
 $22 = (($21) + 8840|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (__ZL15find_stop_codonPKcii($20,$23,1)|0);
 $25 = $1;
 $26 = (($25) + 452|0);
 HEAP32[$26>>2] = $24;
 $27 = $0;
 $28 = (($27) + 8832|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $1;
 $31 = (($30) + 452|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + ($29))|0;
 HEAP32[$31>>2] = $33;
 STACKTOP = sp;return;
}
function __ZL26make_complete_primer_listsP8p3retvalPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderSC_($retval,$pa,$sa,$dpal_arg_to_use,$thal_arg_to_use,$thal_oligo_arg_to_use) {
 $retval = $retval|0;
 $pa = $pa|0;
 $sa = $sa|0;
 $dpal_arg_to_use = $dpal_arg_to_use|0;
 $thal_arg_to_use = $thal_arg_to_use|0;
 $thal_oligo_arg_to_use = $thal_oligo_arg_to_use|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $extreme = 0, $length = 0, $n = 0, $start = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer = sp;
 $extreme = sp + 20|0;
 $0 = $retval;
 $1 = $pa;
 $2 = $sa;
 $3 = $dpal_arg_to_use;
 $4 = $thal_arg_to_use;
 $5 = $thal_oligo_arg_to_use;
 $6 = $2;
 $7 = (($6) + 8868|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_strlen(($8|0))|0);
 $n = $9;
 $10 = (2147483647)>($9|0);
 if (!($10)) {
  $11 = HEAP32[_stderr>>2]|0;
  $12 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 56;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2172;
  $vararg_ptr3 = (($vararg_buffer) + 12|0);
  HEAP32[$vararg_ptr3>>2] = 11256;
  (_fprintf(($11|0),(16|0),($vararg_buffer|0))|0);
  _abort();
  // unreachable;
 }
 $13 = $1;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0);
 if ($16) {
  HEAP32[$extreme>>2] = 0;
  $17 = $n;
  $18 = $1;
  $19 = (($18) + 48|0);
  $20 = (($19) + 256|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($17) - ($21))|0;
  $length = $22;
  $23 = $1;
  $24 = (($23) + 48|0);
  $25 = (($24) + 256|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) - 1)|0;
  $start = $27;
  $28 = $start;
  $29 = $length;
  $30 = $0;
  $31 = $1;
  $32 = $2;
  $33 = $3;
  $34 = $4;
  $35 = $0;
  (__ZL17pick_primer_rangeiiPiP11oligo_arrayPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderP8p3retval($28,$29,$extreme,$30,$31,$32,$33,$34,$35)|0);
 }
 $36 = $1;
 $37 = (($36) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0);
 if ($39) {
  $40 = $n;
  HEAP32[$extreme>>2] = $40;
  $41 = $n;
  $42 = $1;
  $43 = (($42) + 48|0);
  $44 = (($43) + 256|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($41) - ($45))|0;
  $47 = (($46) + 1)|0;
  $length = $47;
  $start = 0;
  $48 = $start;
  $49 = $length;
  $50 = $0;
  $51 = (($50) + 232|0);
  $52 = $1;
  $53 = $2;
  $54 = $3;
  $55 = $4;
  $56 = $0;
  (__ZL17pick_primer_rangeiiPiP11oligo_arrayPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderP8p3retval($48,$49,$extreme,$51,$52,$53,$54,$55,$56)|0);
 }
 $57 = $1;
 $58 = (($57) + 12|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)!=(0);
 if (!($60)) {
  STACKTOP = sp;return 0;
 }
 $61 = $n;
 $62 = $1;
 $63 = (($62) + 400|0);
 $64 = (($63) + 256|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($61) - ($65))|0;
 $length = $66;
 $67 = $1;
 $68 = (($67) + 400|0);
 $69 = (($68) + 256|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (($70) - 1)|0;
 $start = $71;
 HEAP32[$extreme>>2] = 0;
 $72 = $start;
 $73 = $length;
 $74 = $0;
 $75 = (($74) + 116|0);
 $76 = $1;
 $77 = $2;
 $78 = $3;
 $79 = $5;
 $80 = $0;
 (__ZL17pick_primer_rangeiiPiP11oligo_arrayPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderP8p3retval($72,$73,$extreme,$75,$76,$77,$78,$79,$80)|0);
 STACKTOP = sp;return 0;
}
function __ZL27pick_sequencing_primer_listP8p3retvalPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holder($retval,$pa,$sa,$dpal_arg_to_use,$thal_arg_to_use) {
 $retval = $retval|0;
 $pa = $pa|0;
 $sa = $sa|0;
 $dpal_arg_to_use = $dpal_arg_to_use|0;
 $thal_arg_to_use = $thal_arg_to_use|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $extra_seq = 0, $length = 0, $n = 0, $pr_position_f = 0, $pr_position_r = 0, $primer_nr = 0, $rest_accuracy = 0, $sequenced_len = 0, $start = 0, $step_nr = 0, $tar_n = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp;
 $0 = $retval;
 $1 = $pa;
 $2 = $sa;
 $3 = $dpal_arg_to_use;
 $4 = $thal_arg_to_use;
 $5 = $2;
 $6 = (($5) + 8868|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_strlen(($7|0))|0);
 $n = $8;
 $9 = (2147483647)>($8|0);
 if (!($9)) {
  $10 = HEAP32[_stderr>>2]|0;
  $11 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $11;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 56;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2275;
  $vararg_ptr3 = (($vararg_buffer) + 12|0);
  HEAP32[$vararg_ptr3>>2] = 11256;
  (_fprintf(($10|0),(16|0),($vararg_buffer|0))|0);
  _abort();
  // unreachable;
 }
 $tar_n = 0;
 while(1) {
  $12 = $tar_n;
  $13 = $2;
  $14 = (($13) + 1600|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($12|0)<($15|0);
  if (!($16)) {
   break;
  }
  $primer_nr = 1;
  $17 = $1;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $1;
   $22 = (($21) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)!=(0);
   if ($24) {
    $25 = $1;
    $26 = (($25) + 780|0);
    $27 = (($26) + 8|0);
    $28 = HEAP32[$27>>2]|0;
    $sequenced_len = $28;
    while(1) {
     $29 = $sequenced_len;
     $30 = $tar_n;
     $31 = $2;
     $32 = (($31) + ($30<<3)|0);
     $33 = (($32) + 4|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($29|0)<($34|0);
     if (!($35)) {
      break;
     }
     $36 = $primer_nr;
     $37 = (($36) + 1)|0;
     $primer_nr = $37;
     $38 = $1;
     $39 = (($38) + 780|0);
     $40 = (($39) + 4|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $primer_nr;
     $43 = (($42) - 1)|0;
     $44 = Math_imul($41, $43)|0;
     $45 = $1;
     $46 = (($45) + 780|0);
     $47 = (($46) + 8|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (($44) + ($48))|0;
     $sequenced_len = $49;
    }
   } else {
    label = 11;
   }
  } else {
   label = 11;
  }
  if ((label|0) == 11) {
   label = 0;
   $50 = $1;
   $51 = (($50) + 780|0);
   $52 = (($51) + 4|0);
   $53 = HEAP32[$52>>2]|0;
   $sequenced_len = $53;
   while(1) {
    $54 = $sequenced_len;
    $55 = $tar_n;
    $56 = $2;
    $57 = (($56) + ($55<<3)|0);
    $58 = (($57) + 4|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($54|0)<($59|0);
    if (!($60)) {
     break;
    }
    $61 = $primer_nr;
    $62 = (($61) + 1)|0;
    $primer_nr = $62;
    $63 = $1;
    $64 = (($63) + 780|0);
    $65 = (($64) + 4|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $primer_nr;
    $68 = Math_imul($66, $67)|0;
    $sequenced_len = $68;
   }
  }
  $69 = $sequenced_len;
  $70 = $tar_n;
  $71 = $2;
  $72 = (($71) + ($70<<3)|0);
  $73 = (($72) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($69) - ($74))|0;
  $76 = (($75|0) / 2)&-1;
  $extra_seq = $76;
  $step_nr = 0;
  while(1) {
   $77 = $step_nr;
   $78 = $primer_nr;
   $79 = ($77|0)<($78|0);
   if (!($79)) {
    break;
   }
   $80 = $tar_n;
   $81 = $2;
   $82 = (($81) + ($80<<3)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $extra_seq;
   $85 = (($83) - ($84))|0;
   $86 = $1;
   $87 = (($86) + 780|0);
   $88 = (($87) + 4|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = $step_nr;
   $91 = Math_imul($89, $90)|0;
   $92 = (($85) + ($91))|0;
   $93 = $1;
   $94 = (($93) + 780|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (($92) - ($95))|0;
   $pr_position_f = $96;
   $97 = $1;
   $98 = (($97) + 4|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ($99|0)!=(0);
   if ($100) {
    $101 = $1;
    $102 = (($101) + 8|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = ($103|0)!=(0);
    if ($104) {
     $105 = $tar_n;
     $106 = $2;
     $107 = (($106) + ($105<<3)|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = $extra_seq;
     $110 = (($108) - ($109))|0;
     $111 = $1;
     $112 = (($111) + 780|0);
     $113 = (($112) + 4|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = $step_nr;
     $116 = Math_imul($114, $115)|0;
     $117 = (($110) + ($116))|0;
     $118 = $1;
     $119 = (($118) + 780|0);
     $120 = (($119) + 8|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = (($117) + ($121))|0;
     $123 = $1;
     $124 = (($123) + 780|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = (($122) + ($125))|0;
     $pr_position_r = $126;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
   if ((label|0) == 20) {
    label = 0;
    $127 = $tar_n;
    $128 = $2;
    $129 = (($128) + ($127<<3)|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = $extra_seq;
    $132 = (($130) - ($131))|0;
    $133 = $1;
    $134 = (($133) + 780|0);
    $135 = (($134) + 4|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $step_nr;
    $138 = (($137) + 1)|0;
    $139 = Math_imul($136, $138)|0;
    $140 = (($132) + ($139))|0;
    $141 = $1;
    $142 = (($141) + 780|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = (($140) + ($143))|0;
    $pr_position_r = $144;
   }
   $145 = $pr_position_f;
   $146 = $1;
   $147 = (($146) + 48|0);
   $148 = (($147) + 256|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = (($149) - 1)|0;
   $151 = ($145|0)<($150|0);
   if ($151) {
    $152 = $1;
    $153 = (($152) + 48|0);
    $154 = (($153) + 256|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = (($155) - 1)|0;
    $pr_position_f = $156;
   }
   $157 = $pr_position_f;
   $158 = $n;
   $159 = $1;
   $160 = (($159) + 48|0);
   $161 = (($160) + 256|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = (($158) - ($162))|0;
   $164 = (($163) - 1)|0;
   $165 = ($157|0)>($164|0);
   if ($165) {
    $166 = $n;
    $167 = $1;
    $168 = (($167) + 48|0);
    $169 = (($168) + 256|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = (($166) - ($170))|0;
    $172 = (($171) - 1)|0;
    $pr_position_f = $172;
    $173 = $0;
    $174 = (($173) + 444|0);
    __ZL19pr_append_new_chunkP13pr_append_strPKc($174,11304);
   }
   $175 = $pr_position_r;
   $176 = $1;
   $177 = (($176) + 48|0);
   $178 = (($177) + 256|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = (($179) - 1)|0;
   $181 = ($175|0)<($180|0);
   if ($181) {
    $182 = $1;
    $183 = (($182) + 48|0);
    $184 = (($183) + 256|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = (($185) - 1)|0;
    $pr_position_r = $186;
    $187 = $0;
    $188 = (($187) + 444|0);
    __ZL19pr_append_new_chunkP13pr_append_strPKc($188,11368);
   }
   $189 = $pr_position_r;
   $190 = $n;
   $191 = $1;
   $192 = (($191) + 48|0);
   $193 = (($192) + 256|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = (($190) - ($194))|0;
   $196 = (($195) - 1)|0;
   $197 = ($189|0)>($196|0);
   if ($197) {
    $198 = $n;
    $199 = $1;
    $200 = (($199) + 48|0);
    $201 = (($200) + 256|0);
    $202 = HEAP32[$201>>2]|0;
    $203 = (($198) - ($202))|0;
    $204 = (($203) - 1)|0;
    $pr_position_r = $204;
   }
   $205 = $1;
   $206 = (($205) + 4|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = ($207|0)!=(0);
   if ($208) {
    $209 = $pr_position_f;
    $210 = $1;
    $211 = (($210) + 780|0);
    $212 = (($211) + 12|0);
    $213 = HEAP32[$212>>2]|0;
    $214 = (($209) - ($213))|0;
    $start = $214;
    $215 = $start;
    $216 = ($215|0)<(0);
    if ($216) {
     $217 = $pr_position_f;
     $218 = (($217) + 1)|0;
     $rest_accuracy = $218;
     $start = 0;
    } else {
     $219 = $1;
     $220 = (($219) + 780|0);
     $221 = (($220) + 12|0);
     $222 = HEAP32[$221>>2]|0;
     $rest_accuracy = $222;
    }
    $223 = $rest_accuracy;
    $224 = $1;
    $225 = (($224) + 780|0);
    $226 = (($225) + 12|0);
    $227 = HEAP32[$226>>2]|0;
    $228 = (($223) + ($227))|0;
    $length = $228;
    $229 = $start;
    $230 = $length;
    $231 = (($229) + ($230))|0;
    $232 = $n;
    $233 = ($231|0)>($232|0);
    if ($233) {
     $234 = $n;
     $235 = $start;
     $236 = (($234) - ($235))|0;
     $length = $236;
    }
    $237 = $start;
    $238 = $length;
    $239 = $0;
    $240 = $1;
    $241 = $2;
    $242 = $3;
    $243 = $4;
    $244 = $0;
    (__ZL21pick_only_best_primeriiP11oligo_arrayPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderP8p3retval($237,$238,$239,$240,$241,$242,$243,$244)|0);
   }
   $245 = $1;
   $246 = (($245) + 8|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = ($247|0)!=(0);
   if ($248) {
    $249 = $pr_position_r;
    $250 = $1;
    $251 = (($250) + 780|0);
    $252 = (($251) + 12|0);
    $253 = HEAP32[$252>>2]|0;
    $254 = (($249) - ($253))|0;
    $start = $254;
    $255 = $start;
    $256 = ($255|0)<(0);
    if ($256) {
     $257 = $pr_position_r;
     $258 = (($257) + 1)|0;
     $rest_accuracy = $258;
     $start = 0;
    } else {
     $259 = $1;
     $260 = (($259) + 780|0);
     $261 = (($260) + 12|0);
     $262 = HEAP32[$261>>2]|0;
     $rest_accuracy = $262;
    }
    $263 = $rest_accuracy;
    $264 = $1;
    $265 = (($264) + 780|0);
    $266 = (($265) + 12|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = (($263) + ($267))|0;
    $length = $268;
    $269 = $start;
    $270 = $length;
    $271 = (($269) + ($270))|0;
    $272 = $n;
    $273 = ($271|0)>($272|0);
    if ($273) {
     $274 = $n;
     $275 = $start;
     $276 = (($274) - ($275))|0;
     $length = $276;
    }
    $277 = $start;
    $278 = $length;
    $279 = $0;
    $280 = (($279) + 232|0);
    $281 = $1;
    $282 = $2;
    $283 = $3;
    $284 = $4;
    $285 = $0;
    (__ZL21pick_only_best_primeriiP11oligo_arrayPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderP8p3retval($277,$278,$280,$281,$282,$283,$284,$285)|0);
   }
   $286 = $step_nr;
   $287 = (($286) + 1)|0;
   $step_nr = $287;
  }
  $288 = $tar_n;
  $289 = (($288) + 1)|0;
  $tar_n = $289;
 }
 $290 = $0;
 $291 = (($290) + 4|0);
 $292 = HEAP32[$291>>2]|0;
 $293 = $1;
 $294 = (($293) + 28|0);
 $295 = HEAP32[$294>>2]|0;
 $296 = ($292|0)>($295|0);
 if (!($296)) {
  $297 = $0;
  $298 = (($297) + 232|0);
  $299 = (($298) + 4|0);
  $300 = HEAP32[$299>>2]|0;
  $301 = $1;
  $302 = (($301) + 28|0);
  $303 = HEAP32[$302>>2]|0;
  $304 = ($300|0)>($303|0);
  if (!($304)) {
   STACKTOP = sp;return 0;
  }
 }
 $305 = $0;
 $306 = (($305) + 444|0);
 __ZL19pr_append_new_chunkP13pr_append_strPKc($306,11432);
 STACKTOP = sp;return 0;
}
function __ZL20add_primers_to_checkP8p3retvalPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderSC_($retval,$pa,$sa,$dpal_arg_to_use,$thal_arg_to_use,$thal_oligo_arg_to_use) {
 $retval = $retval|0;
 $pa = $pa|0;
 $sa = $sa|0;
 $dpal_arg_to_use = $dpal_arg_to_use|0;
 $thal_arg_to_use = $thal_arg_to_use|0;
 $thal_oligo_arg_to_use = $thal_oligo_arg_to_use|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $extreme = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $extreme = sp + 20|0;
 $0 = $retval;
 $1 = $pa;
 $2 = $sa;
 $3 = $dpal_arg_to_use;
 $4 = $thal_arg_to_use;
 $5 = $thal_oligo_arg_to_use;
 HEAP32[$extreme>>2] = 0;
 $6 = $2;
 $7 = (($6) + 8884|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $2;
  $11 = (($10) + 8884|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $0;
  $14 = $1;
  $15 = $2;
  $16 = $3;
  $17 = $4;
  $18 = $0;
  (__ZL14add_one_primerPKcPiP11oligo_arrayPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderP8p3retval($12,$extreme,$13,$14,$15,$16,$17,$18)|0);
 }
 $19 = $2;
 $20 = (($19) + 8888|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $2;
  $24 = (($23) + 8888|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $0;
  $27 = (($26) + 232|0);
  $28 = $1;
  $29 = $2;
  $30 = $3;
  $31 = $4;
  $32 = $0;
  (__ZL14add_one_primerPKcPiP11oligo_arrayPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderP8p3retval($25,$extreme,$27,$28,$29,$30,$31,$32)|0);
 }
 $33 = $2;
 $34 = (($33) + 8892|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0|0);
 if (!($36)) {
  STACKTOP = sp;return 0;
 }
 $37 = $2;
 $38 = (($37) + 8892|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $0;
 $41 = (($40) + 116|0);
 $42 = $1;
 $43 = $2;
 $44 = $3;
 $45 = $5;
 $46 = $0;
 (__ZL14add_one_primerPKcPiP11oligo_arrayPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderP8p3retval($39,$extreme,$41,$42,$43,$44,$45,$46)|0);
 STACKTOP = sp;return 0;
}
function __ZL27make_detection_primer_listsP8p3retvalPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holder($retval,$pa,$sa,$dpal_arg_to_use,$thal_arg_to_use) {
 $retval = $retval|0;
 $pa = $pa|0;
 $sa = $sa|0;
 $dpal_arg_to_use = $dpal_arg_to_use|0;
 $thal_arg_to_use = $thal_arg_to_use|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $f_b = 0, $i = 0, $left = 0, $length = 0, $n = 0, $pair_expl = 0, $pr_min = 0, $r_b = 0, $right = 0, $start = 0, $tar_l = 0, $tar_r = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer = sp;
 $left = sp + 56|0;
 $right = sp + 52|0;
 $1 = $retval;
 $2 = $pa;
 $3 = $sa;
 $4 = $dpal_arg_to_use;
 $5 = $thal_arg_to_use;
 $6 = $1;
 $7 = (($6) + 348|0);
 $8 = (($7) + 12|0);
 $pair_expl = $8;
 HEAP32[$right>>2] = 0;
 HEAP32[$left>>2] = 0;
 $pr_min = 2147483647;
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = $2;
  $11 = (($10) + 2416|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $i;
  $15 = $2;
  $16 = (($15) + 816|0);
  $17 = (($16) + ($14<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $pr_min;
  $20 = ($18|0)<($19|0);
  if ($20) {
   $21 = $i;
   $22 = $2;
   $23 = (($22) + 816|0);
   $24 = (($23) + ($21<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $pr_min = $25;
  }
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 $28 = $3;
 $29 = (($28) + 8868|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (_strlen(($30|0))|0);
 $n = $31;
 $32 = (2147483647)>($31|0);
 if (!($32)) {
  $33 = HEAP32[_stderr>>2]|0;
  $34 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $34;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 56;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 1998;
  $vararg_ptr3 = (($vararg_buffer) + 12|0);
  HEAP32[$vararg_ptr3>>2] = 11256;
  (_fprintf(($33|0),(16|0),($vararg_buffer|0))|0);
  _abort();
  // unreachable;
 }
 $tar_r = 0;
 $35 = $n;
 $tar_l = $35;
 $i = 0;
 while(1) {
  $36 = $i;
  $37 = $3;
  $38 = (($37) + 1600|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($36|0)<($39|0);
  if (!($40)) {
   break;
  }
  $41 = $i;
  $42 = $3;
  $43 = (($42) + ($41<<3)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $tar_r;
  $46 = ($44|0)>($45|0);
  if ($46) {
   $47 = $i;
   $48 = $3;
   $49 = (($48) + ($47<<3)|0);
   $50 = HEAP32[$49>>2]|0;
   $tar_r = $50;
  }
  $51 = $i;
  $52 = $3;
  $53 = (($52) + ($51<<3)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $i;
  $56 = $3;
  $57 = (($56) + ($55<<3)|0);
  $58 = (($57) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($54) + ($59))|0;
  $61 = (($60) - 1)|0;
  $62 = $tar_l;
  $63 = ($61|0)<($62|0);
  if ($63) {
   $64 = $i;
   $65 = $3;
   $66 = (($65) + ($64<<3)|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $i;
   $69 = $3;
   $70 = (($69) + ($68<<3)|0);
   $71 = (($70) + 4|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($67) + ($72))|0;
   $74 = (($73) - 1)|0;
   $tar_l = $74;
  }
  $75 = $i;
  $76 = (($75) + 1)|0;
  $i = $76;
 }
 $77 = $2;
 $78 = (($77) + 808|0);
 $79 = +HEAPF64[$78>>3];
 $80 = -1.0 == $79;
 if ($80) {
  $81 = $2;
  $82 = (($81) + 800|0);
  $83 = +HEAPF64[$82>>3];
  $84 = 0.0 == $83;
  if ($84) {
   $85 = $tar_r;
   $86 = (0)==($85|0);
   if ($86) {
    $87 = $n;
    $tar_r = $87;
   }
   $88 = $tar_l;
   $89 = $n;
   $90 = ($88|0)==($89|0);
   if ($90) {
    $tar_l = 0;
   }
  } else {
   label = 24;
  }
 } else {
  label = 24;
 }
 if ((label|0) == 24) {
  $91 = $n;
  $tar_r = $91;
  $tar_l = 0;
 }
 $92 = $1;
 $93 = (($92) + 424|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ($94|0)==(1);
 if ($95) {
  $96 = $2;
  $97 = (($96) + 4|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ($98|0)==(1);
  if ($99) {
   $100 = $n;
   $101 = (($100) - 1)|0;
   $f_b = $101;
  } else {
   label = 28;
  }
 } else {
  label = 28;
 }
 if ((label|0) == 28) {
  $102 = $tar_r;
  $103 = (($102) - 1)|0;
  $104 = $n;
  $105 = $pr_min;
  $106 = (($104) - ($105))|0;
  $107 = $2;
  $108 = (($107) + 48|0);
  $109 = (($108) + 260|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($106) + ($110))|0;
  $112 = (($111) - 1)|0;
  $113 = ($103|0)<($112|0);
  do {
   if ($113) {
    $114 = $2;
    $115 = (($114) + 32|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ($116|0)!=(0);
    if ($117) {
     $118 = $3;
     $119 = (($118) + 8884|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = ($120|0)!=(0|0);
     if ($121) {
      label = 32;
      break;
     }
    }
    $122 = $tar_r;
    $123 = (($122) - 1)|0;
    $f_b = $123;
   } else {
    label = 32;
   }
  } while(0);
  if ((label|0) == 32) {
   $124 = $n;
   $125 = $pr_min;
   $126 = (($124) - ($125))|0;
   $127 = $2;
   $128 = (($127) + 48|0);
   $129 = (($128) + 260|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (($126) + ($130))|0;
   $132 = (($131) - 1)|0;
   $f_b = $132;
  }
 }
 $133 = $2;
 $134 = (($133) + 4|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = ($135|0)!=(0);
 if ($136) {
  $137 = $n;
  HEAP32[$left>>2] = $137;
  HEAP32[$right>>2] = 0;
  $138 = $f_b;
  $139 = $2;
  $140 = (($139) + 48|0);
  $141 = (($140) + 256|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = (($138) - ($142))|0;
  $144 = (($143) + 1)|0;
  $length = $144;
  $145 = $2;
  $146 = (($145) + 48|0);
  $147 = (($146) + 256|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = (($148) - 1)|0;
  $start = $149;
  $150 = $3;
  $151 = (($150) + 8884|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = ($152|0)!=(0|0);
  if ($153) {
   $154 = $3;
   $155 = (($154) + 8884|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = $1;
   $158 = $2;
   $159 = $3;
   $160 = $4;
   $161 = $5;
   $162 = $1;
   (__ZL14add_one_primerPKcPiP11oligo_arrayPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderP8p3retval($156,$left,$157,$158,$159,$160,$161,$162)|0);
  } else {
   $163 = $3;
   $164 = (($163) + 8896|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = ($165|0)>(-1);
   if ($166) {
    label = 39;
   } else {
    $167 = $3;
    $168 = (($167) + 8900|0);
    $169 = HEAP32[$168>>2]|0;
    $170 = ($169|0)>(-1);
    if ($170) {
     label = 39;
    } else {
     $183 = $start;
     $184 = $length;
     $185 = $1;
     $186 = $2;
     $187 = $3;
     $188 = $4;
     $189 = $5;
     $190 = $1;
     (__ZL17pick_primer_rangeiiPiP11oligo_arrayPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderP8p3retval($183,$184,$left,$185,$186,$187,$188,$189,$190)|0);
    }
   }
   if ((label|0) == 39) {
    $171 = $3;
    $172 = (($171) + 8896|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = $3;
    $175 = (($174) + 8900|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = $1;
    $178 = $2;
    $179 = $3;
    $180 = $4;
    $181 = $5;
    $182 = $1;
    (__ZL24pick_primers_by_positioniiPiP11oligo_arrayPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderP8p3retval($173,$176,$left,$177,$178,$179,$180,$181,$182)|0);
   }
  }
 }
 $191 = $1;
 $192 = (($191) + 424|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = ($193|0)==(1);
 if ($194) {
  $195 = $2;
  $196 = (($195) + 8|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = ($197|0)==(1);
  if ($198) {
   $r_b = 0;
  } else {
   label = 46;
  }
 } else {
  label = 46;
 }
 if ((label|0) == 46) {
  $199 = $tar_l;
  $200 = (($199) + 1)|0;
  $201 = $pr_min;
  $202 = $2;
  $203 = (($202) + 48|0);
  $204 = (($203) + 260|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = (($201) - ($205))|0;
  $207 = ($200|0)>($206|0);
  do {
   if ($207) {
    $208 = $2;
    $209 = (($208) + 32|0);
    $210 = HEAP32[$209>>2]|0;
    $211 = ($210|0)!=(0);
    if ($211) {
     $212 = $3;
     $213 = (($212) + 8888|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = ($214|0)!=(0|0);
     if ($215) {
      label = 50;
      break;
     }
    }
    $216 = $tar_l;
    $217 = (($216) + 1)|0;
    $r_b = $217;
   } else {
    label = 50;
   }
  } while(0);
  if ((label|0) == 50) {
   $218 = $pr_min;
   $219 = $2;
   $220 = (($219) + 48|0);
   $221 = (($220) + 260|0);
   $222 = HEAP32[$221>>2]|0;
   $223 = (($218) - ($222))|0;
   $r_b = $223;
  }
 }
 $224 = $2;
 $225 = (($224) + 8|0);
 $226 = HEAP32[$225>>2]|0;
 $227 = ($226|0)!=(0);
 if ($227) {
  $228 = $n;
  $229 = $2;
  $230 = (($229) + 48|0);
  $231 = (($230) + 256|0);
  $232 = HEAP32[$231>>2]|0;
  $233 = (($228) - ($232))|0;
  $234 = $r_b;
  $235 = (($233) - ($234))|0;
  $236 = (($235) + 1)|0;
  $length = $236;
  $237 = $r_b;
  $start = $237;
  $238 = $3;
  $239 = (($238) + 8888|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = ($240|0)!=(0|0);
  if ($241) {
   $242 = $3;
   $243 = (($242) + 8888|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = $1;
   $246 = (($245) + 232|0);
   $247 = $2;
   $248 = $3;
   $249 = $4;
   $250 = $5;
   $251 = $1;
   (__ZL14add_one_primerPKcPiP11oligo_arrayPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderP8p3retval($244,$right,$246,$247,$248,$249,$250,$251)|0);
  } else {
   $252 = $3;
   $253 = (($252) + 8904|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = ($254|0)>(-1);
   if ($255) {
    label = 57;
   } else {
    $256 = $3;
    $257 = (($256) + 8908|0);
    $258 = HEAP32[$257>>2]|0;
    $259 = ($258|0)>(-1);
    if ($259) {
     label = 57;
    } else {
     $273 = $start;
     $274 = $length;
     $275 = $1;
     $276 = (($275) + 232|0);
     $277 = $2;
     $278 = $3;
     $279 = $4;
     $280 = $5;
     $281 = $1;
     (__ZL17pick_primer_rangeiiPiP11oligo_arrayPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderP8p3retval($273,$274,$right,$276,$277,$278,$279,$280,$281)|0);
    }
   }
   if ((label|0) == 57) {
    $260 = $3;
    $261 = (($260) + 8904|0);
    $262 = HEAP32[$261>>2]|0;
    $263 = $3;
    $264 = (($263) + 8908|0);
    $265 = HEAP32[$264>>2]|0;
    $266 = $1;
    $267 = (($266) + 232|0);
    $268 = $2;
    $269 = $3;
    $270 = $4;
    $271 = $5;
    $272 = $1;
    (__ZL24pick_primers_by_positioniiPiP11oligo_arrayPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderP8p3retval($262,$265,$right,$267,$268,$269,$270,$271,$272)|0);
   }
  }
 }
 $282 = $2;
 $283 = (($282) + 4|0);
 $284 = HEAP32[$283>>2]|0;
 $285 = ($284|0)!=(0);
 if ($285) {
  $286 = $1;
  $287 = (($286) + 4|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = (0)==($288|0);
  if (!($289)) {
   label = 63;
  }
 } else {
  label = 63;
 }
 do {
  if ((label|0) == 63) {
   $290 = $2;
   $291 = (($290) + 8|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = ($292|0)!=(0);
   if ($293) {
    $294 = $1;
    $295 = (($294) + 232|0);
    $296 = (($295) + 4|0);
    $297 = HEAP32[$296>>2]|0;
    $298 = (0)==($297|0);
    if ($298) {
     break;
    }
   }
   $299 = $3;
   $300 = (($299) + 8888|0);
   $301 = HEAP32[$300>>2]|0;
   $302 = ($301|0)!=(0|0);
   if ($302) {
    $303 = $3;
    $304 = (($303) + 8884|0);
    $305 = HEAP32[$304>>2]|0;
    $306 = ($305|0)!=(0|0);
    if (!($306)) {
     label = 68;
    }
   } else {
    label = 68;
   }
   if ((label|0) == 68) {
    $307 = $2;
    $308 = (($307) + 4|0);
    $309 = HEAP32[$308>>2]|0;
    $310 = ($309|0)!=(0);
    if ($310) {
     $311 = $2;
     $312 = (($311) + 8|0);
     $313 = HEAP32[$312>>2]|0;
     $314 = ($313|0)!=(0);
     if ($314) {
      $315 = HEAP32[$right>>2]|0;
      $316 = HEAP32[$left>>2]|0;
      $317 = (($315) - ($316))|0;
      $318 = $pr_min;
      $319 = (($318) - 1)|0;
      $320 = ($317|0)<($319|0);
      if ($320) {
       $321 = $pair_expl;
       $322 = (($321) + 4|0);
       HEAP32[$322>>2] = 1;
       $323 = $pair_expl;
       HEAP32[$323>>2] = 1;
       $0 = 1;
       $324 = $0;
       STACKTOP = sp;return ($324|0);
      }
     }
    }
   }
   $0 = 0;
   $324 = $0;
   STACKTOP = sp;return ($324|0);
  }
 } while(0);
 $0 = 1;
 $324 = $0;
 STACKTOP = sp;return ($324|0);
}
function __ZL24make_internal_oligo_listP8p3retvalPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holder($retval,$pa,$sa,$dpal_arg_to_use,$thal_arg_to_use) {
 $retval = $retval|0;
 $pa = $pa|0;
 $sa = $sa|0;
 $dpal_arg_to_use = $dpal_arg_to_use|0;
 $thal_arg_to_use = $thal_arg_to_use|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $left = 0, $left1 = 0, $length = 0, $ret = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $left = sp + 8|0;
 $left1 = sp + 12|0;
 $0 = $retval;
 $1 = $pa;
 $2 = $sa;
 $3 = $dpal_arg_to_use;
 $4 = $thal_arg_to_use;
 HEAP32[$left>>2] = 0;
 $5 = $2;
 $6 = (($5) + 8892|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $9 = $1;
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(10);
  if (!($11)) {
   $23 = $2;
   $24 = (($23) + 8868|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (_strlen(($25|0))|0);
   $27 = $1;
   $28 = (($27) + 400|0);
   $29 = (($28) + 256|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($26) - ($30))|0;
   $length = $31;
   $32 = $1;
   $33 = (($32) + 400|0);
   $34 = (($33) + 256|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) - 1)|0;
   $start = $36;
   HEAP32[$left1>>2] = 0;
   $37 = $start;
   $38 = $length;
   $39 = $0;
   $40 = (($39) + 116|0);
   $41 = $1;
   $42 = $2;
   $43 = $3;
   $44 = $4;
   $45 = $0;
   $46 = (__ZL17pick_primer_rangeiiPiP11oligo_arrayPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderP8p3retval($37,$38,$left1,$40,$41,$42,$43,$44,$45)|0);
   $ret = $46;
   $47 = $ret;
   STACKTOP = sp;return ($47|0);
  }
 }
 $12 = $2;
 $13 = (($12) + 8892|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = (($15) + 116|0);
 $17 = $1;
 $18 = $2;
 $19 = $3;
 $20 = $4;
 $21 = $0;
 $22 = (__ZL14add_one_primerPKcPiP11oligo_arrayPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderP8p3retval($14,$left,$16,$17,$18,$19,$20,$21)|0);
 $ret = $22;
 $47 = $ret;
 STACKTOP = sp;return ($47|0);
}
function __ZL17sort_primer_arrayP11oligo_array($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _qsort($2,$5,128,16);
 STACKTOP = sp;return;
}
function __ZL21choose_pair_or_tripleP8p3retvalPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderSC_P12pair_array_t($retval,$pa,$sa,$dpal_arg_to_use,$thal_arg_to_use,$thal_oligo_arg_to_use,$best_pairs) {
 $retval = $retval|0;
 $pa = $pa|0;
 $sa = $sa|0;
 $dpal_arg_to_use = $dpal_arg_to_use|0;
 $thal_arg_to_use = $thal_arg_to_use|0;
 $thal_oligo_arg_to_use = $thal_oligo_arg_to_use|0;
 $best_pairs = $best_pairs|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0.0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0.0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0.0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0.0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0.0, $577 = 0.0, $578 = 0.0, $579 = 0.0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0.0, $696 = 0.0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0.0, $703 = 0, $704 = 0.0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0.0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0.0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0.0, $834 = 0, $835 = 0, $836 = 0.0, $837 = 0, $838 = 0, $839 = 0.0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0.0, $918 = 0.0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0.0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0.0, $944 = 0, $945 = 0, $946 = 0, $947 = 0.0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__i1$i$i = 0, $__i1$i$i1 = 0, $__i1$i$i11 = 0, $__i1$i$i16 = 0, $__i1$i$i21 = 0;
 var $__i1$i$i26 = 0, $__i1$i$i31 = 0, $__i1$i$i6 = 0, $best_hmap = 0, $best_pp = 0, $h = 0, $hmap = 0, $i = 0, $it = 0, $j = 0, $must_use = 0, $n_int = 0, $pair_expl = 0, $pair_found = 0, $pp = 0, $product_size = 0.0, $product_size_range_index = 0, $the_best_i = 0, $the_best_j = 0, $the_best_pair = 0;
 var $tmp = 0, $trace_me = 0, $update_stats = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer33 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr22 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0;
 var $vararg_ptr36 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1440|0;
 $vararg_buffer33 = sp + 352|0;
 $vararg_buffer27 = sp + 400|0;
 $vararg_buffer25 = sp + 424|0;
 $vararg_buffer23 = sp + 416|0;
 $vararg_buffer19 = sp + 344|0;
 $vararg_buffer17 = sp + 384|0;
 $vararg_buffer13 = sp + 376|0;
 $vararg_buffer7 = sp + 360|0;
 $vararg_buffer = sp + 392|0;
 $__i1$i$i31 = sp + 16|0;
 $12 = sp + 32|0;
 $22 = sp + 1348|0;
 $24 = sp + 1340|0;
 $26 = sp + 1332|0;
 $__i1$i$i26 = sp + 200|0;
 $29 = sp + 312|0;
 $32 = sp + 1312|0;
 $50 = sp + 1240|0;
 $53 = sp + 1228|0;
 $59 = sp + 1204|0;
 $62 = sp + 1192|0;
 $70 = sp + 1160|0;
 $72 = sp + 1152|0;
 $81 = sp + 1116|0;
 $84 = sp + 1104|0;
 $91 = sp + 1076|0;
 $94 = sp + 1064|0;
 $__i1$i$i21 = sp + 56|0;
 $107 = sp + 64|0;
 $117 = sp + 976|0;
 $119 = sp + 968|0;
 $121 = sp + 960|0;
 $__i1$i$i16 = sp + 80|0;
 $124 = sp + 72|0;
 $133 = sp + 656|0;
 $__i1$i$i11 = sp + 88|0;
 $150 = sp + 24|0;
 $160 = sp + 440|0;
 $162 = sp + 508|0;
 $164 = sp + 484|0;
 $__i1$i$i6 = sp + 48|0;
 $167 = sp;
 $176 = sp + 468|0;
 $__i1$i$i1 = sp + 8|0;
 $193 = sp + 40|0;
 $203 = sp + 716|0;
 $205 = sp + 724|0;
 $207 = sp + 732|0;
 $__i1$i$i = sp + 328|0;
 $210 = sp + 320|0;
 $219 = sp + 776|0;
 $j = sp + 828|0;
 $n_int = sp + 832|0;
 $h = sp + 208|0;
 $the_best_pair = sp + 96|0;
 $the_best_j = sp + 856|0;
 $it = sp + 868|0;
 $231 = sp + 884|0;
 $232 = sp + 888|0;
 $233 = sp + 892|0;
 $236 = sp + 904|0;
 $237 = sp + 908|0;
 $238 = sp + 912|0;
 $239 = sp + 916|0;
 $240 = sp + 920|0;
 $241 = sp + 924|0;
 $242 = sp + 932|0;
 $243 = sp + 936|0;
 $224 = $retval;
 $225 = $pa;
 $226 = $sa;
 $227 = $dpal_arg_to_use;
 $228 = $thal_arg_to_use;
 $229 = $thal_oligo_arg_to_use;
 $230 = $best_pairs;
 $update_stats = 1;
 $244 = $224;
 $245 = (($244) + 348|0);
 $246 = (($245) + 12|0);
 $pair_expl = $246;
 $product_size_range_index = 0;
 $trace_me = 0;
 $best_hmap = 0;
 $223 = $it;
 $247 = $223;
 $222 = $247;
 $248 = $222;
 $221 = $248;
 $249 = $221;
 $220 = $249;
 $best_pp = 0;
 $pair_found = 0;
 $250 = $224;
 $251 = (($250) + 232|0);
 $252 = (($251) + 4|0);
 $253 = HEAP32[$252>>2]|0;
 $254 = (_calloc($253,4)|0);
 HEAP32[12832>>2] = $254;
 $255 = HEAP32[12832>>2]|0;
 $256 = ($255|0)!=(0|0);
 if (!($256)) {
  _longjmp((264|0),1);
  // unreachable;
 }
 dest=$the_best_pair+0|0; stop=dest+104|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $257 = $224;
 $258 = (($257) + 232|0);
 $259 = (($258) + 4|0);
 $260 = HEAP32[$259>>2]|0;
 $261 = $260<<2;
 $262 = (_malloc($261)|0);
 HEAP32[12840>>2] = $262;
 $i = 0;
 while(1) {
  $263 = $i;
  $264 = $224;
  $265 = (($264) + 232|0);
  $266 = (($265) + 4|0);
  $267 = HEAP32[$266>>2]|0;
  $268 = ($263|0)<($267|0);
  if (!($268)) {
   break;
  }
  $269 = $i;
  $270 = HEAP32[12840>>2]|0;
  $271 = (($270) + ($269<<2)|0);
  HEAP32[$271>>2] = -1;
  $272 = $i;
  $273 = (($272) + 1)|0;
  $i = $273;
 }
 L9: while(1) {
  dest=$the_best_pair+0|0; stop=dest+104|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $the_best_i = -1;
  HEAP32[$the_best_j>>2] = -1;
  HEAPF64[$the_best_pair>>3] = 1.79769313486231570815E+308;
  $i = 0;
  L11: while(1) {
   $274 = $i;
   $275 = $224;
   $276 = (($275) + 232|0);
   $277 = (($276) + 4|0);
   $278 = HEAP32[$277>>2]|0;
   $279 = ($274|0)<($278|0);
   if (!($279)) {
    break;
   }
   $280 = $i;
   $281 = HEAP32[12832>>2]|0;
   $282 = (($281) + ($280<<2)|0);
   $283 = HEAP32[$282>>2]|0;
   $hmap = $283;
   $284 = $i;
   $285 = $224;
   $286 = (($285) + 232|0);
   $287 = HEAP32[$286>>2]|0;
   $288 = (($287) + ($284<<7)|0);
   $289 = (_p3_ol_has_any_problem($288)|0);
   $290 = ($289|0)!=(0);
   if ($290) {
    $291 = $i;
    $292 = $224;
    $293 = (($292) + 232|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = (($294) + ($291<<7)|0);
    $296 = (($295) + 114|0);
    $297 = HEAP8[$296]|0;
    $298 = ($297<<24>>24)!=(0);
    if ($298) {
     label = 27;
    } else {
     $299 = $hmap;
     $300 = ($299|0)!=(0|0);
     if ($300) {
      $301 = $hmap;
      $218 = $301;
      $302 = $218;
      $217 = $302;
      $303 = $217;
      $304 = (($303) + 8|0);
      $216 = $304;
      $305 = $216;
      $215 = $305;
      $306 = $215;
      $307 = HEAP32[$306>>2]|0;
      $213 = $219;
      $214 = $307;
      $308 = $213;
      $309 = $214;
      $211 = $308;
      $212 = $309;
      $310 = $211;
      $311 = $212;
      HEAP32[$310>>2] = $311;
      ;HEAP8[$210+0|0]=HEAP8[$219+0|0]|0;HEAP8[$210+1|0]=HEAP8[$219+1|0]|0;HEAP8[$210+2|0]=HEAP8[$219+2|0]|0;HEAP8[$210+3|0]=HEAP8[$219+3|0]|0;
      $209 = $231;
      $312 = $209;
      ;HEAP8[$__i1$i$i+0|0]=HEAP8[$210+0|0]|0;HEAP8[$__i1$i$i+1|0]=HEAP8[$210+1|0]|0;HEAP8[$__i1$i$i+2|0]=HEAP8[$210+2|0]|0;HEAP8[$__i1$i$i+3|0]=HEAP8[$210+3|0]|0;
      $208 = $312;
      $313 = $208;
      ;HEAP32[$313+0>>2]=HEAP32[$__i1$i$i+0>>2]|0;
      ;HEAP32[$it+0>>2]=HEAP32[$231+0>>2]|0;
      while(1) {
       $314 = $hmap;
       $206 = $314;
       $315 = $206;
       $204 = $315;
       $201 = $203;
       $202 = -1;
       $316 = $201;
       $317 = $202;
       $199 = $316;
       $200 = $317;
       $318 = $199;
       HEAP32[$318>>2] = 0;
       $319 = HEAP32[$203>>2]|0;
       HEAP32[$205>>2] = $319;
       $194 = $205;
       $197 = $207;
       $198 = 0;
       $320 = $197;
       $321 = $198;
       $195 = $320;
       $196 = $321;
       $322 = $195;
       $323 = $196;
       HEAP32[$322>>2] = $323;
       ;HEAP8[$193+0|0]=HEAP8[$207+0|0]|0;HEAP8[$193+1|0]=HEAP8[$207+1|0]|0;HEAP8[$193+2|0]=HEAP8[$207+2|0]|0;HEAP8[$193+3|0]=HEAP8[$207+3|0]|0;
       $192 = $232;
       $324 = $192;
       ;HEAP8[$__i1$i$i1+0|0]=HEAP8[$193+0|0]|0;HEAP8[$__i1$i$i1+1|0]=HEAP8[$193+1|0]|0;HEAP8[$__i1$i$i1+2|0]=HEAP8[$193+2|0]|0;HEAP8[$__i1$i$i1+3|0]=HEAP8[$193+3|0]|0;
       $191 = $324;
       $325 = $191;
       ;HEAP32[$325+0>>2]=HEAP32[$__i1$i$i1+0>>2]|0;
       $189 = $it;
       $190 = $232;
       $326 = $189;
       $327 = $190;
       $187 = $326;
       $188 = $327;
       $328 = $187;
       $329 = $188;
       $185 = $328;
       $186 = $329;
       $330 = $185;
       $331 = HEAP32[$330>>2]|0;
       $332 = $186;
       $333 = HEAP32[$332>>2]|0;
       $334 = ($331|0)==($333|0);
       $335 = $334 ^ 1;
       if (!($335)) {
        break;
       }
       $184 = $it;
       $336 = $184;
       $183 = $336;
       $337 = $183;
       $338 = HEAP32[$337>>2]|0;
       $339 = (($338) + 8|0);
       $182 = $339;
       $340 = $182;
       $181 = $340;
       $341 = $181;
       $342 = (($341) + 4|0);
       $343 = HEAP32[$342>>2]|0;
       $pp = $343;
       $344 = $pp;
       $345 = ($344|0)==(0|0);
       if (!($345)) {
        __ZdlPv($344);
       }
       $179 = $it;
       $180 = 0;
       $346 = $179;
       ;HEAP32[$233+0>>2]=HEAP32[$346+0>>2]|0;
       $178 = $346;
       $347 = $178;
       $177 = $347;
       $348 = $177;
       $349 = HEAP32[$348>>2]|0;
       $350 = HEAP32[$349>>2]|0;
       HEAP32[$348>>2] = $350;
      }
      $351 = $hmap;
      $352 = $best_hmap;
      $353 = ($351|0)==($352|0);
      if ($353) {
       $best_hmap = 0;
      }
      $354 = $hmap;
      $355 = ($354|0)==(0|0);
      if (!($355)) {
       __THREW__ = 0;
       invoke_vi(117,($354|0));
       $356 = __THREW__; __THREW__ = 0;
       $357 = $356&1;
       if ($357) {
        label = 25;
        break L9;
       }
       __ZdlPv($354);
      }
      $hmap = 0;
      $358 = $i;
      $359 = HEAP32[12832>>2]|0;
      $360 = (($359) + ($358<<2)|0);
      HEAP32[$360>>2] = 0;
     }
    }
   } else {
    label = 27;
   }
   do {
    if ((label|0) == 27) {
     label = 0;
     $363 = $225;
     $364 = (($363) + 2520|0);
     $365 = +HEAPF64[$364>>3];
     $366 = $i;
     $367 = $224;
     $368 = (($367) + 232|0);
     $369 = HEAP32[$368>>2]|0;
     $370 = (($369) + ($366<<7)|0);
     $371 = (($370) + 40|0);
     $372 = +HEAPF64[$371>>3];
     $373 = $224;
     $374 = HEAP32[$373>>2]|0;
     $375 = (($374) + 40|0);
     $376 = +HEAPF64[$375>>3];
     $377 = $372 + $376;
     $378 = $365 * $377;
     $379 = +HEAPF64[$the_best_pair>>3];
     $380 = $378 > $379;
     if ($380) {
      label = 28;
      break L11;
     }
     $381 = $i;
     $382 = $224;
     $383 = (($382) + 232|0);
     $384 = HEAP32[$383>>2]|0;
     $385 = (($384) + ($381<<7)|0);
     $386 = (($385) + 115|0);
     $387 = HEAP8[$386]|0;
     $388 = ($387<<24>>24)!=(0);
     if ($388) {
      $389 = $update_stats;
      $390 = ($389|0)!=(0);
      if ($390) {
       $391 = $trace_me;
       $392 = ($391|0)!=(0);
       if ($392) {
        $393 = HEAP32[_stderr>>2]|0;
        $394 = $i;
        $395 = HEAP32[$j>>2]|0;
        HEAP32[$vararg_buffer>>2] = $394;
        $vararg_ptr6 = (($vararg_buffer) + 4|0);
        HEAP32[$vararg_ptr6>>2] = $395;
        (_fprintf(($393|0),(12848|0),($vararg_buffer|0))|0);
       }
       $396 = $pair_expl;
       $397 = (($396) + 48|0);
       $398 = HEAP32[$397>>2]|0;
       $399 = (($398) + 1)|0;
       HEAP32[$397>>2] = $399;
      }
      $400 = $hmap;
      $401 = ($400|0)!=(0|0);
      if ($401) {
       $402 = $hmap;
       $175 = $402;
       $403 = $175;
       $174 = $403;
       $404 = $174;
       $405 = (($404) + 8|0);
       $173 = $405;
       $406 = $173;
       $172 = $406;
       $407 = $172;
       $408 = HEAP32[$407>>2]|0;
       $170 = $176;
       $171 = $408;
       $409 = $170;
       $410 = $171;
       $168 = $409;
       $169 = $410;
       $411 = $168;
       $412 = $169;
       HEAP32[$411>>2] = $412;
       ;HEAP8[$167+0|0]=HEAP8[$176+0|0]|0;HEAP8[$167+1|0]=HEAP8[$176+1|0]|0;HEAP8[$167+2|0]=HEAP8[$176+2|0]|0;HEAP8[$167+3|0]=HEAP8[$176+3|0]|0;
       $166 = $236;
       $413 = $166;
       ;HEAP8[$__i1$i$i6+0|0]=HEAP8[$167+0|0]|0;HEAP8[$__i1$i$i6+1|0]=HEAP8[$167+1|0]|0;HEAP8[$__i1$i$i6+2|0]=HEAP8[$167+2|0]|0;HEAP8[$__i1$i$i6+3|0]=HEAP8[$167+3|0]|0;
       $165 = $413;
       $414 = $165;
       ;HEAP32[$414+0>>2]=HEAP32[$__i1$i$i6+0>>2]|0;
       ;HEAP32[$it+0>>2]=HEAP32[$236+0>>2]|0;
       while(1) {
        $415 = $hmap;
        $163 = $415;
        $416 = $163;
        $161 = $416;
        $158 = $160;
        $159 = -1;
        $417 = $158;
        $418 = $159;
        $156 = $417;
        $157 = $418;
        $419 = $156;
        HEAP32[$419>>2] = 0;
        $420 = HEAP32[$160>>2]|0;
        HEAP32[$162>>2] = $420;
        $151 = $162;
        $154 = $164;
        $155 = 0;
        $421 = $154;
        $422 = $155;
        $152 = $421;
        $153 = $422;
        $423 = $152;
        $424 = $153;
        HEAP32[$423>>2] = $424;
        ;HEAP8[$150+0|0]=HEAP8[$164+0|0]|0;HEAP8[$150+1|0]=HEAP8[$164+1|0]|0;HEAP8[$150+2|0]=HEAP8[$164+2|0]|0;HEAP8[$150+3|0]=HEAP8[$164+3|0]|0;
        $149 = $237;
        $425 = $149;
        ;HEAP8[$__i1$i$i11+0|0]=HEAP8[$150+0|0]|0;HEAP8[$__i1$i$i11+1|0]=HEAP8[$150+1|0]|0;HEAP8[$__i1$i$i11+2|0]=HEAP8[$150+2|0]|0;HEAP8[$__i1$i$i11+3|0]=HEAP8[$150+3|0]|0;
        $148 = $425;
        $426 = $148;
        ;HEAP32[$426+0>>2]=HEAP32[$__i1$i$i11+0>>2]|0;
        $146 = $it;
        $147 = $237;
        $427 = $146;
        $428 = $147;
        $144 = $427;
        $145 = $428;
        $429 = $144;
        $430 = $145;
        $142 = $429;
        $143 = $430;
        $431 = $142;
        $432 = HEAP32[$431>>2]|0;
        $433 = $143;
        $434 = HEAP32[$433>>2]|0;
        $435 = ($432|0)==($434|0);
        $436 = $435 ^ 1;
        if (!($436)) {
         break;
        }
        $141 = $it;
        $437 = $141;
        $140 = $437;
        $438 = $140;
        $439 = HEAP32[$438>>2]|0;
        $440 = (($439) + 8|0);
        $139 = $440;
        $441 = $139;
        $138 = $441;
        $442 = $138;
        $443 = (($442) + 4|0);
        $444 = HEAP32[$443>>2]|0;
        $pp = $444;
        $445 = $pp;
        $446 = ($445|0)==(0|0);
        if (!($446)) {
         __ZdlPv($445);
        }
        $136 = $it;
        $137 = 0;
        $447 = $136;
        ;HEAP32[$238+0>>2]=HEAP32[$447+0>>2]|0;
        $135 = $447;
        $448 = $135;
        $134 = $448;
        $449 = $134;
        $450 = HEAP32[$449>>2]|0;
        $451 = HEAP32[$450>>2]|0;
        HEAP32[$449>>2] = $451;
       }
       $452 = $hmap;
       $453 = $best_hmap;
       $454 = ($452|0)==($453|0);
       if ($454) {
        $best_hmap = 0;
       }
       $455 = $hmap;
       $456 = ($455|0)==(0|0);
       if (!($456)) {
        __THREW__ = 0;
        invoke_vi(117,($455|0));
        $457 = __THREW__; __THREW__ = 0;
        $458 = $457&1;
        if ($458) {
         label = 47;
         break L9;
        }
        __ZdlPv($455);
       }
       $hmap = 0;
       $459 = $i;
       $460 = HEAP32[12832>>2]|0;
       $461 = (($460) + ($459<<2)|0);
       HEAP32[$461>>2] = 0;
      }
      break;
     }
     HEAP32[$j>>2] = 0;
     L65: while(1) {
      $464 = HEAP32[$j>>2]|0;
      $465 = $224;
      $466 = (($465) + 4|0);
      $467 = HEAP32[$466>>2]|0;
      $468 = ($464|0)<($467|0);
      if (!($468)) {
       break;
      }
      $469 = $i;
      $470 = $224;
      $471 = (($470) + 232|0);
      $472 = HEAP32[$471>>2]|0;
      $473 = (($472) + ($469<<7)|0);
      $474 = (_p3_ol_has_any_problem($473)|0);
      $475 = ($474|0)!=(0);
      if ($475) {
       $476 = $i;
       $477 = $224;
       $478 = (($477) + 232|0);
       $479 = HEAP32[$478>>2]|0;
       $480 = (($479) + ($476<<7)|0);
       $481 = (($480) + 114|0);
       $482 = HEAP8[$481]|0;
       $483 = ($482<<24>>24)!=(0);
       if (!($483)) {
        label = 53;
        break;
       }
      }
      $548 = HEAP32[$j>>2]|0;
      $549 = $224;
      $550 = HEAP32[$549>>2]|0;
      $551 = (($550) + ($548<<7)|0);
      $552 = (_p3_ol_has_any_problem($551)|0);
      $553 = ($552|0)!=(0);
      if ($553) {
       $554 = HEAP32[$j>>2]|0;
       $555 = $224;
       $556 = HEAP32[$555>>2]|0;
       $557 = (($556) + ($554<<7)|0);
       $558 = (($557) + 114|0);
       $559 = HEAP8[$558]|0;
       $560 = ($559<<24>>24)!=(0);
       if ($560) {
        label = 71;
       } else {
       }
      } else {
       label = 71;
      }
      L74: do {
       if ((label|0) == 71) {
        label = 0;
        $561 = $225;
        $562 = (($561) + 2520|0);
        $563 = +HEAPF64[$562>>3];
        $564 = HEAP32[$j>>2]|0;
        $565 = $224;
        $566 = HEAP32[$565>>2]|0;
        $567 = (($566) + ($564<<7)|0);
        $568 = (($567) + 40|0);
        $569 = +HEAPF64[$568>>3];
        $570 = $i;
        $571 = $224;
        $572 = (($571) + 232|0);
        $573 = HEAP32[$572>>2]|0;
        $574 = (($573) + ($570<<7)|0);
        $575 = (($574) + 40|0);
        $576 = +HEAPF64[$575>>3];
        $577 = $569 + $576;
        $578 = $563 * $577;
        $579 = +HEAPF64[$the_best_pair>>3];
        $580 = $578 > $579;
        if ($580) {
         label = 72;
         break L65;
        }
        $update_stats = 0;
        $581 = HEAP32[$j>>2]|0;
        $582 = $i;
        $583 = HEAP32[12840>>2]|0;
        $584 = (($583) + ($582<<2)|0);
        $585 = HEAP32[$584>>2]|0;
        $586 = ($581|0)>($585|0);
        if ($586) {
         $587 = $trace_me;
         $588 = ($587|0)!=(0);
         if ($588) {
          $589 = HEAP32[_stderr>>2]|0;
          $590 = $i;
          $591 = HEAP32[$j>>2]|0;
          $592 = $i;
          $593 = $i;
          $594 = HEAP32[12840>>2]|0;
          $595 = (($594) + ($593<<2)|0);
          $596 = HEAP32[$595>>2]|0;
          HEAP32[$vararg_buffer7>>2] = $590;
          $vararg_ptr10 = (($vararg_buffer7) + 4|0);
          HEAP32[$vararg_ptr10>>2] = $591;
          $vararg_ptr11 = (($vararg_buffer7) + 8|0);
          HEAP32[$vararg_ptr11>>2] = $592;
          $vararg_ptr12 = (($vararg_buffer7) + 12|0);
          HEAP32[$vararg_ptr12>>2] = $596;
          (_fprintf(($589|0),(12896|0),($vararg_buffer7|0))|0);
         }
         $597 = HEAP32[$j>>2]|0;
         $598 = $i;
         $599 = HEAP32[12840>>2]|0;
         $600 = (($599) + ($598<<2)|0);
         HEAP32[$600>>2] = $597;
         $601 = $trace_me;
         $602 = ($601|0)!=(0);
         if ($602) {
          $603 = HEAP32[_stderr>>2]|0;
          $604 = $i;
          $605 = $i;
          $606 = HEAP32[12840>>2]|0;
          $607 = (($606) + ($605<<2)|0);
          $608 = HEAP32[$607>>2]|0;
          HEAP32[$vararg_buffer13>>2] = $604;
          $vararg_ptr16 = (($vararg_buffer13) + 4|0);
          HEAP32[$vararg_ptr16>>2] = $608;
          (_fprintf(($603|0),(12944|0),($vararg_buffer13|0))|0);
         }
         $609 = $trace_me;
         $610 = ($609|0)!=(0);
         if ($610) {
          $611 = HEAP32[_stderr>>2]|0;
          (_fprintf(($611|0),(12968|0),($vararg_buffer17|0))|0);
         }
         $update_stats = 1;
        }
        $612 = HEAP32[$j>>2]|0;
        $613 = $224;
        $614 = HEAP32[$613>>2]|0;
        $615 = (($614) + ($612<<7)|0);
        $616 = (($615) + 115|0);
        $617 = HEAP8[$616]|0;
        $618 = ($617<<24>>24)!=(0);
        if ($618) {
         $619 = $update_stats;
         $620 = ($619|0)!=(0);
         if ($620) {
          $621 = $trace_me;
          $622 = ($621|0)!=(0);
          if ($622) {
           $623 = HEAP32[_stderr>>2]|0;
           $624 = $i;
           $625 = HEAP32[$j>>2]|0;
           HEAP32[$vararg_buffer19>>2] = $624;
           $vararg_ptr22 = (($vararg_buffer19) + 4|0);
           HEAP32[$vararg_ptr22>>2] = $625;
           (_fprintf(($623|0),(12848|0),($vararg_buffer19|0))|0);
          }
          $626 = $pair_expl;
          $627 = (($626) + 48|0);
          $628 = HEAP32[$627>>2]|0;
          $629 = (($628) + 1)|0;
          HEAP32[$627>>2] = $629;
         }
         break;
        }
        $must_use = 0;
        $630 = $225;
        $631 = HEAP32[$630>>2]|0;
        $632 = ($631|0)==(10);
        if ($632) {
         label = 90;
        } else {
         $633 = HEAP32[$j>>2]|0;
         $634 = $224;
         $635 = HEAP32[$634>>2]|0;
         $636 = (($635) + ($633<<7)|0);
         $637 = (($636) + 114|0);
         $638 = HEAP8[$637]|0;
         $639 = $638 << 24 >> 24;
         $640 = ($639|0)!=(0);
         if ($640) {
          $641 = $i;
          $642 = $224;
          $643 = (($642) + 232|0);
          $644 = HEAP32[$643>>2]|0;
          $645 = (($644) + ($641<<7)|0);
          $646 = (($645) + 114|0);
          $647 = HEAP8[$646]|0;
          $648 = $647 << 24 >> 24;
          $649 = ($648|0)!=(0);
          if ($649) {
           label = 90;
          }
         }
        }
        if ((label|0) == 90) {
         label = 0;
         $must_use = 1;
        }
        $650 = $226;
        $651 = (($650) + 8828|0);
        $652 = HEAP32[$651>>2]|0;
        $653 = ($652|0)>(0);
        do {
         if ($653) {
          $654 = $i;
          $655 = $224;
          $656 = (($655) + 232|0);
          $657 = HEAP32[$656>>2]|0;
          $658 = (($657) + ($654<<7)|0);
          $659 = (($658) + 120|0);
          $660 = HEAP8[$659]|0;
          $661 = ($660<<24>>24)!=(0);
          if (!($661)) {
           $662 = HEAP32[$j>>2]|0;
           $663 = $224;
           $664 = HEAP32[$663>>2]|0;
           $665 = (($664) + ($662<<7)|0);
           $666 = (($665) + 120|0);
           $667 = HEAP8[$666]|0;
           $668 = ($667<<24>>24)!=(0);
           if (!($668)) {
            $669 = $update_stats;
            $670 = ($669|0)!=(0);
            if ($670) {
             $671 = $pair_expl;
             $672 = HEAP32[$671>>2]|0;
             $673 = (($672) + 1)|0;
             HEAP32[$671>>2] = $673;
             $674 = $pair_expl;
             $675 = (($674) + 44|0);
             $676 = HEAP32[$675>>2]|0;
             $677 = (($676) + 1)|0;
             HEAP32[$675>>2] = $677;
            }
            $678 = $must_use;
            $679 = ($678|0)!=(0);
            if ($679) {
             break;
            } else {
             break L74;
            }
           }
          }
         }
        } while(0);
        $680 = $i;
        $681 = $224;
        $682 = (($681) + 232|0);
        $683 = HEAP32[$682>>2]|0;
        $684 = (($683) + ($680<<7)|0);
        $685 = (($684) + 56|0);
        $686 = HEAP32[$685>>2]|0;
        $687 = HEAP32[$j>>2]|0;
        $688 = $224;
        $689 = HEAP32[$688>>2]|0;
        $690 = (($689) + ($687<<7)|0);
        $691 = (($690) + 56|0);
        $692 = HEAP32[$691>>2]|0;
        $693 = (($686) - ($692))|0;
        $694 = (($693) + 1)|0;
        $695 = (+($694|0));
        $product_size = $695;
        $696 = $product_size;
        $697 = $product_size_range_index;
        $698 = $225;
        $699 = (($698) + 816|0);
        $700 = (($699) + ($697<<2)|0);
        $701 = HEAP32[$700>>2]|0;
        $702 = (+($701|0));
        $703 = $696 < $702;
        if ($703) {
         label = 101;
        } else {
         $704 = $product_size;
         $705 = $product_size_range_index;
         $706 = $225;
         $707 = (($706) + 1616|0);
         $708 = (($707) + ($705<<2)|0);
         $709 = HEAP32[$708>>2]|0;
         $710 = (+($709|0));
         $711 = $704 > $710;
         if ($711) {
          label = 101;
         }
        }
        do {
         if ((label|0) == 101) {
          label = 0;
          $712 = $update_stats;
          $713 = ($712|0)!=(0);
          if ($713) {
           $714 = $must_use;
           $715 = ($714|0)!=(0);
           if (!($715)) {
            $716 = $pair_expl;
            $717 = HEAP32[$716>>2]|0;
            $718 = (($717) + 1)|0;
            HEAP32[$716>>2] = $718;
           }
           $719 = $pair_expl;
           $720 = (($719) + 4|0);
           $721 = HEAP32[$720>>2]|0;
           $722 = (($721) + 1)|0;
           HEAP32[$720>>2] = $722;
          }
          $723 = $must_use;
          $724 = ($723|0)!=(0);
          if ($724) {
           break;
          } else {
           break L74;
          }
         }
        } while(0);
        $pair_found = 0;
        $725 = $hmap;
        $726 = ($725|0)!=(0|0);
        if ($726) {
         $727 = $hmap;
         $30 = $727;
         $31 = $j;
         $728 = $30;
         $729 = $31;
         __ZNSt3__112__hash_tableINS_4pairIiP11primer_pairEEN9__gnu_cxx17__hash_map_hasherIS4_NS5_4hashIiEELb1EEENS5_16__hash_map_equalIS4_NS_8equal_toIiEELb1EEENS_9allocatorIS4_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS4_PvEEEERKT_($32,$728,$729);
         ;HEAP8[$29+0|0]=HEAP8[$32+0|0]|0;HEAP8[$29+1|0]=HEAP8[$32+1|0]|0;HEAP8[$29+2|0]=HEAP8[$32+2|0]|0;HEAP8[$29+3|0]=HEAP8[$32+3|0]|0;
         $28 = $242;
         $730 = $28;
         ;HEAP8[$__i1$i$i26+0|0]=HEAP8[$29+0|0]|0;HEAP8[$__i1$i$i26+1|0]=HEAP8[$29+1|0]|0;HEAP8[$__i1$i$i26+2|0]=HEAP8[$29+2|0]|0;HEAP8[$__i1$i$i26+3|0]=HEAP8[$29+3|0]|0;
         $27 = $730;
         $731 = $27;
         ;HEAP32[$731+0>>2]=HEAP32[$__i1$i$i26+0>>2]|0;
         ;HEAP32[$it+0>>2]=HEAP32[$242+0>>2]|0;
         $732 = $hmap;
         $25 = $732;
         $733 = $25;
         $23 = $733;
         $20 = $22;
         $21 = -1;
         $734 = $20;
         $735 = $21;
         $18 = $734;
         $19 = $735;
         $736 = $18;
         HEAP32[$736>>2] = 0;
         $737 = HEAP32[$22>>2]|0;
         HEAP32[$24>>2] = $737;
         $13 = $24;
         $16 = $26;
         $17 = 0;
         $738 = $16;
         $739 = $17;
         $14 = $738;
         $15 = $739;
         $740 = $14;
         $741 = $15;
         HEAP32[$740>>2] = $741;
         ;HEAP8[$12+0|0]=HEAP8[$26+0|0]|0;HEAP8[$12+1|0]=HEAP8[$26+1|0]|0;HEAP8[$12+2|0]=HEAP8[$26+2|0]|0;HEAP8[$12+3|0]=HEAP8[$26+3|0]|0;
         $11 = $243;
         $742 = $11;
         ;HEAP8[$__i1$i$i31+0|0]=HEAP8[$12+0|0]|0;HEAP8[$__i1$i$i31+1|0]=HEAP8[$12+1|0]|0;HEAP8[$__i1$i$i31+2|0]=HEAP8[$12+2|0]|0;HEAP8[$__i1$i$i31+3|0]=HEAP8[$12+3|0]|0;
         $10 = $742;
         $743 = $10;
         ;HEAP32[$743+0>>2]=HEAP32[$__i1$i$i31+0>>2]|0;
         $4 = $it;
         $5 = $243;
         $744 = $4;
         $745 = $5;
         $2 = $744;
         $3 = $745;
         $746 = $2;
         $747 = $3;
         $0 = $746;
         $1 = $747;
         $748 = $0;
         $749 = HEAP32[$748>>2]|0;
         $750 = $1;
         $751 = HEAP32[$750>>2]|0;
         $752 = ($749|0)==($751|0);
         $753 = $752 ^ 1;
         if ($753) {
          $pair_found = 1;
          $9 = $it;
          $754 = $9;
          $8 = $754;
          $755 = $8;
          $756 = HEAP32[$755>>2]|0;
          $757 = (($756) + 8|0);
          $7 = $757;
          $758 = $7;
          $6 = $758;
          $759 = $6;
          $760 = (($759) + 4|0);
          $761 = HEAP32[$760>>2]|0;
          $pp = $761;
          $762 = $pp;
          $763 = ($762|0)!=(0|0);
          if ($763) {
           $764 = $update_stats;
           $765 = ($764|0)!=(0);
           if ($765) {
            $766 = $pair_expl;
            $767 = HEAP32[$766>>2]|0;
            $768 = (($767) + 1)|0;
            HEAP32[$766>>2] = $768;
            $769 = $trace_me;
            $770 = ($769|0)!=(0);
            if ($770) {
             $771 = HEAP32[_stderr>>2]|0;
             (_fprintf(($771|0),(12984|0),($vararg_buffer23|0))|0);
            }
            $772 = $pair_expl;
            $773 = (($772) + 60|0);
            $774 = HEAP32[$773>>2]|0;
            $775 = (($774) + 1)|0;
            HEAP32[$773>>2] = $775;
           }
           $776 = $pp;
           $777 = (__ZL19compare_primer_pairPKvS0_($776,$the_best_pair)|0);
           $778 = ($777|0)<(0);
           if ($778) {
            $779 = $pp;
            dest=$the_best_pair+0|0; src=$779+0|0; stop=dest+104|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
            $780 = $i;
            $the_best_i = $780;
            $781 = HEAP32[$j>>2]|0;
            HEAP32[$the_best_j>>2] = $781;
            $782 = $hmap;
            $best_hmap = $782;
            $783 = $pp;
            $best_pp = $783;
           }
           $784 = +HEAPF64[$the_best_pair>>3];
           $785 = $784 == 0.0;
           if ($785) {
            label = 118;
            break L65;
           }
          }
         }
        } else {
         $786 = (__Znwj(20)|0);
         $104 = $786;
         $787 = $104;
         $101 = $787;
         $788 = $101;
         $100 = $788;
         $789 = $100;
         $99 = $789;
         $790 = $99;
         $98 = $790;
         $791 = $98;
         $97 = $791;
         $792 = $97;
         $95 = $792;
         $96 = 0;
         $793 = $95;
         $794 = $96;
         $93 = $793;
         HEAP32[$94>>2] = $794;
         $795 = $93;
         $92 = $94;
         $796 = $92;
         $797 = HEAP32[$796>>2]|0;
         $90 = $795;
         HEAP32[$91>>2] = $797;
         $798 = $90;
         $89 = $91;
         $799 = $89;
         $800 = HEAP32[$799>>2]|0;
         HEAP32[$798>>2] = $800;
         $801 = (($798) + 4|0);
         $88 = $801;
         $802 = $88;
         $87 = $802;
         $803 = $87;
         $85 = $803;
         $86 = 0;
         $804 = $85;
         $805 = $86;
         $83 = $804;
         HEAP32[$84>>2] = $805;
         $806 = $83;
         $82 = $84;
         $807 = $82;
         $808 = HEAP32[$807>>2]|0;
         $80 = $806;
         HEAP32[$81>>2] = $808;
         $809 = $80;
         $79 = $809;
         $78 = $81;
         $810 = $78;
         $811 = HEAP32[$810>>2]|0;
         HEAP32[$809>>2] = $811;
         $812 = (($790) + 8|0);
         $77 = $812;
         $813 = $77;
         $76 = $813;
         $814 = $76;
         $75 = $814;
         $815 = $75;
         $74 = $815;
         $73 = $815;
         $816 = $73;
         $71 = $816;
         $817 = $71;
         $68 = $70;
         $69 = -1;
         $818 = $68;
         $819 = $69;
         $66 = $818;
         $67 = $819;
         $820 = $66;
         HEAP32[$820>>2] = 0;
         $821 = HEAP32[$70>>2]|0;
         HEAP32[$72>>2] = $821;
         $65 = $72;
         HEAP32[$817>>2] = 0;
         $822 = (($790) + 12|0);
         $63 = $822;
         $64 = 0;
         $823 = $63;
         $824 = $64;
         $61 = $823;
         HEAP32[$62>>2] = $824;
         $825 = $61;
         $60 = $62;
         $826 = $60;
         $827 = HEAP32[$826>>2]|0;
         $58 = $825;
         HEAP32[$59>>2] = $827;
         $828 = $58;
         $57 = $828;
         $56 = $59;
         $829 = $56;
         $830 = HEAP32[$829>>2]|0;
         HEAP32[$828>>2] = $830;
         $831 = (($790) + 16|0);
         $54 = $831;
         $55 = 1.0;
         $832 = $54;
         $833 = $55;
         $52 = $832;
         HEAPF32[$53>>2] = $833;
         $834 = $52;
         $51 = $53;
         $835 = $51;
         $836 = +HEAPF32[$835>>2];
         $49 = $834;
         HEAPF32[$50>>2] = $836;
         $837 = $49;
         $48 = $837;
         $47 = $50;
         $838 = $47;
         $839 = +HEAPF32[$838>>2];
         HEAPF32[$837>>2] = $839;
         __THREW__ = 0;
         invoke_vii(42,($788|0),193);
         $840 = __THREW__; __THREW__ = 0;
         $841 = $840&1;
         if ($841) {
          label = 123;
          break L9;
         }
         $hmap = $786;
         $850 = $hmap;
         $851 = ($850|0)!=(0|0);
         if (!($851)) {
          label = 128;
          break L9;
         }
         $852 = $hmap;
         $853 = $i;
         $854 = HEAP32[12832>>2]|0;
         $855 = (($854) + ($853<<2)|0);
         HEAP32[$855>>2] = $852;
        }
        $856 = $pair_found;
        $857 = ($856|0)!=(0);
        if (!($857)) {
         $858 = $224;
         $859 = $225;
         $860 = $226;
         $861 = HEAP32[$j>>2]|0;
         $862 = $i;
         $863 = $product_size_range_index;
         $864 = $227;
         $865 = $228;
         $866 = $update_stats;
         $867 = (__ZL17characterize_pairP8p3retvalPK18p3_global_settingsPK8seq_argsiiiP11primer_pairPK15dpal_arg_holderPK15thal_arg_holderi($858,$859,$860,$861,$862,$863,$h,$864,$865,$866)|0);
         $tmp = $867;
         $868 = $tmp;
         $869 = ($868|0)==(1);
         if ($869) {
          $870 = $225;
          $871 = (($870) + 8|0);
          $872 = HEAP32[$871>>2]|0;
          $873 = ($872|0)!=(0);
          do {
           if ($873) {
            $874 = $225;
            $875 = (($874) + 4|0);
            $876 = HEAP32[$875>>2]|0;
            $877 = ($876|0)!=(0);
            if ($877) {
             $878 = $225;
             $879 = (($878) + 12|0);
             $880 = HEAP32[$879>>2]|0;
             $881 = ($880|0)!=(0);
             if ($881) {
              $882 = $224;
              $883 = (($h) + 72|0);
              $884 = HEAP32[$883>>2]|0;
              $885 = (($h) + 76|0);
              $886 = HEAP32[$885>>2]|0;
              $887 = $226;
              $888 = $225;
              $889 = $227;
              $890 = $229;
              $891 = (__ZL21choose_internal_oligoP8p3retvalPK10primer_recS3_PiPK8seq_argsPK18p3_global_settingsPK15dpal_arg_holderPK15thal_arg_holder($882,$884,$886,$n_int,$887,$888,$889,$890)|0);
              $892 = ($891|0)!=(0);
              if (!($892)) {
               $901 = HEAP32[$n_int>>2]|0;
               $902 = $224;
               $903 = (($902) + 116|0);
               $904 = HEAP32[$903>>2]|0;
               $905 = (($904) + ($901<<7)|0);
               $906 = (($h) + 80|0);
               HEAP32[$906>>2] = $905;
               break;
              }
              $893 = $update_stats;
              $894 = ($893|0)!=(0);
              if ($894) {
               $895 = $pair_expl;
               $896 = (($895) + 24|0);
               $897 = HEAP32[$896>>2]|0;
               $898 = (($897) + 1)|0;
               HEAP32[$896>>2] = $898;
              }
              $899 = $hmap;
              $900 = (__ZN9__gnu_cxx8hash_mapIiP11primer_pairNS_4hashIiEENSt3__18equal_toIiEENS5_9allocatorINS5_4pairIKiS2_EEEEEixERSA_($899,$j)|0);
              HEAP32[$900>>2] = 0;
              break L74;
             }
            }
           }
          } while(0);
          $907 = $update_stats;
          $908 = ($907|0)!=(0);
          if ($908) {
           $909 = $trace_me;
           $910 = ($909|0)!=(0);
           if ($910) {
            $911 = HEAP32[_stderr>>2]|0;
            (_fprintf(($911|0),(12984|0),($vararg_buffer25|0))|0);
           }
           $912 = $pair_expl;
           $913 = (($912) + 60|0);
           $914 = HEAP32[$913>>2]|0;
           $915 = (($914) + 1)|0;
           HEAP32[$913>>2] = $915;
          }
          $916 = $225;
          $917 = (+__ZL6obj_fnPK18p3_global_settingsP11primer_pair($916,$h));
          HEAPF64[$h>>3] = $917;
          $918 = +HEAPF64[$h>>3];
          $919 = $918 >= 0.0;
          if (!($919)) {
           label = 147;
           break L9;
          }
          $922 = (__Znwj(104)|0);
          $pp = $922;
          $923 = $pp;
          $924 = ($923|0)!=(0|0);
          if (!($924)) {
           label = 149;
           break L9;
          }
          $925 = $pp;
          dest=$925+0|0; src=$h+0|0; stop=dest+104|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
          $926 = $pp;
          $927 = $hmap;
          $928 = (__ZN9__gnu_cxx8hash_mapIiP11primer_pairNS_4hashIiEENSt3__18equal_toIiEENS5_9allocatorINS5_4pairIKiS2_EEEEEixERSA_($927,$j)|0);
          HEAP32[$928>>2] = $926;
          $929 = (__ZL19compare_primer_pairPKvS0_($h,$the_best_pair)|0);
          $930 = ($929|0)<(0);
          if ($930) {
           dest=$the_best_pair+0|0; src=$h+0|0; stop=dest+104|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
           $931 = $i;
           $the_best_i = $931;
           $932 = HEAP32[$j>>2]|0;
           HEAP32[$the_best_j>>2] = $932;
           $933 = $hmap;
           $best_hmap = $933;
           $934 = $pp;
           $best_pp = $934;
          }
          $935 = +HEAPF64[$the_best_pair>>3];
          $936 = $935 == 0.0;
          if ($936) {
           label = 153;
           break L65;
          }
         } else {
          $937 = $tmp;
          $938 = ($937|0)==(0);
          if ($938) {
           $939 = $hmap;
           $940 = (__ZN9__gnu_cxx8hash_mapIiP11primer_pairNS_4hashIiEENSt3__18equal_toIiEENS5_9allocatorINS5_4pairIKiS2_EEEEEixERSA_($939,$j)|0);
           HEAP32[$940>>2] = 0;
          }
         }
        }
       }
      } while(0);
      $941 = HEAP32[$j>>2]|0;
      $942 = (($941) + 1)|0;
      HEAP32[$j>>2] = $942;
     }
     if ((label|0) == 53) {
      label = 0;
      $484 = $hmap;
      $485 = ($484|0)!=(0|0);
      if ($485) {
       $486 = $hmap;
       $132 = $486;
       $487 = $132;
       $131 = $487;
       $488 = $131;
       $489 = (($488) + 8|0);
       $130 = $489;
       $490 = $130;
       $129 = $490;
       $491 = $129;
       $492 = HEAP32[$491>>2]|0;
       $127 = $133;
       $128 = $492;
       $493 = $127;
       $494 = $128;
       $125 = $493;
       $126 = $494;
       $495 = $125;
       $496 = $126;
       HEAP32[$495>>2] = $496;
       ;HEAP8[$124+0|0]=HEAP8[$133+0|0]|0;HEAP8[$124+1|0]=HEAP8[$133+1|0]|0;HEAP8[$124+2|0]=HEAP8[$133+2|0]|0;HEAP8[$124+3|0]=HEAP8[$133+3|0]|0;
       $123 = $239;
       $497 = $123;
       ;HEAP8[$__i1$i$i16+0|0]=HEAP8[$124+0|0]|0;HEAP8[$__i1$i$i16+1|0]=HEAP8[$124+1|0]|0;HEAP8[$__i1$i$i16+2|0]=HEAP8[$124+2|0]|0;HEAP8[$__i1$i$i16+3|0]=HEAP8[$124+3|0]|0;
       $122 = $497;
       $498 = $122;
       ;HEAP32[$498+0>>2]=HEAP32[$__i1$i$i16+0>>2]|0;
       ;HEAP32[$it+0>>2]=HEAP32[$239+0>>2]|0;
       while(1) {
        $499 = $hmap;
        $120 = $499;
        $500 = $120;
        $118 = $500;
        $115 = $117;
        $116 = -1;
        $501 = $115;
        $502 = $116;
        $113 = $501;
        $114 = $502;
        $503 = $113;
        HEAP32[$503>>2] = 0;
        $504 = HEAP32[$117>>2]|0;
        HEAP32[$119>>2] = $504;
        $108 = $119;
        $111 = $121;
        $112 = 0;
        $505 = $111;
        $506 = $112;
        $109 = $505;
        $110 = $506;
        $507 = $109;
        $508 = $110;
        HEAP32[$507>>2] = $508;
        ;HEAP8[$107+0|0]=HEAP8[$121+0|0]|0;HEAP8[$107+1|0]=HEAP8[$121+1|0]|0;HEAP8[$107+2|0]=HEAP8[$121+2|0]|0;HEAP8[$107+3|0]=HEAP8[$121+3|0]|0;
        $106 = $240;
        $509 = $106;
        ;HEAP8[$__i1$i$i21+0|0]=HEAP8[$107+0|0]|0;HEAP8[$__i1$i$i21+1|0]=HEAP8[$107+1|0]|0;HEAP8[$__i1$i$i21+2|0]=HEAP8[$107+2|0]|0;HEAP8[$__i1$i$i21+3|0]=HEAP8[$107+3|0]|0;
        $105 = $509;
        $510 = $105;
        ;HEAP32[$510+0>>2]=HEAP32[$__i1$i$i21+0>>2]|0;
        $45 = $it;
        $46 = $240;
        $511 = $45;
        $512 = $46;
        $43 = $511;
        $44 = $512;
        $513 = $43;
        $514 = $44;
        $41 = $513;
        $42 = $514;
        $515 = $41;
        $516 = HEAP32[$515>>2]|0;
        $517 = $42;
        $518 = HEAP32[$517>>2]|0;
        $519 = ($516|0)==($518|0);
        $520 = $519 ^ 1;
        if (!($520)) {
         break;
        }
        $40 = $it;
        $521 = $40;
        $39 = $521;
        $522 = $39;
        $523 = HEAP32[$522>>2]|0;
        $524 = (($523) + 8|0);
        $38 = $524;
        $525 = $38;
        $37 = $525;
        $526 = $37;
        $527 = (($526) + 4|0);
        $528 = HEAP32[$527>>2]|0;
        $pp = $528;
        $529 = $pp;
        $530 = ($529|0)==(0|0);
        if (!($530)) {
         __ZdlPv($529);
        }
        $35 = $it;
        $36 = 0;
        $531 = $35;
        ;HEAP32[$241+0>>2]=HEAP32[$531+0>>2]|0;
        $34 = $531;
        $532 = $34;
        $33 = $532;
        $533 = $33;
        $534 = HEAP32[$533>>2]|0;
        $535 = HEAP32[$534>>2]|0;
        HEAP32[$533>>2] = $535;
       }
       $536 = $hmap;
       $537 = $best_hmap;
       $538 = ($536|0)==($537|0);
       if ($538) {
        $best_hmap = 0;
       }
       $539 = $hmap;
       $540 = ($539|0)==(0|0);
       if (!($540)) {
        __THREW__ = 0;
        invoke_vi(117,($539|0));
        $541 = __THREW__; __THREW__ = 0;
        $542 = $541&1;
        if ($542) {
         label = 66;
         break L9;
        }
        __ZdlPv($539);
       }
       $hmap = 0;
       $543 = $i;
       $544 = HEAP32[12832>>2]|0;
       $545 = (($544) + ($543<<2)|0);
       HEAP32[$545>>2] = 0;
      }
     }
     else if ((label|0) == 72) {
      label = 0;
     }
     else if ((label|0) == 118) {
      label = 0;
     }
     else if ((label|0) == 153) {
      label = 0;
     }
     $943 = +HEAPF64[$the_best_pair>>3];
     $944 = $943 == 0.0;
     if ($944) {
      label = 162;
      break L11;
     }
    }
   } while(0);
   $945 = $i;
   $946 = (($945) + 1)|0;
   $i = $946;
  }
  if ((label|0) == 28) {
   label = 0;
  }
  else if ((label|0) == 162) {
   label = 0;
  }
  $947 = +HEAPF64[$the_best_pair>>3];
  $948 = $947 == 1.79769313486231570815E+308;
  if ($948) {
   $949 = $product_size_range_index;
   $950 = (($949) + 1)|0;
   $product_size_range_index = $950;
   $i = 0;
   while(1) {
    $951 = $i;
    $952 = $224;
    $953 = (($952) + 232|0);
    $954 = (($953) + 4|0);
    $955 = HEAP32[$954>>2]|0;
    $956 = ($951|0)<($955|0);
    if (!($956)) {
     break;
    }
    $957 = $i;
    $958 = HEAP32[12840>>2]|0;
    $959 = (($958) + ($957<<2)|0);
    HEAP32[$959>>2] = -1;
    $960 = $i;
    $961 = (($960) + 1)|0;
    $i = $961;
   }
   $962 = $product_size_range_index;
   $963 = $225;
   $964 = (($963) + 2416|0);
   $965 = HEAP32[$964>>2]|0;
   $966 = ($962|0)<($965|0);
   if (!($966)) {
    label = 171;
    break;
   }
  } else {
   $967 = $trace_me;
   $968 = ($967|0)!=(0);
   if ($968) {
    $969 = HEAP32[_stderr>>2]|0;
    $970 = $the_best_i;
    $971 = HEAP32[$the_best_j>>2]|0;
    HEAP32[$vararg_buffer33>>2] = $970;
    $vararg_ptr36 = (($vararg_buffer33) + 4|0);
    HEAP32[$vararg_ptr36>>2] = $971;
    (_fprintf(($969|0),(13016|0),($vararg_buffer33|0))|0);
   }
   $972 = $230;
   __ZL8add_pairPK11primer_pairP12pair_array_t($the_best_pair,$972);
   $973 = $best_pp;
   $974 = ($973|0)==(0|0);
   if (!($974)) {
    __ZdlPv($973);
   }
   $975 = $best_hmap;
   $976 = (__ZN9__gnu_cxx8hash_mapIiP11primer_pairNS_4hashIiEENSt3__18equal_toIiEENS5_9allocatorINS5_4pairIKiS2_EEEEEixERSA_($975,$the_best_j)|0);
   HEAP32[$976>>2] = 0;
   $i = 0;
   while(1) {
    $977 = $i;
    $978 = $224;
    $979 = (($978) + 232|0);
    $980 = (($979) + 4|0);
    $981 = HEAP32[$980>>2]|0;
    $982 = ($977|0)<($981|0);
    if (!($982)) {
     break;
    }
    $983 = $i;
    $984 = $224;
    $985 = (($984) + 232|0);
    $986 = HEAP32[$985>>2]|0;
    $987 = (($986) + ($983<<7)|0);
    $988 = $225;
    $989 = (($988) + 2644|0);
    $990 = HEAP32[$989>>2]|0;
    $991 = (__ZL39right_oligo_in_pair_overlaps_used_oligoPK10primer_recPK11primer_pairi($987,$the_best_pair,$990)|0);
    $992 = ($991|0)!=(0);
    if ($992) {
     $993 = $i;
     $994 = $224;
     $995 = (($994) + 232|0);
     $996 = HEAP32[$995>>2]|0;
     $997 = (($996) + ($993<<7)|0);
     $998 = (($997) + 115|0);
     HEAP8[$998] = 1;
    }
    $999 = $i;
    $1000 = (($999) + 1)|0;
    $i = $1000;
   }
   HEAP32[$j>>2] = 0;
   while(1) {
    $1001 = HEAP32[$j>>2]|0;
    $1002 = $224;
    $1003 = (($1002) + 4|0);
    $1004 = HEAP32[$1003>>2]|0;
    $1005 = ($1001|0)<($1004|0);
    if (!($1005)) {
     break;
    }
    $1006 = HEAP32[$j>>2]|0;
    $1007 = $224;
    $1008 = HEAP32[$1007>>2]|0;
    $1009 = (($1008) + ($1006<<7)|0);
    $1010 = $225;
    $1011 = (($1010) + 2640|0);
    $1012 = HEAP32[$1011>>2]|0;
    $1013 = (__ZL38left_oligo_in_pair_overlaps_used_oligoPK10primer_recPK11primer_pairi($1009,$the_best_pair,$1012)|0);
    $1014 = ($1013|0)!=(0);
    if ($1014) {
     $1015 = HEAP32[$j>>2]|0;
     $1016 = $224;
     $1017 = HEAP32[$1016>>2]|0;
     $1018 = (($1017) + ($1015<<7)|0);
     $1019 = (($1018) + 115|0);
     HEAP8[$1019] = 1;
    }
    $1020 = HEAP32[$j>>2]|0;
    $1021 = (($1020) + 1)|0;
    HEAP32[$j>>2] = $1021;
   }
   $1022 = $225;
   $1023 = (($1022) + 28|0);
   $1024 = HEAP32[$1023>>2]|0;
   $1025 = $230;
   $1026 = (($1025) + 4|0);
   $1027 = HEAP32[$1026>>2]|0;
   $1028 = ($1024|0)==($1027|0);
   if ($1028) {
    label = 190;
    break;
   }
  }
 }
 if ((label|0) == 25) {
  $361 = ___cxa_find_matching_catch(-1,-1)|0;
  $362 = tempRet0;
  $234 = $361;
  $235 = $362;
  __ZdlPv($354);
  $1033 = $234;
  $1034 = $235;
  ___resumeException($1033|0);
  // unreachable;
 }
 else if ((label|0) == 47) {
  $462 = ___cxa_find_matching_catch(-1,-1)|0;
  $463 = tempRet0;
  $234 = $462;
  $235 = $463;
  __ZdlPv($455);
  $1033 = $234;
  $1034 = $235;
  ___resumeException($1033|0);
  // unreachable;
 }
 else if ((label|0) == 66) {
  $546 = ___cxa_find_matching_catch(-1,-1)|0;
  $547 = tempRet0;
  $234 = $546;
  $235 = $547;
  __ZdlPv($539);
  $1033 = $234;
  $1034 = $235;
  ___resumeException($1033|0);
  // unreachable;
 }
 else if ((label|0) == 123) {
  $842 = ___cxa_find_matching_catch(-1,-1)|0;
  $843 = tempRet0;
  $102 = $842;
  $103 = $843;
  __THREW__ = 0;
  invoke_vi(118,($788|0));
  $844 = __THREW__; __THREW__ = 0;
  $845 = $844&1;
  if ($845) {
   $848 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $849 = tempRet0;
   ___clang_call_terminate($848);
   // unreachable;
  }
  $846 = $102;
  $847 = $103;
  $234 = $846;
  $235 = $847;
  __ZdlPv($786);
  $1033 = $234;
  $1034 = $235;
  ___resumeException($1033|0);
  // unreachable;
 }
 else if ((label|0) == 128) {
  _longjmp((264|0),1);
  // unreachable;
 }
 else if ((label|0) == 147) {
  $920 = HEAP32[_stderr>>2]|0;
  $921 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer27>>2] = $921;
  $vararg_ptr30 = (($vararg_buffer27) + 4|0);
  HEAP32[$vararg_ptr30>>2] = 56;
  $vararg_ptr31 = (($vararg_buffer27) + 8|0);
  HEAP32[$vararg_ptr31>>2] = 1624;
  $vararg_ptr32 = (($vararg_buffer27) + 12|0);
  HEAP32[$vararg_ptr32>>2] = 12992;
  (_fprintf(($920|0),(16|0),($vararg_buffer27|0))|0);
  _abort();
  // unreachable;
 }
 else if ((label|0) == 149) {
  _longjmp((264|0),1);
  // unreachable;
 }
 else if ((label|0) == 171) {
  $1029 = $224;
  $1030 = (($1029) + 232|0);
  $1031 = (($1030) + 4|0);
  $1032 = HEAP32[$1031>>2]|0;
  __ZL16free_pair_memoryi($1032);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 190) {
  $1029 = $224;
  $1030 = (($1029) + 232|0);
  $1031 = (($1030) + 4|0);
  $1032 = HEAP32[$1031>>2]|0;
  __ZL16free_pair_memoryi($1032);
  STACKTOP = sp;return;
 }
}
function __ZL15pr_append_w_sepP13pr_append_strPKcS2_($x,$sep,$s) {
 $x = $x|0;
 $sep = $sep|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $x;
 $1 = $sep;
 $2 = $s;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_pr_append_w_sep_external($3,$4,$5)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  _longjmp((264|0),1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZL9pr_appendP13pr_append_strPKc($x,$s) {
 $x = $x|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $x;
 $1 = $s;
 $2 = $0;
 $3 = $1;
 $4 = (_pr_append_external($2,$3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  _longjmp((264|0),1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _oligo_max_template_mispriming($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $h;
 $1 = $0;
 $2 = (($1) + 96|0);
 $3 = +HEAPF64[$2>>3];
 $4 = $0;
 $5 = (($4) + 104|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $3 > $6;
 if ($7) {
  $8 = $0;
  $9 = (($8) + 96|0);
  $10 = +HEAPF64[$9>>3];
  $14 = $10;
  STACKTOP = sp;return (+$14);
 } else {
  $11 = $0;
  $12 = (($11) + 104|0);
  $13 = +HEAPF64[$12>>3];
  $14 = $13;
  STACKTOP = sp;return (+$14);
 }
 return +0;
}
function _oligo_max_template_mispriming_thermod($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $h;
 $1 = $0;
 $2 = (($1) + 96|0);
 $3 = +HEAPF64[$2>>3];
 $4 = $0;
 $5 = (($4) + 104|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $3 > $6;
 if ($7) {
  $8 = $0;
  $9 = (($8) + 96|0);
  $10 = +HEAPF64[$9>>3];
  $14 = $10;
  STACKTOP = sp;return (+$14);
 } else {
  $11 = $0;
  $12 = (($11) + 104|0);
  $13 = +HEAPF64[$12>>3];
  $14 = $13;
  STACKTOP = sp;return (+$14);
 }
 return +0;
}
function __Z24compute_position_penaltyPK18p3_global_settingsPK8seq_argsP10primer_rec10oligo_type($pa,$sa,$h,$o_type) {
 $pa = $pa|0;
 $sa = $sa|0;
 $h = $h|0;
 $o_type = $o_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, $inside_flag = 0, $target_begin = 0, $target_end = 0, $three_prime_base = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = $pa;
 $1 = $sa;
 $2 = $h;
 $3 = $o_type;
 $inside_flag = 0;
 $4 = $3;
 $5 = (0)==($4|0);
 if (!($5)) {
  $6 = $3;
  $7 = (1)==($6|0);
  if (!($7)) {
   $8 = HEAP32[_stderr>>2]|0;
   $9 = HEAP32[8>>2]|0;
   HEAP32[$vararg_buffer>>2] = $9;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 56;
   $vararg_ptr2 = (($vararg_buffer) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 4283;
   $vararg_ptr3 = (($vararg_buffer) + 12|0);
   HEAP32[$vararg_ptr3>>2] = 488;
   (_fprintf(($8|0),(16|0),($vararg_buffer|0))|0);
   _abort();
   // unreachable;
  }
 }
 $10 = $1;
 $11 = (($10) + 1600|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (1)==($12|0);
 if (!($13)) {
  $14 = HEAP32[_stderr>>2]|0;
  $15 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $15;
  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
  HEAP32[$vararg_ptr7>>2] = 56;
  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
  HEAP32[$vararg_ptr8>>2] = 4284;
  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
  HEAP32[$vararg_ptr9>>2] = 528;
  (_fprintf(($14|0),(16|0),($vararg_buffer4|0))|0);
  _abort();
  // unreachable;
 }
 $16 = $1;
 $17 = HEAP32[$16>>2]|0;
 $target_begin = $17;
 $18 = $target_begin;
 $19 = $1;
 $20 = (($19) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($18) + ($21))|0;
 $23 = (($22) - 1)|0;
 $target_end = $23;
 $24 = $3;
 $25 = (0)==($24|0);
 if ($25) {
  $26 = $2;
  $27 = (($26) + 56|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $2;
  $30 = (($29) + 112|0);
  $31 = HEAP8[$30]|0;
  $32 = $31 << 24 >> 24;
  $33 = (($28) + ($32))|0;
  $34 = (($33) - 1)|0;
  $44 = $34;
 } else {
  $35 = $2;
  $36 = (($35) + 56|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $2;
  $39 = (($38) + 112|0);
  $40 = HEAP8[$39]|0;
  $41 = $40 << 24 >> 24;
  $42 = (($37) - ($41))|0;
  $43 = (($42) + 1)|0;
  $44 = $43;
 }
 $three_prime_base = $44;
 $45 = $2;
 __ZL27bf_set_infinite_pos_penaltyP10primer_reci($45,1);
 $46 = $2;
 $47 = (($46) + 32|0);
 HEAPF64[$47>>3] = 0.0;
 $48 = $3;
 $49 = (0)==($48|0);
 if ($49) {
  $50 = $three_prime_base;
  $51 = $target_end;
  $52 = ($50|0)<=($51|0);
  if ($52) {
   $53 = $2;
   __ZL27bf_set_infinite_pos_penaltyP10primer_reci($53,0);
   $54 = $three_prime_base;
   $55 = $target_begin;
   $56 = ($54|0)<($55|0);
   if ($56) {
    $57 = $target_begin;
    $58 = $three_prime_base;
    $59 = (($57) - ($58))|0;
    $60 = (($59) - 1)|0;
    $61 = (+($60|0));
    $62 = $2;
    $63 = (($62) + 32|0);
    HEAPF64[$63>>3] = $61;
   } else {
    $64 = $three_prime_base;
    $65 = $target_begin;
    $66 = (($64) - ($65))|0;
    $67 = (($66) + 1)|0;
    $68 = (+($67|0));
    $69 = $2;
    $70 = (($69) + 32|0);
    HEAPF64[$70>>3] = $68;
    $inside_flag = 1;
   }
  }
 } else {
  $71 = $three_prime_base;
  $72 = $target_begin;
  $73 = ($71|0)>=($72|0);
  if ($73) {
   $74 = $2;
   __ZL27bf_set_infinite_pos_penaltyP10primer_reci($74,0);
   $75 = $three_prime_base;
   $76 = $target_end;
   $77 = ($75|0)>($76|0);
   if ($77) {
    $78 = $three_prime_base;
    $79 = $target_end;
    $80 = (($78) - ($79))|0;
    $81 = (($80) - 1)|0;
    $82 = (+($81|0));
    $83 = $2;
    $84 = (($83) + 32|0);
    HEAPF64[$84>>3] = $82;
   } else {
    $85 = $target_end;
    $86 = $three_prime_base;
    $87 = (($85) - ($86))|0;
    $88 = (($87) + 1)|0;
    $89 = (+($88|0));
    $90 = $2;
    $91 = (($90) + 32|0);
    HEAPF64[$91>>3] = $89;
    $inside_flag = 1;
   }
  }
 }
 $92 = $inside_flag;
 $93 = ($92|0)!=(0);
 if ($93) {
  $101 = $0;
  $102 = (($101) + 808|0);
  $103 = +HEAPF64[$102>>3];
  $104 = $2;
  $105 = (($104) + 32|0);
  $106 = +HEAPF64[$105>>3];
  $107 = $106 * $103;
  HEAPF64[$105>>3] = $107;
  STACKTOP = sp;return;
 } else {
  $94 = $0;
  $95 = (($94) + 800|0);
  $96 = +HEAPF64[$95>>3];
  $97 = $2;
  $98 = (($97) + 32|0);
  $99 = +HEAPF64[$98>>3];
  $100 = $99 * $96;
  HEAPF64[$98>>3] = $100;
  STACKTOP = sp;return;
 }
}
function __ZL27bf_set_infinite_pos_penaltyP10primer_reci($oligo,$val) {
 $oligo = $oligo|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $val;
 $2 = $1;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = $0;
  $5 = (($4) + 116|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 | 16;
  HEAP32[$5>>2] = $7;
  $8 = $0;
  $9 = (($8) + 116|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 ^ 16;
  HEAP32[$9>>2] = $11;
  STACKTOP = sp;return;
 } else {
  $12 = $0;
  $13 = (($12) + 116|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 | 16;
  HEAP32[$13>>2] = $15;
  STACKTOP = sp;return;
 }
}
function __ZL10_pr_substrPKciiPc($seq,$n,$m,$s) {
 $seq = $seq|0;
 $n = $n|0;
 $m = $m|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $seq;
 $1 = $n;
 $2 = $m;
 $3 = $s;
 $4 = $1;
 $i = $4;
 while(1) {
  $5 = $i;
  $6 = $1;
  $7 = $2;
  $8 = (($6) + ($7))|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $i;
  $11 = $0;
  $12 = (($11) + ($10)|0);
  $13 = HEAP8[$12]|0;
  $14 = $i;
  $15 = $1;
  $16 = (($14) - ($15))|0;
  $17 = $3;
  $18 = (($17) + ($16)|0);
  HEAP8[$18] = $13;
  $19 = $i;
  $20 = (($19) + 1)|0;
  $i = $20;
 }
 $21 = $2;
 $22 = $3;
 $23 = (($22) + ($21)|0);
 HEAP8[$23] = 0;
 STACKTOP = sp;return;
}
function _p3_reverse_complement($seq,$s) {
 $seq = $seq|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $q = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $seq;
 $1 = $s;
 $2 = $0;
 $p = $2;
 $3 = $1;
 $q = $3;
 while(1) {
  $4 = $p;
  $5 = HEAP8[$4]|0;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)!=(0);
  if (!($7)) {
   break;
  }
  $8 = $p;
  $9 = (($8) + 1|0);
  $p = $9;
 }
 $10 = $p;
 $11 = (($10) + -1|0);
 $p = $11;
 while(1) {
  $12 = $p;
  $13 = $0;
  $14 = ($12>>>0)>=($13>>>0);
  if (!($14)) {
   break;
  }
  $15 = $p;
  $16 = HEAP8[$15]|0;
  $17 = $16 << 24 >> 24;
  switch ($17|0) {
  case 84:  {
   $21 = $q;
   HEAP8[$21] = 65;
   break;
  }
  case 65:  {
   $18 = $q;
   HEAP8[$18] = 84;
   break;
  }
  case 68:  {
   $24 = $q;
   HEAP8[$24] = 72;
   break;
  }
  case 75:  {
   $29 = $q;
   HEAP8[$29] = 77;
   break;
  }
  case 99:  {
   $35 = $q;
   HEAP8[$35] = 103;
   break;
  }
  case 100:  {
   $40 = $q;
   HEAP8[$40] = 104;
   break;
  }
  case 89:  {
   $28 = $q;
   HEAP8[$28] = 82;
   break;
  }
  case 104:  {
   $41 = $q;
   HEAP8[$41] = 100;
   break;
  }
  case 103:  {
   $36 = $q;
   HEAP8[$36] = 99;
   break;
  }
  case 78:  {
   $33 = $q;
   HEAP8[$33] = 78;
   break;
  }
  case 85:  {
   $22 = $q;
   HEAP8[$22] = 65;
   break;
  }
  case 72:  {
   $25 = $q;
   HEAP8[$25] = 68;
   break;
  }
  case 97:  {
   $34 = $q;
   HEAP8[$34] = 116;
   break;
  }
  case 107:  {
   $45 = $q;
   HEAP8[$45] = 109;
   break;
  }
  case 115:  {
   $47 = $q;
   HEAP8[$47] = 115;
   break;
  }
  case 71:  {
   $20 = $q;
   HEAP8[$20] = 67;
   break;
  }
  case 87:  {
   $32 = $q;
   HEAP8[$32] = 87;
   break;
  }
  case 66:  {
   $23 = $q;
   HEAP8[$23] = 86;
   break;
  }
  case 82:  {
   $27 = $q;
   HEAP8[$27] = 89;
   break;
  }
  case 121:  {
   $44 = $q;
   HEAP8[$44] = 114;
   break;
  }
  case 109:  {
   $46 = $q;
   HEAP8[$46] = 107;
   break;
  }
  case 116:  {
   $37 = $q;
   HEAP8[$37] = 97;
   break;
  }
  case 118:  {
   $42 = $q;
   HEAP8[$42] = 98;
   break;
  }
  case 114:  {
   $43 = $q;
   HEAP8[$43] = 121;
   break;
  }
  case 67:  {
   $19 = $q;
   HEAP8[$19] = 71;
   break;
  }
  case 117:  {
   $38 = $q;
   HEAP8[$38] = 97;
   break;
  }
  case 83:  {
   $31 = $q;
   HEAP8[$31] = 83;
   break;
  }
  case 86:  {
   $26 = $q;
   HEAP8[$26] = 66;
   break;
  }
  case 98:  {
   $39 = $q;
   HEAP8[$39] = 118;
   break;
  }
  case 110:  {
   $49 = $q;
   HEAP8[$49] = 110;
   break;
  }
  case 77:  {
   $30 = $q;
   HEAP8[$30] = 75;
   break;
  }
  case 119:  {
   $48 = $q;
   HEAP8[$48] = 119;
   break;
  }
  default: {
  }
  }
  $50 = $p;
  $51 = (($50) + -1|0);
  $p = $51;
  $52 = $q;
  $53 = (($52) + 1|0);
  $q = $53;
 }
 $54 = $q;
 HEAP8[$54] = 0;
 STACKTOP = sp;return;
}
function _strcmp_nocase($s1,$s2) {
 $s1 = $s1|0;
 $s2 = $s2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $p = 0, $q = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $s1;
 $2 = $s2;
 $3 = HEAP32[808>>2]|0;
 $4 = ($3|0)!=(1);
 if ($4) {
  $i = 0;
  while(1) {
   $5 = $i;
   $6 = ($5|0)<(255);
   if (!($6)) {
    break;
   }
   $7 = $i;
   $8 = $7&255;
   $9 = $i;
   $10 = (552 + ($9)|0);
   HEAP8[$10] = $8;
   $11 = $i;
   $12 = (($11) + 1)|0;
   $i = $12;
  }
  $i = 97;
  $13 = $i;
  $14 = (552 + ($13)|0);
  HEAP8[$14] = 65;
  $i = 98;
  $15 = $i;
  $16 = (552 + ($15)|0);
  HEAP8[$16] = 66;
  $i = 99;
  $17 = $i;
  $18 = (552 + ($17)|0);
  HEAP8[$18] = 67;
  $i = 65;
  $19 = $i;
  $20 = (552 + ($19)|0);
  HEAP8[$20] = 97;
  $i = 66;
  $21 = $i;
  $22 = (552 + ($21)|0);
  HEAP8[$22] = 98;
  $i = 67;
  $23 = $i;
  $24 = (552 + ($23)|0);
  HEAP8[$24] = 99;
  $i = 100;
  $25 = $i;
  $26 = (552 + ($25)|0);
  HEAP8[$26] = 68;
  $i = 101;
  $27 = $i;
  $28 = (552 + ($27)|0);
  HEAP8[$28] = 69;
  $i = 102;
  $29 = $i;
  $30 = (552 + ($29)|0);
  HEAP8[$30] = 70;
  $i = 68;
  $31 = $i;
  $32 = (552 + ($31)|0);
  HEAP8[$32] = 100;
  $i = 69;
  $33 = $i;
  $34 = (552 + ($33)|0);
  HEAP8[$34] = 101;
  $i = 70;
  $35 = $i;
  $36 = (552 + ($35)|0);
  HEAP8[$36] = 102;
  $i = 103;
  $37 = $i;
  $38 = (552 + ($37)|0);
  HEAP8[$38] = 71;
  $i = 104;
  $39 = $i;
  $40 = (552 + ($39)|0);
  HEAP8[$40] = 72;
  $i = 105;
  $41 = $i;
  $42 = (552 + ($41)|0);
  HEAP8[$42] = 73;
  $i = 71;
  $43 = $i;
  $44 = (552 + ($43)|0);
  HEAP8[$44] = 103;
  $i = 72;
  $45 = $i;
  $46 = (552 + ($45)|0);
  HEAP8[$46] = 104;
  $i = 73;
  $47 = $i;
  $48 = (552 + ($47)|0);
  HEAP8[$48] = 105;
  $i = 107;
  $49 = $i;
  $50 = (552 + ($49)|0);
  HEAP8[$50] = 75;
  $i = 108;
  $51 = $i;
  $52 = (552 + ($51)|0);
  HEAP8[$52] = 76;
  $i = 109;
  $53 = $i;
  $54 = (552 + ($53)|0);
  HEAP8[$54] = 77;
  $i = 75;
  $55 = $i;
  $56 = (552 + ($55)|0);
  HEAP8[$56] = 107;
  $i = 76;
  $57 = $i;
  $58 = (552 + ($57)|0);
  HEAP8[$58] = 108;
  $i = 77;
  $59 = $i;
  $60 = (552 + ($59)|0);
  HEAP8[$60] = 109;
  $i = 110;
  $61 = $i;
  $62 = (552 + ($61)|0);
  HEAP8[$62] = 78;
  $i = 111;
  $63 = $i;
  $64 = (552 + ($63)|0);
  HEAP8[$64] = 79;
  $i = 112;
  $65 = $i;
  $66 = (552 + ($65)|0);
  HEAP8[$66] = 80;
  $i = 78;
  $67 = $i;
  $68 = (552 + ($67)|0);
  HEAP8[$68] = 110;
  $i = 79;
  $69 = $i;
  $70 = (552 + ($69)|0);
  HEAP8[$70] = 111;
  $i = 80;
  $71 = $i;
  $72 = (552 + ($71)|0);
  HEAP8[$72] = 112;
  $i = 113;
  $73 = $i;
  $74 = (552 + ($73)|0);
  HEAP8[$74] = 81;
  $i = 114;
  $75 = $i;
  $76 = (552 + ($75)|0);
  HEAP8[$76] = 82;
  $i = 115;
  $77 = $i;
  $78 = (552 + ($77)|0);
  HEAP8[$78] = 83;
  $i = 81;
  $79 = $i;
  $80 = (552 + ($79)|0);
  HEAP8[$80] = 113;
  $i = 82;
  $81 = $i;
  $82 = (552 + ($81)|0);
  HEAP8[$82] = 114;
  $i = 83;
  $83 = $i;
  $84 = (552 + ($83)|0);
  HEAP8[$84] = 115;
  $i = 116;
  $85 = $i;
  $86 = (552 + ($85)|0);
  HEAP8[$86] = 84;
  $i = 117;
  $87 = $i;
  $88 = (552 + ($87)|0);
  HEAP8[$88] = 85;
  $i = 118;
  $89 = $i;
  $90 = (552 + ($89)|0);
  HEAP8[$90] = 86;
  $i = 84;
  $91 = $i;
  $92 = (552 + ($91)|0);
  HEAP8[$92] = 116;
  $i = 85;
  $93 = $i;
  $94 = (552 + ($93)|0);
  HEAP8[$94] = 117;
  $i = 86;
  $95 = $i;
  $96 = (552 + ($95)|0);
  HEAP8[$96] = 118;
  $i = 119;
  $97 = $i;
  $98 = (552 + ($97)|0);
  HEAP8[$98] = 87;
  $i = 120;
  $99 = $i;
  $100 = (552 + ($99)|0);
  HEAP8[$100] = 88;
  $i = 121;
  $101 = $i;
  $102 = (552 + ($101)|0);
  HEAP8[$102] = 89;
  $i = 87;
  $103 = $i;
  $104 = (552 + ($103)|0);
  HEAP8[$104] = 119;
  $i = 88;
  $105 = $i;
  $106 = (552 + ($105)|0);
  HEAP8[$106] = 120;
  $i = 89;
  $107 = $i;
  $108 = (552 + ($107)|0);
  HEAP8[$108] = 121;
  $i = 122;
  $109 = $i;
  $110 = (552 + ($109)|0);
  HEAP8[$110] = 90;
  $i = 90;
  $111 = $i;
  $112 = (552 + ($111)|0);
  HEAP8[$112] = 122;
  $i = 106;
  $113 = $i;
  $114 = (552 + ($113)|0);
  HEAP8[$114] = 74;
  $i = 74;
  $115 = $i;
  $116 = (552 + ($115)|0);
  HEAP8[$116] = 106;
  HEAP32[808>>2] = 1;
 }
 $117 = $1;
 $118 = ($117|0)==(0|0);
 if (!($118)) {
  $119 = $2;
  $120 = ($119|0)==(0|0);
  if (!($120)) {
   $121 = $1;
   $122 = (_strlen(($121|0))|0);
   $123 = $2;
   $124 = (_strlen(($123|0))|0);
   $125 = ($122|0)!=($124|0);
   if ($125) {
    $0 = 1;
    $166 = $0;
    STACKTOP = sp;return ($166|0);
   }
   $126 = $1;
   $p = $126;
   $127 = $2;
   $q = $127;
   while(1) {
    $128 = $p;
    $129 = HEAP8[$128]|0;
    $130 = $129 << 24 >> 24;
    $131 = ($130|0)!=(0);
    if ($131) {
     $132 = $p;
     $133 = HEAP8[$132]|0;
     $134 = $133 << 24 >> 24;
     $135 = ($134|0)!=(10);
     if ($135) {
      $136 = $q;
      $137 = HEAP8[$136]|0;
      $138 = $137 << 24 >> 24;
      $139 = ($138|0)!=(0);
      if ($139) {
       $140 = $q;
       $141 = HEAP8[$140]|0;
       $142 = $141 << 24 >> 24;
       $143 = ($142|0)!=(10);
       $167 = $143;
      } else {
       $167 = 0;
      }
     } else {
      $167 = 0;
     }
    } else {
     $167 = 0;
    }
    if (!($167)) {
     label = 22;
     break;
    }
    $144 = $p;
    $145 = HEAP8[$144]|0;
    $146 = $145 << 24 >> 24;
    $i = $146;
    $147 = $p;
    $148 = HEAP8[$147]|0;
    $149 = $148 << 24 >> 24;
    $150 = $q;
    $151 = HEAP8[$150]|0;
    $152 = $151 << 24 >> 24;
    $153 = ($149|0)==($152|0);
    if (!($153)) {
     $154 = $i;
     $155 = (552 + ($154)|0);
     $156 = HEAP8[$155]|0;
     $157 = $156 << 24 >> 24;
     $158 = $q;
     $159 = HEAP8[$158]|0;
     $160 = $159 << 24 >> 24;
     $161 = ($157|0)==($160|0);
     if (!($161)) {
      label = 21;
      break;
     }
    }
    $162 = $p;
    $163 = (($162) + 1|0);
    $p = $163;
    $164 = $q;
    $165 = (($164) + 1|0);
    $q = $165;
   }
   if ((label|0) == 21) {
    $0 = 1;
    $166 = $0;
    STACKTOP = sp;return ($166|0);
   }
   else if ((label|0) == 22) {
    $0 = 0;
    $166 = $0;
    STACKTOP = sp;return ($166|0);
   }
  }
 }
 $0 = 1;
 $166 = $0;
 STACKTOP = sp;return ($166|0);
}
function _libprimer3_release() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (816|0);
}
function _init_pr_append_str($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $s;
 $1 = $0;
 $2 = (($1) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = $0;
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function _pr_append_external($x,$s) {
 $x = $x|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $slen = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, $xlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $1 = $x;
 $2 = $s;
 $3 = $2;
 $4 = (0|0)!=($3|0);
 if (!($4)) {
  $5 = HEAP32[_stderr>>2]|0;
  $6 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $6;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 56;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 5644;
  $vararg_ptr3 = (($vararg_buffer) + 12|0);
  HEAP32[$vararg_ptr3>>2] = 848;
  (_fprintf(($5|0),(16|0),($vararg_buffer|0))|0);
  _abort();
  // unreachable;
 }
 $7 = $1;
 $8 = (0|0)!=($7|0);
 if (!($8)) {
  $9 = HEAP32[_stderr>>2]|0;
  $10 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $10;
  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
  HEAP32[$vararg_ptr7>>2] = 56;
  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
  HEAP32[$vararg_ptr8>>2] = 5645;
  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
  HEAP32[$vararg_ptr9>>2] = 856;
  (_fprintf(($9|0),(16|0),($vararg_buffer4|0))|0);
  _abort();
  // unreachable;
 }
 $11 = $1;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (0|0)==($13|0);
 do {
  if ($14) {
   $15 = $1;
   HEAP32[$15>>2] = 24;
   $16 = $1;
   $17 = HEAP32[$16>>2]|0;
   $18 = (_malloc($17)|0);
   $19 = $1;
   $20 = (($19) + 4|0);
   HEAP32[$20>>2] = $18;
   $21 = $1;
   $22 = (($21) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (0|0)==($23|0);
   if (!($24)) {
    $25 = $1;
    $26 = (($25) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    HEAP8[$27] = 0;
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  }
 } while(0);
 $28 = $1;
 $29 = (($28) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (_strlen(($30|0))|0);
 $xlen = $31;
 $32 = $2;
 $33 = (_strlen(($32|0))|0);
 $slen = $33;
 $34 = $xlen;
 $35 = $slen;
 $36 = (($34) + ($35))|0;
 $37 = (($36) + 1)|0;
 $38 = $1;
 $39 = HEAP32[$38>>2]|0;
 $40 = ($37|0)>($39|0);
 do {
  if ($40) {
   $41 = $slen;
   $42 = (($41) + 1)|0;
   $43 = $42<<1;
   $44 = $1;
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + ($43))|0;
   HEAP32[$44>>2] = $46;
   $47 = $1;
   $48 = (($47) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $1;
   $51 = HEAP32[$50>>2]|0;
   $52 = (_realloc($49,$51)|0);
   $53 = $1;
   $54 = (($53) + 4|0);
   HEAP32[$54>>2] = $52;
   $55 = $1;
   $56 = (($55) + 4|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (0|0)==($57|0);
   if (!($58)) {
    break;
   }
   $0 = 1;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  }
 } while(0);
 $59 = $1;
 $60 = (($59) + 4|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $xlen;
 $63 = (($61) + ($62)|0);
 $64 = $2;
 (_strcpy(($63|0),($64|0))|0);
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _pr_append_w_sep_external($x,$sep,$s) {
 $x = $x|0;
 $sep = $sep|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer4 = sp;
 $vararg_buffer = sp + 16|0;
 $1 = $x;
 $2 = $sep;
 $3 = $s;
 $4 = $1;
 $5 = (0|0)!=($4|0);
 if (!($5)) {
  $6 = HEAP32[_stderr>>2]|0;
  $7 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 56;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 5685;
  $vararg_ptr3 = (($vararg_buffer) + 12|0);
  HEAP32[$vararg_ptr3>>2] = 856;
  (_fprintf(($6|0),(16|0),($vararg_buffer|0))|0);
  _abort();
  // unreachable;
 }
 $8 = $3;
 $9 = (0|0)!=($8|0);
 if (!($9)) {
  $10 = HEAP32[_stderr>>2]|0;
  $11 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $11;
  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
  HEAP32[$vararg_ptr7>>2] = 56;
  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
  HEAP32[$vararg_ptr8>>2] = 5686;
  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
  HEAP32[$vararg_ptr9>>2] = 848;
  (_fprintf(($10|0),(16|0),($vararg_buffer4|0))|0);
  _abort();
  // unreachable;
 }
 $12 = $2;
 $13 = (0|0)!=($12|0);
 if (!($13)) {
  $14 = HEAP32[_stderr>>2]|0;
  $15 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $15;
  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
  HEAP32[$vararg_ptr13>>2] = 56;
  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
  HEAP32[$vararg_ptr14>>2] = 5687;
  $vararg_ptr15 = (($vararg_buffer10) + 12|0);
  HEAP32[$vararg_ptr15>>2] = 872;
  (_fprintf(($14|0),(16|0),($vararg_buffer10|0))|0);
  _abort();
  // unreachable;
 }
 $16 = $1;
 $17 = (_pr_is_empty($16)|0);
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $1;
  $20 = $3;
  $21 = (_pr_append_external($19,$20)|0);
  $0 = $21;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 $22 = $1;
 $23 = $2;
 $24 = (_pr_append_external($22,$23)|0);
 $25 = ($24|0)!=(0);
 if ($25) {
  $31 = 1;
 } else {
  $26 = $1;
  $27 = $3;
  $28 = (_pr_append_external($26,$27)|0);
  $29 = ($28|0)!=(0);
  $31 = $29;
 }
 $30 = $31&1;
 $0 = $30;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function __ZL15pr_safe_reallocPvj($p,$x) {
 $p = $p|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $p;
 $1 = $x;
 $2 = $0;
 $3 = $1;
 $4 = (_realloc($2,$3)|0);
 $r = $4;
 $5 = $r;
 $6 = (0|0)==($5|0);
 if ($6) {
  _longjmp((264|0),1);
  // unreachable;
 } else {
  $7 = $r;
  STACKTOP = sp;return ($7|0);
 }
 return 0|0;
}
function _p3_set_sa_sequence($sargs,$sequence) {
 $sargs = $sargs|0;
 $sequence = $sequence|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $sargs;
 $1 = $sequence;
 $2 = $0;
 $3 = (($2) + 8856|0);
 $4 = $1;
 $5 = (__ZL11_set_stringPPcPKc($3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZL11_set_stringPPcPKc($loc,$new_string) {
 $loc = $loc|0;
 $new_string = $new_string|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $loc;
 $2 = $new_string;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  _free($7);
 }
 $8 = $2;
 $9 = (_strlen(($8|0))|0);
 $10 = (($9) + 1)|0;
 $11 = (_malloc($10)|0);
 $12 = $1;
 HEAP32[$12>>2] = $11;
 $13 = ($11|0)!=(0|0);
 if ($13) {
  $14 = $1;
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  (_strcpy(($15|0),($16|0))|0);
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 } else {
  $0 = 1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return 0|0;
}
function _p3_set_sa_left_input($sargs,$s) {
 $sargs = $sargs|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $sargs;
 $1 = $s;
 $2 = $0;
 $3 = (($2) + 8884|0);
 $4 = $1;
 $5 = (__ZL11_set_stringPPcPKc($3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _p3_set_sa_right_input($sargs,$s) {
 $sargs = $sargs|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $sargs;
 $1 = $s;
 $2 = $0;
 $3 = (($2) + 8888|0);
 $4 = $1;
 $5 = (__ZL11_set_stringPPcPKc($3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _p3_ol_is_ok($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 2;
 $5 = ($4|0)!=(0);
 $6 = $5&1;
 STACKTOP = sp;return ($6|0);
}
function _p3_ol_has_any_problem($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[888>>2]|0;
 $5 = $3 & $4;
 $6 = ($5|0)!=(0);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function __ZL12dna_to_upperPci($s,$ambiguity_code_ok) {
 $s = $s|0;
 $ambiguity_code_ok = $ambiguity_code_ok|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0;
 var $unrecognized_base = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $s;
 $1 = $ambiguity_code_ok;
 $2 = $0;
 $p = $2;
 $unrecognized_base = 0;
 while(1) {
  $3 = $p;
  $4 = HEAP8[$3]|0;
  $5 = ($4<<24>>24)!=(0);
  if (!($5)) {
   break;
  }
  $6 = $p;
  $7 = HEAP8[$6]|0;
  $8 = $7 << 24 >> 24;
  switch ($8|0) {
  case 67: case 99:  {
   $10 = $p;
   HEAP8[$10] = 67;
   break;
  }
  case 84: case 116:  {
   $12 = $p;
   HEAP8[$12] = 84;
   break;
  }
  case 71: case 103:  {
   $11 = $p;
   HEAP8[$11] = 71;
   break;
  }
  case 78: case 110:  {
   $13 = $p;
   HEAP8[$13] = 78;
   break;
  }
  case 65: case 97:  {
   $9 = $p;
   HEAP8[$9] = 65;
   break;
  }
  default: {
   $14 = $1;
   $15 = ($14|0)!=(0);
   if ($15) {
    $16 = $p;
    $17 = HEAP8[$16]|0;
    $18 = $17 << 24 >> 24;
    switch ($18|0) {
    case 89: case 121:  {
     $20 = $p;
     HEAP8[$20] = 89;
     break;
    }
    case 68: case 100:  {
     $25 = $p;
     HEAP8[$25] = 68;
     break;
    }
    case 75: case 107:  {
     $24 = $p;
     HEAP8[$24] = 75;
     break;
    }
    case 77: case 109:  {
     $21 = $p;
     HEAP8[$21] = 77;
     break;
    }
    case 72: case 104:  {
     $26 = $p;
     HEAP8[$26] = 72;
     break;
    }
    case 86: case 118:  {
     $27 = $p;
     HEAP8[$27] = 86;
     break;
    }
    case 87: case 119:  {
     $22 = $p;
     HEAP8[$22] = 87;
     break;
    }
    case 66: case 98:  {
     $28 = $p;
     HEAP8[$28] = 66;
     break;
    }
    case 82: case 114:  {
     $19 = $p;
     HEAP8[$19] = 82;
     break;
    }
    case 83: case 115:  {
     $23 = $p;
     HEAP8[$23] = 83;
     break;
    }
    default: {
    }
    }
   } else {
    $29 = $unrecognized_base;
    $30 = ($29|0)!=(0);
    if (!($30)) {
     $31 = $p;
     $32 = HEAP8[$31]|0;
     $33 = $32 << 24 >> 24;
     $unrecognized_base = $33;
    }
    $34 = $p;
    HEAP8[$34] = 78;
   }
  }
  }
  $35 = $p;
  $36 = (($35) + 1|0);
  $p = $36;
 }
 $37 = $unrecognized_base;
 $38 = $37&255;
 STACKTOP = sp;return ($38|0);
}
function __ZL13strstr_nocasePcS_($s1,$s2) {
 $s1 = $s1|0;
 $s2 = $s2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n1 = 0, $n2 = 0, $p = 0, $q = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $s1;
 $2 = $s2;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = $2;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = $1;
   $8 = (_strlen(($7|0))|0);
   $n1 = $8;
   $9 = $2;
   $10 = (_strlen(($9|0))|0);
   $n2 = $10;
   $11 = $n1;
   $12 = $n2;
   $13 = ($11|0)<($12|0);
   if ($13) {
    $0 = 0;
    $48 = $0;
    STACKTOP = sp;return ($48|0);
   }
   $14 = $n1;
   $15 = (($14) + 1)|0;
   $16 = (__ZL14pr_safe_mallocj($15)|0);
   $tmp = $16;
   $17 = $tmp;
   $18 = $1;
   (_strcpy(($17|0),($18|0))|0);
   $19 = $tmp;
   $20 = HEAP8[$19]|0;
   $q = $20;
   $21 = $tmp;
   $p = $21;
   while(1) {
    $22 = $q;
    $23 = $22 << 24 >> 24;
    $24 = ($23|0)!=(0);
    if ($24) {
     $25 = $q;
     $26 = $25 << 24 >> 24;
     $27 = ($26|0)!=(10);
     $49 = $27;
    } else {
     $49 = 0;
    }
    if (!($49)) {
     label = 13;
     break;
    }
    $28 = $p;
    $29 = $n2;
    $30 = (($28) + ($29)|0);
    $31 = HEAP8[$30]|0;
    $q = $31;
    $32 = $p;
    $33 = $n2;
    $34 = (($32) + ($33)|0);
    HEAP8[$34] = 0;
    $35 = $p;
    $36 = $2;
    $37 = (_strcmp_nocase($35,$36)|0);
    $38 = ($37|0)!=(0);
    if (!($38)) {
     label = 12;
     break;
    }
    $39 = $q;
    $40 = $p;
    $41 = $n2;
    $42 = (($40) + ($41)|0);
    HEAP8[$42] = $39;
    $43 = $p;
    $44 = (($43) + 1|0);
    $p = $44;
   }
   if ((label|0) == 12) {
    $45 = $tmp;
    _free($45);
    $46 = $p;
    $0 = $46;
    $48 = $0;
    STACKTOP = sp;return ($48|0);
   }
   else if ((label|0) == 13) {
    $47 = $tmp;
    _free($47);
    $0 = 0;
    $48 = $0;
    STACKTOP = sp;return ($48|0);
   }
  }
 }
 $0 = 0;
 $48 = $0;
 STACKTOP = sp;return ($48|0);
}
function __ZL26test_must_match_parametersPc($test) {
 $test = $test|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $i = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $test;
 $i = 0;
 while(1) {
  $2 = $1;
  $3 = HEAP8[$2]|0;
  $4 = $3 << 24 >> 24;
  $5 = ($4|0)!=(0);
  if (!($5)) {
   label = 28;
   break;
  }
  $6 = $1;
  $7 = HEAP8[$6]|0;
  $8 = $7 << 24 >> 24;
  $9 = ($8|0)>=(97);
  if ($9) {
   $10 = $1;
   $11 = HEAP8[$10]|0;
   $12 = $11 << 24 >> 24;
   $13 = ($12|0)<=(122);
   if ($13) {
    $14 = $1;
    $15 = HEAP8[$14]|0;
    $16 = $15 << 24 >> 24;
    $17 = (65 + ($16))|0;
    $18 = (($17) - 97)|0;
    $19 = $18&255;
    $x = $19;
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   label = 0;
   $20 = $1;
   $21 = HEAP8[$20]|0;
   $x = $21;
  }
  $22 = $x;
  $23 = $22 << 24 >> 24;
  $24 = ($23|0)<(65);
  if ($24) {
   label = 9;
   break;
  }
  $25 = $x;
  $26 = $25 << 24 >> 24;
  $27 = ($26|0)>(90);
  if ($27) {
   label = 9;
   break;
  }
  $28 = $x;
  $29 = $28 << 24 >> 24;
  $30 = ($29|0)==(78);
  if (!($30)) {
   $31 = $x;
   $32 = $31 << 24 >> 24;
   $33 = ($32|0)==(65);
   if (!($33)) {
    $34 = $x;
    $35 = $34 << 24 >> 24;
    $36 = ($35|0)==(67);
    if (!($36)) {
     $37 = $x;
     $38 = $37 << 24 >> 24;
     $39 = ($38|0)==(84);
     if (!($39)) {
      $40 = $x;
      $41 = $40 << 24 >> 24;
      $42 = ($41|0)==(71);
      if (!($42)) {
       $43 = $x;
       $44 = $43 << 24 >> 24;
       $45 = ($44|0)==(82);
       if (!($45)) {
        $46 = $x;
        $47 = $46 << 24 >> 24;
        $48 = ($47|0)==(89);
        if (!($48)) {
         $49 = $x;
         $50 = $49 << 24 >> 24;
         $51 = ($50|0)==(87);
         if (!($51)) {
          $52 = $x;
          $53 = $52 << 24 >> 24;
          $54 = ($53|0)==(83);
          if (!($54)) {
           $55 = $x;
           $56 = $55 << 24 >> 24;
           $57 = ($56|0)==(77);
           if (!($57)) {
            $58 = $x;
            $59 = $58 << 24 >> 24;
            $60 = ($59|0)==(75);
            if (!($60)) {
             $61 = $x;
             $62 = $61 << 24 >> 24;
             $63 = ($62|0)==(66);
             if (!($63)) {
              $64 = $x;
              $65 = $64 << 24 >> 24;
              $66 = ($65|0)==(72);
              if (!($66)) {
               $67 = $x;
               $68 = $67 << 24 >> 24;
               $69 = ($68|0)==(68);
               if (!($69)) {
                $70 = $x;
                $71 = $70 << 24 >> 24;
                $72 = ($71|0)==(86);
                if (!($72)) {
                 label = 26;
                 break;
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
  $73 = $1;
  $74 = (($73) + 1|0);
  $1 = $74;
  $75 = $i;
  $76 = (($75) + 1)|0;
  $i = $76;
 }
 if ((label|0) == 9) {
  $0 = 1;
  $79 = $0;
  STACKTOP = sp;return ($79|0);
 }
 else if ((label|0) == 26) {
  $0 = 1;
  $79 = $0;
  STACKTOP = sp;return ($79|0);
 }
 else if ((label|0) == 28) {
  $77 = $i;
  $78 = ($77|0)!=(5);
  if ($78) {
   $0 = 1;
   $79 = $0;
   STACKTOP = sp;return ($79|0);
  } else {
   $0 = 0;
   $79 = $0;
   STACKTOP = sp;return ($79|0);
  }
 }
 return 0|0;
}
function __ZL15fake_a_sequenceP8seq_argsPK18p3_global_settings($sa,$pa) {
 $sa = $sa|0;
 $pa = $pa|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $i = 0, $ns_to_fill = 0, $ns_to_fill_first = 0, $ns_to_fill_second = 0, $product_size = 0, $rev = 0, $space = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $sa;
 $2 = $pa;
 $rev = 0;
 $3 = $2;
 $4 = (($3) + 2420|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(-2147483648);
 if ($6) {
  $7 = $2;
  $8 = (($7) + 1616|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $2;
  $11 = (($10) + 816|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($9) - ($12))|0;
  $product_size = $13;
 } else {
  $14 = $2;
  $15 = (($14) + 2420|0);
  $16 = HEAP32[$15>>2]|0;
  $product_size = $16;
 }
 $17 = $product_size;
 $18 = (($17) + 1)|0;
 $space = $18;
 $19 = $product_size;
 $ns_to_fill = $19;
 $20 = $1;
 $21 = (($20) + 8884|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = $ns_to_fill;
  $25 = $1;
  $26 = (($25) + 8884|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (_strlen(($27|0))|0);
  $29 = (($24) - ($28))|0;
  $ns_to_fill = $29;
 }
 $30 = $1;
 $31 = (($30) + 8888|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = $ns_to_fill;
  $35 = $1;
  $36 = (($35) + 8888|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (_strlen(($37|0))|0);
  $39 = (($34) - ($38))|0;
  $ns_to_fill = $39;
  $40 = $1;
  $41 = (($40) + 8888|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (_strlen(($42|0))|0);
  $44 = (($43) + 1)|0;
  $45 = (__ZL14pr_safe_mallocj($44)|0);
  $rev = $45;
  $46 = $1;
  $47 = (($46) + 8888|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $rev;
  _p3_reverse_complement($48,$49);
 }
 $50 = $1;
 $51 = (($50) + 8892|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)!=(0|0);
 if ($53) {
  $54 = $ns_to_fill;
  $55 = $1;
  $56 = (($55) + 8892|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (_strlen(($57|0))|0);
  $59 = (($54) - ($58))|0;
  $ns_to_fill = $59;
 }
 $60 = $ns_to_fill;
 $61 = $product_size;
 $62 = (($61) + 1)|0;
 $63 = ($60|0)==($62|0);
 if ($63) {
  $0 = 0;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 $64 = $ns_to_fill;
 $65 = (($64|0) / 2)&-1;
 $ns_to_fill_first = $65;
 $66 = $ns_to_fill;
 $67 = $ns_to_fill_first;
 $68 = (($66) - ($67))|0;
 $ns_to_fill_second = $68;
 $69 = $space;
 $70 = (__ZL14pr_safe_mallocj($69)|0);
 $71 = $1;
 $72 = (($71) + 8856|0);
 HEAP32[$72>>2] = $70;
 $73 = $1;
 $74 = (($73) + 8856|0);
 $75 = HEAP32[$74>>2]|0;
 HEAP8[$75] = 0;
 $76 = $1;
 $77 = (($76) + 8884|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($78|0)!=(0|0);
 if ($79) {
  $80 = $1;
  $81 = (($80) + 8856|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $1;
  $84 = (($83) + 8884|0);
  $85 = HEAP32[$84>>2]|0;
  (_strcat(($82|0),($85|0))|0);
 }
 $i = 0;
 while(1) {
  $86 = $i;
  $87 = $ns_to_fill_first;
  $88 = ($86|0)<($87|0);
  if (!($88)) {
   break;
  }
  $89 = $1;
  $90 = (($89) + 8856|0);
  $91 = HEAP32[$90>>2]|0;
  (_strcat(($91|0),(11160|0))|0);
  $92 = $i;
  $93 = (($92) + 1)|0;
  $i = $93;
 }
 $94 = $1;
 $95 = (($94) + 8892|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ($96|0)!=(0|0);
 if ($97) {
  $98 = $1;
  $99 = (($98) + 8856|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $1;
  $102 = (($101) + 8892|0);
  $103 = HEAP32[$102>>2]|0;
  (_strcat(($100|0),($103|0))|0);
 }
 $i = 0;
 while(1) {
  $104 = $i;
  $105 = $ns_to_fill_second;
  $106 = ($104|0)<($105|0);
  if (!($106)) {
   break;
  }
  $107 = $1;
  $108 = (($107) + 8856|0);
  $109 = HEAP32[$108>>2]|0;
  (_strcat(($109|0),(11160|0))|0);
  $110 = $i;
  $111 = (($110) + 1)|0;
  $i = $111;
 }
 $112 = $1;
 $113 = (($112) + 8888|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = ($114|0)!=(0|0);
 if ($115) {
  $116 = $1;
  $117 = (($116) + 8856|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = $rev;
  (_strcat(($118|0),($119|0))|0);
 }
 $120 = $rev;
 _free($120);
 $0 = 0;
 $121 = $0;
 STACKTOP = sp;return ($121|0);
}
function __ZL27_check_and_adjust_intervalsP8seq_argsiiP13pr_append_strS2_($sa,$seq_len,$first_index,$nonfatal_err,$warning) {
 $sa = $sa|0;
 $seq_len = $seq_len|0;
 $first_index = $first_index|0;
 $nonfatal_err = $nonfatal_err|0;
 $warning = $warning|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $sa;
 $2 = $seq_len;
 $3 = $first_index;
 $4 = $nonfatal_err;
 $5 = $warning;
 $6 = $1;
 $7 = (($6) + 1600|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $1;
 $14 = $5;
 $15 = (__ZL28_check_and_adjust_1_intervalPKciPA2_iiiP13pr_append_strP8seq_argsS4_i(10960,$8,$9,$10,$11,$12,$13,$14,0)|0);
 $16 = ($15|0)==(1);
 if ($16) {
  $0 = 1;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 $17 = $1;
 $18 = (($17) + 8832|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $1;
 $21 = (($20) + 8840|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) - ($19))|0;
 HEAP32[$21>>2] = $23;
 $24 = $1;
 $25 = (($24) + 1604|0);
 $26 = (($25) + 1600|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $1;
 $29 = (($28) + 1604|0);
 $30 = $2;
 $31 = $3;
 $32 = $4;
 $33 = $1;
 $34 = $5;
 $35 = (__ZL28_check_and_adjust_1_intervalPKciPA2_iiiP13pr_append_strP8seq_argsS4_i(10968,$27,$29,$30,$31,$32,$33,$34,0)|0);
 $36 = ($35|0)==(1);
 if ($36) {
  $0 = 1;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 $37 = $1;
 $38 = (($37) + 3208|0);
 $39 = (($38) + 1600|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $1;
 $42 = (($41) + 3208|0);
 $43 = $2;
 $44 = $3;
 $45 = $4;
 $46 = $1;
 $47 = $5;
 $48 = (__ZL28_check_and_adjust_1_intervalPKciPA2_iiiP13pr_append_strP8seq_argsS4_i(10984,$40,$42,$43,$44,$45,$46,$47,0)|0);
 $49 = ($48|0)==(1);
 if ($49) {
  $0 = 1;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 $50 = $1;
 $51 = (($50) + 4812|0);
 $52 = (($51) + 3212|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $1;
 $55 = (($54) + 4812|0);
 $56 = $2;
 $57 = $3;
 $58 = $4;
 $59 = $1;
 $60 = $5;
 $61 = (__ZL28_check_and_adjust_1_intervalPKciPA2_iiiP13pr_append_strP8seq_argsS4_i(11024,$53,$55,$56,$57,$58,$59,$60,1)|0);
 $62 = ($61|0)==(1);
 if ($62) {
  $0 = 1;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 $63 = $1;
 $64 = (($63) + 4812|0);
 $65 = (($64) + 3212|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $1;
 $68 = (($67) + 4812|0);
 $69 = (($68) + 1600|0);
 $70 = $2;
 $71 = $3;
 $72 = $4;
 $73 = $1;
 $74 = $5;
 $75 = (__ZL28_check_and_adjust_1_intervalPKciPA2_iiiP13pr_append_strP8seq_argsS4_i(11024,$66,$69,$70,$71,$72,$73,$74,1)|0);
 $76 = ($75|0)==(1);
 if ($76) {
  $0 = 1;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 } else {
  $0 = 0;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 return 0|0;
}
function __ZL29_check_and_adjust_overlap_posP8seq_argsPiS1_PKciiP13pr_append_strS5_($sa,$list,$count,$tag,$seq_len,$first_index,$nonfatal_err,$warning) {
 $sa = $sa|0;
 $list = $list|0;
 $count = $count|0;
 $tag = $tag|0;
 $seq_len = $seq_len|0;
 $first_index = $first_index|0;
 $nonfatal_err = $nonfatal_err|0;
 $warning = $warning|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $i = 0, $outside_warning_issued = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $buffer = sp + 64|0;
 $1 = $sa;
 $2 = $list;
 $3 = $count;
 $4 = $tag;
 $5 = $seq_len;
 $6 = $first_index;
 $7 = $nonfatal_err;
 $8 = $warning;
 $outside_warning_issued = 0;
 $9 = $3;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $0 = 0;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = $3;
  $14 = HEAP32[$13>>2]|0;
  $15 = ($12|0)<($14|0);
  if (!($15)) {
   label = 16;
   break;
  }
  $16 = $6;
  $17 = $i;
  $18 = $2;
  $19 = (($18) + ($17<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) - ($16))|0;
  HEAP32[$19>>2] = $21;
  $22 = $i;
  $23 = $2;
  $24 = (($23) + ($22<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $5;
  $27 = ($25|0)>=($26|0);
  if ($27) {
   label = 6;
   break;
  }
  $30 = $i;
  $31 = $2;
  $32 = (($31) + ($30<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)<(0);
  if ($34) {
   label = 8;
   break;
  }
  $37 = $1;
  $38 = (($37) + 8832|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $i;
  $41 = $2;
  $42 = (($41) + ($40<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) - ($39))|0;
  HEAP32[$42>>2] = $44;
  $45 = $i;
  $46 = $2;
  $47 = (($46) + ($45<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)<(0);
  if ($49) {
   label = 11;
  } else {
   $50 = $i;
   $51 = $2;
   $52 = (($51) + ($50<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $1;
   $55 = (($54) + 8836|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($53|0)>($56|0);
   if ($57) {
    label = 11;
   }
  }
  if ((label|0) == 11) {
   label = 0;
   $58 = $outside_warning_issued;
   $59 = ($58|0)!=(0);
   if (!($59)) {
    $60 = $4;
    HEAP32[$vararg_buffer4>>2] = $60;
    (_sprintf(($buffer|0),(10928|0),($vararg_buffer4|0))|0);
    $61 = $8;
    __ZL19pr_append_new_chunkP13pr_append_strPKc($61,$buffer);
    $outside_warning_issued = 1;
   }
  }
  $62 = $i;
  $63 = (($62) + 1)|0;
  $i = $63;
 }
 if ((label|0) == 6) {
  $28 = $4;
  HEAP32[$vararg_buffer>>2] = $28;
  (_sprintf(($buffer|0),(10872|0),($vararg_buffer|0))|0);
  $29 = $7;
  __ZL19pr_append_new_chunkP13pr_append_strPKc($29,$buffer);
  $0 = 1;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 else if ((label|0) == 8) {
  $35 = $4;
  HEAP32[$vararg_buffer1>>2] = $35;
  (_sprintf(($buffer|0),(10904|0),($vararg_buffer1|0))|0);
  $36 = $7;
  __ZL19pr_append_new_chunkP13pr_append_strPKc($36,$buffer);
  $0 = 1;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 else if ((label|0) == 16) {
  $0 = 0;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 return 0|0;
}
function __ZL25_optimize_ok_regions_listPK18p3_global_settingsP8seq_args($pa,$sa) {
 $pa = $pa|0;
 $sa = $sa|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $i1 = 0, $le = 0, $ls = 0, $new_le = 0, $new_ls = 0, $new_re = 0, $new_rs = 0, $omax = 0, $omin = 0, $pmax = 0, $pmin = 0, $re = 0, $rs = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = $pa;
 $1 = $sa;
 $2 = $1;
 $3 = (($2) + 8884|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $6 = $1;
  $7 = (($6) + 8888|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   $10 = $1;
   $11 = (($10) + 4812|0);
   $12 = (($11) + 3208|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)!=(0);
   if ($14) {
    STACKTOP = sp;return;
   }
   $pmin = 2147483647;
   $pmax = 0;
   $15 = $0;
   $16 = (($15) + 48|0);
   $17 = (($16) + 256|0);
   $18 = HEAP32[$17>>2]|0;
   $omin = $18;
   $19 = $0;
   $20 = (($19) + 48|0);
   $21 = (($20) + 260|0);
   $22 = HEAP32[$21>>2]|0;
   $omax = $22;
   $i = 0;
   while(1) {
    $23 = $i;
    $24 = $0;
    $25 = (($24) + 2416|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($23|0)<($26|0);
    if (!($27)) {
     break;
    }
    $28 = $i;
    $29 = $0;
    $30 = (($29) + 816|0);
    $31 = (($30) + ($28<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $pmin;
    $34 = ($32|0)<($33|0);
    if ($34) {
     $35 = $i;
     $36 = $0;
     $37 = (($36) + 816|0);
     $38 = (($37) + ($35<<2)|0);
     $39 = HEAP32[$38>>2]|0;
     $pmin = $39;
    }
    $40 = $i;
    $41 = $0;
    $42 = (($41) + 1616|0);
    $43 = (($42) + ($40<<2)|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $pmax;
    $46 = ($44|0)>($45|0);
    if ($46) {
     $47 = $i;
     $48 = $0;
     $49 = (($48) + 1616|0);
     $50 = (($49) + ($47<<2)|0);
     $51 = HEAP32[$50>>2]|0;
     $pmax = $51;
    }
    $52 = $i;
    $53 = (($52) + 1)|0;
    $i = $53;
   }
   $i1 = 0;
   while(1) {
    $54 = $i1;
    $55 = $1;
    $56 = (($55) + 4812|0);
    $57 = (($56) + 3212|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($54|0)<($58|0);
    if (!($59)) {
     break;
    }
    $ls = -1;
    $le = -1;
    $rs = -1;
    $re = -1;
    $new_ls = -1;
    $new_le = -1;
    $new_rs = -1;
    $new_re = -1;
    $60 = $i1;
    $61 = $1;
    $62 = (($61) + 4812|0);
    $63 = (($62) + ($60<<3)|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($64|0)!=(-1);
    if ($65) {
     $66 = $i1;
     $67 = $1;
     $68 = (($67) + 4812|0);
     $69 = (($68) + ($66<<3)|0);
     $70 = HEAP32[$69>>2]|0;
     $ls = $70;
     $71 = $i1;
     $72 = $1;
     $73 = (($72) + 4812|0);
     $74 = (($73) + ($71<<3)|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = $i1;
     $77 = $1;
     $78 = (($77) + 4812|0);
     $79 = (($78) + ($76<<3)|0);
     $80 = (($79) + 4|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (($75) + ($81))|0;
     $83 = (($82) - 1)|0;
     $le = $83;
    }
    $84 = $i1;
    $85 = $1;
    $86 = (($85) + 4812|0);
    $87 = (($86) + 1600|0);
    $88 = (($87) + ($84<<3)|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)!=(-1);
    if ($90) {
     $91 = $i1;
     $92 = $1;
     $93 = (($92) + 4812|0);
     $94 = (($93) + 1600|0);
     $95 = (($94) + ($91<<3)|0);
     $96 = HEAP32[$95>>2]|0;
     $rs = $96;
     $97 = $i1;
     $98 = $1;
     $99 = (($98) + 4812|0);
     $100 = (($99) + 1600|0);
     $101 = (($100) + ($97<<3)|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = $i1;
     $104 = $1;
     $105 = (($104) + 4812|0);
     $106 = (($105) + 1600|0);
     $107 = (($106) + ($103<<3)|0);
     $108 = (($107) + 4|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = (($102) + ($109))|0;
     $111 = (($110) - 1)|0;
     $re = $111;
    }
    $112 = $ls;
    $113 = ($112|0)!=(-1);
    if ($113) {
     $114 = $ls;
     $115 = $pmin;
     $116 = (($114) + ($115))|0;
     $117 = $omax;
     $118 = (($116) - ($117))|0;
     $119 = (($118) - 1)|0;
     $new_rs = $119;
     $120 = $le;
     $121 = $omin;
     $122 = (($120) - ($121))|0;
     $123 = $pmax;
     $124 = (($122) + ($123))|0;
     $125 = (($124) + 1)|0;
     $new_re = $125;
     $126 = $rs;
     $127 = ($126|0)==(-1);
     if ($127) {
      label = 23;
     } else {
      $128 = $new_rs;
      $129 = $rs;
      $130 = ($128|0)>($129|0);
      if ($130) {
       label = 23;
      }
     }
     if ((label|0) == 23) {
      label = 0;
      $131 = $new_rs;
      $rs = $131;
     }
     $132 = $re;
     $133 = ($132|0)==(-1);
     if ($133) {
      label = 26;
     } else {
      $134 = $new_re;
      $135 = $re;
      $136 = ($134|0)<($135|0);
      if ($136) {
       label = 26;
      }
     }
     if ((label|0) == 26) {
      label = 0;
      $137 = $new_re;
      $re = $137;
     }
     $138 = $rs;
     $139 = ($138|0)<(0);
     if ($139) {
      $rs = 0;
     }
     $140 = $re;
     $141 = $1;
     $142 = (($141) + 8856|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = (_strlen(($143|0))|0);
     $145 = ($140|0)>($144|0);
     if ($145) {
      $146 = $1;
      $147 = (($146) + 8856|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = (_strlen(($148|0))|0);
      $re = $149;
     }
    }
    $150 = $rs;
    $151 = ($150|0)!=(-1);
    if ($151) {
     $152 = $rs;
     $153 = $omin;
     $154 = (($152) + ($153))|0;
     $155 = $pmax;
     $156 = (($154) - ($155))|0;
     $157 = (($156) - 1)|0;
     $new_ls = $157;
     $158 = $re;
     $159 = $pmin;
     $160 = (($158) - ($159))|0;
     $161 = $omax;
     $162 = (($160) + ($161))|0;
     $163 = (($162) + 1)|0;
     $new_le = $163;
     $164 = $ls;
     $165 = ($164|0)==(-1);
     if ($165) {
      label = 35;
     } else {
      $166 = $new_ls;
      $167 = $ls;
      $168 = ($166|0)>($167|0);
      if ($168) {
       label = 35;
      }
     }
     if ((label|0) == 35) {
      label = 0;
      $169 = $new_ls;
      $ls = $169;
     }
     $170 = $le;
     $171 = ($170|0)==(-1);
     if ($171) {
      label = 38;
     } else {
      $172 = $new_le;
      $173 = $le;
      $174 = ($172|0)<($173|0);
      if ($174) {
       label = 38;
      }
     }
     if ((label|0) == 38) {
      label = 0;
      $175 = $new_le;
      $le = $175;
     }
     $176 = $ls;
     $177 = ($176|0)<(0);
     if ($177) {
      $ls = 0;
     }
     $178 = $le;
     $179 = $1;
     $180 = (($179) + 8856|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = (_strlen(($181|0))|0);
     $183 = ($178|0)>($182|0);
     if ($183) {
      $184 = $1;
      $185 = (($184) + 8856|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = (_strlen(($186|0))|0);
      $le = $187;
     }
    }
    $188 = $ls;
    $189 = $i1;
    $190 = $1;
    $191 = (($190) + 4812|0);
    $192 = (($191) + ($189<<3)|0);
    HEAP32[$192>>2] = $188;
    $193 = $le;
    $194 = $ls;
    $195 = (($193) - ($194))|0;
    $196 = (($195) + 1)|0;
    $197 = $i1;
    $198 = $1;
    $199 = (($198) + 4812|0);
    $200 = (($199) + ($197<<3)|0);
    $201 = (($200) + 4|0);
    HEAP32[$201>>2] = $196;
    $202 = $rs;
    $203 = $i1;
    $204 = $1;
    $205 = (($204) + 4812|0);
    $206 = (($205) + 1600|0);
    $207 = (($206) + ($203<<3)|0);
    HEAP32[$207>>2] = $202;
    $208 = $re;
    $209 = $rs;
    $210 = (($208) - ($209))|0;
    $211 = (($210) + 1)|0;
    $212 = $i1;
    $213 = $1;
    $214 = (($213) + 4812|0);
    $215 = (($214) + 1600|0);
    $216 = (($215) + ($212<<3)|0);
    $217 = (($216) + 4|0);
    HEAP32[$217>>2] = $211;
    $218 = $i1;
    $219 = (($218) + 1)|0;
    $i1 = $219;
   }
   $220 = $1;
   $221 = (($220) + 4812|0);
   $222 = (($221) + 3200|0);
   HEAP32[$222>>2] = 0;
   $223 = $1;
   $224 = (($223) + 4812|0);
   $225 = (($224) + 3204|0);
   HEAP32[$225>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function __ZL28_check_and_adjust_1_intervalPKciPA2_iiiP13pr_append_strP8seq_argsS4_i($tag_name,$num_intervals,$intervals,$seq_len,$first_index,$err,$sa,$warning,$empty_allowed) {
 $tag_name = $tag_name|0;
 $num_intervals = $num_intervals|0;
 $intervals = $intervals|0;
 $seq_len = $seq_len|0;
 $first_index = $first_index|0;
 $err = $err|0;
 $sa = $sa|0;
 $warning = $warning|0;
 $empty_allowed = $empty_allowed|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $outside_warning_issued = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $tag_name;
 $2 = $num_intervals;
 $3 = $intervals;
 $4 = $seq_len;
 $5 = $first_index;
 $6 = $err;
 $7 = $sa;
 $8 = $warning;
 $9 = $empty_allowed;
 $outside_warning_issued = 0;
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = $2;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $9;
  $14 = ($13|0)!=(0);
  if ($14) {
   $15 = $i;
   $16 = $3;
   $17 = (($16) + ($15<<3)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(-1);
   if ($19) {
    $20 = $i;
    $21 = $3;
    $22 = (($21) + ($20<<3)|0);
    $23 = (($22) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==(-1);
    if ($25) {
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
  if ((label|0) == 7) {
   label = 0;
   $26 = $9;
   $27 = ($26|0)!=(0);
   if ($27) {
    $28 = $i;
    $29 = $3;
    $30 = (($29) + ($28<<3)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)==(-1);
    if ($32) {
     $33 = $i;
     $34 = $3;
     $35 = (($34) + ($33<<3)|0);
     $36 = (($35) + 4|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)!=(-1);
     if ($38) {
      label = 12;
      break;
     }
    }
    $39 = $i;
    $40 = $3;
    $41 = (($40) + ($39<<3)|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($42|0)!=(-1);
    if ($43) {
     $44 = $i;
     $45 = $3;
     $46 = (($45) + ($44<<3)|0);
     $47 = (($46) + 4|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==(-1);
     if ($49) {
      label = 12;
      break;
     }
    }
   }
   $53 = $5;
   $54 = $i;
   $55 = $3;
   $56 = (($55) + ($54<<3)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) - ($53))|0;
   HEAP32[$56>>2] = $58;
  }
  $59 = $i;
  $60 = (($59) + 1)|0;
  $i = $60;
 }
 if ((label|0) == 12) {
  $50 = $6;
  $51 = $1;
  __ZL19pr_append_new_chunkP13pr_append_strPKc($50,$51);
  $52 = $6;
  __ZL9pr_appendP13pr_append_strPKc($52,11056);
  $0 = 1;
  $136 = $0;
  STACKTOP = sp;return ($136|0);
 }
 $i = 0;
 while(1) {
  $61 = $i;
  $62 = $2;
  $63 = ($61|0)<($62|0);
  if (!($63)) {
   label = 32;
   break;
  }
  $64 = $9;
  $65 = ($64|0)!=(0);
  if ($65) {
   $66 = $i;
   $67 = $3;
   $68 = (($67) + ($66<<3)|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($69|0)==(-1);
   if ($70) {
    $71 = $i;
    $72 = $3;
    $73 = (($72) + ($71<<3)|0);
    $74 = (($73) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(-1);
    if ($76) {
    } else {
     label = 21;
    }
   } else {
    label = 21;
   }
  } else {
   label = 21;
  }
  if ((label|0) == 21) {
   label = 0;
   $77 = $i;
   $78 = $3;
   $79 = (($78) + ($77<<3)|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $i;
   $82 = $3;
   $83 = (($82) + ($81<<3)|0);
   $84 = (($83) + 4|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = (($80) + ($85))|0;
   $87 = $4;
   $88 = ($86|0)>($87|0);
   if ($88) {
    label = 22;
    break;
   }
   $92 = $7;
   $93 = (($92) + 8832|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = $i;
   $96 = $3;
   $97 = (($96) + ($95<<3)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (($98) - ($94))|0;
   HEAP32[$97>>2] = $99;
   $100 = $i;
   $101 = $3;
   $102 = (($101) + ($100<<3)|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)<(0);
   if ($104) {
    label = 25;
   } else {
    $105 = $i;
    $106 = $3;
    $107 = (($106) + ($105<<3)|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = $i;
    $110 = $3;
    $111 = (($110) + ($109<<3)|0);
    $112 = (($111) + 4|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = (($108) + ($113))|0;
    $115 = $7;
    $116 = (($115) + 8836|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($114|0)>($117|0);
    if ($118) {
     label = 25;
    }
   }
   if ((label|0) == 25) {
    label = 0;
    $119 = $outside_warning_issued;
    $120 = ($119|0)!=(0);
    if (!($120)) {
     $121 = $8;
     $122 = $1;
     __ZL19pr_append_new_chunkP13pr_append_strPKc($121,$122);
     $123 = $8;
     __ZL9pr_appendP13pr_append_strPKc($123,11104);
     $outside_warning_issued = 1;
    }
   }
   $124 = $i;
   $125 = $3;
   $126 = (($125) + ($124<<3)|0);
   $127 = (($126) + 4|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = ($128|0)<(0);
   if ($129) {
    label = 29;
    break;
   }
  }
  $134 = $i;
  $135 = (($134) + 1)|0;
  $i = $135;
 }
 if ((label|0) == 22) {
  $89 = $6;
  $90 = $1;
  __ZL19pr_append_new_chunkP13pr_append_strPKc($89,$90);
  $91 = $6;
  __ZL9pr_appendP13pr_append_strPKc($91,11080);
  $0 = 1;
  $136 = $0;
  STACKTOP = sp;return ($136|0);
 }
 else if ((label|0) == 29) {
  $130 = $6;
  __ZL19pr_append_new_chunkP13pr_append_strPKc($130,11136);
  $131 = $6;
  $132 = $1;
  __ZL9pr_appendP13pr_append_strPKc($131,$132);
  $133 = $6;
  __ZL9pr_appendP13pr_append_strPKc($133,11152);
  $0 = 1;
  $136 = $0;
  STACKTOP = sp;return ($136|0);
 }
 else if ((label|0) == 32) {
  $0 = 0;
  $136 = $0;
  STACKTOP = sp;return ($136|0);
 }
 return 0|0;
}
function __ZL15find_stop_codonPKcii($s,$start,$direction) {
 $s = $s|0;
 $start = $start|0;
 $direction = $direction|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $increment = 0, $len = 0, $p = 0, $q = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer16 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr3 = 0;
 var $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer10 = sp;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp + 32|0;
 $1 = $s;
 $2 = $start;
 $3 = $direction;
 $4 = $3;
 $5 = ($4*3)|0;
 $increment = $5;
 $6 = $1;
 $7 = (_strlen(($6|0))|0);
 $len = $7;
 $8 = $1;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $10 = HEAP32[_stderr>>2]|0;
  $11 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $11;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 56;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 5058;
  $vararg_ptr3 = (($vararg_buffer) + 12|0);
  HEAP32[$vararg_ptr3>>2] = 11168;
  (_fprintf(($10|0),(16|0),($vararg_buffer|0))|0);
  _abort();
  // unreachable;
 }
 $12 = $3;
 $13 = ($12|0)==(1);
 if (!($13)) {
  $14 = $3;
  $15 = ($14|0)==(-1);
  if (!($15)) {
   $16 = HEAP32[_stderr>>2]|0;
   $17 = HEAP32[8>>2]|0;
   HEAP32[$vararg_buffer4>>2] = $17;
   $vararg_ptr7 = (($vararg_buffer4) + 4|0);
   HEAP32[$vararg_ptr7>>2] = 56;
   $vararg_ptr8 = (($vararg_buffer4) + 8|0);
   HEAP32[$vararg_ptr8>>2] = 5059;
   $vararg_ptr9 = (($vararg_buffer4) + 12|0);
   HEAP32[$vararg_ptr9>>2] = 11176;
   (_fprintf(($16|0),(16|0),($vararg_buffer4|0))|0);
   _abort();
   // unreachable;
  }
 }
 $18 = $len;
 $19 = ($18|0)>=(3);
 if (!($19)) {
  $20 = HEAP32[_stderr>>2]|0;
  $21 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $21;
  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
  HEAP32[$vararg_ptr13>>2] = 56;
  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
  HEAP32[$vararg_ptr14>>2] = 5060;
  $vararg_ptr15 = (($vararg_buffer10) + 12|0);
  HEAP32[$vararg_ptr15>>2] = 11216;
  (_fprintf(($20|0),(16|0),($vararg_buffer10|0))|0);
  _abort();
  // unreachable;
 }
 $22 = $2;
 $23 = $len;
 $24 = (($23) - 3)|0;
 $25 = ($22|0)<=($24|0);
 if (!($25)) {
  $26 = HEAP32[_stderr>>2]|0;
  $27 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer16>>2] = $27;
  $vararg_ptr19 = (($vararg_buffer16) + 4|0);
  HEAP32[$vararg_ptr19>>2] = 56;
  $vararg_ptr20 = (($vararg_buffer16) + 8|0);
  HEAP32[$vararg_ptr20>>2] = 5061;
  $vararg_ptr21 = (($vararg_buffer16) + 12|0);
  HEAP32[$vararg_ptr21>>2] = 11232;
  (_fprintf(($26|0),(16|0),($vararg_buffer16|0))|0);
  _abort();
  // unreachable;
 }
 $28 = $2;
 $29 = ($28|0)<(0);
 if ($29) {
  $30 = $3;
  $31 = ($30|0)==(1);
  if (!($31)) {
   $0 = -1;
   $121 = $0;
   STACKTOP = sp;return ($121|0);
  }
  while(1) {
   $32 = $2;
   $33 = ($32|0)<(0);
   if (!($33)) {
    break;
   }
   $34 = $increment;
   $35 = $2;
   $36 = (($35) + ($34))|0;
   $2 = $36;
  }
 }
 $37 = $2;
 $38 = $1;
 $39 = (($38) + ($37)|0);
 $p = $39;
 while(1) {
  $40 = $p;
  $41 = $1;
  $42 = ($40>>>0)>=($41>>>0);
  if ($42) {
   $43 = $p;
   $44 = HEAP8[$43]|0;
   $45 = ($44<<24>>24)!=(0);
   if ($45) {
    $46 = $p;
    $47 = (($46) + 1|0);
    $48 = HEAP8[$47]|0;
    $49 = ($48<<24>>24)!=(0);
    if ($49) {
     $50 = $p;
     $51 = (($50) + 2|0);
     $52 = HEAP8[$51]|0;
     $53 = ($52<<24>>24)!=(0);
     $122 = $53;
    } else {
     $122 = 0;
    }
   } else {
    $122 = 0;
   }
  } else {
   $122 = 0;
  }
  if (!($122)) {
   label = 44;
   break;
  }
  $54 = $p;
  $55 = HEAP8[$54]|0;
  $56 = $55 << 24 >> 24;
  $57 = (84)!=($56|0);
  if ($57) {
   $58 = $p;
   $59 = HEAP8[$58]|0;
   $60 = $59 << 24 >> 24;
   $61 = (116)!=($60|0);
   if ($61) {
   } else {
    label = 27;
   }
  } else {
   label = 27;
  }
  if ((label|0) == 27) {
   label = 0;
   $62 = $p;
   $63 = (($62) + 1|0);
   $q = $63;
   $64 = $q;
   $65 = HEAP8[$64]|0;
   $66 = $65 << 24 >> 24;
   $67 = (65)==($66|0);
   if ($67) {
    label = 29;
   } else {
    $68 = $q;
    $69 = HEAP8[$68]|0;
    $70 = $69 << 24 >> 24;
    $71 = (97)==($70|0);
    if ($71) {
     label = 29;
    } else {
     $95 = $q;
     $96 = HEAP8[$95]|0;
     $97 = $96 << 24 >> 24;
     $98 = (71)==($97|0);
     if ($98) {
      label = 37;
     } else {
      $99 = $q;
      $100 = HEAP8[$99]|0;
      $101 = $100 << 24 >> 24;
      $102 = (103)==($101|0);
      if ($102) {
       label = 37;
      }
     }
     if ((label|0) == 37) {
      label = 0;
      $103 = $q;
      $104 = (($103) + 1|0);
      $q = $104;
      $105 = $q;
      $106 = HEAP8[$105]|0;
      $107 = $106 << 24 >> 24;
      $108 = (65)==($107|0);
      if ($108) {
       label = 39;
       break;
      }
      $109 = $q;
      $110 = HEAP8[$109]|0;
      $111 = $110 << 24 >> 24;
      $112 = (97)==($111|0);
      if ($112) {
       label = 39;
       break;
      }
     }
    }
   }
   if ((label|0) == 29) {
    label = 0;
    $72 = $q;
    $73 = (($72) + 1|0);
    $q = $73;
    $74 = $q;
    $75 = HEAP8[$74]|0;
    $76 = $75 << 24 >> 24;
    $77 = (71)==($76|0);
    if ($77) {
     label = 33;
     break;
    }
    $78 = $q;
    $79 = HEAP8[$78]|0;
    $80 = $79 << 24 >> 24;
    $81 = (103)==($80|0);
    if ($81) {
     label = 33;
     break;
    }
    $82 = $q;
    $83 = HEAP8[$82]|0;
    $84 = $83 << 24 >> 24;
    $85 = (65)==($84|0);
    if ($85) {
     label = 33;
     break;
    }
    $86 = $q;
    $87 = HEAP8[$86]|0;
    $88 = $87 << 24 >> 24;
    $89 = (97)==($88|0);
    if ($89) {
     label = 33;
     break;
    }
   }
  }
  $118 = $increment;
  $119 = $p;
  $120 = (($119) + ($118)|0);
  $p = $120;
 }
 if ((label|0) == 33) {
  $90 = $p;
  $91 = $1;
  $92 = $90;
  $93 = $91;
  $94 = (($92) - ($93))|0;
  $0 = $94;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 else if ((label|0) == 39) {
  $113 = $p;
  $114 = $1;
  $115 = $113;
  $116 = $114;
  $117 = (($115) - ($116))|0;
  $0 = $117;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 else if ((label|0) == 44) {
  $0 = -1;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 return 0|0;
}
function __ZL15primer_rec_compPKvS0_($x1,$x2) {
 $x1 = $x1|0;
 $x2 = $x2|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0, $a1 = 0, $a2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $x1;
 $2 = $x2;
 $3 = $1;
 $a1 = $3;
 $4 = $2;
 $a2 = $4;
 $5 = $a1;
 $6 = (($5) + 40|0);
 $7 = +HEAPF64[$6>>3];
 $8 = $a2;
 $9 = (($8) + 40|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $7 < $10;
 do {
  if ($11) {
   $0 = -1;
  } else {
   $12 = $a1;
   $13 = (($12) + 40|0);
   $14 = +HEAPF64[$13>>3];
   $15 = $a2;
   $16 = (($15) + 40|0);
   $17 = +HEAPF64[$16>>3];
   $18 = $14 > $17;
   if ($18) {
    $0 = 1;
    break;
   }
   $19 = $a1;
   $20 = (($19) + 56|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $a2;
   $23 = (($22) + 56|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($21|0)>($24|0);
   if ($25) {
    $0 = -1;
    break;
   }
   $26 = $a1;
   $27 = (($26) + 56|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $a2;
   $30 = (($29) + 56|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($28|0)<($31|0);
   if ($32) {
    $0 = 1;
    break;
   }
   $33 = $a1;
   $34 = (($33) + 112|0);
   $35 = HEAP8[$34]|0;
   $36 = $35 << 24 >> 24;
   $37 = $a2;
   $38 = (($37) + 112|0);
   $39 = HEAP8[$38]|0;
   $40 = $39 << 24 >> 24;
   $41 = ($36|0)<($40|0);
   if ($41) {
    $0 = -1;
    break;
   } else {
    $0 = 1;
    break;
   }
  }
 } while(0);
 $42 = $0;
 STACKTOP = sp;return ($42|0);
}
function __ZL21pick_only_best_primeriiP11oligo_arrayPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderP8p3retval($start,$length,$oligo,$pa,$sa,$dpal_arg_to_use,$thal_arg_to_use,$retval) {
 $start = $start|0;
 $length = $length|0;
 $oligo = $oligo|0;
 $pa = $pa|0;
 $sa = $sa|0;
 $dpal_arg_to_use = $dpal_arg_to_use|0;
 $thal_arg_to_use = $thal_arg_to_use|0;
 $retval = $retval|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0;
 var $115 = 0.0, $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $best = 0, $found_primer = 0, $h = 0, $i = 0, $j = 0, $n = 0;
 var $number = 0, $oligo_seq = 0, $p_number = 0, $primer_size_large = 0, $primer_size_small = 0, $temp_value = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 672|0;
 $$byval_copy = sp + 384|0;
 $vararg_buffer7 = sp + 512|0;
 $vararg_buffer4 = sp + 520|0;
 $vararg_buffer = sp + 528|0;
 $number = sp + 652|0;
 $oligo_seq = sp + 612|0;
 $h = sp + 128|0;
 $best = sp;
 $9 = sp + 256|0;
 $1 = $start;
 $2 = $length;
 $3 = $oligo;
 $4 = $pa;
 $5 = $sa;
 $6 = $dpal_arg_to_use;
 $7 = $thal_arg_to_use;
 $8 = $retval;
 $p_number = $number;
 dest=$h+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$best+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $10 = (($best) + 40|0);
 HEAPF64[$10>>3] = 1000.0;
 $found_primer = 0;
 $11 = $5;
 $12 = (($11) + 8868|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_strlen(($13|0))|0);
 $n = $14;
 $15 = (2147483647)>($14|0);
 if (!($15)) {
  $16 = HEAP32[_stderr>>2]|0;
  $17 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $17;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 56;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2437;
  $vararg_ptr3 = (($vararg_buffer) + 12|0);
  HEAP32[$vararg_ptr3>>2] = 11256;
  (_fprintf(($16|0),(16|0),($vararg_buffer|0))|0);
  _abort();
  // unreachable;
 }
 $18 = $3;
 $19 = (($18) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(2);
 if ($21) {
  $22 = $4;
  $23 = (($22) + 400|0);
  $24 = (($23) + 256|0);
  $25 = HEAP32[$24>>2]|0;
  $primer_size_small = $25;
  $26 = $4;
  $27 = (($26) + 400|0);
  $28 = (($27) + 260|0);
  $29 = HEAP32[$28>>2]|0;
  $primer_size_large = $29;
 } else {
  $30 = $4;
  $31 = (($30) + 48|0);
  $32 = (($31) + 256|0);
  $33 = HEAP32[$32>>2]|0;
  $primer_size_small = $33;
  $34 = $4;
  $35 = (($34) + 48|0);
  $36 = (($35) + 260|0);
  $37 = HEAP32[$36>>2]|0;
  $primer_size_large = $37;
 }
 $38 = $1;
 $39 = $2;
 $40 = (($38) + ($39))|0;
 $41 = (($40) - 1)|0;
 $i = $41;
 while(1) {
  $42 = $i;
  $43 = $1;
  $44 = ($42|0)>=($43|0);
  if (!($44)) {
   break;
  }
  HEAP8[$oligo_seq] = 0;
  $45 = $primer_size_small;
  $j = $45;
  while(1) {
   $46 = $j;
   $47 = $primer_size_large;
   $48 = ($46|0)<=($47|0);
   if (!($48)) {
    break;
   }
   $49 = $j;
   $50 = $49&255;
   $51 = (($h) + 112|0);
   HEAP8[$51] = $50;
   $52 = (($h) + 8|0);
   HEAP32[$52>>2] = 0;
   $53 = $3;
   $54 = (($53) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)!=(1);
   do {
    if ($56) {
     $57 = $i;
     $58 = $j;
     $59 = (($57) - ($58))|0;
     $60 = ($59|0)<(-1);
     if ($60) {
      break;
     } else {
      $61 = $i;
      $62 = $j;
      $63 = (($61) - ($62))|0;
      $64 = (($63) + 1)|0;
      $65 = (($h) + 56|0);
      HEAP32[$65>>2] = $64;
      $66 = $5;
      $67 = (($66) + 8868|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (($h) + 56|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = $j;
      __ZL10_pr_substrPKciiPc($68,$70,$71,$oligo_seq);
      label = 17;
      break;
     }
    } else {
     $72 = $i;
     $73 = $j;
     $74 = (($72) + ($73))|0;
     $75 = $n;
     $76 = ($74|0)>($75|0);
     if ($76) {
      break;
     } else {
      $77 = $i;
      $78 = $j;
      $79 = (($77) + ($78))|0;
      $80 = (($79) - 1)|0;
      $81 = (($h) + 56|0);
      HEAP32[$81>>2] = $80;
      $82 = $5;
      $83 = (($82) + 8868|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = $i;
      $86 = $j;
      __ZL10_pr_substrPKciiPc($84,$85,$86,$oligo_seq);
      label = 17;
      break;
     }
    }
   } while(0);
   if ((label|0) == 17) {
    label = 0;
    $87 = (($h) + 114|0);
    HEAP8[$87] = 0;
    $88 = (($h) + 115|0);
    HEAP8[$88] = 0;
    $89 = $3;
    $90 = (($89) + 16|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (($91) + 1)|0;
    HEAP32[$90>>2] = $92;
    $93 = $4;
    $94 = $3;
    $95 = (($94) + 12|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $6;
    $98 = $7;
    $99 = $5;
    $100 = $3;
    $101 = (($100) + 16|0);
    $102 = $8;
    __ZL29calc_and_check_oligo_featuresPK18p3_global_settingsP10primer_rec10oligo_typePK15dpal_arg_holderPK15thal_arg_holderPK8seq_argsP11oligo_statsP8p3retvalPKc($93,$h,$96,$97,$98,$99,$101,$102,$oligo_seq);
    $103 = (_p3_ol_has_any_problem($h)|0);
    $104 = ($103|0)!=(0);
    if ($104) {
     $105 = (($h) + 114|0);
     $106 = HEAP8[$105]|0;
     $107 = ($106<<24>>24)!=(0);
     if ($107) {
      label = 19;
     } else {
      __ZL28free_primer_repeat_sim_scoreP10primer_rec($h);
      $119 = (__ZL36any_5_prime_ol_extension_has_problemPK10primer_rec($h)|0);
      $120 = ($119|0)!=(0);
      if ($120) {
       label = 24;
       break;
      }
     }
    } else {
     label = 19;
    }
    if ((label|0) == 19) {
     label = 0;
     $108 = $4;
     $109 = $3;
     $110 = (($109) + 12|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = (+__ZL8p_obj_fnPK18p3_global_settingsP10primer_reci($108,$h,$111));
     $113 = (($h) + 40|0);
     HEAPF64[$113>>3] = $112;
     $114 = (($h) + 40|0);
     $115 = +HEAPF64[$114>>3];
     $116 = (($best) + 40|0);
     $117 = +HEAPF64[$116>>3];
     $118 = $115 < $117;
     if ($118) {
      __ZL28free_primer_repeat_sim_scoreP10primer_rec($best);
      dest=$best+0|0; src=$h+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
      $found_primer = 1;
     } else {
      __ZL28free_primer_repeat_sim_scoreP10primer_rec($h);
     }
    }
   }
   $121 = $j;
   $122 = (($121) + 1)|0;
   $j = $122;
  }
  if ((label|0) == 24) {
   label = 0;
  }
  $123 = $i;
  $124 = (($123) + -1)|0;
  $i = $124;
 }
 $125 = $found_primer;
 $126 = ($125|0)==(1);
 if ($126) {
  $127 = $3;
  dest=$9+0|0; src=$best+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  dest=$$byval_copy+0|0; src=$9+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  __ZL24add_oligo_to_oligo_arrayP11oligo_array10primer_rec($127,$$byval_copy);
  $128 = $3;
  $129 = (($128) + 16|0);
  $130 = (($129) + 80|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = (($131) + 1)|0;
  $133 = $3;
  $134 = (($133) + 16|0);
  $135 = (($134) + 80|0);
  HEAP32[$135>>2] = $132;
 } else {
  $136 = $3;
  $137 = (($136) + 12|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = ($138|0)==(1);
  if ($139) {
   $140 = $8;
   $141 = (($140) + 444|0);
   __ZL19pr_append_new_chunkP13pr_append_strPKc($141,11496);
  } else {
   $142 = $8;
   $143 = (($142) + 444|0);
   __ZL19pr_append_new_chunkP13pr_append_strPKc($143,11528);
  }
  $144 = $1;
  $145 = $4;
  $146 = (($145) + 20|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (($144) + ($147))|0;
  $temp_value = $148;
  $149 = $p_number;
  $150 = $temp_value;
  HEAP32[$vararg_buffer4>>2] = $150;
  (_sprintf(($149|0),(11560|0),($vararg_buffer4|0))|0);
  $151 = $8;
  $152 = (($151) + 444|0);
  $153 = $p_number;
  __ZL9pr_appendP13pr_append_strPKc($152,$153);
  $154 = $8;
  $155 = (($154) + 444|0);
  __ZL9pr_appendP13pr_append_strPKc($155,11568);
  $156 = $1;
  $157 = $2;
  $158 = (($156) + ($157))|0;
  $159 = $4;
  $160 = (($159) + 20|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = (($158) + ($161))|0;
  $temp_value = $162;
  $163 = $p_number;
  $164 = $temp_value;
  HEAP32[$vararg_buffer7>>2] = $164;
  (_sprintf(($163|0),(11560|0),($vararg_buffer7|0))|0);
  $165 = $8;
  $166 = (($165) + 444|0);
  $167 = $p_number;
  __ZL9pr_appendP13pr_append_strPKc($166,$167);
 }
 $168 = $3;
 $169 = (($168) + 4|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = ($170|0)==(0);
 if ($171) {
  $0 = 1;
  $172 = $0;
  STACKTOP = sp;return ($172|0);
 } else {
  $0 = 0;
  $172 = $0;
  STACKTOP = sp;return ($172|0);
 }
 return 0|0;
}
function __ZL29calc_and_check_oligo_featuresPK18p3_global_settingsP10primer_rec10oligo_typePK15dpal_arg_holderPK15thal_arg_holderPK8seq_argsP11oligo_statsP8p3retvalPKc($pa,$h,$otype,$dpal_arg_to_use,$thal_arg_to_use,$sa,$stats,$retval,$input_oligo_seq) {
 $pa = $pa|0;
 $h = $h|0;
 $otype = $otype|0;
 $dpal_arg_to_use = $dpal_arg_to_use|0;
 $thal_arg_to_use = $thal_arg_to_use|0;
 $sa = $sa|0;
 $stats = $stats|0;
 $retval = $retval|0;
 $input_oligo_seq = $input_oligo_seq|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0.0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0.0, $356 = 0.0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0.0, $521 = 0, $522 = 0, $523 = 0.0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0.0, $535 = 0, $536 = 0, $537 = 0.0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0.0;
 var $672 = 0, $673 = 0, $674 = 0.0, $675 = 0, $676 = 0, $677 = 0.0, $678 = 0, $679 = 0, $68 = 0, $680 = 0.0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0.0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0.0, $693 = 0, $694 = 0, $695 = 0.0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0.0, $707 = 0;
 var $708 = 0, $709 = 0.0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0.0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0.0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0.0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0.0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0.0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0.0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0.0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0.0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0.0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0.0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0;
 var $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0;
 var $997 = 0, $998 = 0, $999 = 0, $for_i = 0, $gc_count = 0, $i = 0, $included = 0, $included1 = 0, $j = 0, $k = 0, $l = 0, $max_poly_x = 0, $must_use = 0, $oligo_seq = 0, $po_args = 0, $poly_x = 0, $revc_oligo_seq = 0, $s1_rev = 0, $seq = 0, $thal_args_for_template_mispriming = 0;
 var $three_conditions = 0, $three_prime_pos = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer16 = 0, $vararg_buffer22 = 0, $vararg_buffer28 = 0, $vararg_buffer34 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr37 = 0, $vararg_ptr38 = 0, $vararg_ptr39 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $vararg_buffer34 = sp;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer22 = sp + 16|0;
 $vararg_buffer16 = sp + 32|0;
 $vararg_buffer10 = sp + 48|0;
 $vararg_buffer4 = sp + 64|0;
 $vararg_buffer = sp + 80|0;
 $s1_rev = sp + 220|0;
 $0 = $pa;
 $1 = $h;
 $2 = $otype;
 $3 = $dpal_arg_to_use;
 $4 = $thal_arg_to_use;
 $5 = $sa;
 $6 = $stats;
 $7 = $retval;
 $8 = $input_oligo_seq;
 $9 = $2;
 $l = $9;
 $10 = $1;
 $11 = (($10) + 114|0);
 $12 = HEAP8[$11]|0;
 $13 = $12 << 24 >> 24;
 $must_use = $13;
 $14 = $must_use;
 $15 = ($14|0)!=(0);
 if ($15) {
  $25 = 1;
 } else {
  $16 = $0;
  $17 = (($16) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)!=(0);
  if ($19) {
   $25 = 1;
  } else {
   $20 = $7;
   $21 = (($20) + 424|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(1);
   $25 = $23;
  }
 }
 $24 = $25&1;
 $three_conditions = $24;
 $26 = $5;
 $27 = (($26) + 8868|0);
 $28 = HEAP32[$27>>2]|0;
 $seq = $28;
 $29 = $4;
 $30 = (($29) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $thal_args_for_template_mispriming = $31;
 $32 = $1;
 __ZL13initialize_opP10primer_rec($32);
 $33 = $1;
 $34 = (($33) + 115|0);
 HEAP8[$34] = 0;
 $35 = $1;
 $36 = (($35) + 8|0);
 HEAP32[$36>>2] = 0;
 $37 = $1;
 $38 = (($37) + 113|0);
 HEAP8[$38] = 0;
 $39 = $1;
 $40 = (($39) + 24|0);
 HEAPF64[$40>>3] = 0.0;
 $41 = $1;
 $42 = (($41) + 120|0);
 HEAP8[$42] = 0;
 $43 = $1;
 $44 = (($43) + 104|0);
 HEAPF64[$44>>3] = -1.79769313486231570815E+308;
 $45 = $1;
 $46 = (($45) + 96|0);
 HEAPF64[$46>>3] = -1.79769313486231570815E+308;
 $47 = $1;
 $48 = (($47) + 121|0);
 HEAP8[$48] = 0;
 $49 = $l;
 $50 = (0)==($49|0);
 if (!($50)) {
  $51 = $l;
  $52 = (1)==($51|0);
  if (!($52)) {
   $53 = $l;
   $54 = (2)==($53|0);
   if (!($54)) {
    $55 = HEAP32[_stderr>>2]|0;
    $56 = HEAP32[8>>2]|0;
    HEAP32[$vararg_buffer>>2] = $56;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 56;
    $vararg_ptr2 = (($vararg_buffer) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 2999;
    $vararg_ptr3 = (($vararg_buffer) + 12|0);
    HEAP32[$vararg_ptr3>>2] = 11768;
    (_fprintf(($55|0),(16|0),($vararg_buffer|0))|0);
    _abort();
    // unreachable;
   }
  }
 }
 $57 = $8;
 _p3_reverse_complement($57,$s1_rev);
 $58 = $l;
 $59 = (1)==($58|0);
 if ($59) {
  $oligo_seq = $s1_rev;
  $60 = $8;
  $revc_oligo_seq = $60;
 } else {
  $61 = $8;
  $oligo_seq = $61;
  $revc_oligo_seq = $s1_rev;
 }
 $62 = $l;
 $63 = (2)==($62|0);
 if ($63) {
  $64 = $0;
  $65 = (($64) + 400|0);
  $po_args = $65;
 } else {
  $66 = $0;
  $67 = (($66) + 48|0);
  $po_args = $67;
 }
 $68 = $2;
 $69 = (0)==($68|0);
 if ($69) {
  label = 16;
 } else {
  $70 = $2;
  $71 = (2)==($70|0);
  if ($71) {
   label = 16;
  } else {
   $82 = $1;
   $83 = (($82) + 56|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $1;
   $86 = (($85) + 112|0);
   $87 = HEAP8[$86]|0;
   $88 = $87 << 24 >> 24;
   $89 = (($84) - ($88))|0;
   $90 = (($89) + 1)|0;
   $j = $90;
   $three_prime_pos = $90;
   $91 = $1;
   $92 = (($91) + 56|0);
   $93 = HEAP32[$92>>2]|0;
   $k = $93;
  }
 }
 if ((label|0) == 16) {
  $72 = $1;
  $73 = (($72) + 56|0);
  $74 = HEAP32[$73>>2]|0;
  $j = $74;
  $75 = $j;
  $76 = $1;
  $77 = (($76) + 112|0);
  $78 = HEAP8[$77]|0;
  $79 = $78 << 24 >> 24;
  $80 = (($75) + ($79))|0;
  $81 = (($80) - 1)|0;
  $k = $81;
  $three_prime_pos = $81;
 }
 $94 = $k;
 $95 = ($94|0)>=(0);
 if (!($95)) {
  $96 = HEAP32[_stderr>>2]|0;
  $97 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $97;
  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
  HEAP32[$vararg_ptr7>>2] = 56;
  $vararg_ptr8 = (($vararg_buffer4) + 8|0);
  HEAP32[$vararg_ptr8>>2] = 3024;
  $vararg_ptr9 = (($vararg_buffer4) + 12|0);
  HEAP32[$vararg_ptr9>>2] = 11816;
  (_fprintf(($96|0),(16|0),($vararg_buffer4|0))|0);
  _abort();
  // unreachable;
 }
 $98 = $k;
 $99 = $5;
 $100 = (($99) + 8836|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = ($98|0)<($101|0);
 if (!($102)) {
  $103 = HEAP32[_stderr>>2]|0;
  $104 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $104;
  $vararg_ptr13 = (($vararg_buffer10) + 4|0);
  HEAP32[$vararg_ptr13>>2] = 56;
  $vararg_ptr14 = (($vararg_buffer10) + 8|0);
  HEAP32[$vararg_ptr14>>2] = 3025;
  $vararg_ptr15 = (($vararg_buffer10) + 12|0);
  HEAP32[$vararg_ptr15>>2] = 11824;
  (_fprintf(($103|0),(16|0),($vararg_buffer10|0))|0);
  _abort();
  // unreachable;
 }
 $105 = $2;
 $106 = ($105|0)==(0);
 do {
  if ($106) {
   $107 = $5;
   $108 = (($107) + 8840|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = ($109|0)<=(-1000000);
   if (!($110)) {
    $111 = $1;
    $112 = (($111) + 56|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = $5;
    $115 = (($114) + 8840|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (($113) - ($116))|0;
    $118 = (($117|0) % 3)&-1;
    $119 = (0)!=($118|0);
    if (!($119)) {
     $120 = $1;
     $121 = (($120) + 56|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = $7;
     $124 = (($123) + 456|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = ($122|0)<=($125|0);
     if (!($126)) {
      $127 = $7;
      $128 = (($127) + 452|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = ($129|0)!=(-1);
      if (!($130)) {
       break;
      }
      $131 = $1;
      $132 = (($131) + 56|0);
      $133 = HEAP32[$132>>2]|0;
      $134 = $7;
      $135 = (($134) + 452|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($133|0)>=($136|0);
      if (!($137)) {
       break;
      }
     }
    }
    $138 = $6;
    $139 = (($138) + 72|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = (($140) + 1)|0;
    HEAP32[$139>>2] = $141;
    $142 = $1;
    __ZL27op_set_does_not_amplify_orfP10primer_rec($142);
    $143 = $0;
    $144 = (($143) + 32|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ($145|0)!=(0);
    if ($146) {
     break;
    }
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $147 = $0;
 $148 = (($147) + 776|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = ($149|0)==(1);
 if ($150) {
  $151 = $three_prime_pos;
  $152 = $5;
  $153 = (($152) + 8872|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = $1;
  $156 = $6;
  $157 = (__ZL19is_lowercase_maskediPKcP10primer_recP11oligo_stats($151,$154,$155,$156)|0);
  $158 = ($157|0)!=(0);
  do {
   if ($158) {
    $159 = $must_use;
    $160 = ($159|0)!=(0);
    if ($160) {
     break;
    }
    STACKTOP = sp;return;
   }
  } while(0);
 }
 $161 = $po_args;
 $162 = (($161) + 344|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = ($163|0)!=(0|0);
 if ($164) {
  label = 39;
 } else {
  $165 = $po_args;
  $166 = (($165) + 348|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = ($167|0)!=(0|0);
  if ($168) {
   label = 39;
  }
 }
 if ((label|0) == 39) {
  $169 = $0;
  $170 = $1;
  $171 = $6;
  $172 = $oligo_seq;
  $173 = $po_args;
  $174 = (($173) + 348|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = $po_args;
  $177 = (($176) + 344|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = (__ZL17primer_must_matchPK18p3_global_settingsP10primer_recP11oligo_statsPKcPcS8_($169,$170,$171,$172,$175,$178)|0);
  $180 = ($179|0)!=(0);
  do {
   if ($180) {
    $181 = $must_use;
    $182 = ($181|0)!=(0);
    if ($182) {
     break;
    }
    $183 = $1;
    __ZL21op_set_must_match_errP10primer_rec($183);
    STACKTOP = sp;return;
   }
  } while(0);
 }
 $184 = $j;
 $185 = $k;
 $186 = $j;
 $187 = (($185) - ($186))|0;
 $188 = (($187) + 1)|0;
 $189 = $5;
 $190 = (($189) + 8868|0);
 $191 = HEAP32[$190>>2]|0;
 $192 = $1;
 __ZL16gc_and_n_contentiiPKcP10primer_rec($184,$188,$191,$192);
 $193 = $1;
 $194 = (($193) + 113|0);
 $195 = HEAP8[$194]|0;
 $196 = $195 << 24 >> 24;
 $197 = $po_args;
 $198 = (($197) + 248|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = ($196|0)>($199|0);
 do {
  if ($200) {
   $201 = $1;
   __ZL18op_set_too_many_nsP10primer_rec($201);
   $202 = $6;
   $203 = (($202) + 4|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = (($204) + 1)|0;
   HEAP32[$203>>2] = $205;
   $206 = $must_use;
   $207 = ($206|0)!=(0);
   if ($207) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $208 = $5;
 $209 = (($208) + 1600|0);
 $210 = HEAP32[$209>>2]|0;
 $211 = ($210|0)<=(1);
 if (!($211)) {
  $212 = $0;
  $213 = (($212) + 808|0);
  $214 = +HEAPF64[$213>>3];
  $215 = -1.0 == $214;
  if (!($215)) {
   $220 = HEAP32[_stderr>>2]|0;
   $221 = HEAP32[8>>2]|0;
   HEAP32[$vararg_buffer16>>2] = $221;
   $vararg_ptr19 = (($vararg_buffer16) + 4|0);
   HEAP32[$vararg_ptr19>>2] = 56;
   $vararg_ptr20 = (($vararg_buffer16) + 8|0);
   HEAP32[$vararg_ptr20>>2] = 3073;
   $vararg_ptr21 = (($vararg_buffer16) + 12|0);
   HEAP32[$vararg_ptr21>>2] = 11848;
   (_fprintf(($220|0),(16|0),($vararg_buffer16|0))|0);
   _abort();
   // unreachable;
  }
  $216 = $0;
  $217 = (($216) + 800|0);
  $218 = +HEAPF64[$217>>3];
  $219 = 0.0 == $218;
  if (!($219)) {
   $220 = HEAP32[_stderr>>2]|0;
   $221 = HEAP32[8>>2]|0;
   HEAP32[$vararg_buffer16>>2] = $221;
   $vararg_ptr19 = (($vararg_buffer16) + 4|0);
   HEAP32[$vararg_ptr19>>2] = 56;
   $vararg_ptr20 = (($vararg_buffer16) + 8|0);
   HEAP32[$vararg_ptr20>>2] = 3073;
   $vararg_ptr21 = (($vararg_buffer16) + 12|0);
   HEAP32[$vararg_ptr21>>2] = 11848;
   (_fprintf(($220|0),(16|0),($vararg_buffer16|0))|0);
   _abort();
   // unreachable;
  }
 }
 $222 = $0;
 $223 = HEAP32[$222>>2]|0;
 $224 = ($223|0)==(8);
 if ($224) {
  $225 = $1;
  $226 = (($225) + 32|0);
  HEAPF64[$226>>3] = 0.0;
 } else {
  $227 = $l;
  $228 = ($227|0)!=(2);
  if ($228) {
   $229 = $0;
   $230 = (($229) + 808|0);
   $231 = +HEAPF64[$230>>3];
   $232 = -1.0 == $231;
   if ($232) {
    $233 = $0;
    $234 = (($233) + 800|0);
    $235 = +HEAPF64[$234>>3];
    $236 = 0.0 == $235;
    if ($236) {
     $237 = $j;
     $238 = $k;
     $239 = $j;
     $240 = (($238) - ($239))|0;
     $241 = (($240) + 1)|0;
     $242 = $5;
     $243 = $5;
     $244 = (($243) + 1600|0);
     $245 = HEAP32[$244>>2]|0;
     $246 = (__ZL23oligo_overlaps_intervaliiPA2_Kii($237,$241,$242,$245)|0);
     $247 = ($246|0)!=(0);
     if ($247) {
      $248 = $1;
      $249 = (($248) + 32|0);
      HEAPF64[$249>>3] = 0.0;
      $250 = $1;
      __ZL27bf_set_infinite_pos_penaltyP10primer_reci($250,1);
      $251 = $1;
      __ZL22bf_set_overlaps_targetP10primer_reci($251,1);
     } else {
      label = 59;
     }
    } else {
     label = 59;
    }
   } else {
    label = 59;
   }
  } else {
   label = 59;
  }
  if ((label|0) == 59) {
   $252 = $l;
   $253 = ($252|0)!=(2);
   do {
    if ($253) {
     $254 = $0;
     $255 = (($254) + 808|0);
     $256 = +HEAPF64[$255>>3];
     $257 = -1.0 == $256;
     if ($257) {
      $258 = $0;
      $259 = (($258) + 800|0);
      $260 = +HEAPF64[$259>>3];
      $261 = 0.0 == $260;
      if ($261) {
       label = 66;
       break;
      }
     }
     $262 = $5;
     $263 = (($262) + 1600|0);
     $264 = HEAP32[$263>>2]|0;
     $265 = (1)==($264|0);
     if ($265) {
      $266 = $0;
      $267 = $5;
      $268 = $1;
      $269 = $l;
      __Z24compute_position_penaltyPK18p3_global_settingsPK8seq_argsP10primer_rec10oligo_type($266,$267,$268,$269);
      $270 = $1;
      $271 = (__ZL27bf_get_infinite_pos_penaltyPK10primer_rec($270)|0);
      $272 = ($271|0)!=(0);
      if ($272) {
       $273 = $1;
       __ZL22bf_set_overlaps_targetP10primer_reci($273,1);
      }
     } else {
      label = 66;
     }
    } else {
     label = 66;
    }
   } while(0);
   if ((label|0) == 66) {
    $274 = $1;
    $275 = (($274) + 32|0);
    HEAPF64[$275>>3] = 0.0;
    $276 = $1;
    __ZL27bf_set_infinite_pos_penaltyP10primer_reci($276,0);
   }
  }
 }
 $277 = $5;
 $278 = (($277) + 8840|0);
 $279 = HEAP32[$278>>2]|0;
 $280 = ($279|0)<=(-1000000);
 if (!($280)) {
  $281 = $l;
  $282 = (0)==($281|0);
  if ($282) {
   $283 = $5;
   $284 = (($283) + 8840|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = $1;
   $287 = (($286) + 56|0);
   $288 = HEAP32[$287>>2]|0;
   $289 = ($285|0)>($288|0);
   if ($289) {
    $290 = $5;
    $291 = (($290) + 8840|0);
    $292 = HEAP32[$291>>2]|0;
    $293 = $1;
    $294 = (($293) + 56|0);
    $295 = HEAP32[$294>>2]|0;
    $296 = (($292) - ($295))|0;
    $297 = (+($296|0));
    $298 = $297 * 30.0;
    $299 = $1;
    $300 = (($299) + 32|0);
    HEAPF64[$300>>3] = $298;
   } else {
    $301 = $1;
    $302 = (($301) + 56|0);
    $303 = HEAP32[$302>>2]|0;
    $304 = $5;
    $305 = (($304) + 8840|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = (($303) - ($306))|0;
    $308 = (+($307|0));
    $309 = $308 * 20.0;
    $310 = $1;
    $311 = (($310) + 32|0);
    HEAPF64[$311>>3] = $309;
   }
  } else {
   $312 = $l;
   $313 = (1)==($312|0);
   if ($313) {
    $314 = $7;
    $315 = (($314) + 452|0);
    $316 = HEAP32[$315>>2]|0;
    $317 = (-1)==($316|0);
    if ($317) {
     $318 = $5;
     $319 = (($318) + 8836|0);
     $320 = HEAP32[$319>>2]|0;
     $321 = $1;
     $322 = (($321) + 56|0);
     $323 = HEAP32[$322>>2]|0;
     $324 = (($320) - ($323))|0;
     $325 = (($324) - 1)|0;
     $326 = (+($325|0));
     $327 = $326 * 100.0;
     $328 = $1;
     $329 = (($328) + 32|0);
     HEAPF64[$329>>3] = $327;
    } else {
     $330 = $7;
     $331 = (($330) + 452|0);
     $332 = HEAP32[$331>>2]|0;
     $333 = $1;
     $334 = (($333) + 56|0);
     $335 = HEAP32[$334>>2]|0;
     $336 = ($332|0)<($335|0);
     if ($336) {
      $337 = $1;
      $338 = (($337) + 56|0);
      $339 = HEAP32[$338>>2]|0;
      $340 = $7;
      $341 = (($340) + 452|0);
      $342 = HEAP32[$341>>2]|0;
      $343 = (($339) - ($342))|0;
      $344 = (+($343|0));
      $345 = $344 * 0.5;
      $346 = $1;
      $347 = (($346) + 32|0);
      HEAPF64[$347>>3] = $345;
     } else {
      $348 = $7;
      $349 = (($348) + 452|0);
      $350 = HEAP32[$349>>2]|0;
      $351 = $1;
      $352 = (($351) + 56|0);
      $353 = HEAP32[$352>>2]|0;
      $354 = (($350) - ($353))|0;
      $355 = (+($354|0));
      $356 = $355 * 100.0;
      $357 = $1;
      $358 = (($357) + 32|0);
      HEAPF64[$358>>3] = $356;
     }
    }
   }
  }
 }
 $359 = $l;
 $360 = ($359|0)!=(2);
 if ($360) {
  $361 = $j;
  $362 = $k;
  $363 = $j;
  $364 = (($362) - ($363))|0;
  $365 = (($364) + 1)|0;
  $366 = $5;
  $367 = (($366) + 1604|0);
  $368 = $5;
  $369 = (($368) + 1604|0);
  $370 = (($369) + 1600|0);
  $371 = HEAP32[$370>>2]|0;
  $372 = (__ZL23oligo_overlaps_intervaliiPA2_Kii($361,$365,$367,$371)|0);
  $373 = ($372|0)!=(0);
  if ($373) {
   $374 = $1;
   __ZL27bf_set_overlaps_excl_regionP10primer_reci($374,1);
  }
 }
 $375 = $l;
 $376 = ($375|0)==(2);
 if ($376) {
  $377 = $j;
  $378 = $k;
  $379 = $j;
  $380 = (($378) - ($379))|0;
  $381 = (($380) + 1)|0;
  $382 = $5;
  $383 = (($382) + 3208|0);
  $384 = $5;
  $385 = (($384) + 3208|0);
  $386 = (($385) + 1600|0);
  $387 = HEAP32[$386>>2]|0;
  $388 = (__ZL23oligo_overlaps_intervaliiPA2_Kii($377,$381,$383,$387)|0);
  $389 = ($388|0)!=(0);
  if ($389) {
   $390 = $1;
   __ZL27bf_set_overlaps_excl_regionP10primer_reci($390,1);
  }
 }
 $391 = $l;
 $392 = ($391|0)!=(2);
 do {
  if ($392) {
   $393 = $1;
   $394 = (__ZL22bf_get_overlaps_targetPK10primer_rec($393)|0);
   $395 = ($394|0)!=(0);
   if ($395) {
    $396 = $1;
    __ZL22op_set_overlaps_targetP10primer_rec($396);
    $397 = $6;
    $398 = (($397) + 8|0);
    $399 = HEAP32[$398>>2]|0;
    $400 = (($399) + 1)|0;
    HEAP32[$398>>2] = $400;
    $401 = $must_use;
    $402 = ($401|0)!=(0);
    if ($402) {
     break;
    }
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $403 = $1;
 $404 = (__ZL27bf_get_overlaps_excl_regionPK10primer_rec($403)|0);
 $405 = ($404|0)!=(0);
 do {
  if ($405) {
   $406 = $1;
   __ZL31op_set_overlaps_excluded_regionP10primer_rec($406);
   $407 = $6;
   $408 = (($407) + 12|0);
   $409 = HEAP32[$408>>2]|0;
   $410 = (($409) + 1)|0;
   HEAP32[$408>>2] = $410;
   $411 = $must_use;
   $412 = ($411|0)!=(0);
   if ($412) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $413 = $l;
 $414 = ($413|0)==(0);
 if ($414) {
  $415 = $5;
  $416 = (($415) + 4812|0);
  $417 = (($416) + 3212|0);
  $418 = HEAP32[$417>>2]|0;
  $419 = ($418|0)>(0);
  if ($419) {
   $420 = $5;
   $421 = (($420) + 4812|0);
   $422 = (($421) + 3200|0);
   $423 = HEAP32[$422>>2]|0;
   $424 = ($423|0)!=(0);
   if (!($424)) {
    $included = 0;
    $i = 0;
    while(1) {
     $425 = $i;
     $426 = $5;
     $427 = (($426) + 4812|0);
     $428 = (($427) + 3212|0);
     $429 = HEAP32[$428>>2]|0;
     $430 = ($425|0)<($429|0);
     if (!($430)) {
      break;
     }
     $431 = $j;
     $432 = $i;
     $433 = $5;
     $434 = (($433) + 4812|0);
     $435 = (($434) + ($432<<3)|0);
     $436 = HEAP32[$435>>2]|0;
     $437 = ($431|0)>=($436|0);
     if ($437) {
      $438 = $k;
      $439 = $i;
      $440 = $5;
      $441 = (($440) + 4812|0);
      $442 = (($441) + ($439<<3)|0);
      $443 = HEAP32[$442>>2]|0;
      $444 = $i;
      $445 = $5;
      $446 = (($445) + 4812|0);
      $447 = (($446) + ($444<<3)|0);
      $448 = (($447) + 4|0);
      $449 = HEAP32[$448>>2]|0;
      $450 = (($443) + ($449))|0;
      $451 = (($450) - 1)|0;
      $452 = ($438|0)<=($451|0);
      if ($452) {
       label = 107;
       break;
      }
     }
     $453 = $i;
     $454 = (($453) + 1)|0;
     $i = $454;
    }
    if ((label|0) == 107) {
     $included = 1;
    }
    $455 = $included;
    $456 = ($455|0)!=(0);
    do {
     if (!($456)) {
      $457 = $1;
      __ZL27op_set_not_in_any_ok_regionP10primer_rec($457);
      $458 = $6;
      $459 = (($458) + 92|0);
      $460 = HEAP32[$459>>2]|0;
      $461 = (($460) + 1)|0;
      HEAP32[$459>>2] = $461;
      $462 = $must_use;
      $463 = ($462|0)!=(0);
      if ($463) {
       break;
      }
      STACKTOP = sp;return;
     }
    } while(0);
   }
  }
 }
 $464 = $l;
 $465 = ($464|0)==(1);
 if ($465) {
  $466 = $5;
  $467 = (($466) + 4812|0);
  $468 = (($467) + 3212|0);
  $469 = HEAP32[$468>>2]|0;
  $470 = ($469|0)>(0);
  if ($470) {
   $471 = $5;
   $472 = (($471) + 4812|0);
   $473 = (($472) + 3204|0);
   $474 = HEAP32[$473>>2]|0;
   $475 = ($474|0)!=(0);
   if (!($475)) {
    $included1 = 0;
    $i = 0;
    while(1) {
     $476 = $i;
     $477 = $5;
     $478 = (($477) + 4812|0);
     $479 = (($478) + 3212|0);
     $480 = HEAP32[$479>>2]|0;
     $481 = ($476|0)<($480|0);
     if (!($481)) {
      break;
     }
     $482 = $j;
     $483 = $i;
     $484 = $5;
     $485 = (($484) + 4812|0);
     $486 = (($485) + 1600|0);
     $487 = (($486) + ($483<<3)|0);
     $488 = HEAP32[$487>>2]|0;
     $489 = ($482|0)>=($488|0);
     if ($489) {
      $490 = $k;
      $491 = $i;
      $492 = $5;
      $493 = (($492) + 4812|0);
      $494 = (($493) + 1600|0);
      $495 = (($494) + ($491<<3)|0);
      $496 = HEAP32[$495>>2]|0;
      $497 = $i;
      $498 = $5;
      $499 = (($498) + 4812|0);
      $500 = (($499) + 1600|0);
      $501 = (($500) + ($497<<3)|0);
      $502 = (($501) + 4|0);
      $503 = HEAP32[$502>>2]|0;
      $504 = (($496) + ($503))|0;
      $505 = (($504) - 1)|0;
      $506 = ($490|0)<=($505|0);
      if ($506) {
       label = 122;
       break;
      }
     }
     $507 = $i;
     $508 = (($507) + 1)|0;
     $i = $508;
    }
    if ((label|0) == 122) {
     $included1 = 1;
    }
    $509 = $included1;
    $510 = ($509|0)!=(0);
    do {
     if (!($510)) {
      $511 = $1;
      __ZL27op_set_not_in_any_ok_regionP10primer_rec($511);
      $512 = $6;
      $513 = (($512) + 96|0);
      $514 = HEAP32[$513>>2]|0;
      $515 = (($514) + 1)|0;
      HEAP32[$513>>2] = $515;
      $516 = $must_use;
      $517 = ($516|0)!=(0);
      if ($517) {
       break;
      }
      STACKTOP = sp;return;
     }
    } while(0);
   }
  }
 }
 $518 = $1;
 $519 = (($518) + 24|0);
 $520 = +HEAPF64[$519>>3];
 $521 = $po_args;
 $522 = (($521) + 208|0);
 $523 = +HEAPF64[$522>>3];
 $524 = $520 < $523;
 do {
  if ($524) {
   $525 = $1;
   __ZL21op_set_low_gc_contentP10primer_rec($525);
   $526 = $6;
   $527 = (($526) + 16|0);
   $528 = HEAP32[$527>>2]|0;
   $529 = (($528) + 1)|0;
   HEAP32[$527>>2] = $529;
   $530 = $must_use;
   $531 = ($530|0)!=(0);
   if ($531) {
    break;
   }
   STACKTOP = sp;return;
  } else {
   $532 = $1;
   $533 = (($532) + 24|0);
   $534 = +HEAPF64[$533>>3];
   $535 = $po_args;
   $536 = (($535) + 200|0);
   $537 = +HEAPF64[$536>>3];
   $538 = $534 > $537;
   do {
    if ($538) {
     $539 = $1;
     __ZL22op_set_high_gc_contentP10primer_rec($539);
     $540 = $6;
     $541 = (($540) + 16|0);
     $542 = HEAP32[$541>>2]|0;
     $543 = (($542) + 1)|0;
     HEAP32[$541>>2] = $543;
     $544 = $must_use;
     $545 = ($544|0)!=(0);
     if ($545) {
      break;
     }
     STACKTOP = sp;return;
    }
   } while(0);
  }
 } while(0);
 $546 = $l;
 $547 = (0)==($546|0);
 if ($547) {
  label = 141;
 } else {
  $548 = $l;
  $549 = (1)==($548|0);
  if ($549) {
   label = 141;
  }
 }
 if ((label|0) == 141) {
  $i = 0;
  while(1) {
   $550 = $i;
   $551 = $0;
   $552 = (($551) + 772|0);
   $553 = HEAP32[$552>>2]|0;
   $554 = ($550|0)<($553|0);
   if (!($554)) {
    break;
   }
   $555 = $i;
   $556 = $revc_oligo_seq;
   $557 = (($556) + ($555)|0);
   $558 = HEAP8[$557]|0;
   $559 = $558 << 24 >> 24;
   $560 = ($559|0)!=(71);
   if ($560) {
    $561 = $i;
    $562 = $revc_oligo_seq;
    $563 = (($562) + ($561)|0);
    $564 = HEAP8[$563]|0;
    $565 = $564 << 24 >> 24;
    $566 = ($565|0)!=(67);
    if ($566) {
     label = 145;
     break;
    }
   }
   $574 = $i;
   $575 = (($574) + 1)|0;
   $i = $575;
  }
  do {
   if ((label|0) == 145) {
    $567 = $1;
    __ZL18op_set_no_gc_glampP10primer_rec($567);
    $568 = $6;
    $569 = (($568) + 20|0);
    $570 = HEAP32[$569>>2]|0;
    $571 = (($570) + 1)|0;
    HEAP32[$569>>2] = $571;
    $572 = $must_use;
    $573 = ($572|0)!=(0);
    if ($573) {
     break;
    }
    STACKTOP = sp;return;
   }
  } while(0);
 }
 $576 = $0;
 $577 = (($576) + 768|0);
 $578 = HEAP32[$577>>2]|0;
 $579 = ($578|0)<(5);
 do {
  if ($579) {
   $580 = $l;
   $581 = (0)==($580|0);
   if (!($581)) {
    $582 = $l;
    $583 = (1)==($582|0);
    if (!($583)) {
     break;
    }
   }
   $gc_count = 0;
   $i = 0;
   while(1) {
    $584 = $i;
    $585 = ($584|0)<(5);
    if (!($585)) {
     break;
    }
    $586 = $i;
    $587 = $revc_oligo_seq;
    $588 = (($587) + ($586)|0);
    $589 = HEAP8[$588]|0;
    $590 = $589 << 24 >> 24;
    $591 = ($590|0)==(71);
    if ($591) {
     label = 158;
    } else {
     $592 = $i;
     $593 = $revc_oligo_seq;
     $594 = (($593) + ($592)|0);
     $595 = HEAP8[$594]|0;
     $596 = $595 << 24 >> 24;
     $597 = ($596|0)==(67);
     if ($597) {
      label = 158;
     }
    }
    if ((label|0) == 158) {
     label = 0;
     $598 = $gc_count;
     $599 = (($598) + 1)|0;
     $gc_count = $599;
    }
    $600 = $i;
    $601 = (($600) + 1)|0;
    $i = $601;
   }
   $602 = $gc_count;
   $603 = $0;
   $604 = (($603) + 768|0);
   $605 = HEAP32[$604>>2]|0;
   $606 = ($602|0)>($605|0);
   do {
    if ($606) {
     $607 = $1;
     __ZL25op_set_too_many_gc_at_endP10primer_rec($607);
     $608 = $6;
     $609 = (($608) + 24|0);
     $610 = HEAP32[$609>>2]|0;
     $611 = (($610) + 1)|0;
     HEAP32[$609>>2] = $611;
     $612 = $must_use;
     $613 = ($612|0)!=(0);
     if ($613) {
      break;
     }
     STACKTOP = sp;return;
    }
   } while(0);
  }
 } while(0);
 $614 = $0;
 $615 = $1;
 $616 = $l;
 $617 = $5;
 $618 = $j;
 $619 = $k;
 $620 = $6;
 $621 = $po_args;
 $622 = (__ZL22sequence_quality_is_okPK18p3_global_settingsP10primer_rec10oligo_typePK8seq_argsiiP11oligo_statsPK28args_for_one_oligo_or_primer($614,$615,$616,$617,$618,$619,$620,$621)|0);
 $623 = ($622|0)!=(0);
 if (!($623)) {
  $624 = $must_use;
  $625 = ($624|0)!=(0);
  if (!($625)) {
   STACKTOP = sp;return;
  }
 }
 $626 = $po_args;
 $627 = (($626) + 264|0);
 $628 = HEAP32[$627>>2]|0;
 $max_poly_x = $628;
 $629 = $max_poly_x;
 $630 = ($629|0)>(0);
 if ($630) {
  $poly_x = 1;
  $631 = $j;
  $632 = (($631) + 1)|0;
  $i = $632;
  while(1) {
   $633 = $i;
   $634 = $k;
   $635 = ($633|0)<=($634|0);
   if (!($635)) {
    break;
   }
   $636 = $i;
   $637 = $seq;
   $638 = (($637) + ($636)|0);
   $639 = HEAP8[$638]|0;
   $640 = $639 << 24 >> 24;
   $641 = $i;
   $642 = (($641) - 1)|0;
   $643 = $seq;
   $644 = (($643) + ($642)|0);
   $645 = HEAP8[$644]|0;
   $646 = $645 << 24 >> 24;
   $647 = ($640|0)==($646|0);
   if ($647) {
    label = 174;
   } else {
    $648 = $i;
    $649 = $seq;
    $650 = (($649) + ($648)|0);
    $651 = HEAP8[$650]|0;
    $652 = $651 << 24 >> 24;
    $653 = ($652|0)==(78);
    if ($653) {
     label = 174;
    } else {
     $poly_x = 1;
    }
   }
   if ((label|0) == 174) {
    label = 0;
    $654 = $poly_x;
    $655 = (($654) + 1)|0;
    $poly_x = $655;
    $656 = $poly_x;
    $657 = $max_poly_x;
    $658 = ($656|0)>($657|0);
    if ($658) {
     label = 175;
     break;
    }
   }
   $666 = $i;
   $667 = (($666) + 1)|0;
   $i = $667;
  }
  do {
   if ((label|0) == 175) {
    $659 = $1;
    __ZL18op_set_high_poly_xP10primer_rec($659);
    $660 = $6;
    $661 = (($660) + 60|0);
    $662 = HEAP32[$661>>2]|0;
    $663 = (($662) + 1)|0;
    HEAP32[$661>>2] = $663;
    $664 = $must_use;
    $665 = ($664|0)!=(0);
    if ($665) {
     break;
    }
    STACKTOP = sp;return;
   }
  } while(0);
 }
 $668 = $oligo_seq;
 $669 = $po_args;
 $670 = (($669) + 240|0);
 $671 = +HEAPF64[$670>>3];
 $672 = $po_args;
 $673 = (($672) + 216|0);
 $674 = +HEAPF64[$673>>3];
 $675 = $po_args;
 $676 = (($675) + 224|0);
 $677 = +HEAPF64[$676>>3];
 $678 = $po_args;
 $679 = (($678) + 232|0);
 $680 = +HEAPF64[$679>>3];
 $681 = $0;
 $682 = (($681) + 752|0);
 $683 = HEAP32[$682>>2]|0;
 $684 = $0;
 $685 = (($684) + 756|0);
 $686 = HEAP32[$685>>2]|0;
 $687 = (+_seqtm(($668|0),(+$671),(+$674),(+$677),(+$680),36,($683|0),($686|0)));
 $688 = $1;
 $689 = (($688) + 16|0);
 HEAPF64[$689>>3] = $687;
 $690 = $1;
 $691 = (($690) + 16|0);
 $692 = +HEAPF64[$691>>3];
 $693 = $po_args;
 $694 = (($693) + 176|0);
 $695 = +HEAPF64[$694>>3];
 $696 = $692 < $695;
 do {
  if ($696) {
   $697 = $1;
   __ZL13op_set_low_tmP10primer_rec($697);
   $698 = $6;
   $699 = (($698) + 28|0);
   $700 = HEAP32[$699>>2]|0;
   $701 = (($700) + 1)|0;
   HEAP32[$699>>2] = $701;
   $702 = $must_use;
   $703 = ($702|0)!=(0);
   if ($703) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $704 = $1;
 $705 = (($704) + 16|0);
 $706 = +HEAPF64[$705>>3];
 $707 = $po_args;
 $708 = (($707) + 184|0);
 $709 = +HEAPF64[$708>>3];
 $710 = $706 > $709;
 do {
  if ($710) {
   $711 = $1;
   __ZL14op_set_high_tmP10primer_rec($711);
   $712 = $6;
   $713 = (($712) + 32|0);
   $714 = HEAP32[$713>>2]|0;
   $715 = (($714) + 1)|0;
   HEAP32[$713>>2] = $715;
   $716 = $must_use;
   $717 = ($716|0)!=(0);
   if ($717) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $718 = $l;
 $719 = (0)==($718|0);
 if ($719) {
  label = 193;
 } else {
  $720 = $l;
  $721 = (1)==($720|0);
  if ($721) {
   label = 193;
  }
 }
 if ((label|0) == 193) {
  $722 = $oligo_seq;
  $723 = $0;
  $724 = (($723) + 752|0);
  $725 = HEAP32[$724>>2]|0;
  $726 = (+_end_oligodg(($722|0),5,($725|0)));
  $727 = $1;
  $728 = (($727) + 48|0);
  HEAPF64[$728>>3] = $726;
  $729 = $0;
  $730 = (($729) + 760|0);
  $731 = +HEAPF64[$730>>3];
  $732 = $726 > $731;
  do {
   if ($732) {
    $733 = $1;
    __ZL25op_set_high_end_stabilityP10primer_rec($733);
    $734 = $6;
    $735 = (($734) + 68|0);
    $736 = HEAP32[$735>>2]|0;
    $737 = (($736) + 1)|0;
    HEAP32[$735>>2] = $737;
    $738 = $must_use;
    $739 = ($738|0)!=(0);
    if ($739) {
     break;
    }
    STACKTOP = sp;return;
   }
  } while(0);
 }
 $740 = $must_use;
 $741 = ($740|0)!=(0);
 if ($741) {
  label = 203;
 } else {
  $742 = $0;
  $743 = (($742) + 16|0);
  $744 = HEAP32[$743>>2]|0;
  $745 = ($744|0)!=(0);
  if ($745) {
   label = 203;
  } else {
   $746 = $7;
   $747 = (($746) + 424|0);
   $748 = HEAP32[$747>>2]|0;
   $749 = ($748|0)==(1);
   if ($749) {
    label = 203;
   } else {
    $750 = $po_args;
    $751 = (($750) + 8|0);
    $752 = +HEAPF64[$751>>3];
    $753 = $752 != 0.0;
    if ($753) {
     label = 203;
    } else {
     $754 = $po_args;
     $755 = (($754) + 8|0);
     $756 = (($755) + 16|0);
     $757 = +HEAPF64[$756>>3];
     $758 = $757 != 0.0;
     if ($758) {
      label = 203;
     } else {
      label = 210;
     }
    }
   }
  }
 }
 if ((label|0) == 203) {
  $759 = $0;
  $760 = (($759) + 2504|0);
  $761 = HEAP32[$760>>2]|0;
  $762 = ($761|0)==(0);
  if ($762) {
   $763 = $1;
   $764 = $po_args;
   $765 = $6;
   $766 = $3;
   $767 = $oligo_seq;
   $768 = $revc_oligo_seq;
   __ZL11oligo_complP10primer_recPK28args_for_one_oligo_or_primerP11oligo_statsPK15dpal_arg_holderPKcSA_($763,$764,$765,$766,$767,$768);
   $769 = $1;
   $770 = (__ZL22p3_ol_is_uninitializedPK10primer_rec($769)|0);
   $771 = ($770|0)!=(0);
   if (!($771)) {
    $772 = $must_use;
    $773 = ($772|0)!=(0);
    if (!($773)) {
     $774 = $1;
     $775 = (_p3_ol_is_ok($774)|0);
     $776 = ($775|0)!=(0);
     if ($776) {
      $777 = HEAP32[_stderr>>2]|0;
      $778 = HEAP32[8>>2]|0;
      HEAP32[$vararg_buffer22>>2] = $778;
      $vararg_ptr25 = (($vararg_buffer22) + 4|0);
      HEAP32[$vararg_ptr25>>2] = 56;
      $vararg_ptr26 = (($vararg_buffer22) + 8|0);
      HEAP32[$vararg_ptr26>>2] = 3301;
      $vararg_ptr27 = (($vararg_buffer22) + 12|0);
      HEAP32[$vararg_ptr27>>2] = 11936;
      (_fprintf(($777|0),(16|0),($vararg_buffer22|0))|0);
      _abort();
      // unreachable;
     }
     STACKTOP = sp;return;
    }
   }
  } else {
   label = 210;
  }
 }
 if ((label|0) == 210) {
  $779 = $must_use;
  $780 = ($779|0)!=(0);
  if ($780) {
   label = 215;
  } else {
   $781 = $0;
   $782 = (($781) + 16|0);
   $783 = HEAP32[$782>>2]|0;
   $784 = ($783|0)!=(0);
   if ($784) {
    label = 215;
   } else {
    $785 = $7;
    $786 = (($785) + 424|0);
    $787 = HEAP32[$786>>2]|0;
    $788 = ($787|0)==(1);
    if ($788) {
     label = 215;
    } else {
     $789 = $po_args;
     $790 = (($789) + 8|0);
     $791 = (($790) + 8|0);
     $792 = +HEAPF64[$791>>3];
     $793 = $792 != 0.0;
     if ($793) {
      label = 215;
     } else {
      $794 = $po_args;
      $795 = (($794) + 8|0);
      $796 = (($795) + 24|0);
      $797 = +HEAPF64[$796>>3];
      $798 = $797 != 0.0;
      if ($798) {
       label = 215;
      } else {
       label = 222;
      }
     }
    }
   }
  }
  if ((label|0) == 215) {
   $799 = $0;
   $800 = (($799) + 2504|0);
   $801 = HEAP32[$800>>2]|0;
   $802 = ($801|0)==(1);
   if ($802) {
    $803 = $1;
    $804 = $po_args;
    $805 = $6;
    $806 = $4;
    $807 = $oligo_seq;
    $808 = $oligo_seq;
    __ZL19oligo_compl_thermodP10primer_recPK28args_for_one_oligo_or_primerP11oligo_statsPK15thal_arg_holderPKcSA_($803,$804,$805,$806,$807,$808);
    $809 = $1;
    $810 = (__ZL22p3_ol_is_uninitializedPK10primer_rec($809)|0);
    $811 = ($810|0)!=(0);
    if (!($811)) {
     $812 = $must_use;
     $813 = ($812|0)!=(0);
     if (!($813)) {
      $814 = $1;
      $815 = (_p3_ol_is_ok($814)|0);
      $816 = ($815|0)!=(0);
      if ($816) {
       $817 = HEAP32[_stderr>>2]|0;
       $818 = HEAP32[8>>2]|0;
       HEAP32[$vararg_buffer28>>2] = $818;
       $vararg_ptr31 = (($vararg_buffer28) + 4|0);
       HEAP32[$vararg_ptr31>>2] = 56;
       $vararg_ptr32 = (($vararg_buffer28) + 8|0);
       HEAP32[$vararg_ptr32>>2] = 3320;
       $vararg_ptr33 = (($vararg_buffer28) + 12|0);
       HEAP32[$vararg_ptr33>>2] = 11936;
       (_fprintf(($817|0),(16|0),($vararg_buffer28|0))|0);
       _abort();
       // unreachable;
      }
      STACKTOP = sp;return;
     }
    }
   } else {
    label = 222;
   }
  }
  if ((label|0) == 222) {
   $819 = $1;
   $820 = (($819) + 80|0);
   HEAPF64[$820>>3] = -1.79769313486231570815E+308;
   $821 = $1;
   $822 = (($821) + 72|0);
   HEAPF64[$822>>3] = -1.79769313486231570815E+308;
  }
 }
 $823 = $three_conditions;
 $824 = ($823|0)!=(0);
 if ($824) {
  label = 226;
 } else {
  $825 = $po_args;
  $826 = (($825) + 8|0);
  $827 = (($826) + 64|0);
  $828 = +HEAPF64[$827>>3];
  $829 = $828 != 0.0;
  if ($829) {
   label = 226;
  } else {
   label = 233;
  }
 }
 if ((label|0) == 226) {
  $830 = $0;
  $831 = (($830) + 2504|0);
  $832 = HEAP32[$831>>2]|0;
  $833 = ($832|0)==(1);
  if ($833) {
   $834 = $1;
   $835 = $po_args;
   $836 = $6;
   $837 = $4;
   $838 = $oligo_seq;
   __ZL13oligo_hairpinP10primer_recPK28args_for_one_oligo_or_primerP11oligo_statsPK15thal_arg_holderPKc($834,$835,$836,$837,$838);
   $839 = $1;
   $840 = (__ZL22p3_ol_is_uninitializedPK10primer_rec($839)|0);
   $841 = ($840|0)!=(0);
   if (!($841)) {
    $842 = $must_use;
    $843 = ($842|0)!=(0);
    if (!($843)) {
     $844 = $1;
     $845 = (_p3_ol_is_ok($844)|0);
     $846 = ($845|0)!=(0);
     if ($846) {
      $847 = HEAP32[_stderr>>2]|0;
      $848 = HEAP32[8>>2]|0;
      HEAP32[$vararg_buffer34>>2] = $848;
      $vararg_ptr37 = (($vararg_buffer34) + 4|0);
      HEAP32[$vararg_ptr37>>2] = 56;
      $vararg_ptr38 = (($vararg_buffer34) + 8|0);
      HEAP32[$vararg_ptr38>>2] = 3342;
      $vararg_ptr39 = (($vararg_buffer34) + 12|0);
      HEAP32[$vararg_ptr39>>2] = 11936;
      (_fprintf(($847|0),(16|0),($vararg_buffer34|0))|0);
      _abort();
      // unreachable;
     }
     STACKTOP = sp;return;
    }
   }
  } else {
   label = 233;
  }
 }
 if ((label|0) == 233) {
  $849 = $1;
  $850 = (($849) + 88|0);
  HEAPF64[$850>>3] = -1.79769313486231570815E+308;
 }
 $851 = $three_conditions;
 $852 = ($851|0)!=(0);
 if ($852) {
  label = 236;
 } else {
  $853 = $po_args;
  $854 = (($853) + 8|0);
  $855 = (($854) + 104|0);
  $856 = +HEAPF64[$855>>3];
  $857 = $856 != 0.0;
  if ($857) {
   label = 236;
  }
 }
 if ((label|0) == 236) {
  $858 = $1;
  $859 = $0;
  $860 = $5;
  $861 = $l;
  $862 = $6;
  $863 = $3;
  __ZL31oligo_repeat_library_misprimingP10primer_recPK18p3_global_settingsPK8seq_args10oligo_typeP11oligo_statsPK15dpal_arg_holder($858,$859,$860,$861,$862,$863);
 }
 $864 = $1;
 $865 = (_p3_ol_has_any_problem($864)|0);
 $866 = ($865|0)!=(0);
 if ($866) {
  $867 = $1;
  $868 = (($867) + 114|0);
  $869 = HEAP8[$868]|0;
  $870 = ($869<<24>>24)!=(0);
  if (!($870)) {
   STACKTOP = sp;return;
  }
 }
 $871 = $three_conditions;
 $872 = ($871|0)!=(0);
 do {
  if ($872) {
   label = 247;
  } else {
   $873 = $l;
   $874 = (1)==($873|0);
   if (!($874)) {
    $875 = $l;
    $876 = (0)==($875|0);
    if (!($876)) {
     break;
    }
   }
   $877 = $0;
   $878 = (($877) + 48|0);
   $879 = (($878) + 8|0);
   $880 = (($879) + 144|0);
   $881 = +HEAPF64[$880>>3];
   $882 = $881 != 0.0;
   if ($882) {
    $883 = $0;
    $884 = (($883) + 2508|0);
    $885 = HEAP32[$884>>2]|0;
    $886 = ($885|0)!=(0);
    if (!($886)) {
     label = 247;
     break;
    }
   }
   $887 = $0;
   $888 = (($887) + 48|0);
   $889 = (($888) + 8|0);
   $890 = (($889) + 152|0);
   $891 = +HEAPF64[$890>>3];
   $892 = $891 != 0.0;
   if ($892) {
    $893 = $0;
    $894 = (($893) + 2508|0);
    $895 = HEAP32[$894>>2]|0;
    $896 = ($895|0)!=(0);
    if ($896) {
     label = 247;
    }
   }
  }
 } while(0);
 if ((label|0) == 247) {
  $897 = $1;
  $898 = (_p3_ol_has_any_problem($897)|0);
  $899 = ($898|0)!=(0);
  if ($899) {
   $900 = $1;
   $901 = (($900) + 114|0);
   $902 = HEAP8[$901]|0;
   $903 = ($902<<24>>24)!=(0);
   if ($903) {
    label = 249;
   }
  } else {
   label = 249;
  }
  if ((label|0) == 249) {
   $904 = $1;
   $905 = $0;
   $906 = $5;
   $907 = $l;
   $908 = $6;
   $909 = $3;
   $910 = (($909) + 8|0);
   $911 = HEAP32[$910>>2]|0;
   $912 = $thal_args_for_template_mispriming;
   __ZL25oligo_template_misprimingP10primer_recPK18p3_global_settingsPK8seq_args10oligo_typeP11oligo_statsPK9dpal_argsPK9thal_args($904,$905,$906,$907,$908,$911,$912);
  }
 }
 $913 = $1;
 $914 = (($913) + 112|0);
 $915 = HEAP8[$914]|0;
 $916 = $915 << 24 >> 24;
 $917 = $po_args;
 $918 = (($917) + 260|0);
 $919 = HEAP32[$918>>2]|0;
 $920 = ($916|0)>($919|0);
 do {
  if ($920) {
   $921 = $1;
   __ZL15op_set_too_longP10primer_rec($921);
   $922 = $6;
   $923 = (($922) + 40|0);
   $924 = HEAP32[$923>>2]|0;
   $925 = (($924) + 1)|0;
   HEAP32[$923>>2] = $925;
   $926 = $must_use;
   $927 = ($926|0)!=(0);
   if ($927) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $928 = $1;
 $929 = (($928) + 112|0);
 $930 = HEAP8[$929]|0;
 $931 = $930 << 24 >> 24;
 $932 = $po_args;
 $933 = (($932) + 256|0);
 $934 = HEAP32[$933>>2]|0;
 $935 = ($931|0)<($934|0);
 do {
  if ($935) {
   $936 = $1;
   __ZL16op_set_too_shortP10primer_rec($936);
   $937 = $6;
   $938 = (($937) + 36|0);
   $939 = HEAP32[$938>>2]|0;
   $940 = (($939) + 1)|0;
   HEAP32[$938>>2] = $940;
   $941 = $must_use;
   $942 = ($941|0)!=(0);
   if ($942) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $for_i = 0;
 while(1) {
  $943 = $for_i;
  $944 = $5;
  $945 = (($944) + 8828|0);
  $946 = HEAP32[$945>>2]|0;
  $947 = ($943|0)<($946|0);
  if (!($947)) {
   break;
  }
  $948 = $l;
  $949 = (0)==($948|0);
  if ($949) {
   $950 = $1;
   $951 = (($950) + 56|0);
   $952 = HEAP32[$951>>2]|0;
   $953 = $0;
   $954 = (($953) + 2648|0);
   $955 = HEAP32[$954>>2]|0;
   $956 = (($952) + ($955))|0;
   $957 = (($956) - 1)|0;
   $958 = $for_i;
   $959 = $5;
   $960 = (($959) + 8028|0);
   $961 = (($960) + ($958<<2)|0);
   $962 = HEAP32[$961>>2]|0;
   $963 = ($957|0)<=($962|0);
   if ($963) {
    $964 = $1;
    $965 = (($964) + 56|0);
    $966 = HEAP32[$965>>2]|0;
    $967 = $1;
    $968 = (($967) + 112|0);
    $969 = HEAP8[$968]|0;
    $970 = $969 << 24 >> 24;
    $971 = (($966) + ($970))|0;
    $972 = $0;
    $973 = (($972) + 2652|0);
    $974 = HEAP32[$973>>2]|0;
    $975 = (($971) - ($974))|0;
    $976 = $for_i;
    $977 = $5;
    $978 = (($977) + 8028|0);
    $979 = (($978) + ($976<<2)|0);
    $980 = HEAP32[$979>>2]|0;
    $981 = ($975|0)>($980|0);
    if ($981) {
     label = 264;
     break;
    }
   }
  }
  $984 = $l;
  $985 = (1)==($984|0);
  if ($985) {
   $986 = $1;
   $987 = (($986) + 56|0);
   $988 = HEAP32[$987>>2]|0;
   $989 = $1;
   $990 = (($989) + 112|0);
   $991 = HEAP8[$990]|0;
   $992 = $991 << 24 >> 24;
   $993 = (($988) - ($992))|0;
   $994 = $0;
   $995 = (($994) + 2652|0);
   $996 = HEAP32[$995>>2]|0;
   $997 = (($993) + ($996))|0;
   $998 = $for_i;
   $999 = $5;
   $1000 = (($999) + 8028|0);
   $1001 = (($1000) + ($998<<2)|0);
   $1002 = HEAP32[$1001>>2]|0;
   $1003 = ($997|0)<=($1002|0);
   if ($1003) {
    $1004 = $1;
    $1005 = (($1004) + 56|0);
    $1006 = HEAP32[$1005>>2]|0;
    $1007 = $0;
    $1008 = (($1007) + 2648|0);
    $1009 = HEAP32[$1008>>2]|0;
    $1010 = (($1006) - ($1009))|0;
    $1011 = (($1010) + 1)|0;
    $1012 = $for_i;
    $1013 = $5;
    $1014 = (($1013) + 8028|0);
    $1015 = (($1014) + ($1012<<2)|0);
    $1016 = HEAP32[$1015>>2]|0;
    $1017 = ($1011|0)>($1016|0);
    if ($1017) {
     label = 268;
     break;
    }
   }
  }
  $1020 = $for_i;
  $1021 = (($1020) + 1)|0;
  $for_i = $1021;
 }
 if ((label|0) == 264) {
  $982 = $1;
  $983 = (($982) + 120|0);
  HEAP8[$983] = 1;
 }
 else if ((label|0) == 268) {
  $1018 = $1;
  $1019 = (($1018) + 120|0);
  HEAP8[$1019] = 1;
 }
 $1022 = $1;
 __ZL25op_set_completely_writtenP10primer_rec($1022);
 STACKTOP = sp;return;
}
function __ZL8p_obj_fnPK18p3_global_settingsP10primer_reci($pa,$h,$j) {
 $pa = $pa|0;
 $h = $h|0;
 $j = $j|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0.0, $1001 = 0.0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0.0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0.0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0.0, $1016 = 0.0, $1017 = 0, $1018 = 0, $1019 = 0.0, $102 = 0.0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0.0, $1026 = 0, $1027 = 0, $1028 = 0.0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0.0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0.0, $1037 = 0.0, $1038 = 0.0, $1039 = 0.0, $104 = 0, $1040 = 0.0, $1041 = 0.0, $1042 = 0.0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0.0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0.0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0.0, $1056 = 0.0, $1057 = 0.0, $1058 = 0, $1059 = 0, $106 = 0.0, $1060 = 0.0, $1061 = 0.0, $1062 = 0.0, $1063 = 0.0, $1064 = 0.0, $1065 = 0.0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0.0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0.0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0.0, $1082 = 0.0, $1083 = 0.0, $1084 = 0.0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0.0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0.0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0.0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0.0;
 var $1105 = 0.0, $1106 = 0.0, $1107 = 0.0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0.0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0.0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0.0, $1127 = 0.0, $1128 = 0.0, $1129 = 0.0, $113 = 0, $1130 = 0.0, $1131 = 0, $1132 = 0, $1133 = 0.0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0.0;
 var $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0;
 var $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0.0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0.0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0;
 var $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0.0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0.0;
 var $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0.0, $260 = 0.0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0.0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0;
 var $338 = 0.0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0.0, $344 = 0, $345 = 0, $346 = 0.0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0, $355 = 0;
 var $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0.0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0.0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0.0, $376 = 0.0, $377 = 0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0.0, $386 = 0, $387 = 0, $388 = 0.0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0.0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0.0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0.0, $444 = 0.0, $445 = 0.0;
 var $446 = 0.0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0.0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0.0, $458 = 0, $459 = 0, $46 = 0.0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0.0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0.0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0.0, $5 = 0;
 var $50 = 0.0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0.0, $509 = 0.0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0.0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0.0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0.0, $531 = 0.0, $532 = 0.0, $533 = 0.0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0.0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0.0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0.0;
 var $554 = 0, $555 = 0.0, $556 = 0.0, $557 = 0.0, $558 = 0.0, $559 = 0, $56 = 0.0, $560 = 0, $561 = 0, $562 = 0, $563 = 0.0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0.0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0.0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0.0, $582 = 0.0, $583 = 0, $584 = 0.0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0.0, $591 = 0, $592 = 0.0, $593 = 0, $594 = 0, $595 = 0.0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0.0, $600 = 0.0, $601 = 0.0, $602 = 0.0, $603 = 0.0, $604 = 0.0, $605 = 0.0, $606 = 0.0, $607 = 0;
 var $608 = 0, $609 = 0.0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0.0, $615 = 0.0, $616 = 0, $617 = 0.0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0.0, $624 = 0, $625 = 0;
 var $626 = 0.0, $627 = 0, $628 = 0, $629 = 0, $63 = 0.0, $630 = 0, $631 = 0.0, $632 = 0.0, $633 = 0.0, $634 = 0, $635 = 0.0, $636 = 0.0, $637 = 0.0, $638 = 0.0, $639 = 0.0, $64 = 0.0, $640 = 0.0, $641 = 0.0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0.0, $649 = 0, $65 = 0.0, $650 = 0, $651 = 0, $652 = 0.0, $653 = 0, $654 = 0, $655 = 0, $656 = 0.0, $657 = 0, $658 = 0, $659 = 0, $66 = 0.0, $660 = 0, $661 = 0;
 var $662 = 0.0, $663 = 0, $664 = 0, $665 = 0.0, $666 = 0, $667 = 0, $668 = 0, $669 = 0.0, $67 = 0.0, $670 = 0.0, $671 = 0.0, $672 = 0.0, $673 = 0.0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0.0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0.0, $683 = 0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0.0, $693 = 0, $694 = 0, $695 = 0, $696 = 0.0, $697 = 0, $698 = 0;
 var $699 = 0.0, $7 = 0, $70 = 0, $700 = 0.0, $701 = 0.0, $702 = 0.0, $703 = 0.0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0.0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0.0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0.0, $717 = 0, $718 = 0, $719 = 0, $72 = 0.0, $720 = 0, $721 = 0, $722 = 0.0, $723 = 0, $724 = 0, $725 = 0.0, $726 = 0, $727 = 0, $728 = 0, $729 = 0.0, $73 = 0, $730 = 0.0, $731 = 0.0, $732 = 0.0, $733 = 0.0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0.0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0.0, $743 = 0, $744 = 0, $745 = 0, $746 = 0.0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0.0, $753 = 0, $754 = 0, $755 = 0, $756 = 0.0, $757 = 0, $758 = 0, $759 = 0.0, $76 = 0.0, $760 = 0.0, $761 = 0.0, $762 = 0.0, $763 = 0.0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0.0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0.0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0.0, $794 = 0.0, $795 = 0.0, $796 = 0.0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0.0, $800 = 0, $801 = 0.0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0.0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0.0, $827 = 0.0, $828 = 0.0, $829 = 0.0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0.0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0.0, $843 = 0, $844 = 0, $845 = 0.0, $846 = 0.0, $847 = 0.0, $848 = 0.0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0.0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0.0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0.0, $864 = 0, $865 = 0, $866 = 0.0, $867 = 0.0, $868 = 0.0, $869 = 0.0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0.0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0.0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0.0, $888 = 0.0, $889 = 0, $89 = 0.0, $890 = 0, $891 = 0.0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0.0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0.0, $901 = 0, $902 = 0, $903 = 0.0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0.0, $909 = 0.0, $91 = 0, $910 = 0.0, $911 = 0.0, $912 = 0.0, $913 = 0.0;
 var $914 = 0.0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0.0, $92 = 0, $920 = 0, $921 = 0, $922 = 0.0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0.0, $928 = 0.0, $929 = 0.0, $93 = 0.0, $930 = 0, $931 = 0;
 var $932 = 0.0, $933 = 0.0, $934 = 0.0, $935 = 0.0, $936 = 0.0, $937 = 0.0, $938 = 0, $939 = 0, $94 = 0.0, $940 = 0, $941 = 0, $942 = 0.0, $943 = 0, $944 = 0, $945 = 0, $946 = 0.0, $947 = 0, $948 = 0, $949 = 0, $95 = 0.0;
 var $950 = 0, $951 = 0.0, $952 = 0.0, $953 = 0, $954 = 0, $955 = 0.0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0.0, $960 = 0, $961 = 0.0, $962 = 0, $963 = 0, $964 = 0.0, $965 = 0, $966 = 0, $967 = 0.0, $968 = 0;
 var $969 = 0, $97 = 0.0, $970 = 0, $971 = 0, $972 = 0.0, $973 = 0.0, $974 = 0.0, $975 = 0.0, $976 = 0.0, $977 = 0.0, $978 = 0.0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0.0, $984 = 0, $985 = 0, $986 = 0.0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0.0, $992 = 0.0, $993 = 0.0, $994 = 0, $995 = 0, $996 = 0.0, $997 = 0.0, $998 = 0.0, $999 = 0.0, $sum = 0.0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer16 = 0, $vararg_buffer22 = 0, $vararg_buffer4 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer22 = sp + 80|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer10 = sp + 8|0;
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer = sp + 40|0;
 $1 = $pa;
 $2 = $h;
 $3 = $j;
 $sum = 0.0;
 $4 = $3;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = $3;
  $7 = ($6|0)==(1);
  if (!($7)) {
   $642 = $3;
   $643 = ($642|0)==(2);
   if (!($643)) {
    $1131 = HEAP32[_stderr>>2]|0;
    $1132 = HEAP32[8>>2]|0;
    HEAP32[$vararg_buffer22>>2] = $1132;
    $vararg_ptr25 = (($vararg_buffer22) + 4|0);
    HEAP32[$vararg_ptr25>>2] = 56;
    $vararg_ptr26 = (($vararg_buffer22) + 8|0);
    HEAP32[$vararg_ptr26>>2] = 3764;
    $vararg_ptr27 = (($vararg_buffer22) + 12|0);
    HEAP32[$vararg_ptr27>>2] = 11584;
    (_fprintf(($1131|0),(16|0),($vararg_buffer22|0))|0);
    _abort();
    // unreachable;
   }
   $644 = $1;
   $645 = (($644) + 400|0);
   $646 = (($645) + 8|0);
   $647 = (($646) + 128|0);
   $648 = +HEAPF64[$647>>3];
   $649 = $648 != 0.0;
   if ($649) {
    $650 = $2;
    $651 = (($650) + 16|0);
    $652 = +HEAPF64[$651>>3];
    $653 = $1;
    $654 = (($653) + 400|0);
    $655 = (($654) + 168|0);
    $656 = +HEAPF64[$655>>3];
    $657 = $652 > $656;
    if ($657) {
     $658 = $1;
     $659 = (($658) + 400|0);
     $660 = (($659) + 8|0);
     $661 = (($660) + 128|0);
     $662 = +HEAPF64[$661>>3];
     $663 = $2;
     $664 = (($663) + 16|0);
     $665 = +HEAPF64[$664>>3];
     $666 = $1;
     $667 = (($666) + 400|0);
     $668 = (($667) + 168|0);
     $669 = +HEAPF64[$668>>3];
     $670 = $665 - $669;
     $671 = $662 * $670;
     $672 = $sum;
     $673 = $672 + $671;
     $sum = $673;
    }
   }
   $674 = $1;
   $675 = (($674) + 400|0);
   $676 = (($675) + 8|0);
   $677 = (($676) + 136|0);
   $678 = +HEAPF64[$677>>3];
   $679 = $678 != 0.0;
   if ($679) {
    $680 = $2;
    $681 = (($680) + 16|0);
    $682 = +HEAPF64[$681>>3];
    $683 = $1;
    $684 = (($683) + 400|0);
    $685 = (($684) + 168|0);
    $686 = +HEAPF64[$685>>3];
    $687 = $682 < $686;
    if ($687) {
     $688 = $1;
     $689 = (($688) + 400|0);
     $690 = (($689) + 8|0);
     $691 = (($690) + 136|0);
     $692 = +HEAPF64[$691>>3];
     $693 = $1;
     $694 = (($693) + 400|0);
     $695 = (($694) + 168|0);
     $696 = +HEAPF64[$695>>3];
     $697 = $2;
     $698 = (($697) + 16|0);
     $699 = +HEAPF64[$698>>3];
     $700 = $696 - $699;
     $701 = $692 * $700;
     $702 = $sum;
     $703 = $702 + $701;
     $sum = $703;
    }
   }
   $704 = $1;
   $705 = (($704) + 400|0);
   $706 = (($705) + 8|0);
   $707 = (($706) + 48|0);
   $708 = +HEAPF64[$707>>3];
   $709 = $708 != 0.0;
   if ($709) {
    $710 = $2;
    $711 = (($710) + 24|0);
    $712 = +HEAPF64[$711>>3];
    $713 = $1;
    $714 = (($713) + 400|0);
    $715 = (($714) + 192|0);
    $716 = +HEAPF64[$715>>3];
    $717 = $712 > $716;
    if ($717) {
     $718 = $1;
     $719 = (($718) + 400|0);
     $720 = (($719) + 8|0);
     $721 = (($720) + 48|0);
     $722 = +HEAPF64[$721>>3];
     $723 = $2;
     $724 = (($723) + 24|0);
     $725 = +HEAPF64[$724>>3];
     $726 = $1;
     $727 = (($726) + 400|0);
     $728 = (($727) + 192|0);
     $729 = +HEAPF64[$728>>3];
     $730 = $725 - $729;
     $731 = $722 * $730;
     $732 = $sum;
     $733 = $732 + $731;
     $sum = $733;
    }
   }
   $734 = $1;
   $735 = (($734) + 400|0);
   $736 = (($735) + 8|0);
   $737 = (($736) + 56|0);
   $738 = +HEAPF64[$737>>3];
   $739 = $738 != 0.0;
   if ($739) {
    $740 = $2;
    $741 = (($740) + 24|0);
    $742 = +HEAPF64[$741>>3];
    $743 = $1;
    $744 = (($743) + 400|0);
    $745 = (($744) + 192|0);
    $746 = +HEAPF64[$745>>3];
    $747 = $742 < $746;
    if ($747) {
     $748 = $1;
     $749 = (($748) + 400|0);
     $750 = (($749) + 8|0);
     $751 = (($750) + 56|0);
     $752 = +HEAPF64[$751>>3];
     $753 = $1;
     $754 = (($753) + 400|0);
     $755 = (($754) + 192|0);
     $756 = +HEAPF64[$755>>3];
     $757 = $2;
     $758 = (($757) + 24|0);
     $759 = +HEAPF64[$758>>3];
     $760 = $756 - $759;
     $761 = $752 * $760;
     $762 = $sum;
     $763 = $762 + $761;
     $sum = $763;
    }
   }
   $764 = $1;
   $765 = (($764) + 400|0);
   $766 = (($765) + 8|0);
   $767 = (($766) + 80|0);
   $768 = +HEAPF64[$767>>3];
   $769 = $768 != 0.0;
   if ($769) {
    $770 = $2;
    $771 = (($770) + 112|0);
    $772 = HEAP8[$771]|0;
    $773 = $772 << 24 >> 24;
    $774 = $1;
    $775 = (($774) + 400|0);
    $776 = (($775) + 252|0);
    $777 = HEAP32[$776>>2]|0;
    $778 = ($773|0)<($777|0);
    if ($778) {
     $779 = $1;
     $780 = (($779) + 400|0);
     $781 = (($780) + 8|0);
     $782 = (($781) + 80|0);
     $783 = +HEAPF64[$782>>3];
     $784 = $1;
     $785 = (($784) + 400|0);
     $786 = (($785) + 252|0);
     $787 = HEAP32[$786>>2]|0;
     $788 = $2;
     $789 = (($788) + 112|0);
     $790 = HEAP8[$789]|0;
     $791 = $790 << 24 >> 24;
     $792 = (($787) - ($791))|0;
     $793 = (+($792|0));
     $794 = $783 * $793;
     $795 = $sum;
     $796 = $795 + $794;
     $sum = $796;
    }
   }
   $797 = $1;
   $798 = (($797) + 400|0);
   $799 = (($798) + 8|0);
   $800 = (($799) + 72|0);
   $801 = +HEAPF64[$800>>3];
   $802 = $801 != 0.0;
   if ($802) {
    $803 = $2;
    $804 = (($803) + 112|0);
    $805 = HEAP8[$804]|0;
    $806 = $805 << 24 >> 24;
    $807 = $1;
    $808 = (($807) + 400|0);
    $809 = (($808) + 252|0);
    $810 = HEAP32[$809>>2]|0;
    $811 = ($806|0)>($810|0);
    if ($811) {
     $812 = $1;
     $813 = (($812) + 400|0);
     $814 = (($813) + 8|0);
     $815 = (($814) + 72|0);
     $816 = +HEAPF64[$815>>3];
     $817 = $2;
     $818 = (($817) + 112|0);
     $819 = HEAP8[$818]|0;
     $820 = $819 << 24 >> 24;
     $821 = $1;
     $822 = (($821) + 400|0);
     $823 = (($822) + 252|0);
     $824 = HEAP32[$823>>2]|0;
     $825 = (($820) - ($824))|0;
     $826 = (+($825|0));
     $827 = $816 * $826;
     $828 = $sum;
     $829 = $828 + $827;
     $sum = $829;
    }
   }
   $830 = $1;
   $831 = (($830) + 400|0);
   $832 = (($831) + 8|0);
   $833 = +HEAPF64[$832>>3];
   $834 = $833 != 0.0;
   if ($834) {
    $835 = $1;
    $836 = (($835) + 2504|0);
    $837 = HEAP32[$836>>2]|0;
    $838 = ($837|0)==(0);
    if ($838) {
     $839 = $1;
     $840 = (($839) + 400|0);
     $841 = (($840) + 8|0);
     $842 = +HEAPF64[$841>>3];
     $843 = $2;
     $844 = (($843) + 72|0);
     $845 = +HEAPF64[$844>>3];
     $846 = $842 * $845;
     $847 = $sum;
     $848 = $847 + $846;
     $sum = $848;
    }
   }
   $849 = $1;
   $850 = (($849) + 400|0);
   $851 = (($850) + 8|0);
   $852 = (($851) + 16|0);
   $853 = +HEAPF64[$852>>3];
   $854 = $853 != 0.0;
   if ($854) {
    $855 = $1;
    $856 = (($855) + 2504|0);
    $857 = HEAP32[$856>>2]|0;
    $858 = ($857|0)==(0);
    if ($858) {
     $859 = $1;
     $860 = (($859) + 400|0);
     $861 = (($860) + 8|0);
     $862 = (($861) + 16|0);
     $863 = +HEAPF64[$862>>3];
     $864 = $2;
     $865 = (($864) + 80|0);
     $866 = +HEAPF64[$865>>3];
     $867 = $863 * $866;
     $868 = $sum;
     $869 = $868 + $867;
     $sum = $869;
    }
   }
   $870 = $1;
   $871 = (($870) + 2504|0);
   $872 = HEAP32[$871>>2]|0;
   $873 = ($872|0)==(1);
   if ($873) {
    $874 = $1;
    $875 = (($874) + 400|0);
    $876 = (($875) + 8|0);
    $877 = (($876) + 8|0);
    $878 = +HEAPF64[$877>>3];
    $879 = $878 != 0.0;
    if ($879) {
     $880 = $2;
     $881 = (($880) + 16|0);
     $882 = +HEAPF64[$881>>3];
     $883 = $1;
     $884 = (($883) + 400|0);
     $885 = (($884) + 8|0);
     $886 = (($885) + 120|0);
     $887 = +HEAPF64[$886>>3];
     $888 = $882 - $887;
     $889 = $2;
     $890 = (($889) + 72|0);
     $891 = +HEAPF64[$890>>3];
     $892 = $888 <= $891;
     if ($892) {
      $893 = $1;
      $894 = (($893) + 400|0);
      $895 = (($894) + 8|0);
      $896 = (($895) + 8|0);
      $897 = +HEAPF64[$896>>3];
      $898 = $2;
      $899 = (($898) + 72|0);
      $900 = +HEAPF64[$899>>3];
      $901 = $2;
      $902 = (($901) + 16|0);
      $903 = +HEAPF64[$902>>3];
      $904 = $1;
      $905 = (($904) + 400|0);
      $906 = (($905) + 8|0);
      $907 = (($906) + 120|0);
      $908 = +HEAPF64[$907>>3];
      $909 = $903 - $908;
      $910 = $909 - 1.0;
      $911 = $900 - $910;
      $912 = $897 * $911;
      $913 = $sum;
      $914 = $913 + $912;
      $sum = $914;
     } else {
      $915 = $1;
      $916 = (($915) + 400|0);
      $917 = (($916) + 8|0);
      $918 = (($917) + 8|0);
      $919 = +HEAPF64[$918>>3];
      $920 = $2;
      $921 = (($920) + 16|0);
      $922 = +HEAPF64[$921>>3];
      $923 = $1;
      $924 = (($923) + 400|0);
      $925 = (($924) + 8|0);
      $926 = (($925) + 120|0);
      $927 = +HEAPF64[$926>>3];
      $928 = $922 - $927;
      $929 = $928 + 1.0;
      $930 = $2;
      $931 = (($930) + 72|0);
      $932 = +HEAPF64[$931>>3];
      $933 = $929 - $932;
      $934 = 1.0 / $933;
      $935 = $919 * $934;
      $936 = $sum;
      $937 = $936 + $935;
      $sum = $937;
     }
    }
    $938 = $1;
    $939 = (($938) + 400|0);
    $940 = (($939) + 8|0);
    $941 = (($940) + 24|0);
    $942 = +HEAPF64[$941>>3];
    $943 = $942 != 0.0;
    if ($943) {
     $944 = $2;
     $945 = (($944) + 16|0);
     $946 = +HEAPF64[$945>>3];
     $947 = $1;
     $948 = (($947) + 400|0);
     $949 = (($948) + 8|0);
     $950 = (($949) + 120|0);
     $951 = +HEAPF64[$950>>3];
     $952 = $946 - $951;
     $953 = $2;
     $954 = (($953) + 80|0);
     $955 = +HEAPF64[$954>>3];
     $956 = $952 <= $955;
     if ($956) {
      $957 = $1;
      $958 = (($957) + 400|0);
      $959 = (($958) + 8|0);
      $960 = (($959) + 24|0);
      $961 = +HEAPF64[$960>>3];
      $962 = $2;
      $963 = (($962) + 80|0);
      $964 = +HEAPF64[$963>>3];
      $965 = $2;
      $966 = (($965) + 16|0);
      $967 = +HEAPF64[$966>>3];
      $968 = $1;
      $969 = (($968) + 400|0);
      $970 = (($969) + 8|0);
      $971 = (($970) + 120|0);
      $972 = +HEAPF64[$971>>3];
      $973 = $967 - $972;
      $974 = $973 - 1.0;
      $975 = $964 - $974;
      $976 = $961 * $975;
      $977 = $sum;
      $978 = $977 + $976;
      $sum = $978;
     } else {
      $979 = $1;
      $980 = (($979) + 400|0);
      $981 = (($980) + 8|0);
      $982 = (($981) + 24|0);
      $983 = +HEAPF64[$982>>3];
      $984 = $2;
      $985 = (($984) + 16|0);
      $986 = +HEAPF64[$985>>3];
      $987 = $1;
      $988 = (($987) + 400|0);
      $989 = (($988) + 8|0);
      $990 = (($989) + 120|0);
      $991 = +HEAPF64[$990>>3];
      $992 = $986 - $991;
      $993 = $992 + 1.0;
      $994 = $2;
      $995 = (($994) + 80|0);
      $996 = +HEAPF64[$995>>3];
      $997 = $993 - $996;
      $998 = 1.0 / $997;
      $999 = $983 * $998;
      $1000 = $sum;
      $1001 = $1000 + $999;
      $sum = $1001;
     }
    }
    $1002 = $1;
    $1003 = (($1002) + 400|0);
    $1004 = (($1003) + 8|0);
    $1005 = (($1004) + 64|0);
    $1006 = +HEAPF64[$1005>>3];
    $1007 = $1006 != 0.0;
    if ($1007) {
     $1008 = $2;
     $1009 = (($1008) + 16|0);
     $1010 = +HEAPF64[$1009>>3];
     $1011 = $1;
     $1012 = (($1011) + 400|0);
     $1013 = (($1012) + 8|0);
     $1014 = (($1013) + 120|0);
     $1015 = +HEAPF64[$1014>>3];
     $1016 = $1010 - $1015;
     $1017 = $2;
     $1018 = (($1017) + 88|0);
     $1019 = +HEAPF64[$1018>>3];
     $1020 = $1016 <= $1019;
     if ($1020) {
      $1021 = $1;
      $1022 = (($1021) + 400|0);
      $1023 = (($1022) + 8|0);
      $1024 = (($1023) + 64|0);
      $1025 = +HEAPF64[$1024>>3];
      $1026 = $2;
      $1027 = (($1026) + 88|0);
      $1028 = +HEAPF64[$1027>>3];
      $1029 = $2;
      $1030 = (($1029) + 16|0);
      $1031 = +HEAPF64[$1030>>3];
      $1032 = $1;
      $1033 = (($1032) + 400|0);
      $1034 = (($1033) + 8|0);
      $1035 = (($1034) + 120|0);
      $1036 = +HEAPF64[$1035>>3];
      $1037 = $1031 - $1036;
      $1038 = $1037 - 1.0;
      $1039 = $1028 - $1038;
      $1040 = $1025 * $1039;
      $1041 = $sum;
      $1042 = $1041 + $1040;
      $sum = $1042;
     } else {
      $1043 = $1;
      $1044 = (($1043) + 400|0);
      $1045 = (($1044) + 8|0);
      $1046 = (($1045) + 64|0);
      $1047 = +HEAPF64[$1046>>3];
      $1048 = $2;
      $1049 = (($1048) + 16|0);
      $1050 = +HEAPF64[$1049>>3];
      $1051 = $1;
      $1052 = (($1051) + 400|0);
      $1053 = (($1052) + 8|0);
      $1054 = (($1053) + 120|0);
      $1055 = +HEAPF64[$1054>>3];
      $1056 = $1050 - $1055;
      $1057 = $1056 + 1.0;
      $1058 = $2;
      $1059 = (($1058) + 88|0);
      $1060 = +HEAPF64[$1059>>3];
      $1061 = $1057 - $1060;
      $1062 = 1.0 / $1061;
      $1063 = $1047 * $1062;
      $1064 = $sum;
      $1065 = $1064 + $1063;
      $sum = $1065;
     }
    }
   }
   $1066 = $1;
   $1067 = (($1066) + 400|0);
   $1068 = (($1067) + 8|0);
   $1069 = (($1068) + 88|0);
   $1070 = +HEAPF64[$1069>>3];
   $1071 = $1070 != 0.0;
   if ($1071) {
    $1072 = $1;
    $1073 = (($1072) + 400|0);
    $1074 = (($1073) + 8|0);
    $1075 = (($1074) + 88|0);
    $1076 = +HEAPF64[$1075>>3];
    $1077 = $2;
    $1078 = (($1077) + 113|0);
    $1079 = HEAP8[$1078]|0;
    $1080 = $1079 << 24 >> 24;
    $1081 = (+($1080|0));
    $1082 = $1076 * $1081;
    $1083 = $sum;
    $1084 = $1083 + $1082;
    $sum = $1084;
   }
   $1085 = $1;
   $1086 = (($1085) + 400|0);
   $1087 = (($1086) + 8|0);
   $1088 = (($1087) + 104|0);
   $1089 = +HEAPF64[$1088>>3];
   $1090 = $1089 != 0.0;
   if ($1090) {
    $1091 = $1;
    $1092 = (($1091) + 400|0);
    $1093 = (($1092) + 8|0);
    $1094 = (($1093) + 104|0);
    $1095 = +HEAPF64[$1094>>3];
    $1096 = $2;
    $1097 = (($1096) + 6|0);
    $1098 = HEAP16[$1097>>1]|0;
    $1099 = $1098 << 16 >> 16;
    $1100 = $2;
    $1101 = (($1100) + 8|0);
    $1102 = HEAP32[$1101>>2]|0;
    $1103 = (($1102) + ($1099<<3)|0);
    $1104 = +HEAPF64[$1103>>3];
    $1105 = $1095 * $1104;
    $1106 = $sum;
    $1107 = $1106 + $1105;
    $sum = $1107;
   }
   $1108 = $1;
   $1109 = (($1108) + 400|0);
   $1110 = (($1109) + 8|0);
   $1111 = (($1110) + 112|0);
   $1112 = +HEAPF64[$1111>>3];
   $1113 = $1112 != 0.0;
   if ($1113) {
    $1114 = $1;
    $1115 = (($1114) + 400|0);
    $1116 = (($1115) + 8|0);
    $1117 = (($1116) + 112|0);
    $1118 = +HEAPF64[$1117>>3];
    $1119 = $1;
    $1120 = (($1119) + 44|0);
    $1121 = HEAP32[$1120>>2]|0;
    $1122 = $2;
    $1123 = (($1122) + 60|0);
    $1124 = HEAP32[$1123>>2]|0;
    $1125 = (($1121) - ($1124))|0;
    $1126 = (+($1125|0));
    $1127 = $1118 * $1126;
    $1128 = $sum;
    $1129 = $1128 + $1127;
    $sum = $1129;
   }
   $1130 = $sum;
   $0 = $1130;
   $1133 = $0;
   STACKTOP = sp;return (+$1133);
  }
 }
 $8 = $1;
 $9 = (($8) + 48|0);
 $10 = (($9) + 8|0);
 $11 = (($10) + 128|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $12 != 0.0;
 if ($13) {
  $14 = $2;
  $15 = (($14) + 16|0);
  $16 = +HEAPF64[$15>>3];
  $17 = $1;
  $18 = (($17) + 48|0);
  $19 = (($18) + 168|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $16 > $20;
  if ($21) {
   $22 = $1;
   $23 = (($22) + 48|0);
   $24 = (($23) + 8|0);
   $25 = (($24) + 128|0);
   $26 = +HEAPF64[$25>>3];
   $27 = $2;
   $28 = (($27) + 16|0);
   $29 = +HEAPF64[$28>>3];
   $30 = $1;
   $31 = (($30) + 48|0);
   $32 = (($31) + 168|0);
   $33 = +HEAPF64[$32>>3];
   $34 = $29 - $33;
   $35 = $26 * $34;
   $36 = $sum;
   $37 = $36 + $35;
   $sum = $37;
  }
 }
 $38 = $1;
 $39 = (($38) + 48|0);
 $40 = (($39) + 8|0);
 $41 = (($40) + 136|0);
 $42 = +HEAPF64[$41>>3];
 $43 = $42 != 0.0;
 if ($43) {
  $44 = $2;
  $45 = (($44) + 16|0);
  $46 = +HEAPF64[$45>>3];
  $47 = $1;
  $48 = (($47) + 48|0);
  $49 = (($48) + 168|0);
  $50 = +HEAPF64[$49>>3];
  $51 = $46 < $50;
  if ($51) {
   $52 = $1;
   $53 = (($52) + 48|0);
   $54 = (($53) + 8|0);
   $55 = (($54) + 136|0);
   $56 = +HEAPF64[$55>>3];
   $57 = $1;
   $58 = (($57) + 48|0);
   $59 = (($58) + 168|0);
   $60 = +HEAPF64[$59>>3];
   $61 = $2;
   $62 = (($61) + 16|0);
   $63 = +HEAPF64[$62>>3];
   $64 = $60 - $63;
   $65 = $56 * $64;
   $66 = $sum;
   $67 = $66 + $65;
   $sum = $67;
  }
 }
 $68 = $1;
 $69 = (($68) + 48|0);
 $70 = (($69) + 8|0);
 $71 = (($70) + 48|0);
 $72 = +HEAPF64[$71>>3];
 $73 = $72 != 0.0;
 if ($73) {
  $74 = $2;
  $75 = (($74) + 24|0);
  $76 = +HEAPF64[$75>>3];
  $77 = $1;
  $78 = (($77) + 48|0);
  $79 = (($78) + 192|0);
  $80 = +HEAPF64[$79>>3];
  $81 = $76 > $80;
  if ($81) {
   $82 = $1;
   $83 = (($82) + 48|0);
   $84 = (($83) + 8|0);
   $85 = (($84) + 48|0);
   $86 = +HEAPF64[$85>>3];
   $87 = $2;
   $88 = (($87) + 24|0);
   $89 = +HEAPF64[$88>>3];
   $90 = $1;
   $91 = (($90) + 48|0);
   $92 = (($91) + 192|0);
   $93 = +HEAPF64[$92>>3];
   $94 = $89 - $93;
   $95 = $86 * $94;
   $96 = $sum;
   $97 = $96 + $95;
   $sum = $97;
  }
 }
 $98 = $1;
 $99 = (($98) + 48|0);
 $100 = (($99) + 8|0);
 $101 = (($100) + 56|0);
 $102 = +HEAPF64[$101>>3];
 $103 = $102 != 0.0;
 if ($103) {
  $104 = $2;
  $105 = (($104) + 24|0);
  $106 = +HEAPF64[$105>>3];
  $107 = $1;
  $108 = (($107) + 48|0);
  $109 = (($108) + 192|0);
  $110 = +HEAPF64[$109>>3];
  $111 = $106 < $110;
  if ($111) {
   $112 = $1;
   $113 = (($112) + 48|0);
   $114 = (($113) + 8|0);
   $115 = (($114) + 56|0);
   $116 = +HEAPF64[$115>>3];
   $117 = $1;
   $118 = (($117) + 48|0);
   $119 = (($118) + 192|0);
   $120 = +HEAPF64[$119>>3];
   $121 = $2;
   $122 = (($121) + 24|0);
   $123 = +HEAPF64[$122>>3];
   $124 = $120 - $123;
   $125 = $116 * $124;
   $126 = $sum;
   $127 = $126 + $125;
   $sum = $127;
  }
 }
 $128 = $1;
 $129 = (($128) + 48|0);
 $130 = (($129) + 8|0);
 $131 = (($130) + 80|0);
 $132 = +HEAPF64[$131>>3];
 $133 = $132 != 0.0;
 if ($133) {
  $134 = $2;
  $135 = (($134) + 112|0);
  $136 = HEAP8[$135]|0;
  $137 = $136 << 24 >> 24;
  $138 = $1;
  $139 = (($138) + 48|0);
  $140 = (($139) + 252|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = ($137|0)<($141|0);
  if ($142) {
   $143 = $1;
   $144 = (($143) + 48|0);
   $145 = (($144) + 8|0);
   $146 = (($145) + 80|0);
   $147 = +HEAPF64[$146>>3];
   $148 = $1;
   $149 = (($148) + 48|0);
   $150 = (($149) + 252|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = $2;
   $153 = (($152) + 112|0);
   $154 = HEAP8[$153]|0;
   $155 = $154 << 24 >> 24;
   $156 = (($151) - ($155))|0;
   $157 = (+($156|0));
   $158 = $147 * $157;
   $159 = $sum;
   $160 = $159 + $158;
   $sum = $160;
  }
 }
 $161 = $1;
 $162 = (($161) + 48|0);
 $163 = (($162) + 8|0);
 $164 = (($163) + 72|0);
 $165 = +HEAPF64[$164>>3];
 $166 = $165 != 0.0;
 if ($166) {
  $167 = $2;
  $168 = (($167) + 112|0);
  $169 = HEAP8[$168]|0;
  $170 = $169 << 24 >> 24;
  $171 = $1;
  $172 = (($171) + 48|0);
  $173 = (($172) + 252|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = ($170|0)>($174|0);
  if ($175) {
   $176 = $1;
   $177 = (($176) + 48|0);
   $178 = (($177) + 8|0);
   $179 = (($178) + 72|0);
   $180 = +HEAPF64[$179>>3];
   $181 = $2;
   $182 = (($181) + 112|0);
   $183 = HEAP8[$182]|0;
   $184 = $183 << 24 >> 24;
   $185 = $1;
   $186 = (($185) + 48|0);
   $187 = (($186) + 252|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = (($184) - ($188))|0;
   $190 = (+($189|0));
   $191 = $180 * $190;
   $192 = $sum;
   $193 = $192 + $191;
   $sum = $193;
  }
 }
 $194 = $1;
 $195 = (($194) + 2504|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = ($196|0)==(0);
 if ($197) {
  $198 = $1;
  $199 = (($198) + 48|0);
  $200 = (($199) + 8|0);
  $201 = +HEAPF64[$200>>3];
  $202 = $201 != 0.0;
  if ($202) {
   $203 = $1;
   $204 = (($203) + 48|0);
   $205 = (($204) + 8|0);
   $206 = +HEAPF64[$205>>3];
   $207 = $2;
   $208 = (($207) + 72|0);
   $209 = +HEAPF64[$208>>3];
   $210 = $206 * $209;
   $211 = $sum;
   $212 = $211 + $210;
   $sum = $212;
  }
  $213 = $1;
  $214 = (($213) + 48|0);
  $215 = (($214) + 8|0);
  $216 = (($215) + 16|0);
  $217 = +HEAPF64[$216>>3];
  $218 = $217 != 0.0;
  if ($218) {
   $219 = $1;
   $220 = (($219) + 48|0);
   $221 = (($220) + 8|0);
   $222 = (($221) + 16|0);
   $223 = +HEAPF64[$222>>3];
   $224 = $2;
   $225 = (($224) + 80|0);
   $226 = +HEAPF64[$225>>3];
   $227 = $223 * $226;
   $228 = $sum;
   $229 = $228 + $227;
   $sum = $229;
  }
 } else {
  $230 = $1;
  $231 = (($230) + 2504|0);
  $232 = HEAP32[$231>>2]|0;
  $233 = ($232|0)==(1);
  if (!($233)) {
   $426 = HEAP32[_stderr>>2]|0;
   $427 = HEAP32[8>>2]|0;
   HEAP32[$vararg_buffer>>2] = $427;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 56;
   $vararg_ptr2 = (($vararg_buffer) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 3650;
   $vararg_ptr3 = (($vararg_buffer) + 12|0);
   HEAP32[$vararg_ptr3>>2] = 11584;
   (_fprintf(($426|0),(16|0),($vararg_buffer|0))|0);
   _abort();
   // unreachable;
  }
  $234 = $1;
  $235 = (($234) + 48|0);
  $236 = (($235) + 8|0);
  $237 = (($236) + 8|0);
  $238 = +HEAPF64[$237>>3];
  $239 = $238 != 0.0;
  if ($239) {
   $240 = $2;
   $241 = (($240) + 16|0);
   $242 = +HEAPF64[$241>>3];
   $243 = $1;
   $244 = (($243) + 48|0);
   $245 = (($244) + 8|0);
   $246 = (($245) + 120|0);
   $247 = +HEAPF64[$246>>3];
   $248 = $242 - $247;
   $249 = $2;
   $250 = (($249) + 72|0);
   $251 = +HEAPF64[$250>>3];
   $252 = $248 <= $251;
   if ($252) {
    $253 = $1;
    $254 = (($253) + 48|0);
    $255 = (($254) + 8|0);
    $256 = (($255) + 8|0);
    $257 = +HEAPF64[$256>>3];
    $258 = $2;
    $259 = (($258) + 72|0);
    $260 = +HEAPF64[$259>>3];
    $261 = $2;
    $262 = (($261) + 16|0);
    $263 = +HEAPF64[$262>>3];
    $264 = $1;
    $265 = (($264) + 48|0);
    $266 = (($265) + 8|0);
    $267 = (($266) + 120|0);
    $268 = +HEAPF64[$267>>3];
    $269 = $263 - $268;
    $270 = $269 - 1.0;
    $271 = $260 - $270;
    $272 = $257 * $271;
    $273 = $sum;
    $274 = $273 + $272;
    $sum = $274;
   } else {
    $275 = $1;
    $276 = (($275) + 48|0);
    $277 = (($276) + 8|0);
    $278 = (($277) + 8|0);
    $279 = +HEAPF64[$278>>3];
    $280 = $2;
    $281 = (($280) + 16|0);
    $282 = +HEAPF64[$281>>3];
    $283 = $1;
    $284 = (($283) + 48|0);
    $285 = (($284) + 8|0);
    $286 = (($285) + 120|0);
    $287 = +HEAPF64[$286>>3];
    $288 = $282 - $287;
    $289 = $288 + 1.0;
    $290 = $2;
    $291 = (($290) + 72|0);
    $292 = +HEAPF64[$291>>3];
    $293 = $289 - $292;
    $294 = 1.0 / $293;
    $295 = $279 * $294;
    $296 = $sum;
    $297 = $296 + $295;
    $sum = $297;
   }
  }
  $298 = $1;
  $299 = (($298) + 48|0);
  $300 = (($299) + 8|0);
  $301 = (($300) + 24|0);
  $302 = +HEAPF64[$301>>3];
  $303 = $302 != 0.0;
  if ($303) {
   $304 = $2;
   $305 = (($304) + 16|0);
   $306 = +HEAPF64[$305>>3];
   $307 = $1;
   $308 = (($307) + 48|0);
   $309 = (($308) + 8|0);
   $310 = (($309) + 120|0);
   $311 = +HEAPF64[$310>>3];
   $312 = $306 - $311;
   $313 = $2;
   $314 = (($313) + 80|0);
   $315 = +HEAPF64[$314>>3];
   $316 = $312 <= $315;
   if ($316) {
    $317 = $1;
    $318 = (($317) + 48|0);
    $319 = (($318) + 8|0);
    $320 = (($319) + 24|0);
    $321 = +HEAPF64[$320>>3];
    $322 = $2;
    $323 = (($322) + 80|0);
    $324 = +HEAPF64[$323>>3];
    $325 = $2;
    $326 = (($325) + 16|0);
    $327 = +HEAPF64[$326>>3];
    $328 = $1;
    $329 = (($328) + 48|0);
    $330 = (($329) + 8|0);
    $331 = (($330) + 120|0);
    $332 = +HEAPF64[$331>>3];
    $333 = $327 - $332;
    $334 = $333 - 1.0;
    $335 = $324 - $334;
    $336 = $321 * $335;
    $337 = $sum;
    $338 = $337 + $336;
    $sum = $338;
   } else {
    $339 = $1;
    $340 = (($339) + 48|0);
    $341 = (($340) + 8|0);
    $342 = (($341) + 24|0);
    $343 = +HEAPF64[$342>>3];
    $344 = $2;
    $345 = (($344) + 16|0);
    $346 = +HEAPF64[$345>>3];
    $347 = $1;
    $348 = (($347) + 48|0);
    $349 = (($348) + 8|0);
    $350 = (($349) + 120|0);
    $351 = +HEAPF64[$350>>3];
    $352 = $346 - $351;
    $353 = $352 + 1.0;
    $354 = $2;
    $355 = (($354) + 80|0);
    $356 = +HEAPF64[$355>>3];
    $357 = $353 - $356;
    $358 = 1.0 / $357;
    $359 = $343 * $358;
    $360 = $sum;
    $361 = $360 + $359;
    $sum = $361;
   }
  }
  $362 = $1;
  $363 = (($362) + 48|0);
  $364 = (($363) + 8|0);
  $365 = (($364) + 64|0);
  $366 = +HEAPF64[$365>>3];
  $367 = $366 != 0.0;
  if ($367) {
   $368 = $2;
   $369 = (($368) + 16|0);
   $370 = +HEAPF64[$369>>3];
   $371 = $1;
   $372 = (($371) + 48|0);
   $373 = (($372) + 8|0);
   $374 = (($373) + 120|0);
   $375 = +HEAPF64[$374>>3];
   $376 = $370 - $375;
   $377 = $2;
   $378 = (($377) + 88|0);
   $379 = +HEAPF64[$378>>3];
   $380 = $376 <= $379;
   if ($380) {
    $381 = $1;
    $382 = (($381) + 48|0);
    $383 = (($382) + 8|0);
    $384 = (($383) + 64|0);
    $385 = +HEAPF64[$384>>3];
    $386 = $2;
    $387 = (($386) + 88|0);
    $388 = +HEAPF64[$387>>3];
    $389 = $2;
    $390 = (($389) + 16|0);
    $391 = +HEAPF64[$390>>3];
    $392 = $1;
    $393 = (($392) + 48|0);
    $394 = (($393) + 8|0);
    $395 = (($394) + 120|0);
    $396 = +HEAPF64[$395>>3];
    $397 = $391 - $396;
    $398 = $397 - 1.0;
    $399 = $388 - $398;
    $400 = $385 * $399;
    $401 = $sum;
    $402 = $401 + $400;
    $sum = $402;
   } else {
    $403 = $1;
    $404 = (($403) + 48|0);
    $405 = (($404) + 8|0);
    $406 = (($405) + 64|0);
    $407 = +HEAPF64[$406>>3];
    $408 = $2;
    $409 = (($408) + 16|0);
    $410 = +HEAPF64[$409>>3];
    $411 = $1;
    $412 = (($411) + 48|0);
    $413 = (($412) + 8|0);
    $414 = (($413) + 120|0);
    $415 = +HEAPF64[$414>>3];
    $416 = $410 - $415;
    $417 = $416 + 1.0;
    $418 = $2;
    $419 = (($418) + 88|0);
    $420 = +HEAPF64[$419>>3];
    $421 = $417 - $420;
    $422 = 1.0 / $421;
    $423 = $407 * $422;
    $424 = $sum;
    $425 = $424 + $423;
    $sum = $425;
   }
  }
 }
 $428 = $1;
 $429 = (($428) + 48|0);
 $430 = (($429) + 8|0);
 $431 = (($430) + 88|0);
 $432 = +HEAPF64[$431>>3];
 $433 = $432 != 0.0;
 if ($433) {
  $434 = $1;
  $435 = (($434) + 48|0);
  $436 = (($435) + 8|0);
  $437 = (($436) + 88|0);
  $438 = +HEAPF64[$437>>3];
  $439 = $2;
  $440 = (($439) + 113|0);
  $441 = HEAP8[$440]|0;
  $442 = $441 << 24 >> 24;
  $443 = (+($442|0));
  $444 = $438 * $443;
  $445 = $sum;
  $446 = $445 + $444;
  $sum = $446;
 }
 $447 = $1;
 $448 = (($447) + 48|0);
 $449 = (($448) + 8|0);
 $450 = (($449) + 104|0);
 $451 = +HEAPF64[$450>>3];
 $452 = $451 != 0.0;
 if ($452) {
  $453 = $1;
  $454 = (($453) + 48|0);
  $455 = (($454) + 8|0);
  $456 = (($455) + 104|0);
  $457 = +HEAPF64[$456>>3];
  $458 = $2;
  $459 = (($458) + 6|0);
  $460 = HEAP16[$459>>1]|0;
  $461 = $460 << 16 >> 16;
  $462 = $2;
  $463 = (($462) + 8|0);
  $464 = HEAP32[$463>>2]|0;
  $465 = (($464) + ($461<<3)|0);
  $466 = +HEAPF64[$465>>3];
  $467 = $457 * $466;
  $468 = $sum;
  $469 = $468 + $467;
  $sum = $469;
 }
 $470 = $2;
 $471 = (__ZL22bf_get_overlaps_targetPK10primer_rec($470)|0);
 $472 = ($471|0)!=(0);
 if (!($472)) {
  $473 = $2;
  $474 = (__ZL27bf_get_infinite_pos_penaltyPK10primer_rec($473)|0);
  $475 = ($474|0)!=(0);
  if ($475) {
   $476 = HEAP32[_stderr>>2]|0;
   $477 = HEAP32[8>>2]|0;
   HEAP32[$vararg_buffer4>>2] = $477;
   $vararg_ptr7 = (($vararg_buffer4) + 4|0);
   HEAP32[$vararg_ptr7>>2] = 56;
   $vararg_ptr8 = (($vararg_buffer4) + 8|0);
   HEAP32[$vararg_ptr8>>2] = 3665;
   $vararg_ptr9 = (($vararg_buffer4) + 12|0);
   HEAP32[$vararg_ptr9>>2] = 11592;
   (_fprintf(($476|0),(16|0),($vararg_buffer4|0))|0);
   _abort();
   // unreachable;
  }
  $478 = $1;
  $479 = (($478) + 48|0);
  $480 = (($479) + 8|0);
  $481 = (($480) + 96|0);
  $482 = +HEAPF64[$481>>3];
  $483 = $482 != 0.0;
  if ($483) {
   $484 = $1;
   $485 = (($484) + 48|0);
   $486 = (($485) + 8|0);
   $487 = (($486) + 96|0);
   $488 = +HEAPF64[$487>>3];
   $489 = $2;
   $490 = (($489) + 32|0);
   $491 = +HEAPF64[$490>>3];
   $492 = $488 * $491;
   $493 = $sum;
   $494 = $493 + $492;
   $sum = $494;
  }
 }
 $495 = $1;
 $496 = (($495) + 48|0);
 $497 = (($496) + 8|0);
 $498 = (($497) + 40|0);
 $499 = +HEAPF64[$498>>3];
 $500 = $499 != 0.0;
 if ($500) {
  $501 = $1;
  $502 = (($501) + 48|0);
  $503 = (($502) + 8|0);
  $504 = (($503) + 40|0);
  $505 = +HEAPF64[$504>>3];
  $506 = $2;
  $507 = (($506) + 48|0);
  $508 = +HEAPF64[$507>>3];
  $509 = $505 * $508;
  $510 = $sum;
  $511 = $510 + $509;
  $sum = $511;
 }
 $512 = $1;
 $513 = (($512) + 48|0);
 $514 = (($513) + 8|0);
 $515 = (($514) + 112|0);
 $516 = +HEAPF64[$515>>3];
 $517 = $516 != 0.0;
 if ($517) {
  $518 = $1;
  $519 = (($518) + 48|0);
  $520 = (($519) + 8|0);
  $521 = (($520) + 112|0);
  $522 = +HEAPF64[$521>>3];
  $523 = $1;
  $524 = (($523) + 44|0);
  $525 = HEAP32[$524>>2]|0;
  $526 = $2;
  $527 = (($526) + 60|0);
  $528 = HEAP32[$527>>2]|0;
  $529 = (($525) - ($528))|0;
  $530 = (+($529|0));
  $531 = $522 * $530;
  $532 = $sum;
  $533 = $532 + $531;
  $sum = $533;
 }
 $534 = $1;
 $535 = (($534) + 48|0);
 $536 = (($535) + 8|0);
 $537 = (($536) + 144|0);
 $538 = +HEAPF64[$537>>3];
 $539 = $538 != 0.0;
 do {
  if ($539) {
   $540 = $1;
   $541 = (($540) + 2508|0);
   $542 = HEAP32[$541>>2]|0;
   $543 = ($542|0)==(0);
   if ($543) {
    $544 = $2;
    $545 = (+_oligo_max_template_mispriming($544));
    $546 = $545 != -1.79769313486231570815E+308;
    if ($546) {
     $549 = $1;
     $550 = (($549) + 48|0);
     $551 = (($550) + 8|0);
     $552 = (($551) + 144|0);
     $553 = +HEAPF64[$552>>3];
     $554 = $2;
     $555 = (+_oligo_max_template_mispriming($554));
     $556 = $553 * $555;
     $557 = $sum;
     $558 = $557 + $556;
     $sum = $558;
     break;
    } else {
     $547 = HEAP32[_stderr>>2]|0;
     $548 = HEAP32[8>>2]|0;
     HEAP32[$vararg_buffer10>>2] = $548;
     $vararg_ptr13 = (($vararg_buffer10) + 4|0);
     HEAP32[$vararg_ptr13>>2] = 56;
     $vararg_ptr14 = (($vararg_buffer10) + 8|0);
     HEAP32[$vararg_ptr14>>2] = 3678;
     $vararg_ptr15 = (($vararg_buffer10) + 12|0);
     HEAP32[$vararg_ptr15>>2] = 11632;
     (_fprintf(($547|0),(16|0),($vararg_buffer10|0))|0);
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $559 = $1;
 $560 = (($559) + 48|0);
 $561 = (($560) + 8|0);
 $562 = (($561) + 152|0);
 $563 = +HEAPF64[$562>>3];
 $564 = $563 != 0.0;
 if ($564) {
  $565 = $1;
  $566 = (($565) + 2508|0);
  $567 = HEAP32[$566>>2]|0;
  $568 = ($567|0)==(1);
  if ($568) {
   $569 = $2;
   $570 = (+_oligo_max_template_mispriming_thermod($569));
   $571 = $570 != -1.79769313486231570815E+308;
   if (!($571)) {
    $572 = HEAP32[_stderr>>2]|0;
    $573 = HEAP32[8>>2]|0;
    HEAP32[$vararg_buffer16>>2] = $573;
    $vararg_ptr19 = (($vararg_buffer16) + 4|0);
    HEAP32[$vararg_ptr19>>2] = 56;
    $vararg_ptr20 = (($vararg_buffer16) + 8|0);
    HEAP32[$vararg_ptr20>>2] = 3685;
    $vararg_ptr21 = (($vararg_buffer16) + 12|0);
    HEAP32[$vararg_ptr21>>2] = 11696;
    (_fprintf(($572|0),(16|0),($vararg_buffer16|0))|0);
    _abort();
    // unreachable;
   }
   $574 = $2;
   $575 = (($574) + 16|0);
   $576 = +HEAPF64[$575>>3];
   $577 = $1;
   $578 = (($577) + 48|0);
   $579 = (($578) + 8|0);
   $580 = (($579) + 120|0);
   $581 = +HEAPF64[$580>>3];
   $582 = $576 - $581;
   $583 = $2;
   $584 = (+_oligo_max_template_mispriming_thermod($583));
   $585 = $582 <= $584;
   if ($585) {
    $586 = $1;
    $587 = (($586) + 48|0);
    $588 = (($587) + 8|0);
    $589 = (($588) + 152|0);
    $590 = +HEAPF64[$589>>3];
    $591 = $2;
    $592 = (+_oligo_max_template_mispriming_thermod($591));
    $593 = $2;
    $594 = (($593) + 16|0);
    $595 = +HEAPF64[$594>>3];
    $596 = $1;
    $597 = (($596) + 48|0);
    $598 = (($597) + 8|0);
    $599 = (($598) + 120|0);
    $600 = +HEAPF64[$599>>3];
    $601 = $595 - $600;
    $602 = $601 - 1.0;
    $603 = $592 - $602;
    $604 = $590 * $603;
    $605 = $sum;
    $606 = $605 + $604;
    $sum = $606;
   }
   $607 = $2;
   $608 = (($607) + 16|0);
   $609 = +HEAPF64[$608>>3];
   $610 = $1;
   $611 = (($610) + 48|0);
   $612 = (($611) + 8|0);
   $613 = (($612) + 120|0);
   $614 = +HEAPF64[$613>>3];
   $615 = $609 - $614;
   $616 = $2;
   $617 = (+_oligo_max_template_mispriming_thermod($616));
   $618 = $615 > $617;
   if ($618) {
    $619 = $1;
    $620 = (($619) + 48|0);
    $621 = (($620) + 8|0);
    $622 = (($621) + 152|0);
    $623 = +HEAPF64[$622>>3];
    $624 = $2;
    $625 = (($624) + 16|0);
    $626 = +HEAPF64[$625>>3];
    $627 = $1;
    $628 = (($627) + 48|0);
    $629 = (($628) + 8|0);
    $630 = (($629) + 120|0);
    $631 = +HEAPF64[$630>>3];
    $632 = $626 - $631;
    $633 = $632 + 1.0;
    $634 = $2;
    $635 = (+_oligo_max_template_mispriming_thermod($634));
    $636 = $633 - $635;
    $637 = 1.0 / $636;
    $638 = $623 * $637;
    $639 = $sum;
    $640 = $639 + $638;
    $sum = $640;
   }
  }
 }
 $641 = $sum;
 $0 = $641;
 $1133 = $0;
 STACKTOP = sp;return (+$1133);
}
function __ZL28free_primer_repeat_sim_scoreP10primer_rec($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $h;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 _free($7);
 $8 = $0;
 $9 = (($8) + 8|0);
 HEAP32[$9>>2] = 0;
 STACKTOP = sp;return;
}
function __ZL36any_5_prime_ol_extension_has_problemPK10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[11576>>2]|0;
 $5 = $3 & $4;
 $6 = ($5|0)!=(0);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function __ZL24add_oligo_to_oligo_arrayP11oligo_array10primer_rec($oarray,$orec) {
 $oarray = $oarray|0;
 $orec = $orec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oarray;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (0|0)==($2|0);
 if ($3) {
  $4 = $0;
  $5 = (($4) + 8|0);
  HEAP32[$5>>2] = 2000;
  $6 = $0;
  $7 = (($6) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8<<7;
  $10 = (__ZL14pr_safe_mallocj($9)|0);
  $11 = $0;
  HEAP32[$11>>2] = $10;
 }
 $12 = $0;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 1)|0;
 $16 = $0;
 $17 = (($16) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($15|0)>=($18|0);
 if ($19) {
  $20 = $0;
  $21 = (($20) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 >> 1;
  $24 = $0;
  $25 = (($24) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + ($23))|0;
  HEAP32[$25>>2] = $27;
  $28 = $0;
  $29 = HEAP32[$28>>2]|0;
  $30 = $0;
  $31 = (($30) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32<<7;
  $34 = (__ZL15pr_safe_reallocPvj($29,$33)|0);
  $35 = $0;
  HEAP32[$35>>2] = $34;
 }
 $36 = $0;
 $37 = (($36) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $0;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + ($38<<7)|0);
 dest=$41+0|0; src=$orec+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $42 = $0;
 $43 = (($42) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + 1)|0;
 HEAP32[$43>>2] = $45;
 STACKTOP = sp;return;
}
function __ZL22bf_get_overlaps_targetPK10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)!=(0);
 $6 = $5&1;
 STACKTOP = sp;return ($6|0);
}
function __ZL27bf_get_infinite_pos_penaltyPK10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 16;
 $5 = ($4|0)!=(0);
 $6 = $5&1;
 STACKTOP = sp;return ($6|0);
}
function __ZL13initialize_opP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 HEAP32[$2>>2] = 0;
 STACKTOP = sp;return;
}
function __ZL27op_set_does_not_amplify_orfP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 134217728;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZL19is_lowercase_maskediPKcP10primer_recP11oligo_stats($position,$sequence,$h,$global_oligo_stats) {
 $position = $position|0;
 $sequence = $sequence|0;
 $h = $h|0;
 $global_oligo_stats = $global_oligo_stats|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $position;
 $2 = $sequence;
 $3 = $h;
 $4 = $global_oligo_stats;
 $5 = $1;
 $6 = $2;
 $7 = (($6) + ($5)|0);
 $p = $7;
 $8 = $p;
 $9 = HEAP8[$8]|0;
 $10 = $9 << 24 >> 24;
 $11 = (97)==($10|0);
 if (!($11)) {
  $12 = $p;
  $13 = HEAP8[$12]|0;
  $14 = $13 << 24 >> 24;
  $15 = (99)==($14|0);
  if (!($15)) {
   $16 = $p;
   $17 = HEAP8[$16]|0;
   $18 = $17 << 24 >> 24;
   $19 = (103)==($18|0);
   if (!($19)) {
    $20 = $p;
    $21 = HEAP8[$20]|0;
    $22 = $21 << 24 >> 24;
    $23 = (116)==($22|0);
    if (!($23)) {
     $0 = 0;
     $29 = $0;
     STACKTOP = sp;return ($29|0);
    }
   }
  }
 }
 $24 = $3;
 __ZL31op_set_overlaps_masked_sequenceP10primer_rec($24);
 $25 = $4;
 $26 = (($25) + 84|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + 1)|0;
 HEAP32[$26>>2] = $28;
 $0 = 1;
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function __ZL17primer_must_matchPK18p3_global_settingsP10primer_recP11oligo_statsPKcPcS8_($pa,$h,$global_oligo_stats,$input_oligo_seq,$match_three_prime,$match_five_prime) {
 $pa = $pa|0;
 $h = $h|0;
 $global_oligo_stats = $global_oligo_stats|0;
 $input_oligo_seq = $input_oligo_seq|0;
 $match_three_prime = $match_three_prime|0;
 $match_five_prime = $match_five_prime|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, $i1 = 0, $length = 0, $seq = 0, $test = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $pa;
 $2 = $h;
 $3 = $global_oligo_stats;
 $4 = $input_oligo_seq;
 $5 = $match_three_prime;
 $6 = $match_five_prime;
 $7 = $2;
 $8 = (($7) + 112|0);
 $9 = HEAP8[$8]|0;
 $10 = $9 << 24 >> 24;
 $11 = (($10) - 5)|0;
 $length = $11;
 $12 = $6;
 $13 = ($12|0)!=(0|0);
 do {
  if ($13) {
   $14 = $4;
   $seq = $14;
   $15 = $6;
   $test = $15;
   $i = 0;
   while(1) {
    $16 = $i;
    $17 = ($16|0)<(5);
    if (!($17)) {
     label = 8;
     break;
    }
    $18 = $seq;
    $19 = HEAP8[$18]|0;
    $20 = $test;
    $21 = HEAP8[$20]|0;
    $22 = (__ZL19compare_nucleotidescc($19,$21)|0);
    $23 = ($22|0)!=(0);
    if (!($23)) {
     break;
    }
    $28 = $seq;
    $29 = (($28) + 1|0);
    $seq = $29;
    $30 = $test;
    $31 = (($30) + 1|0);
    $test = $31;
    $32 = $i;
    $33 = (($32) + 1)|0;
    $i = $33;
   }
   if ((label|0) == 8) {
    break;
   }
   $24 = $3;
   $25 = (($24) + 88|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($26) + 1)|0;
   HEAP32[$25>>2] = $27;
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  }
 } while(0);
 $34 = $5;
 $35 = ($34|0)!=(0|0);
 do {
  if ($35) {
   $36 = $4;
   $seq = $36;
   $37 = $5;
   $test = $37;
   $38 = $seq;
   $39 = $length;
   $40 = (($38) + ($39)|0);
   $seq = $40;
   $i1 = 0;
   while(1) {
    $41 = $i1;
    $42 = ($41|0)<(5);
    if (!($42)) {
     label = 16;
     break;
    }
    $43 = $seq;
    $44 = HEAP8[$43]|0;
    $45 = $test;
    $46 = HEAP8[$45]|0;
    $47 = (__ZL19compare_nucleotidescc($44,$46)|0);
    $48 = ($47|0)!=(0);
    if (!($48)) {
     break;
    }
    $53 = $seq;
    $54 = (($53) + 1|0);
    $seq = $54;
    $55 = $test;
    $56 = (($55) + 1|0);
    $test = $56;
    $57 = $i1;
    $58 = (($57) + 1)|0;
    $i1 = $58;
   }
   if ((label|0) == 16) {
    break;
   }
   $49 = $3;
   $50 = (($49) + 88|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + 1)|0;
   HEAP32[$50>>2] = $52;
   $0 = 1;
   $59 = $0;
   STACKTOP = sp;return ($59|0);
  }
 } while(0);
 $0 = 0;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function __ZL21op_set_must_match_errP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 1073741824;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZL16gc_and_n_contentiiPKcP10primer_rec($start,$len,$sequence,$h) {
 $start = $start|0;
 $len = $len|0;
 $sequence = $sequence|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $num_gc = 0, $num_gcat = 0, $num_n = 0, $p = 0, $stop = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $start;
 $1 = $len;
 $2 = $sequence;
 $3 = $h;
 $4 = $0;
 $5 = $2;
 $6 = (($5) + ($4)|0);
 $p = $6;
 $7 = $p;
 $8 = $1;
 $9 = (($7) + ($8)|0);
 $stop = $9;
 $num_gc = 0;
 $num_gcat = 0;
 $num_n = 0;
 while(1) {
  $10 = $p;
  $11 = $stop;
  $12 = ($10>>>0)<($11>>>0);
  if (!($12)) {
   break;
  }
  $13 = $p;
  $14 = HEAP8[$13]|0;
  $15 = $14 << 24 >> 24;
  $16 = (78)==($15|0);
  if ($16) {
   $17 = $num_n;
   $18 = (($17) + 1)|0;
   $num_n = $18;
  } else {
   $19 = $num_gcat;
   $20 = (($19) + 1)|0;
   $num_gcat = $20;
   $21 = $p;
   $22 = HEAP8[$21]|0;
   $23 = $22 << 24 >> 24;
   $24 = (67)==($23|0);
   if ($24) {
    label = 7;
   } else {
    $25 = $p;
    $26 = HEAP8[$25]|0;
    $27 = $26 << 24 >> 24;
    $28 = (71)==($27|0);
    if ($28) {
     label = 7;
    }
   }
   if ((label|0) == 7) {
    label = 0;
    $29 = $num_gc;
    $30 = (($29) + 1)|0;
    $num_gc = $30;
   }
  }
  $31 = $p;
  $32 = (($31) + 1|0);
  $p = $32;
 }
 $33 = $num_n;
 $34 = $33&255;
 $35 = $3;
 $36 = (($35) + 113|0);
 HEAP8[$36] = $34;
 $37 = $num_gcat;
 $38 = (0)==($37|0);
 if ($38) {
  $39 = $3;
  $40 = (($39) + 24|0);
  HEAPF64[$40>>3] = 0.0;
  STACKTOP = sp;return;
 } else {
  $41 = $num_gc;
  $42 = (+($41|0));
  $43 = 100.0 * $42;
  $44 = $num_gcat;
  $45 = (+($44|0));
  $46 = $43 / $45;
  $47 = $3;
  $48 = (($47) + 24|0);
  HEAPF64[$48>>3] = $46;
  STACKTOP = sp;return;
 }
}
function __ZL18op_set_too_many_nsP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 256;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZL23oligo_overlaps_intervaliiPA2_Kii($start,$len,$intervals,$num_intervals) {
 $start = $start|0;
 $len = $len|0;
 $intervals = $intervals|0;
 $num_intervals = $num_intervals|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $last = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $start;
 $2 = $len;
 $3 = $intervals;
 $4 = $num_intervals;
 $5 = $1;
 $6 = $2;
 $7 = (($5) + ($6))|0;
 $8 = (($7) - 1)|0;
 $last = $8;
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = $4;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   label = 8;
   break;
  }
  $12 = $last;
  $13 = $i;
  $14 = $3;
  $15 = (($14) + ($13<<3)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($12|0)<($16|0);
  if (!($17)) {
   $18 = $1;
   $19 = $i;
   $20 = $3;
   $21 = (($20) + ($19<<3)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $i;
   $24 = $3;
   $25 = (($24) + ($23<<3)|0);
   $26 = (($25) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($22) + ($27))|0;
   $29 = (($28) - 1)|0;
   $30 = ($18|0)>($29|0);
   if (!($30)) {
    label = 5;
    break;
   }
  }
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
 }
 if ((label|0) == 5) {
  $0 = 1;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 else if ((label|0) == 8) {
  $0 = 0;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 return 0|0;
}
function __ZL22bf_set_overlaps_targetP10primer_reci($oligo,$val) {
 $oligo = $oligo|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $val;
 $2 = $1;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = $0;
  $5 = (($4) + 116|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 | 4;
  HEAP32[$5>>2] = $7;
  $8 = $0;
  $9 = (($8) + 116|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 ^ 4;
  HEAP32[$9>>2] = $11;
  STACKTOP = sp;return;
 } else {
  $12 = $0;
  $13 = (($12) + 116|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 | 4;
  HEAP32[$13>>2] = $15;
  STACKTOP = sp;return;
 }
}
function __ZL27bf_set_overlaps_excl_regionP10primer_reci($oligo,$val) {
 $oligo = $oligo|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $val;
 $2 = $1;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = $0;
  $5 = (($4) + 116|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 | 8;
  HEAP32[$5>>2] = $7;
  $8 = $0;
  $9 = (($8) + 116|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 ^ 8;
  HEAP32[$9>>2] = $11;
  STACKTOP = sp;return;
 } else {
  $12 = $0;
  $13 = (($12) + 116|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 | 8;
  HEAP32[$13>>2] = $15;
  STACKTOP = sp;return;
 }
}
function __ZL22op_set_overlaps_targetP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 512;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZL27bf_get_overlaps_excl_regionPK10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 8;
 $5 = ($4|0)!=(0);
 $6 = $5&1;
 STACKTOP = sp;return ($6|0);
}
function __ZL31op_set_overlaps_excluded_regionP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 16384;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZL27op_set_not_in_any_ok_regionP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 128;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZL21op_set_low_gc_contentP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 2048;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZL22op_set_high_gc_contentP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 1024;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZL18op_set_no_gc_glampP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 131072;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZL25op_set_too_many_gc_at_endP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 268435456;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZL22sequence_quality_is_okPK18p3_global_settingsP10primer_rec10oligo_typePK8seq_argsiiP11oligo_statsPK28args_for_one_oligo_or_primer($pa,$h,$l,$sa,$j,$k,$global_oligo_stats,$po_args) {
 $pa = $pa|0;
 $h = $h|0;
 $l = $l|0;
 $sa = $sa|0;
 $j = $j|0;
 $k = $k|0;
 $global_oligo_stats = $global_oligo_stats|0;
 $po_args = $po_args|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $m = 0, $min_q = 0, $min_q_end = 0, $q = 0, $retval = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp;
 $1 = $pa;
 $2 = $h;
 $3 = $l;
 $4 = $sa;
 $5 = $j;
 $6 = $k;
 $7 = $global_oligo_stats;
 $8 = $po_args;
 $retval = 1;
 $9 = $4;
 $10 = (($9) + 8844|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (0|0)==($11|0);
 if ($12) {
  $13 = $1;
  $14 = (($13) + 44|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = (($16) + 60|0);
  HEAP32[$17>>2] = $15;
  $18 = $2;
  $19 = (($18) + 64|0);
  HEAP32[$19>>2] = $15;
  $0 = 1;
  $172 = $0;
  STACKTOP = sp;return ($172|0);
 }
 $20 = $1;
 $21 = (($20) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $q = $22;
 $23 = $8;
 $24 = (($23) + 272|0);
 $25 = HEAP32[$24>>2]|0;
 $min_q = $25;
 $26 = $3;
 $27 = (0)==($26|0);
 if ($27) {
  label = 5;
 } else {
  $28 = $3;
  $29 = (1)==($28|0);
  if ($29) {
   label = 5;
  } else {
   $33 = $min_q;
   $min_q_end = $33;
  }
 }
 if ((label|0) == 5) {
  $30 = $8;
  $31 = (($30) + 268|0);
  $32 = HEAP32[$31>>2]|0;
  $min_q_end = $32;
 }
 $34 = $3;
 $35 = (0)==($34|0);
 if ($35) {
  label = 9;
 } else {
  $36 = $3;
  $37 = (2)==($36|0);
  if ($37) {
   label = 9;
  } else {
   $85 = $3;
   $86 = (1)==($85|0);
   if (!($86)) {
    $134 = HEAP32[_stderr>>2]|0;
    $135 = HEAP32[8>>2]|0;
    HEAP32[$vararg_buffer>>2] = $135;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 56;
    $vararg_ptr2 = (($vararg_buffer) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 3521;
    $vararg_ptr3 = (($vararg_buffer) + 12|0);
    HEAP32[$vararg_ptr3>>2] = 11584;
    (_fprintf(($134|0),(16|0),($vararg_buffer|0))|0);
    _abort();
    // unreachable;
   }
   $87 = $5;
   $i = $87;
   while(1) {
    $88 = $i;
    $89 = $5;
    $90 = (($89) + 5)|0;
    $91 = ($88|0)<($90|0);
    if (!($91)) {
     break;
    }
    $92 = $i;
    $93 = $6;
    $94 = ($92|0)>($93|0);
    if ($94) {
     label = 28;
     break;
    }
    $95 = $i;
    $96 = $4;
    $97 = (($96) + 8832|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (($95) + ($98))|0;
    $100 = $4;
    $101 = (($100) + 8844|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = (($102) + ($99<<2)|0);
    $104 = HEAP32[$103>>2]|0;
    $m = $104;
    $105 = $m;
    $106 = $q;
    $107 = ($105|0)<($106|0);
    if ($107) {
     $108 = $m;
     $q = $108;
    }
    $109 = $i;
    $110 = (($109) + 1)|0;
    $i = $110;
   }
   if ((label|0) == 28) {
   }
   $111 = $q;
   $min_q_end = $111;
   $112 = $5;
   $113 = (($112) + 5)|0;
   $i = $113;
   while(1) {
    $114 = $i;
    $115 = $6;
    $116 = ($114|0)<=($115|0);
    if (!($116)) {
     break;
    }
    $117 = $i;
    $118 = $4;
    $119 = (($118) + 8832|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = (($117) + ($120))|0;
    $122 = $4;
    $123 = (($122) + 8844|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (($124) + ($121<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $m = $126;
    $127 = $m;
    $128 = $q;
    $129 = ($127|0)<($128|0);
    if ($129) {
     $130 = $m;
     $q = $130;
    }
    $131 = $i;
    $132 = (($131) + 1)|0;
    $i = $132;
   }
   $133 = $q;
   $min_q = $133;
  }
 }
 if ((label|0) == 9) {
  $38 = $6;
  $39 = (($38) - 4)|0;
  $i = $39;
  while(1) {
   $40 = $i;
   $41 = $6;
   $42 = ($40|0)<=($41|0);
   if (!($42)) {
    break;
   }
   $43 = $i;
   $44 = $5;
   $45 = ($43|0)<($44|0);
   if ($45) {
   } else {
    $46 = $i;
    $47 = $4;
    $48 = (($47) + 8832|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = (($46) + ($49))|0;
    $51 = $4;
    $52 = (($51) + 8844|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (($53) + ($50<<2)|0);
    $55 = HEAP32[$54>>2]|0;
    $m = $55;
    $56 = $m;
    $57 = $q;
    $58 = ($56|0)<($57|0);
    if ($58) {
     $59 = $m;
     $q = $59;
    }
   }
   $60 = $i;
   $61 = (($60) + 1)|0;
   $i = $61;
  }
  $62 = $q;
  $min_q_end = $62;
  $63 = $5;
  $i = $63;
  while(1) {
   $64 = $i;
   $65 = $6;
   $66 = (($65) - 5)|0;
   $67 = ($64|0)<=($66|0);
   if (!($67)) {
    break;
   }
   $68 = $i;
   $69 = $4;
   $70 = (($69) + 8832|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($68) + ($71))|0;
   $73 = $4;
   $74 = (($73) + 8844|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($75) + ($72<<2)|0);
   $77 = HEAP32[$76>>2]|0;
   $m = $77;
   $78 = $m;
   $79 = $q;
   $80 = ($78|0)<($79|0);
   if ($80) {
    $81 = $m;
    $q = $81;
   }
   $82 = $i;
   $83 = (($82) + 1)|0;
   $i = $83;
  }
  $84 = $q;
  $min_q = $84;
 }
 $136 = $min_q;
 $137 = $2;
 $138 = (($137) + 60|0);
 HEAP32[$138>>2] = $136;
 $139 = $min_q_end;
 $140 = $2;
 $141 = (($140) + 64|0);
 HEAP32[$141>>2] = $139;
 $142 = $2;
 $143 = (($142) + 60|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = $8;
 $146 = (($145) + 272|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = ($144|0)<($147|0);
 if ($148) {
  $149 = $2;
  __ZL27op_set_low_sequence_qualityP10primer_rec($149);
  $150 = $7;
  $151 = (($150) + 64|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = (($152) + 1)|0;
  HEAP32[$151>>2] = $153;
  $retval = 0;
  $154 = $retval;
  $0 = $154;
  $172 = $0;
  STACKTOP = sp;return ($172|0);
 }
 $155 = $3;
 $156 = (0)==($155|0);
 if ($156) {
  label = 46;
 } else {
  $157 = $3;
  $158 = (1)==($157|0);
  if ($158) {
   label = 46;
  }
 }
 if ((label|0) == 46) {
  $159 = $2;
  $160 = (($159) + 64|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = $8;
  $163 = (($162) + 268|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = ($161|0)<($164|0);
  if ($165) {
   $166 = $2;
   __ZL31op_set_low_end_sequence_qualityP10primer_rec($166);
   $167 = $7;
   $168 = (($167) + 64|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = (($169) + 1)|0;
   HEAP32[$168>>2] = $170;
   $retval = 0;
  }
 }
 $171 = $retval;
 $0 = $171;
 $172 = $0;
 STACKTOP = sp;return ($172|0);
}
function __ZL18op_set_high_poly_xP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 524288;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZL13op_set_low_tmP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 8192;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZL14op_set_high_tmP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 4096;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZL25op_set_high_end_stabilityP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 262144;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZL11oligo_complP10primer_recPK28args_for_one_oligo_or_primerP11oligo_statsPK15dpal_arg_holderPKcSA_($h,$po_args,$ostats,$dpal_arg_to_use,$oligo_seq,$revc_oligo_seq) {
 $h = $h|0;
 $po_args = $po_args|0;
 $ostats = $ostats|0;
 $dpal_arg_to_use = $dpal_arg_to_use|0;
 $oligo_seq = $oligo_seq|0;
 $revc_oligo_seq = $revc_oligo_seq|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $0 = $h;
 $1 = $po_args;
 $2 = $ostats;
 $3 = $dpal_arg_to_use;
 $4 = $oligo_seq;
 $5 = $revc_oligo_seq;
 $6 = $0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $8 = HEAP32[_stderr>>2]|0;
  $9 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 56;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 4560;
  $vararg_ptr3 = (($vararg_buffer) + 12|0);
  HEAP32[$vararg_ptr3>>2] = 12712;
  (_fprintf(($8|0),(16|0),($vararg_buffer|0))|0);
  _abort();
  // unreachable;
 }
 $10 = $4;
 $11 = $5;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $14 = (+__ZL5alignPKcS0_PK9dpal_args($10,$11,$13));
 $15 = $0;
 $16 = (($15) + 72|0);
 HEAPF64[$16>>3] = $14;
 $17 = $0;
 $18 = (($17) + 72|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $1;
 $21 = (($20) + 280|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $19 > $22;
 do {
  if ($23) {
   $24 = $0;
   __ZL20op_set_high_self_anyP10primer_rec($24);
   $25 = $2;
   $26 = (($25) + 44|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 1)|0;
   HEAP32[$26>>2] = $28;
   $29 = $2;
   $30 = (($29) + 80|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + -1)|0;
   HEAP32[$30>>2] = $32;
   $33 = $0;
   $34 = (($33) + 114|0);
   $35 = HEAP8[$34]|0;
   $36 = ($35<<24>>24)!=(0);
   if ($36) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $37 = $4;
 $38 = $5;
 $39 = $3;
 $40 = (($39) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (+__ZL5alignPKcS0_PK9dpal_args($37,$38,$41));
 $43 = $0;
 $44 = (($43) + 80|0);
 HEAPF64[$44>>3] = $42;
 $45 = $0;
 $46 = (($45) + 80|0);
 $47 = +HEAPF64[$46>>3];
 $48 = $1;
 $49 = (($48) + 288|0);
 $50 = +HEAPF64[$49>>3];
 $51 = $47 > $50;
 if (!($51)) {
  STACKTOP = sp;return;
 }
 $52 = $0;
 __ZL20op_set_high_self_endP10primer_rec($52);
 $53 = $2;
 $54 = (($53) + 48|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($55) + 1)|0;
 HEAP32[$54>>2] = $56;
 $57 = $2;
 $58 = (($57) + 80|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (($59) + -1)|0;
 HEAP32[$58>>2] = $60;
 $61 = $0;
 $62 = (($61) + 114|0);
 $63 = HEAP8[$62]|0;
 $64 = ($63<<24>>24)!=(0);
 if ($64) {
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZL22p3_ol_is_uninitializedPK10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 $5 = $4&1;
 STACKTOP = sp;return ($5|0);
}
function __ZL19oligo_compl_thermodP10primer_recPK28args_for_one_oligo_or_primerP11oligo_statsPK15thal_arg_holderPKcSA_($h,$po_args,$ostats,$thal_arg_to_use,$oligo_seq,$revc_oligo_seq) {
 $h = $h|0;
 $po_args = $po_args|0;
 $ostats = $ostats|0;
 $thal_arg_to_use = $thal_arg_to_use|0;
 $oligo_seq = $oligo_seq|0;
 $revc_oligo_seq = $revc_oligo_seq|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $0 = $h;
 $1 = $po_args;
 $2 = $ostats;
 $3 = $thal_arg_to_use;
 $4 = $oligo_seq;
 $5 = $revc_oligo_seq;
 $6 = $0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $8 = HEAP32[_stderr>>2]|0;
  $9 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 56;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 4588;
  $vararg_ptr3 = (($vararg_buffer) + 12|0);
  HEAP32[$vararg_ptr3>>2] = 12712;
  (_fprintf(($8|0),(16|0),($vararg_buffer|0))|0);
  _abort();
  // unreachable;
 }
 $10 = $4;
 $11 = $5;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $14 = (+__ZL13align_thermodPKcS0_PK9thal_args($10,$11,$13));
 $15 = $0;
 $16 = (($15) + 72|0);
 HEAPF64[$16>>3] = $14;
 $17 = $0;
 $18 = (($17) + 72|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $1;
 $21 = (($20) + 296|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $19 > $22;
 do {
  if ($23) {
   $24 = $0;
   __ZL20op_set_high_self_anyP10primer_rec($24);
   $25 = $2;
   $26 = (($25) + 44|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 1)|0;
   HEAP32[$26>>2] = $28;
   $29 = $2;
   $30 = (($29) + 80|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + -1)|0;
   HEAP32[$30>>2] = $32;
   $33 = $0;
   $34 = (($33) + 114|0);
   $35 = HEAP8[$34]|0;
   $36 = ($35<<24>>24)!=(0);
   if ($36) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $37 = $4;
 $38 = $5;
 $39 = $3;
 $40 = (($39) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (+__ZL13align_thermodPKcS0_PK9thal_args($37,$38,$41));
 $43 = $0;
 $44 = (($43) + 80|0);
 HEAPF64[$44>>3] = $42;
 $45 = $0;
 $46 = (($45) + 80|0);
 $47 = +HEAPF64[$46>>3];
 $48 = $1;
 $49 = (($48) + 304|0);
 $50 = +HEAPF64[$49>>3];
 $51 = $47 > $50;
 if (!($51)) {
  STACKTOP = sp;return;
 }
 $52 = $0;
 __ZL20op_set_high_self_endP10primer_rec($52);
 $53 = $2;
 $54 = (($53) + 48|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($55) + 1)|0;
 HEAP32[$54>>2] = $56;
 $57 = $2;
 $58 = (($57) + 80|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (($59) + -1)|0;
 HEAP32[$58>>2] = $60;
 $61 = $0;
 $62 = (($61) + 114|0);
 $63 = HEAP8[$62]|0;
 $64 = ($63<<24>>24)!=(0);
 if ($64) {
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZL13oligo_hairpinP10primer_recPK28args_for_one_oligo_or_primerP11oligo_statsPK15thal_arg_holderPKc($h,$po_args,$ostats,$thal_arg_to_use,$oligo_seq) {
 $h = $h|0;
 $po_args = $po_args|0;
 $ostats = $ostats|0;
 $thal_arg_to_use = $thal_arg_to_use|0;
 $oligo_seq = $oligo_seq|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $0 = $h;
 $1 = $po_args;
 $2 = $ostats;
 $3 = $thal_arg_to_use;
 $4 = $oligo_seq;
 $5 = $0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $7 = HEAP32[_stderr>>2]|0;
  $8 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 56;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 4612;
  $vararg_ptr3 = (($vararg_buffer) + 12|0);
  HEAP32[$vararg_ptr3>>2] = 12712;
  (_fprintf(($7|0),(16|0),($vararg_buffer|0))|0);
  _abort();
  // unreachable;
 }
 $9 = $4;
 $10 = $4;
 $11 = $3;
 $12 = (($11) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (+__ZL13align_thermodPKcS0_PK9thal_args($9,$10,$13));
 $15 = $0;
 $16 = (($15) + 88|0);
 HEAPF64[$16>>3] = $14;
 $17 = $0;
 $18 = (($17) + 88|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $1;
 $21 = (($20) + 312|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $19 > $22;
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $0;
 __ZL22op_set_high_hairpin_thP10primer_rec($24);
 $25 = $2;
 $26 = (($25) + 52|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + 1)|0;
 HEAP32[$26>>2] = $28;
 $29 = $2;
 $30 = (($29) + 80|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + -1)|0;
 HEAP32[$30>>2] = $32;
 STACKTOP = sp;return;
}
function __ZL31oligo_repeat_library_misprimingP10primer_recPK18p3_global_settingsPK8seq_args10oligo_typeP11oligo_statsPK15dpal_arg_holder($h,$pa,$sa,$l,$ostats,$dpal_arg_to_use) {
 $h = $h|0;
 $pa = $pa|0;
 $sa = $sa|0;
 $l = $l|0;
 $ostats = $ostats|0;
 $dpal_arg_to_use = $dpal_arg_to_use|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $first = 0, $i = 0, $last = 0, $lib = 0, $max = 0, $max_lib_compl = 0, $min = 0, $s = 0, $s_r = 0, $w = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $s = sp + 58|0;
 $s_r = sp + 95|0;
 $first = sp + 16|0;
 $last = sp + 12|0;
 $0 = $h;
 $1 = $pa;
 $2 = $sa;
 $3 = $l;
 $4 = $ostats;
 $5 = $dpal_arg_to_use;
 $6 = $3;
 $7 = (2)==($6|0);
 if ($7) {
  $8 = $1;
  $9 = (($8) + 400|0);
  $10 = HEAP32[$9>>2]|0;
  $lib = $10;
  $11 = $1;
  $12 = (($11) + 400|0);
  $13 = (($12) + 320|0);
  $14 = +HEAPF64[$13>>3];
  $15 = (~~(($14)));
  $max_lib_compl = $15;
 } else {
  $16 = $1;
  $17 = (($16) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $lib = $18;
  $19 = $1;
  $20 = (($19) + 48|0);
  $21 = (($20) + 320|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (~~(($22)));
  $max_lib_compl = $23;
 }
 $24 = $0;
 $25 = $2;
 $26 = $3;
 __ZL34oligo_compute_sequence_and_reverseP10primer_recPK8seq_args10oligo_typePiS5_PcS6_($24,$25,$26,$first,$last,$s,$s_r);
 $27 = $lib;
 $28 = (_seq_lib_num_seq($27)|0);
 $29 = ($28|0)>(0);
 if (!($29)) {
  STACKTOP = sp;return;
 }
 $30 = $lib;
 $31 = (($30) + 36|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32<<3;
 $34 = (__ZL14pr_safe_mallocj($33)|0);
 $35 = $0;
 $36 = (($35) + 8|0);
 HEAP32[$36>>2] = $34;
 $37 = $0;
 $38 = (($37) + 4|0);
 HEAP16[$38>>1] = 0;
 $39 = $0;
 $40 = (($39) + 6|0);
 HEAP16[$40>>1] = 0;
 $min = 0;
 $max = 0;
 $41 = $lib;
 $42 = HEAP32[$41>>2]|0;
 $43 = HEAP32[$42>>2]|0;
 $44 = $0;
 HEAP32[$44>>2] = $43;
 $i = 0;
 while(1) {
  $45 = $i;
  $46 = $lib;
  $47 = (($46) + 36|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($45|0)<($48|0);
  if (!($49)) {
   label = 35;
   break;
  }
  $50 = $3;
  $51 = (0)==($50|0);
  if ($51) {
   $52 = $i;
   $53 = $lib;
   $54 = (($53) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) + ($52<<3)|0);
   $57 = +HEAPF64[$56>>3];
   $58 = $i;
   $59 = $lib;
   $60 = (($59) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + ($58<<2)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $1;
   $65 = (($64) + 36|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)!=(0);
   if ($67) {
    $68 = $5;
    $69 = (($68) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $74 = $70;
   } else {
    $71 = $5;
    $72 = (($71) + 8|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $73;
   }
   $75 = (+__ZL5alignPKcS0_PK9dpal_args($s,$63,$74));
   $76 = $57 * $75;
   $w = $76;
  } else {
   $77 = $3;
   $78 = (2)==($77|0);
   if ($78) {
    $79 = $i;
    $80 = $lib;
    $81 = (($80) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (($82) + ($79<<3)|0);
    $84 = +HEAPF64[$83>>3];
    $85 = $i;
    $86 = $lib;
    $87 = (($86) + 4|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = (($88) + ($85<<2)|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = $1;
    $92 = (($91) + 36|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)!=(0);
    if ($94) {
     $95 = $5;
     $96 = (($95) + 12|0);
     $97 = HEAP32[$96>>2]|0;
     $100 = $97;
    } else {
     $98 = $5;
     $99 = HEAP32[$98>>2]|0;
     $100 = $99;
    }
    $101 = (+__ZL5alignPKcS0_PK9dpal_args($s,$90,$100));
    $102 = $84 * $101;
    $w = $102;
   } else {
    $103 = $i;
    $104 = $lib;
    $105 = (($104) + 12|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = (($106) + ($103<<3)|0);
    $108 = +HEAPF64[$107>>3];
    $109 = $i;
    $110 = $lib;
    $111 = (($110) + 8|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = (($112) + ($109<<2)|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = $1;
    $116 = (($115) + 36|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)!=(0);
    if ($118) {
     $119 = $5;
     $120 = (($119) + 16|0);
     $121 = HEAP32[$120>>2]|0;
     $124 = $121;
    } else {
     $122 = $5;
     $123 = HEAP32[$122>>2]|0;
     $124 = $123;
    }
    $125 = (+__ZL5alignPKcS0_PK9dpal_args($s_r,$114,$124));
    $126 = $108 * $125;
    $w = $126;
   }
  }
  $127 = $w;
  $128 = $127 > 32767.0;
  if ($128) {
   label = 24;
   break;
  }
  $129 = $w;
  $130 = $129 < -32768.0;
  if ($130) {
   label = 24;
   break;
  }
  $131 = $w;
  $132 = $i;
  $133 = $0;
  $134 = (($133) + 8|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = (($135) + ($132<<3)|0);
  HEAPF64[$136>>3] = $131;
  $137 = $w;
  $138 = $max;
  $139 = (+($138|0));
  $140 = $137 > $139;
  if ($140) {
   $141 = $w;
   $142 = (~~(($141)));
   $max = $142;
   $143 = $i;
   $144 = $143&65535;
   $145 = $0;
   $146 = (($145) + 6|0);
   HEAP16[$146>>1] = $144;
   $147 = $i;
   $148 = $lib;
   $149 = HEAP32[$148>>2]|0;
   $150 = (($149) + ($147<<2)|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = $0;
   HEAP32[$152>>2] = $151;
  }
  $153 = $w;
  $154 = $min;
  $155 = (+($154|0));
  $156 = $153 < $155;
  if ($156) {
   $157 = $w;
   $158 = (~~(($157)));
   $min = $158;
   $159 = $i;
   $160 = $159&65535;
   $161 = $0;
   $162 = (($161) + 4|0);
   HEAP16[$162>>1] = $160;
  }
  $163 = $w;
  $164 = $max_lib_compl;
  $165 = $164 << 16 >> 16;
  $166 = (+($165|0));
  $167 = $163 > $166;
  if ($167) {
   $168 = $0;
   __ZL42op_set_high_similarity_to_non_template_seqP10primer_rec($168);
   $169 = $4;
   $170 = (($169) + 56|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = (($171) + 1)|0;
   HEAP32[$170>>2] = $172;
   $173 = $4;
   $174 = (($173) + 80|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = (($175) + -1)|0;
   HEAP32[$174>>2] = $176;
   $177 = $0;
   $178 = (($177) + 114|0);
   $179 = HEAP8[$178]|0;
   $180 = ($179<<24>>24)!=(0);
   if (!($180)) {
    label = 31;
    break;
   }
  }
  $181 = $i;
  $182 = (($181) + 1)|0;
  $i = $182;
 }
 if ((label|0) == 24) {
  _abort();
  // unreachable;
 }
 else if ((label|0) == 31) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 35) {
  STACKTOP = sp;return;
 }
}
function __ZL25oligo_template_misprimingP10primer_recPK18p3_global_settingsPK8seq_args10oligo_typeP11oligo_statsPK9dpal_argsPK9thal_args($h,$pa,$sa,$l,$ostats,$d_align_args,$t_align_args) {
 $h = $h|0;
 $pa = $pa|0;
 $sa = $sa|0;
 $l = $l|0;
 $ostats = $ostats|0;
 $d_align_args = $d_align_args|0;
 $t_align_args = $t_align_args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $first = 0, $last = 0, $s = 0, $s_r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $s = sp + 73|0;
 $s_r = sp + 36|0;
 $first = sp;
 $last = sp + 16|0;
 $0 = $h;
 $1 = $pa;
 $2 = $sa;
 $3 = $l;
 $4 = $ostats;
 $5 = $d_align_args;
 $6 = $t_align_args;
 $7 = $0;
 $8 = (($7) + 121|0);
 $9 = HEAP8[$8]|0;
 $10 = ($9<<24>>24)!=(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = $0;
 $12 = $2;
 $13 = $3;
 __ZL34oligo_compute_sequence_and_reverseP10primer_recPK8seq_args10oligo_typePiS5_PcS6_($11,$12,$13,$first,$last,$s,$s_r);
 $14 = $3;
 $15 = ($14|0)==(1);
 if (!($15)) {
  $16 = $3;
  $17 = ($16|0)==(0);
  if (!($17)) {
   STACKTOP = sp;return;
  }
 }
 $18 = $1;
 $19 = (($18) + 2508|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0);
 if ($21) {
  $22 = $1;
  $23 = (__ZL28_pr_need_template_misprimingPK18p3_global_settings($22)|0);
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $0;
   $26 = $1;
   $27 = $2;
   $28 = $3;
   $29 = $4;
   $30 = HEAP32[$first>>2]|0;
   $31 = HEAP32[$last>>2]|0;
   $32 = $5;
   __ZL29primer_mispriming_to_templateP10primer_recPK18p3_global_settingsPK8seq_args10oligo_typeP11oligo_statsiiPKcSB_PK9dpal_args($25,$26,$27,$28,$29,$30,$31,$s,$s_r,$32);
  }
 }
 $33 = $1;
 $34 = (($33) + 2508|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(1);
 if ($36) {
  $37 = $1;
  $38 = (__ZL36_pr_need_template_mispriming_thermodPK18p3_global_settings($37)|0);
  $39 = ($38|0)!=(0);
  if ($39) {
   $40 = $0;
   $41 = $1;
   $42 = $2;
   $43 = $3;
   $44 = $4;
   $45 = HEAP32[$first>>2]|0;
   $46 = HEAP32[$last>>2]|0;
   $47 = $6;
   __ZL37primer_mispriming_to_template_thermodP10primer_recPK18p3_global_settingsPK8seq_args10oligo_typeP11oligo_statsiiPKcSB_PK9thal_args($40,$41,$42,$43,$44,$45,$46,$s,$s_r,$47);
  }
 }
 STACKTOP = sp;return;
}
function __ZL15op_set_too_longP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 33554432;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZL16op_set_too_shortP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 67108864;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZL25op_set_completely_writtenP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 2;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZL34oligo_compute_sequence_and_reverseP10primer_recPK8seq_args10oligo_typePiS5_PcS6_($h,$sa,$l,$first,$last,$s,$s_r) {
 $h = $h|0;
 $sa = $sa|0;
 $l = $l|0;
 $first = $first|0;
 $last = $last|0;
 $s = $s|0;
 $s_r = $s_r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $h;
 $1 = $sa;
 $2 = $l;
 $3 = $first;
 $4 = $last;
 $5 = $s;
 $6 = $s_r;
 $7 = $2;
 $8 = (0)==($7|0);
 if ($8) {
  label = 3;
 } else {
  $9 = $2;
  $10 = (2)==($9|0);
  if ($10) {
   label = 3;
  } else {
   $14 = $0;
   $15 = (($14) + 56|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $0;
   $18 = (($17) + 112|0);
   $19 = HEAP8[$18]|0;
   $20 = $19 << 24 >> 24;
   $21 = (($16) - ($20))|0;
   $22 = (($21) + 1)|0;
   $24 = $22;
  }
 }
 if ((label|0) == 3) {
  $11 = $0;
  $12 = (($11) + 56|0);
  $13 = HEAP32[$12>>2]|0;
  $24 = $13;
 }
 $23 = $3;
 HEAP32[$23>>2] = $24;
 $25 = $2;
 $26 = (0)==($25|0);
 if ($26) {
  label = 7;
 } else {
  $27 = $2;
  $28 = (2)==($27|0);
  if ($28) {
   label = 7;
  } else {
   $38 = $0;
   $39 = (($38) + 56|0);
   $40 = HEAP32[$39>>2]|0;
   $42 = $40;
  }
 }
 if ((label|0) == 7) {
  $29 = $0;
  $30 = (($29) + 56|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $0;
  $33 = (($32) + 112|0);
  $34 = HEAP8[$33]|0;
  $35 = $34 << 24 >> 24;
  $36 = (($31) + ($35))|0;
  $37 = (($36) - 1)|0;
  $42 = $37;
 }
 $41 = $4;
 HEAP32[$41>>2] = $42;
 $43 = $1;
 $44 = (($43) + 8868|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $3;
 $47 = HEAP32[$46>>2]|0;
 $48 = $0;
 $49 = (($48) + 112|0);
 $50 = HEAP8[$49]|0;
 $51 = $50 << 24 >> 24;
 $52 = $5;
 __ZL10_pr_substrPKciiPc($45,$47,$51,$52);
 $53 = $5;
 $54 = $6;
 _p3_reverse_complement($53,$54);
 STACKTOP = sp;return;
}
function __ZL28_pr_need_template_misprimingPK18p3_global_settings($pa) {
 $pa = $pa|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pa;
 $1 = $0;
 $2 = (($1) + 48|0);
 $3 = (($2) + 328|0);
 $4 = +HEAPF64[$3>>3];
 $5 = $4 >= 0.0;
 if ($5) {
  $16 = 1;
 } else {
  $6 = $0;
  $7 = (($6) + 48|0);
  $8 = (($7) + 8|0);
  $9 = (($8) + 144|0);
  $10 = +HEAPF64[$9>>3];
  $11 = $10 > 0.0;
  if ($11) {
   $16 = 1;
  } else {
   $12 = $0;
   $13 = (__ZL33_pr_need_pair_template_misprimingPK18p3_global_settings($12)|0);
   $14 = ($13|0)!=(0);
   $16 = $14;
  }
 }
 $15 = $16&1;
 STACKTOP = sp;return ($15|0);
}
function __ZL29primer_mispriming_to_templateP10primer_recPK18p3_global_settingsPK8seq_args10oligo_typeP11oligo_statsiiPKcSB_PK9dpal_args($h,$pa,$sa,$l,$ostats,$first,$last,$s,$s_r,$align_args) {
 $h = $h|0;
 $pa = $pa|0;
 $sa = $sa|0;
 $l = $l|0;
 $ostats = $ostats|0;
 $first = $first|0;
 $last = $last|0;
 $s = $s|0;
 $s_r = $s_r|0;
 $align_args = $align_args|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $debug = 0, $first_untrimmed = 0, $last_untrimmed = 0, $oseq = 0, $seqlen = 0;
 var $target = 0, $target_r = 0, $tmp = 0, $tmp_char = 0, $tmp_score = 0.0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer22 = 0, $vararg_buffer27 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0;
 var $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $vararg_buffer27 = sp;
 $vararg_buffer22 = sp + 96|0;
 $vararg_buffer17 = sp + 16|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer6 = sp + 48|0;
 $vararg_buffer4 = sp + 64|0;
 $vararg_buffer2 = sp + 72|0;
 $vararg_buffer = sp + 80|0;
 $0 = $h;
 $1 = $pa;
 $2 = $sa;
 $3 = $l;
 $4 = $ostats;
 $5 = $first;
 $6 = $last;
 $7 = $s;
 $8 = $s_r;
 $9 = $align_args;
 $debug = 0;
 $10 = $2;
 $11 = (($10) + 8876|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_strlen(($12|0))|0);
 $seqlen = $13;
 $14 = $2;
 $15 = (($14) + 8832|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $5;
 $18 = (($16) + ($17))|0;
 $first_untrimmed = $18;
 $19 = $2;
 $20 = (($19) + 8832|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $6;
 $23 = (($21) + ($22))|0;
 $last_untrimmed = $23;
 $24 = $3;
 $25 = ($24|0)==(0);
 if ($25) {
  $26 = $7;
  $oseq = $26;
  $27 = $2;
  $28 = (($27) + 8876|0);
  $29 = HEAP32[$28>>2]|0;
  $target = $29;
  $30 = $2;
  $31 = (($30) + 8880|0);
  $32 = HEAP32[$31>>2]|0;
  $target_r = $32;
 } else {
  $33 = $debug;
  $34 = ($33|0)!=(0);
  if ($34) {
   $35 = HEAP32[_stderr>>2]|0;
   $36 = $first_untrimmed;
   $37 = $last_untrimmed;
   HEAP32[$vararg_buffer>>2] = $36;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $37;
   (_fprintf(($35|0),(11952|0),($vararg_buffer|0))|0);
  }
  $38 = $8;
  $oseq = $38;
  $39 = $2;
  $40 = (($39) + 8880|0);
  $41 = HEAP32[$40>>2]|0;
  $target = $41;
  $42 = $2;
  $43 = (($42) + 8876|0);
  $44 = HEAP32[$43>>2]|0;
  $target_r = $44;
  $45 = $seqlen;
  $46 = $last_untrimmed;
  $47 = (($45) - ($46))|0;
  $48 = (($47) - 1)|0;
  $tmp = $48;
  $49 = $seqlen;
  $50 = $first_untrimmed;
  $51 = (($49) - ($50))|0;
  $52 = (($51) - 1)|0;
  $last_untrimmed = $52;
  $53 = $tmp;
  $first_untrimmed = $53;
 }
 $54 = $first_untrimmed;
 $55 = $target;
 $56 = (($55) + ($54)|0);
 $57 = HEAP8[$56]|0;
 $tmp_char = $57;
 $58 = $first_untrimmed;
 $59 = $target;
 $60 = (($59) + ($58)|0);
 HEAP8[$60] = 0;
 $61 = $oseq;
 $62 = $target;
 $63 = $9;
 $64 = (+__ZL5alignPKcS0_PK9dpal_args($61,$62,$63));
 $tmp_score = $64;
 $65 = $debug;
 $66 = ($65|0)!=(0);
 if ($66) {
  $67 = $3;
  $68 = ($67|0)==(0);
  if ($68) {
   $69 = HEAP32[_stderr>>2]|0;
   (_fprintf(($69|0),(12000|0),($vararg_buffer2|0))|0);
  } else {
   $70 = HEAP32[_stderr>>2]|0;
   (_fprintf(($70|0),(12032|0),($vararg_buffer4|0))|0);
  }
  $71 = HEAP32[_stderr>>2]|0;
  $72 = $first_untrimmed;
  $73 = $last_untrimmed;
  $74 = $5;
  $75 = $6;
  HEAP32[$vararg_buffer6>>2] = $72;
  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $73;
  $vararg_ptr10 = (($vararg_buffer6) + 8|0);
  HEAP32[$vararg_ptr10>>2] = $74;
  $vararg_ptr11 = (($vararg_buffer6) + 12|0);
  HEAP32[$vararg_ptr11>>2] = $75;
  (_fprintf(($71|0),(12528|0),($vararg_buffer6|0))|0);
  $76 = HEAP32[_stderr>>2]|0;
  $77 = $tmp_score;
  $78 = $oseq;
  $79 = $target;
  HEAPF64[tempDoublePtr>>3]=$77;HEAP32[$vararg_buffer12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer12+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr15 = (($vararg_buffer12) + 8|0);
  HEAP32[$vararg_ptr15>>2] = $78;
  $vararg_ptr16 = (($vararg_buffer12) + 12|0);
  HEAP32[$vararg_ptr16>>2] = $79;
  (_fprintf(($76|0),(12136|0),($vararg_buffer12|0))|0);
 }
 $80 = $tmp_char;
 $81 = $first_untrimmed;
 $82 = $target;
 $83 = (($82) + ($81)|0);
 HEAP8[$83] = $80;
 $84 = $oseq;
 $85 = $target;
 $86 = $last_untrimmed;
 $87 = (($85) + ($86)|0);
 $88 = (($87) + 1|0);
 $89 = $9;
 $90 = (+__ZL5alignPKcS0_PK9dpal_args($84,$88,$89));
 $91 = $0;
 $92 = (($91) + 96|0);
 HEAPF64[$92>>3] = $90;
 $93 = $debug;
 $94 = ($93|0)!=(0);
 if ($94) {
  $95 = HEAP32[_stderr>>2]|0;
  $96 = $0;
  $97 = (($96) + 96|0);
  $98 = +HEAPF64[$97>>3];
  $99 = $oseq;
  $100 = $target;
  $101 = $last_untrimmed;
  $102 = (($100) + ($101)|0);
  $103 = (($102) + 1|0);
  HEAPF64[tempDoublePtr>>3]=$98;HEAP32[$vararg_buffer17>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer17+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr20 = (($vararg_buffer17) + 8|0);
  HEAP32[$vararg_ptr20>>2] = $99;
  $vararg_ptr21 = (($vararg_buffer17) + 12|0);
  HEAP32[$vararg_ptr21>>2] = $103;
  (_fprintf(($95|0),(12184|0),($vararg_buffer17|0))|0);
 }
 $104 = $tmp_score;
 $105 = $0;
 $106 = (($105) + 96|0);
 $107 = +HEAPF64[$106>>3];
 $108 = $104 > $107;
 if ($108) {
  $109 = $tmp_score;
  $110 = $0;
  $111 = (($110) + 96|0);
  HEAPF64[$111>>3] = $109;
 }
 $112 = $oseq;
 $113 = $target_r;
 $114 = $9;
 $115 = (+__ZL5alignPKcS0_PK9dpal_args($112,$113,$114));
 $116 = $0;
 $117 = (($116) + 104|0);
 HEAPF64[$117>>3] = $115;
 $118 = $debug;
 $119 = ($118|0)!=(0);
 if ($119) {
  $120 = HEAP32[_stderr>>2]|0;
  $121 = $0;
  $122 = (($121) + 104|0);
  $123 = +HEAPF64[$122>>3];
  $124 = $oseq;
  $125 = $target_r;
  HEAPF64[tempDoublePtr>>3]=$123;HEAP32[$vararg_buffer22>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer22+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr25 = (($vararg_buffer22) + 8|0);
  HEAP32[$vararg_ptr25>>2] = $124;
  $vararg_ptr26 = (($vararg_buffer22) + 12|0);
  HEAP32[$vararg_ptr26>>2] = $125;
  (_fprintf(($120|0),(12600|0),($vararg_buffer22|0))|0);
 }
 $126 = $1;
 $127 = (($126) + 48|0);
 $128 = (($127) + 328|0);
 $129 = +HEAPF64[$128>>3];
 $130 = $129 >= 0.0;
 if (!($130)) {
  STACKTOP = sp;return;
 }
 $131 = $0;
 $132 = (+_oligo_max_template_mispriming($131));
 $133 = $1;
 $134 = (($133) + 48|0);
 $135 = (($134) + 328|0);
 $136 = +HEAPF64[$135>>3];
 $137 = $132 > $136;
 if ($137) {
  $138 = $0;
  __ZL49op_set_high_similarity_to_multiple_template_sitesP10primer_rec($138);
  $139 = $3;
  $140 = (0)==($139|0);
  if (!($140)) {
   $141 = $3;
   $142 = (1)==($141|0);
   if (!($142)) {
    $151 = HEAP32[_stderr>>2]|0;
    $152 = HEAP32[8>>2]|0;
    HEAP32[$vararg_buffer27>>2] = $152;
    $vararg_ptr30 = (($vararg_buffer27) + 4|0);
    HEAP32[$vararg_ptr30>>2] = 56;
    $vararg_ptr31 = (($vararg_buffer27) + 8|0);
    HEAP32[$vararg_ptr31>>2] = 4720;
    $vararg_ptr32 = (($vararg_buffer27) + 12|0);
    HEAP32[$vararg_ptr32>>2] = 11584;
    (_fprintf(($151|0),(16|0),($vararg_buffer27|0))|0);
    _abort();
    // unreachable;
   }
  }
  $143 = $4;
  $144 = (($143) + 76|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = (($145) + 1)|0;
  HEAP32[$144>>2] = $146;
  $147 = $4;
  $148 = (($147) + 80|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (($149) + -1)|0;
  HEAP32[$148>>2] = $150;
 } else {
  $153 = $0;
  $154 = (($153) + 121|0);
  HEAP8[$154] = 1;
 }
 STACKTOP = sp;return;
}
function __ZL36_pr_need_template_mispriming_thermodPK18p3_global_settings($pa) {
 $pa = $pa|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pa;
 $1 = $0;
 $2 = (($1) + 48|0);
 $3 = (($2) + 336|0);
 $4 = +HEAPF64[$3>>3];
 $5 = $4 >= 0.0;
 if ($5) {
  $16 = 1;
 } else {
  $6 = $0;
  $7 = (($6) + 48|0);
  $8 = (($7) + 8|0);
  $9 = (($8) + 152|0);
  $10 = +HEAPF64[$9>>3];
  $11 = $10 > 0.0;
  if ($11) {
   $16 = 1;
  } else {
   $12 = $0;
   $13 = (__ZL41_pr_need_pair_template_mispriming_thermodPK18p3_global_settings($12)|0);
   $14 = ($13|0)!=(0);
   $16 = $14;
  }
 }
 $15 = $16&1;
 STACKTOP = sp;return ($15|0);
}
function __ZL37primer_mispriming_to_template_thermodP10primer_recPK18p3_global_settingsPK8seq_args10oligo_typeP11oligo_statsiiPKcSB_PK9thal_args($h,$pa,$sa,$l,$ostats,$first,$last,$s,$s_r,$align_args) {
 $h = $h|0;
 $pa = $pa|0;
 $sa = $sa|0;
 $l = $l|0;
 $ostats = $ostats|0;
 $first = $first|0;
 $last = $last|0;
 $s = $s|0;
 $s_r = $s_r|0;
 $align_args = $align_args|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $debug = 0, $first_untrimmed = 0, $last_untrimmed = 0, $oseq = 0, $seqlen = 0;
 var $target = 0, $target_r = 0, $tmp = 0, $tmp_char = 0, $tmp_score = 0.0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer22 = 0, $vararg_buffer27 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0;
 var $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $vararg_buffer27 = sp;
 $vararg_buffer22 = sp + 96|0;
 $vararg_buffer17 = sp + 16|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer6 = sp + 48|0;
 $vararg_buffer4 = sp + 64|0;
 $vararg_buffer2 = sp + 72|0;
 $vararg_buffer = sp + 80|0;
 $0 = $h;
 $1 = $pa;
 $2 = $sa;
 $3 = $l;
 $4 = $ostats;
 $5 = $first;
 $6 = $last;
 $7 = $s;
 $8 = $s_r;
 $9 = $align_args;
 $debug = 0;
 $10 = $2;
 $11 = (($10) + 8876|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_strlen(($12|0))|0);
 $seqlen = $13;
 $14 = $2;
 $15 = (($14) + 8832|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $5;
 $18 = (($16) + ($17))|0;
 $first_untrimmed = $18;
 $19 = $2;
 $20 = (($19) + 8832|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $6;
 $23 = (($21) + ($22))|0;
 $last_untrimmed = $23;
 $24 = $3;
 $25 = ($24|0)==(1);
 if ($25) {
  $26 = $8;
  $oseq = $26;
  $27 = $2;
  $28 = (($27) + 8876|0);
  $29 = HEAP32[$28>>2]|0;
  $target = $29;
  $30 = $2;
  $31 = (($30) + 8880|0);
  $32 = HEAP32[$31>>2]|0;
  $target_r = $32;
 } else {
  $33 = $debug;
  $34 = ($33|0)!=(0);
  if ($34) {
   $35 = HEAP32[_stdout>>2]|0;
   $36 = $first_untrimmed;
   $37 = $last_untrimmed;
   HEAP32[$vararg_buffer>>2] = $36;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $37;
   (_fprintf(($35|0),(11952|0),($vararg_buffer|0))|0);
  }
  $38 = $7;
  $oseq = $38;
  $39 = $2;
  $40 = (($39) + 8880|0);
  $41 = HEAP32[$40>>2]|0;
  $target = $41;
  $42 = $2;
  $43 = (($42) + 8876|0);
  $44 = HEAP32[$43>>2]|0;
  $target_r = $44;
  $45 = $seqlen;
  $46 = $last_untrimmed;
  $47 = (($45) - ($46))|0;
  $48 = (($47) - 1)|0;
  $tmp = $48;
  $49 = $seqlen;
  $50 = $first_untrimmed;
  $51 = (($49) - ($50))|0;
  $52 = (($51) - 1)|0;
  $last_untrimmed = $52;
  $53 = $tmp;
  $first_untrimmed = $53;
 }
 $54 = $first_untrimmed;
 $55 = $target;
 $56 = (($55) + ($54)|0);
 $57 = HEAP8[$56]|0;
 $tmp_char = $57;
 $58 = $first_untrimmed;
 $59 = $target;
 $60 = (($59) + ($58)|0);
 HEAP8[$60] = 0;
 $61 = $oseq;
 $62 = $target;
 $63 = $9;
 $64 = (+__ZL13align_thermodPKcS0_PK9thal_args($61,$62,$63));
 $tmp_score = $64;
 $65 = $debug;
 $66 = ($65|0)!=(0);
 if ($66) {
  $67 = $3;
  $68 = ($67|0)==(0);
  if ($68) {
   $69 = HEAP32[_stdout>>2]|0;
   (_fprintf(($69|0),(12000|0),($vararg_buffer2|0))|0);
  } else {
   $70 = HEAP32[_stdout>>2]|0;
   (_fprintf(($70|0),(12032|0),($vararg_buffer4|0))|0);
  }
  $71 = HEAP32[_stdout>>2]|0;
  $72 = $first_untrimmed;
  $73 = $last_untrimmed;
  $74 = $5;
  $75 = $6;
  HEAP32[$vararg_buffer6>>2] = $72;
  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $73;
  $vararg_ptr10 = (($vararg_buffer6) + 8|0);
  HEAP32[$vararg_ptr10>>2] = $74;
  $vararg_ptr11 = (($vararg_buffer6) + 12|0);
  HEAP32[$vararg_ptr11>>2] = $75;
  (_fprintf(($71|0),(12064|0),($vararg_buffer6|0))|0);
  $76 = HEAP32[_stdout>>2]|0;
  $77 = $tmp_score;
  $78 = $oseq;
  $79 = $target;
  HEAPF64[tempDoublePtr>>3]=$77;HEAP32[$vararg_buffer12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer12+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr15 = (($vararg_buffer12) + 8|0);
  HEAP32[$vararg_ptr15>>2] = $78;
  $vararg_ptr16 = (($vararg_buffer12) + 12|0);
  HEAP32[$vararg_ptr16>>2] = $79;
  (_fprintf(($76|0),(12136|0),($vararg_buffer12|0))|0);
 }
 $80 = $tmp_char;
 $81 = $first_untrimmed;
 $82 = $target;
 $83 = (($82) + ($81)|0);
 HEAP8[$83] = $80;
 $84 = $oseq;
 $85 = $target;
 $86 = $last_untrimmed;
 $87 = (($85) + ($86)|0);
 $88 = (($87) + 1|0);
 $89 = $9;
 $90 = (+__ZL13align_thermodPKcS0_PK9thal_args($84,$88,$89));
 $91 = $0;
 $92 = (($91) + 96|0);
 HEAPF64[$92>>3] = $90;
 $93 = $debug;
 $94 = ($93|0)!=(0);
 if ($94) {
  $95 = HEAP32[_stdout>>2]|0;
  $96 = $0;
  $97 = (($96) + 96|0);
  $98 = +HEAPF64[$97>>3];
  $99 = $oseq;
  $100 = $target;
  $101 = $last_untrimmed;
  $102 = (($100) + ($101)|0);
  $103 = (($102) + 1|0);
  HEAPF64[tempDoublePtr>>3]=$98;HEAP32[$vararg_buffer17>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer17+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr20 = (($vararg_buffer17) + 8|0);
  HEAP32[$vararg_ptr20>>2] = $99;
  $vararg_ptr21 = (($vararg_buffer17) + 12|0);
  HEAP32[$vararg_ptr21>>2] = $103;
  (_fprintf(($95|0),(12184|0),($vararg_buffer17|0))|0);
 }
 $104 = $tmp_score;
 $105 = $0;
 $106 = (($105) + 96|0);
 $107 = +HEAPF64[$106>>3];
 $108 = $104 > $107;
 if ($108) {
  $109 = $tmp_score;
  $110 = $0;
  $111 = (($110) + 96|0);
  HEAPF64[$111>>3] = $109;
 }
 $112 = $oseq;
 $113 = $target_r;
 $114 = $9;
 $115 = (+__ZL13align_thermodPKcS0_PK9thal_args($112,$113,$114));
 $116 = $0;
 $117 = (($116) + 104|0);
 HEAPF64[$117>>3] = $115;
 $118 = $debug;
 $119 = ($118|0)!=(0);
 if ($119) {
  $120 = HEAP32[_stdout>>2]|0;
  $121 = $0;
  $122 = (($121) + 104|0);
  $123 = +HEAPF64[$122>>3];
  $124 = $oseq;
  $125 = $target_r;
  HEAPF64[tempDoublePtr>>3]=$123;HEAP32[$vararg_buffer22>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer22+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr25 = (($vararg_buffer22) + 8|0);
  HEAP32[$vararg_ptr25>>2] = $124;
  $vararg_ptr26 = (($vararg_buffer22) + 12|0);
  HEAP32[$vararg_ptr26>>2] = $125;
  (_fprintf(($120|0),(12232|0),($vararg_buffer22|0))|0);
 }
 $126 = $1;
 $127 = (($126) + 48|0);
 $128 = (($127) + 336|0);
 $129 = +HEAPF64[$128>>3];
 $130 = $129 >= 0.0;
 if (!($130)) {
  STACKTOP = sp;return;
 }
 $131 = $0;
 $132 = (+_oligo_max_template_mispriming_thermod($131));
 $133 = $1;
 $134 = (($133) + 48|0);
 $135 = (($134) + 336|0);
 $136 = +HEAPF64[$135>>3];
 $137 = $132 > $136;
 if ($137) {
  $138 = $0;
  __ZL49op_set_high_similarity_to_multiple_template_sitesP10primer_rec($138);
  $139 = $3;
  $140 = (0)==($139|0);
  if (!($140)) {
   $141 = $3;
   $142 = (1)==($141|0);
   if (!($142)) {
    $151 = HEAP32[_stderr>>2]|0;
    $152 = HEAP32[8>>2]|0;
    HEAP32[$vararg_buffer27>>2] = $152;
    $vararg_ptr30 = (($vararg_buffer27) + 4|0);
    HEAP32[$vararg_ptr30>>2] = 56;
    $vararg_ptr31 = (($vararg_buffer27) + 8|0);
    HEAP32[$vararg_ptr31>>2] = 4828;
    $vararg_ptr32 = (($vararg_buffer27) + 12|0);
    HEAP32[$vararg_ptr32>>2] = 11584;
    (_fprintf(($151|0),(16|0),($vararg_buffer27|0))|0);
    _abort();
    // unreachable;
   }
  }
  $143 = $4;
  $144 = (($143) + 76|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = (($145) + 1)|0;
  HEAP32[$144>>2] = $146;
  $147 = $4;
  $148 = (($147) + 80|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (($149) + -1)|0;
  HEAP32[$148>>2] = $150;
 } else {
  $153 = $0;
  $154 = (($153) + 121|0);
  HEAP8[$154] = 1;
 }
 STACKTOP = sp;return;
}
function __ZL13align_thermodPKcS0_PK9thal_args($s1,$s2,$a) {
 $s1 = $s1|0;
 $s2 = $s2|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0.0, $65 = 0.0, $7 = 0, $8 = 0, $9 = 0, $r = 0, $thal_trace = 0, $vararg_buffer = 0, $vararg_buffer17 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0;
 var $vararg_ptr22 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0;
 $vararg_buffer17 = sp + 360|0;
 $vararg_buffer9 = sp;
 $vararg_buffer = sp + 32|0;
 $r = sp + 88|0;
 $0 = $s1;
 $1 = $s2;
 $2 = $a;
 $thal_trace = 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __Z4thalPKhS0_PK9thal_argsP12thal_results(($3|0),($4|0),($5|0),($r|0));
 $6 = $thal_trace;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = HEAP32[_stdout>>2]|0;
  $9 = $2;
  $10 = (($9) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  $13 = (($12) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $2;
  $16 = (($15) + 16|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $2;
  $19 = (($18) + 24|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $2;
  $22 = (($21) + 32|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $2;
  $25 = (($24) + 40|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $2;
  $28 = (($27) + 48|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $2;
  $31 = (($30) + 56|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $2;
  $34 = (($33) + 60|0);
  $35 = HEAP32[$34>>2]|0;
  HEAP32[$vararg_buffer>>2] = $11;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $14;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAPF64[tempDoublePtr>>3]=$17;HEAP32[$vararg_ptr2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr3 = (($vararg_buffer) + 16|0);
  HEAPF64[tempDoublePtr>>3]=$20;HEAP32[$vararg_ptr3>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr3+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr4 = (($vararg_buffer) + 24|0);
  HEAPF64[tempDoublePtr>>3]=$23;HEAP32[$vararg_ptr4>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr4+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr5 = (($vararg_buffer) + 32|0);
  HEAPF64[tempDoublePtr>>3]=$26;HEAP32[$vararg_ptr5>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr5+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr6 = (($vararg_buffer) + 40|0);
  HEAPF64[tempDoublePtr>>3]=$29;HEAP32[$vararg_ptr6>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr6+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr7 = (($vararg_buffer) + 48|0);
  HEAP32[$vararg_ptr7>>2] = $32;
  $vararg_ptr8 = (($vararg_buffer) + 52|0);
  HEAP32[$vararg_ptr8>>2] = $35;
  (_fprintf(($8|0),(12328|0),($vararg_buffer|0))|0);
  $36 = HEAP32[_stdout>>2]|0;
  $37 = $0;
  $38 = $1;
  $39 = (($r) + 256|0);
  $40 = +HEAPF64[$39>>3];
  $41 = (($r) + 264|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($r) + 268|0);
  $44 = HEAP32[$43>>2]|0;
  HEAP32[$vararg_buffer9>>2] = $37;
  $vararg_ptr12 = (($vararg_buffer9) + 4|0);
  HEAP32[$vararg_ptr12>>2] = $38;
  $vararg_ptr13 = (($vararg_buffer9) + 8|0);
  HEAPF64[tempDoublePtr>>3]=$40;HEAP32[$vararg_ptr13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr13+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $vararg_ptr14 = (($vararg_buffer9) + 16|0);
  HEAP32[$vararg_ptr14>>2] = $r;
  $vararg_ptr15 = (($vararg_buffer9) + 20|0);
  HEAP32[$vararg_ptr15>>2] = $42;
  $vararg_ptr16 = (($vararg_buffer9) + 24|0);
  HEAP32[$vararg_ptr16>>2] = $44;
  (_fprintf(($36|0),(12432|0),($vararg_buffer9|0))|0);
 }
 $45 = (($r) + 256|0);
 $46 = +HEAPF64[$45>>3];
 $47 = $46 <= 1.79769313486231570815E+308;
 if (!($47)) {
  $48 = HEAP32[_stderr>>2]|0;
  $49 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer17>>2] = $49;
  $vararg_ptr20 = (($vararg_buffer17) + 4|0);
  HEAP32[$vararg_ptr20>>2] = 56;
  $vararg_ptr21 = (($vararg_buffer17) + 8|0);
  HEAP32[$vararg_ptr21>>2] = 4493;
  $vararg_ptr22 = (($vararg_buffer17) + 12|0);
  HEAP32[$vararg_ptr22>>2] = 12488;
  (_fprintf(($48|0),(16|0),($vararg_buffer17|0))|0);
  _abort();
  // unreachable;
 }
 $50 = (($r) + 256|0);
 $51 = +HEAPF64[$50>>3];
 $52 = +HEAPF64[__INFINITY>>3];
 $53 = -$52;
 $54 = $51 == $53;
 if (!($54)) {
  $60 = (($r) + 256|0);
  $61 = +HEAPF64[$60>>3];
  $62 = $61 < 0.0;
  if ($62) {
   $65 = 0.0;
   STACKTOP = sp;return (+$65);
  } else {
   $63 = (($r) + 256|0);
   $64 = +HEAPF64[$63>>3];
   $65 = $64;
   STACKTOP = sp;return (+$65);
  }
 }
 $55 = (___errno_location()|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($56|0)==(12);
 if ($57) {
  _longjmp((264|0),1);
  // unreachable;
 }
 $58 = (__ZL11_set_stringPPcPKc(432,$r)|0);
 $59 = ($58|0)!=(0);
 if ($59) {
  _longjmp((264|0),1);
  // unreachable;
 }
 HEAP32[424>>2] = 1;
 _longjmp((264|0),1);
 // unreachable;
 return +0;
}
function __ZL49op_set_high_similarity_to_multiple_template_sitesP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 8388608;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZL41_pr_need_pair_template_mispriming_thermodPK18p3_global_settings($pa) {
 $pa = $pa|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pa;
 $1 = $0;
 $2 = (($1) + 2456|0);
 $3 = +HEAPF64[$2>>3];
 $4 = $3 >= 0.0;
 if ($4) {
  $11 = 1;
 } else {
  $5 = $0;
  $6 = (($5) + 2520|0);
  $7 = (($6) + 112|0);
  $8 = +HEAPF64[$7>>3];
  $9 = $8 > 0.0;
  $11 = $9;
 }
 $10 = $11&1;
 STACKTOP = sp;return ($10|0);
}
function __ZL5alignPKcS0_PK9dpal_args($s1,$s2,$a) {
 $s1 = $s1|0;
 $s2 = $s2|0;
 $a = $a|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 12896|0;
 $vararg_buffer7 = sp + 12856|0;
 $vararg_buffer4 = sp;
 $vararg_buffer = sp + 8|0;
 $r = sp + 32|0;
 $1 = $s1;
 $2 = $s2;
 $3 = $a;
 $4 = $3;
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  label = 3;
 } else {
  $8 = $3;
  $9 = (($8) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(3);
  if ($11) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $12 = $2;
   $13 = (_strlen(($12|0))|0);
   $14 = ($13>>>0)<(3);
   if (!($14)) {
    break;
   }
   $15 = $2;
   $16 = (_strlen(($15|0))|0);
   $17 = (+($16>>>0));
   $0 = $17;
   $46 = $0;
   STACKTOP = sp;return (+$46);
  }
 } while(0);
 $18 = $1;
 $19 = $2;
 $20 = $3;
 _dpal(($18|0),($19|0),($20|0),($r|0));
 $21 = (($r) + 12816|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $22 <= 32767.0;
 if (!($23)) {
  $24 = HEAP32[_stderr>>2]|0;
  $25 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $25;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 56;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 4446;
  $vararg_ptr3 = (($vararg_buffer) + 12|0);
  HEAP32[$vararg_ptr3>>2] = 12648;
  (_fprintf(($24|0),(16|0),($vararg_buffer|0))|0);
  _abort();
  // unreachable;
 }
 $26 = (($r) + 12816|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $27 == -2147483648.0;
 if ($28) {
  $29 = (___errno_location()|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(12);
  if ($31) {
   _longjmp((264|0),1);
   // unreachable;
  }
  $32 = HEAP32[_stderr>>2]|0;
  $33 = HEAP32[$r>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $33;
  (_fprintf(($32|0),(12672|0),($vararg_buffer4|0))|0);
  $34 = (($r) + 12816|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $35 != -2147483648.0;
  if (!($36)) {
   $37 = HEAP32[_stderr>>2]|0;
   $38 = HEAP32[8>>2]|0;
   HEAP32[$vararg_buffer7>>2] = $38;
   $vararg_ptr10 = (($vararg_buffer7) + 4|0);
   HEAP32[$vararg_ptr10>>2] = 56;
   $vararg_ptr11 = (($vararg_buffer7) + 8|0);
   HEAP32[$vararg_ptr11>>2] = 4457;
   $vararg_ptr12 = (($vararg_buffer7) + 12|0);
   HEAP32[$vararg_ptr12>>2] = 12680;
   (_fprintf(($37|0),(16|0),($vararg_buffer7|0))|0);
   _abort();
   // unreachable;
  }
 }
 $39 = (($r) + 12816|0);
 $40 = +HEAPF64[$39>>3];
 $41 = $40 < 0.0;
 if ($41) {
  $45 = 0.0;
 } else {
  $42 = (($r) + 12816|0);
  $43 = +HEAPF64[$42>>3];
  $44 = $43 / 100.0;
  $45 = $44;
 }
 $0 = $45;
 $46 = $0;
 STACKTOP = sp;return (+$46);
}
function __ZL33_pr_need_pair_template_misprimingPK18p3_global_settings($pa) {
 $pa = $pa|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pa;
 $1 = $0;
 $2 = (($1) + 2448|0);
 $3 = +HEAPF64[$2>>3];
 $4 = $3 >= 0.0;
 if ($4) {
  $11 = 1;
 } else {
  $5 = $0;
  $6 = (($5) + 2520|0);
  $7 = (($6) + 104|0);
  $8 = +HEAPF64[$7>>3];
  $9 = $8 > 0.0;
  $11 = $9;
 }
 $10 = $11&1;
 STACKTOP = sp;return ($10|0);
}
function __ZL42op_set_high_similarity_to_non_template_seqP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 4194304;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZL22op_set_high_hairpin_thP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 536870912;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZL20op_set_high_self_anyP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 32768;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZL20op_set_high_self_endP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 65536;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZL27op_set_low_sequence_qualityP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 1048576;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZL31op_set_low_end_sequence_qualityP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 2097152;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZL19compare_nucleotidescc($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $a;
 $2 = $b;
 $3 = $1;
 $x = $3;
 $4 = $2;
 $y = $4;
 $5 = $1;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)>=(97);
 if ($7) {
  $8 = $1;
  $9 = $8 << 24 >> 24;
  $10 = ($9|0)<=(122);
  if ($10) {
   $11 = $1;
   $12 = $11 << 24 >> 24;
   $13 = (65 + ($12))|0;
   $14 = (($13) - 97)|0;
   $15 = $14&255;
   $x = $15;
  }
 }
 $16 = $2;
 $17 = $16 << 24 >> 24;
 $18 = ($17|0)>=(98);
 if ($18) {
  $19 = $2;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)<=(122);
  if ($21) {
   $22 = $2;
   $23 = $22 << 24 >> 24;
   $24 = (65 + ($23))|0;
   $25 = (($24) - 97)|0;
   $26 = $25&255;
   $y = $26;
  }
 }
 $27 = $x;
 $28 = $27 << 24 >> 24;
 $29 = $y;
 $30 = $29 << 24 >> 24;
 $31 = ($28|0)==($30|0);
 if ($31) {
  $0 = 1;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 $32 = $x;
 $33 = $32 << 24 >> 24;
 $34 = ($33|0)==(78);
 if (!($34)) {
  $35 = $y;
  $36 = $35 << 24 >> 24;
  $37 = ($36|0)==(78);
  if (!($37)) {
   $38 = $x;
   $39 = $38 << 24 >> 24;
   $40 = ($39|0)==(65);
   do {
    if ($40) {
     $41 = $y;
     $42 = $41 << 24 >> 24;
     $43 = ($42|0)==(82);
     if (!($43)) {
      $44 = $y;
      $45 = $44 << 24 >> 24;
      $46 = ($45|0)==(87);
      if (!($46)) {
       $47 = $y;
       $48 = $47 << 24 >> 24;
       $49 = ($48|0)==(77);
       if (!($49)) {
        $50 = $y;
        $51 = $50 << 24 >> 24;
        $52 = ($51|0)==(72);
        if (!($52)) {
         $53 = $y;
         $54 = $53 << 24 >> 24;
         $55 = ($54|0)==(68);
         if (!($55)) {
          $56 = $y;
          $57 = $56 << 24 >> 24;
          $58 = ($57|0)==(86);
          if (!($58)) {
           break;
          }
         }
        }
       }
      }
     }
     $0 = 1;
     $122 = $0;
     STACKTOP = sp;return ($122|0);
    }
   } while(0);
   $59 = $x;
   $60 = $59 << 24 >> 24;
   $61 = ($60|0)==(71);
   do {
    if ($61) {
     $62 = $y;
     $63 = $62 << 24 >> 24;
     $64 = ($63|0)==(82);
     if (!($64)) {
      $65 = $y;
      $66 = $65 << 24 >> 24;
      $67 = ($66|0)==(83);
      if (!($67)) {
       $68 = $y;
       $69 = $68 << 24 >> 24;
       $70 = ($69|0)==(75);
       if (!($70)) {
        $71 = $y;
        $72 = $71 << 24 >> 24;
        $73 = ($72|0)==(66);
        if (!($73)) {
         $74 = $y;
         $75 = $74 << 24 >> 24;
         $76 = ($75|0)==(68);
         if (!($76)) {
          $77 = $y;
          $78 = $77 << 24 >> 24;
          $79 = ($78|0)==(86);
          if (!($79)) {
           break;
          }
         }
        }
       }
      }
     }
     $0 = 1;
     $122 = $0;
     STACKTOP = sp;return ($122|0);
    }
   } while(0);
   $80 = $x;
   $81 = $80 << 24 >> 24;
   $82 = ($81|0)==(67);
   do {
    if ($82) {
     $83 = $y;
     $84 = $83 << 24 >> 24;
     $85 = ($84|0)==(89);
     if (!($85)) {
      $86 = $y;
      $87 = $86 << 24 >> 24;
      $88 = ($87|0)==(83);
      if (!($88)) {
       $89 = $y;
       $90 = $89 << 24 >> 24;
       $91 = ($90|0)==(77);
       if (!($91)) {
        $92 = $y;
        $93 = $92 << 24 >> 24;
        $94 = ($93|0)==(66);
        if (!($94)) {
         $95 = $y;
         $96 = $95 << 24 >> 24;
         $97 = ($96|0)==(72);
         if (!($97)) {
          $98 = $y;
          $99 = $98 << 24 >> 24;
          $100 = ($99|0)==(86);
          if (!($100)) {
           break;
          }
         }
        }
       }
      }
     }
     $0 = 1;
     $122 = $0;
     STACKTOP = sp;return ($122|0);
    }
   } while(0);
   $101 = $x;
   $102 = $101 << 24 >> 24;
   $103 = ($102|0)==(84);
   do {
    if ($103) {
     $104 = $y;
     $105 = $104 << 24 >> 24;
     $106 = ($105|0)==(89);
     if (!($106)) {
      $107 = $y;
      $108 = $107 << 24 >> 24;
      $109 = ($108|0)==(87);
      if (!($109)) {
       $110 = $y;
       $111 = $110 << 24 >> 24;
       $112 = ($111|0)==(75);
       if (!($112)) {
        $113 = $y;
        $114 = $113 << 24 >> 24;
        $115 = ($114|0)==(66);
        if (!($115)) {
         $116 = $y;
         $117 = $116 << 24 >> 24;
         $118 = ($117|0)==(72);
         if (!($118)) {
          $119 = $y;
          $120 = $119 << 24 >> 24;
          $121 = ($120|0)==(68);
          if (!($121)) {
           break;
          }
         }
        }
       }
      }
     }
     $0 = 1;
     $122 = $0;
     STACKTOP = sp;return ($122|0);
    }
   } while(0);
   $0 = 0;
   $122 = $0;
   STACKTOP = sp;return ($122|0);
  }
 }
 $0 = 1;
 $122 = $0;
 STACKTOP = sp;return ($122|0);
}
function __ZL31op_set_overlaps_masked_sequenceP10primer_rec($oligo) {
 $oligo = $oligo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $oligo;
 $1 = $0;
 $2 = (($1) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 16777216;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = (($5) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 | 1;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZL14add_one_primerPKcPiP11oligo_arrayPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderP8p3retval($primer,$extreme,$oligo,$pa,$sa,$dpal_arg_to_use,$thal_arg_to_use,$retval) {
 $primer = $primer|0;
 $extreme = $extreme|0;
 $oligo = $oligo|0;
 $pa = $pa|0;
 $sa = $sa|0;
 $dpal_arg_to_use = $dpal_arg_to_use|0;
 $thal_arg_to_use = $thal_arg_to_use|0;
 $retval = $retval|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $h = 0, $i = 0, $j = 0, $n = 0, $oligo_seq = 0, $test_oligo = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0;
 $$byval_copy = sp + 256|0;
 $vararg_buffer = sp + 384|0;
 $oligo_seq = sp + 485|0;
 $test_oligo = sp + 448|0;
 $h = sp;
 $9 = sp + 128|0;
 $1 = $primer;
 $2 = $extreme;
 $3 = $oligo;
 $4 = $pa;
 $5 = $sa;
 $6 = $dpal_arg_to_use;
 $7 = $thal_arg_to_use;
 $8 = $retval;
 dest=$h+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP8[$test_oligo] = 0;
 $10 = $3;
 $11 = (($10) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(1);
 if ($13) {
  $14 = $1;
  (_strncat($test_oligo,$14,36)|0);
 } else {
  $15 = $1;
  _p3_reverse_complement($15,$test_oligo);
 }
 $16 = $5;
 $17 = (($16) + 8868|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_strlen(($18|0))|0);
 $n = $19;
 $20 = (2147483647)>($19|0);
 if (!($20)) {
  $21 = HEAP32[_stderr>>2]|0;
  $22 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $22;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 56;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2698;
  $vararg_ptr3 = (($vararg_buffer) + 12|0);
  HEAP32[$vararg_ptr3>>2] = 11256;
  (_fprintf(($21|0),(16|0),($vararg_buffer|0))|0);
  _abort();
  // unreachable;
 }
 $23 = $1;
 $24 = (_strlen(($23|0))|0);
 $j = $24;
 $25 = $5;
 $26 = (($25) + 8868|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (_strlen(($27|0))|0);
 $i = $28;
 while(1) {
  $29 = $i;
  $30 = ($29|0)>=(0);
  if (!($30)) {
   break;
  }
  HEAP8[$oligo_seq] = 0;
  $31 = $j;
  $32 = $31&255;
  $33 = (($h) + 112|0);
  HEAP8[$33] = $32;
  $34 = $3;
  $35 = (($34) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)!=(1);
  do {
   if ($37) {
    $38 = $i;
    $39 = $j;
    $40 = (($38) - ($39))|0;
    $41 = ($40|0)<(-1);
    if ($41) {
     break;
    } else {
     $42 = $i;
     $43 = $j;
     $44 = (($42) - ($43))|0;
     $45 = (($44) + 1)|0;
     $46 = (($h) + 56|0);
     HEAP32[$46>>2] = $45;
     $47 = $5;
     $48 = (($47) + 8868|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = (($h) + 56|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = $j;
     __ZL10_pr_substrPKciiPc($49,$51,$52,$oligo_seq);
     label = 15;
     break;
    }
   } else {
    $53 = $i;
    $54 = $j;
    $55 = (($53) + ($54))|0;
    $56 = $n;
    $57 = ($55|0)>($56|0);
    if ($57) {
     break;
    } else {
     $58 = $i;
     $59 = $j;
     $60 = (($58) + ($59))|0;
     $61 = (($60) - 1)|0;
     $62 = (($h) + 56|0);
     HEAP32[$62>>2] = $61;
     $63 = $5;
     $64 = (($63) + 8868|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = $i;
     $67 = $j;
     __ZL10_pr_substrPKciiPc($65,$66,$67,$oligo_seq);
     label = 15;
     break;
    }
   }
  } while(0);
  do {
   if ((label|0) == 15) {
    label = 0;
    $68 = (_strcmp_nocase($test_oligo,$oligo_seq)|0);
    $69 = ($68|0)!=(0);
    if ($69) {
     break;
    }
    $70 = $4;
    $71 = (($70) + 32|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)!=(0);
    $74 = $73&1;
    $75 = (($h) + 114|0);
    HEAP8[$75] = $74;
    $76 = (($h) + 115|0);
    HEAP8[$76] = 0;
    $77 = $3;
    $78 = (($77) + 16|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (($79) + 1)|0;
    HEAP32[$78>>2] = $80;
    $81 = $4;
    $82 = $3;
    $83 = (($82) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = $6;
    $86 = $7;
    $87 = $5;
    $88 = $3;
    $89 = (($88) + 16|0);
    $90 = $8;
    __ZL29calc_and_check_oligo_featuresPK18p3_global_settingsP10primer_rec10oligo_typePK15dpal_arg_holderPK15thal_arg_holderPK8seq_argsP11oligo_statsP8p3retvalPKc($81,$h,$84,$85,$86,$87,$89,$90,$oligo_seq);
    $91 = (_p3_ol_has_any_problem($h)|0);
    $92 = ($91|0)!=(0);
    if ($92) {
     $93 = (($h) + 114|0);
     $94 = HEAP8[$93]|0;
     $95 = ($94<<24>>24)!=(0);
     if ($95) {
      label = 19;
     } else {
      __ZL28free_primer_repeat_sim_scoreP10primer_rec($h);
     }
    } else {
     label = 19;
    }
    if ((label|0) == 19) {
     label = 0;
     $96 = $4;
     $97 = $3;
     $98 = (($97) + 12|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = (+__ZL8p_obj_fnPK18p3_global_settingsP10primer_reci($96,$h,$99));
     $101 = (($h) + 40|0);
     HEAPF64[$101>>3] = $100;
     $102 = $3;
     dest=$9+0|0; src=$h+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     dest=$$byval_copy+0|0; src=$9+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     __ZL24add_oligo_to_oligo_arrayP11oligo_array10primer_rec($102,$$byval_copy);
     $103 = (($h) + 56|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = $2;
     $106 = HEAP32[$105>>2]|0;
     $107 = ($104|0)<($106|0);
     if ($107) {
      $108 = $3;
      $109 = (($108) + 12|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = ($110|0)!=(1);
      if ($111) {
       $112 = (($h) + 56|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = $2;
       HEAP32[$114>>2] = $113;
      }
     }
     $115 = (($h) + 56|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = $2;
     $118 = HEAP32[$117>>2]|0;
     $119 = ($116|0)>($118|0);
     if ($119) {
      $120 = $3;
      $121 = (($120) + 12|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ($122|0)==(1);
      if ($123) {
       $124 = (($h) + 56|0);
       $125 = HEAP32[$124>>2]|0;
       $126 = $2;
       HEAP32[$126>>2] = $125;
      }
     }
    }
   }
  } while(0);
  $127 = $i;
  $128 = (($127) + -1)|0;
  $i = $128;
 }
 $129 = $3;
 $130 = (($129) + 4|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = $3;
 $133 = (($132) + 16|0);
 $134 = (($133) + 80|0);
 HEAP32[$134>>2] = $131;
 $135 = $3;
 $136 = (($135) + 4|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = ($137|0)==(0);
 if ($138) {
  $0 = 1;
  $148 = $0;
  STACKTOP = sp;return ($148|0);
 }
 $139 = $3;
 $140 = (($139) + 4|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = ($141|0)>(1);
 if ($142) {
  $143 = $8;
  $144 = (($143) + 444|0);
  __ZL19pr_append_new_chunkP13pr_append_strPKc($144,12720);
  $145 = $8;
  $146 = (($145) + 444|0);
  $147 = $1;
  __ZL9pr_appendP13pr_append_strPKc($146,$147);
 }
 $0 = 0;
 $148 = $0;
 STACKTOP = sp;return ($148|0);
}
function __ZL17pick_primer_rangeiiPiP11oligo_arrayPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderP8p3retval($start,$length,$extreme,$oligo,$pa,$sa,$dpal_arg_to_use,$thal_arg_to_use,$retval) {
 $start = $start|0;
 $length = $length|0;
 $extreme = $extreme|0;
 $oligo = $oligo|0;
 $pa = $pa|0;
 $sa = $sa|0;
 $dpal_arg_to_use = $dpal_arg_to_use|0;
 $thal_arg_to_use = $thal_arg_to_use|0;
 $retval = $retval|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $h = 0;
 var $i = 0, $j = 0, $n = 0, $oligo_seq = 0, $pr_min = 0, $primer_size_large = 0, $primer_size_small = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $$byval_copy = sp + 256|0;
 $vararg_buffer = sp + 384|0;
 $oligo_seq = sp + 464|0;
 $h = sp;
 $10 = sp + 128|0;
 $1 = $start;
 $2 = $length;
 $3 = $extreme;
 $4 = $oligo;
 $5 = $pa;
 $6 = $sa;
 $7 = $dpal_arg_to_use;
 $8 = $thal_arg_to_use;
 $9 = $retval;
 dest=$h+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $pr_min = 2147483647;
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = $5;
  $13 = (($12) + 2416|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $i;
  $17 = $5;
  $18 = (($17) + 816|0);
  $19 = (($18) + ($16<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $pr_min;
  $22 = ($20|0)<($21|0);
  if ($22) {
   $23 = $i;
   $24 = $5;
   $25 = (($24) + 816|0);
   $26 = (($25) + ($23<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $pr_min = $27;
  }
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
 }
 $30 = $6;
 $31 = (($30) + 8868|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (_strlen(($32|0))|0);
 $n = $33;
 $34 = (2147483647)>($33|0);
 if (!($34)) {
  $35 = HEAP32[_stderr>>2]|0;
  $36 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $36;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 56;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2576;
  $vararg_ptr3 = (($vararg_buffer) + 12|0);
  HEAP32[$vararg_ptr3>>2] = 11256;
  (_fprintf(($35|0),(16|0),($vararg_buffer|0))|0);
  _abort();
  // unreachable;
 }
 $37 = $4;
 $38 = (($37) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(2);
 if ($40) {
  $41 = $5;
  $42 = (($41) + 400|0);
  $43 = (($42) + 256|0);
  $44 = HEAP32[$43>>2]|0;
  $primer_size_small = $44;
  $45 = $5;
  $46 = (($45) + 400|0);
  $47 = (($46) + 260|0);
  $48 = HEAP32[$47>>2]|0;
  $primer_size_large = $48;
 } else {
  $49 = $5;
  $50 = (($49) + 48|0);
  $51 = (($50) + 256|0);
  $52 = HEAP32[$51>>2]|0;
  $primer_size_small = $52;
  $53 = $5;
  $54 = (($53) + 48|0);
  $55 = (($54) + 260|0);
  $56 = HEAP32[$55>>2]|0;
  $primer_size_large = $56;
 }
 $57 = $1;
 $58 = $2;
 $59 = (($57) + ($58))|0;
 $i = $59;
 while(1) {
  $60 = $i;
  $61 = $1;
  $62 = ($60|0)>=($61|0);
  if (!($62)) {
   break;
  }
  HEAP8[$oligo_seq] = 0;
  $63 = $primer_size_small;
  $j = $63;
  L19: while(1) {
   $64 = $j;
   $65 = $primer_size_large;
   $66 = ($64|0)<=($65|0);
   if (!($66)) {
    break;
   }
   $67 = $j;
   $68 = $67&255;
   $69 = (($h) + 112|0);
   HEAP8[$69] = $68;
   $70 = $4;
   $71 = (($70) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($72|0)!=(1);
   do {
    if ($73) {
     $74 = $i;
     $75 = $j;
     $76 = (($74) - ($75))|0;
     $77 = $n;
     $78 = $pr_min;
     $79 = (($77) - ($78))|0;
     $80 = (($79) - 1)|0;
     $81 = ($76|0)>($80|0);
     if ($81) {
      $82 = $9;
      $83 = (($82) + 424|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = ($84|0)==(0);
      if ($85) {
       $86 = $4;
       $87 = (($86) + 12|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = ($88|0)==(0);
       if ($89) {
        break;
       }
      }
     }
     $90 = $i;
     $91 = $j;
     $92 = (($90) - ($91))|0;
     $93 = ($92|0)<(-1);
     if ($93) {
      label = 22;
      break L19;
     }
     $94 = $i;
     $95 = $j;
     $96 = (($94) - ($95))|0;
     $97 = (($96) + 1)|0;
     $98 = (($h) + 56|0);
     HEAP32[$98>>2] = $97;
     $99 = $6;
     $100 = (($99) + 8868|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = (($h) + 56|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = $j;
     __ZL10_pr_substrPKciiPc($101,$103,$104,$oligo_seq);
     label = 30;
    } else {
     $105 = $i;
     $106 = $j;
     $107 = (($105) + ($106))|0;
     $108 = $pr_min;
     $109 = ($107|0)<($108|0);
     if ($109) {
      $110 = $9;
      $111 = (($110) + 424|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = ($112|0)==(0);
      if ($113) {
       break;
      }
     }
     $114 = $i;
     $115 = $j;
     $116 = (($114) + ($115))|0;
     $117 = $n;
     $118 = ($116|0)>($117|0);
     if ($118) {
      label = 28;
      break L19;
     }
     $119 = $i;
     $120 = $j;
     $121 = (($119) + ($120))|0;
     $122 = (($121) - 1)|0;
     $123 = (($h) + 56|0);
     HEAP32[$123>>2] = $122;
     $124 = $6;
     $125 = (($124) + 8868|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $i;
     $128 = $j;
     __ZL10_pr_substrPKciiPc($126,$127,$128,$oligo_seq);
     label = 30;
    }
   } while(0);
   if ((label|0) == 30) {
    label = 0;
    $129 = (($h) + 114|0);
    HEAP8[$129] = 0;
    $130 = (($h) + 115|0);
    HEAP8[$130] = 0;
    $131 = $4;
    $132 = (($131) + 16|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (($133) + 1)|0;
    HEAP32[$132>>2] = $134;
    $135 = $5;
    $136 = $4;
    $137 = (($136) + 12|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = $7;
    $140 = $8;
    $141 = $6;
    $142 = $4;
    $143 = (($142) + 16|0);
    $144 = $9;
    __ZL29calc_and_check_oligo_featuresPK18p3_global_settingsP10primer_rec10oligo_typePK15dpal_arg_holderPK15thal_arg_holderPK8seq_argsP11oligo_statsP8p3retvalPKc($135,$h,$138,$139,$140,$141,$143,$144,$oligo_seq);
    $145 = (_p3_ol_has_any_problem($h)|0);
    $146 = ($145|0)!=(0);
    if ($146) {
     $147 = (($h) + 114|0);
     $148 = HEAP8[$147]|0;
     $149 = ($148<<24>>24)!=(0);
     if ($149) {
      label = 32;
     } else {
      __ZL28free_primer_repeat_sim_scoreP10primer_rec($h);
      $181 = (__ZL36any_5_prime_ol_extension_has_problemPK10primer_rec($h)|0);
      $182 = ($181|0)!=(0);
      if ($182) {
       label = 40;
       break;
      }
     }
    } else {
     label = 32;
    }
    if ((label|0) == 32) {
     label = 0;
     $150 = $5;
     $151 = $4;
     $152 = (($151) + 12|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = (+__ZL8p_obj_fnPK18p3_global_settingsP10primer_reci($150,$h,$153));
     $155 = (($h) + 40|0);
     HEAPF64[$155>>3] = $154;
     $156 = $4;
     dest=$10+0|0; src=$h+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     dest=$$byval_copy+0|0; src=$10+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     __ZL24add_oligo_to_oligo_arrayP11oligo_array10primer_rec($156,$$byval_copy);
     $157 = (($h) + 56|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = $3;
     $160 = HEAP32[$159>>2]|0;
     $161 = ($158|0)<($160|0);
     if ($161) {
      $162 = $4;
      $163 = (($162) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)!=(1);
      if ($165) {
       $166 = (($h) + 56|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = $3;
       HEAP32[$168>>2] = $167;
      }
     }
     $169 = (($h) + 56|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = $3;
     $172 = HEAP32[$171>>2]|0;
     $173 = ($170|0)>($172|0);
     if ($173) {
      $174 = $4;
      $175 = (($174) + 12|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(1);
      if ($177) {
       $178 = (($h) + 56|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = $3;
       HEAP32[$180>>2] = $179;
      }
     }
    }
   }
   $183 = $j;
   $184 = (($183) + 1)|0;
   $j = $184;
  }
  if ((label|0) == 22) {
   label = 0;
  }
  else if ((label|0) == 28) {
   label = 0;
  }
  else if ((label|0) == 40) {
   label = 0;
  }
  $185 = $i;
  $186 = (($185) + -1)|0;
  $i = $186;
 }
 $187 = $4;
 $188 = (($187) + 4|0);
 $189 = HEAP32[$188>>2]|0;
 $190 = $4;
 $191 = (($190) + 16|0);
 $192 = (($191) + 80|0);
 HEAP32[$192>>2] = $189;
 $193 = $4;
 $194 = (($193) + 4|0);
 $195 = HEAP32[$194>>2]|0;
 $196 = ($195|0)==(0);
 if ($196) {
  $0 = 1;
  $197 = $0;
  STACKTOP = sp;return ($197|0);
 } else {
  $0 = 0;
  $197 = $0;
  STACKTOP = sp;return ($197|0);
 }
 return 0|0;
}
function __ZL24pick_primers_by_positioniiPiP11oligo_arrayPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderP8p3retval($start,$end,$extreme,$oligo,$pa,$sa,$dpal_arg_to_use,$thal_arg_to_use,$retval) {
 $start = $start|0;
 $end = $end|0;
 $extreme = $extreme|0;
 $oligo = $oligo|0;
 $pa = $pa|0;
 $sa = $sa|0;
 $dpal_arg_to_use = $dpal_arg_to_use|0;
 $thal_arg_to_use = $thal_arg_to_use|0;
 $retval = $retval|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $found_primer = 0, $j = 0, $length = 0, $new_start = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $1 = $start;
 $2 = $end;
 $3 = $extreme;
 $4 = $oligo;
 $5 = $pa;
 $6 = $sa;
 $7 = $dpal_arg_to_use;
 $8 = $thal_arg_to_use;
 $9 = $retval;
 $found_primer = 1;
 $ret = 1;
 $10 = $1;
 $11 = ($10|0)>(-1);
 if ($11) {
  $12 = $2;
  $13 = ($12|0)>(-1);
  if ($13) {
   $14 = $4;
   $15 = (($14) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)!=(1);
   if ($17) {
    $18 = $2;
    $19 = $1;
    $20 = (($18) - ($19))|0;
    $21 = (($20) + 1)|0;
    $length = $21;
   } else {
    $22 = $1;
    $23 = $2;
    $24 = (($22) - ($23))|0;
    $25 = (($24) + 1)|0;
    $length = $25;
   }
   $26 = $1;
   $27 = $length;
   $28 = $3;
   $29 = $4;
   $30 = $5;
   $31 = $6;
   $32 = $7;
   $33 = $8;
   $34 = $9;
   $35 = (__ZL26add_one_primer_by_positioniiPiP11oligo_arrayPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderP8p3retval($26,$27,$28,$29,$30,$31,$32,$33,$34)|0);
   $found_primer = $35;
   $36 = $found_primer;
   $0 = $36;
   $109 = $0;
   STACKTOP = sp;return ($109|0);
  }
 }
 $37 = $1;
 $38 = ($37|0)>(-1);
 if ($38) {
  $ret = 0;
  $39 = $5;
  $40 = (($39) + 48|0);
  $41 = (($40) + 256|0);
  $42 = HEAP32[$41>>2]|0;
  $j = $42;
  while(1) {
   $43 = $j;
   $44 = $5;
   $45 = (($44) + 48|0);
   $46 = (($45) + 260|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($43|0)<=($47|0);
   if (!($48)) {
    break;
   }
   $49 = $1;
   $50 = $j;
   $51 = $3;
   $52 = $4;
   $53 = $5;
   $54 = $6;
   $55 = $7;
   $56 = $8;
   $57 = $9;
   $58 = (__ZL26add_one_primer_by_positioniiPiP11oligo_arrayPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderP8p3retval($49,$50,$51,$52,$53,$54,$55,$56,$57)|0);
   $59 = $ret;
   $60 = (($59) + ($58))|0;
   $ret = $60;
   $61 = $ret;
   $62 = ($61|0)==(0);
   if ($62) {
    $found_primer = 0;
   }
   $63 = $j;
   $64 = (($63) + 1)|0;
   $j = $64;
  }
  $65 = $found_primer;
  $0 = $65;
  $109 = $0;
  STACKTOP = sp;return ($109|0);
 }
 $66 = $2;
 $67 = ($66|0)>(-1);
 if (!($67)) {
  $107 = $9;
  $108 = (($107) + 444|0);
  __ZL19pr_append_new_chunkP13pr_append_strPKc($108,12776);
  $0 = 1;
  $109 = $0;
  STACKTOP = sp;return ($109|0);
 }
 $ret = 0;
 $68 = $5;
 $69 = (($68) + 48|0);
 $70 = (($69) + 256|0);
 $71 = HEAP32[$70>>2]|0;
 $j = $71;
 while(1) {
  $72 = $j;
  $73 = $5;
  $74 = (($73) + 48|0);
  $75 = (($74) + 260|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($72|0)<=($76|0);
  if (!($77)) {
   break;
  }
  $78 = $4;
  $79 = (($78) + 12|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($80|0)!=(1);
  if ($81) {
   $82 = $2;
   $83 = $j;
   $84 = (($82) - ($83))|0;
   $85 = (($84) + 1)|0;
   $new_start = $85;
  } else {
   $86 = $2;
   $87 = $j;
   $88 = (($86) + ($87))|0;
   $89 = (($88) - 1)|0;
   $new_start = $89;
  }
  $90 = $new_start;
  $91 = $j;
  $92 = $3;
  $93 = $4;
  $94 = $5;
  $95 = $6;
  $96 = $7;
  $97 = $8;
  $98 = $9;
  $99 = (__ZL26add_one_primer_by_positioniiPiP11oligo_arrayPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderP8p3retval($90,$91,$92,$93,$94,$95,$96,$97,$98)|0);
  $100 = $ret;
  $101 = (($100) + ($99))|0;
  $ret = $101;
  $102 = $ret;
  $103 = ($102|0)==(0);
  if ($103) {
   $found_primer = 0;
  }
  $104 = $j;
  $105 = (($104) + 1)|0;
  $j = $105;
 }
 $106 = $found_primer;
 $0 = $106;
 $109 = $0;
 STACKTOP = sp;return ($109|0);
}
function __ZL26add_one_primer_by_positioniiPiP11oligo_arrayPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderP8p3retval($start,$length,$extreme,$oligo,$pa,$sa,$dpal_arg_to_use,$thal_arg_to_use,$retval) {
 $start = $start|0;
 $length = $length|0;
 $extreme = $extreme|0;
 $oligo = $oligo|0;
 $pa = $pa|0;
 $sa = $sa|0;
 $dpal_arg_to_use = $dpal_arg_to_use|0;
 $thal_arg_to_use = $thal_arg_to_use|0;
 $retval = $retval|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $found_primer = 0, $h = 0, $i = 0, $n = 0, $oligo_seq = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0;
 $$byval_copy = sp + 256|0;
 $vararg_buffer = sp + 384|0;
 $oligo_seq = sp + 452|0;
 $h = sp;
 $10 = sp + 128|0;
 $1 = $start;
 $2 = $length;
 $3 = $extreme;
 $4 = $oligo;
 $5 = $pa;
 $6 = $sa;
 $7 = $dpal_arg_to_use;
 $8 = $thal_arg_to_use;
 $9 = $retval;
 dest=$h+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $found_primer = 1;
 $11 = $6;
 $12 = (($11) + 8868|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_strlen(($13|0))|0);
 $n = $14;
 $15 = (2147483647)>($14|0);
 if (!($15)) {
  $16 = HEAP32[_stderr>>2]|0;
  $17 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $17;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 56;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2806;
  $vararg_ptr3 = (($vararg_buffer) + 12|0);
  HEAP32[$vararg_ptr3>>2] = 11256;
  (_fprintf(($16|0),(16|0),($vararg_buffer|0))|0);
  _abort();
  // unreachable;
 }
 $18 = $1;
 $19 = ($18|0)<(0);
 if ($19) {
  $0 = 1;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 $20 = $1;
 $21 = $n;
 $22 = ($20|0)>=($21|0);
 if ($22) {
  $0 = 1;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 $23 = $4;
 $24 = (($23) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(1);
 do {
  if ($26) {
   $27 = $1;
   $28 = $2;
   $29 = (($27) + ($28))|0;
   $30 = $n;
   $31 = ($29|0)>($30|0);
   if (!($31)) {
    break;
   }
   $0 = 1;
   $127 = $0;
   STACKTOP = sp;return ($127|0);
  } else {
   $32 = $1;
   $33 = $2;
   $34 = (($32) - ($33))|0;
   $35 = (($34) + 1)|0;
   $36 = ($35|0)<(0);
   if (!($36)) {
    break;
   }
   $0 = 1;
   $127 = $0;
   STACKTOP = sp;return ($127|0);
  }
 } while(0);
 HEAP8[$oligo_seq] = 0;
 $37 = $2;
 $38 = $37&255;
 $39 = (($h) + 112|0);
 HEAP8[$39] = $38;
 $40 = $4;
 $41 = (($40) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)!=(1);
 if ($43) {
  $44 = $1;
  $45 = (($h) + 56|0);
  HEAP32[$45>>2] = $44;
  $46 = $6;
  $47 = (($46) + 8868|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($h) + 56|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $2;
  __ZL10_pr_substrPKciiPc($48,$50,$51,$oligo_seq);
 } else {
  $52 = $1;
  $53 = $2;
  $54 = (($52) - ($53))|0;
  $55 = (($54) + 1)|0;
  $i = $55;
  $56 = $1;
  $57 = (($h) + 56|0);
  HEAP32[$57>>2] = $56;
  $58 = $6;
  $59 = (($58) + 8868|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $i;
  $62 = $2;
  __ZL10_pr_substrPKciiPc($60,$61,$62,$oligo_seq);
 }
 $63 = $5;
 $64 = (($63) + 32|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($65|0)!=(0);
 $67 = $66&1;
 $68 = (($h) + 114|0);
 HEAP8[$68] = $67;
 $69 = (($h) + 115|0);
 HEAP8[$69] = 0;
 $70 = $4;
 $71 = (($70) + 16|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($72) + 1)|0;
 HEAP32[$71>>2] = $73;
 $74 = $5;
 $75 = $4;
 $76 = (($75) + 12|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $7;
 $79 = $8;
 $80 = $6;
 $81 = $4;
 $82 = (($81) + 16|0);
 $83 = $9;
 __ZL29calc_and_check_oligo_featuresPK18p3_global_settingsP10primer_rec10oligo_typePK15dpal_arg_holderPK15thal_arg_holderPK8seq_argsP11oligo_statsP8p3retvalPKc($74,$h,$77,$78,$79,$80,$82,$83,$oligo_seq);
 $84 = (_p3_ol_has_any_problem($h)|0);
 $85 = ($84|0)!=(0);
 if ($85) {
  $86 = (($h) + 114|0);
  $87 = HEAP8[$86]|0;
  $88 = ($87<<24>>24)!=(0);
  if ($88) {
   label = 19;
  } else {
   __ZL28free_primer_repeat_sim_scoreP10primer_rec($h);
  }
 } else {
  label = 19;
 }
 if ((label|0) == 19) {
  $89 = $5;
  $90 = $4;
  $91 = (($90) + 12|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (+__ZL8p_obj_fnPK18p3_global_settingsP10primer_reci($89,$h,$92));
  $94 = (($h) + 40|0);
  HEAPF64[$94>>3] = $93;
  $95 = $4;
  dest=$10+0|0; src=$h+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  dest=$$byval_copy+0|0; src=$10+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  __ZL24add_oligo_to_oligo_arrayP11oligo_array10primer_rec($95,$$byval_copy);
  $found_primer = 0;
  $96 = (($h) + 56|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = $3;
  $99 = HEAP32[$98>>2]|0;
  $100 = ($97|0)<($99|0);
  if ($100) {
   $101 = $4;
   $102 = (($101) + 12|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)!=(1);
   if ($104) {
    $105 = (($h) + 56|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $3;
    HEAP32[$107>>2] = $106;
   }
  }
  $108 = (($h) + 56|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = $3;
  $111 = HEAP32[$110>>2]|0;
  $112 = ($109|0)>($111|0);
  if ($112) {
   $113 = $4;
   $114 = (($113) + 12|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = ($115|0)==(1);
   if ($116) {
    $117 = (($h) + 56|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = $3;
    HEAP32[$119>>2] = $118;
   }
  }
 }
 $120 = $4;
 $121 = (($120) + 4|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = $4;
 $124 = (($123) + 16|0);
 $125 = (($124) + 80|0);
 HEAP32[$125>>2] = $122;
 $126 = $found_primer;
 $0 = $126;
 $127 = $0;
 STACKTOP = sp;return ($127|0);
}
function __ZN9__gnu_cxx8hash_mapIiP11primer_pairNS_4hashIiEENSt3__18equal_toIiEENS5_9allocatorINS5_4pairIKiS2_EEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN9__gnu_cxx8hash_mapIiP11primer_pairNS_4hashIiEENSt3__18equal_toIiEENS5_9allocatorINS5_4pairIKiS2_EEEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZL19compare_primer_pairPKvS0_($x1,$x2) {
 $x1 = $x1|0;
 $x2 = $x2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0.0, $a1 = 0, $a2 = 0, $epsilon = 0.0, $y1 = 0, $y2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $x1;
 $2 = $x2;
 $3 = $1;
 $a1 = $3;
 $4 = $2;
 $a2 = $4;
 $epsilon = 9.99999999999999954748E-7;
 $5 = $a1;
 $6 = +HEAPF64[$5>>3];
 $7 = $6 + 9.99999999999999954748E-7;
 $8 = $a2;
 $9 = +HEAPF64[$8>>3];
 $10 = $7 < $9;
 do {
  if ($10) {
   $0 = -1;
  } else {
   $11 = $a1;
   $12 = +HEAPF64[$11>>3];
   $13 = $a2;
   $14 = +HEAPF64[$13>>3];
   $15 = $14 + 9.99999999999999954748E-7;
   $16 = $12 > $15;
   if ($16) {
    $0 = 1;
    break;
   }
   $17 = $a1;
   $18 = (($17) + 72|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + 56|0);
   $21 = HEAP32[$20>>2]|0;
   $y1 = $21;
   $22 = $a2;
   $23 = (($22) + 72|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + 56|0);
   $26 = HEAP32[$25>>2]|0;
   $y2 = $26;
   $27 = $y1;
   $28 = $y2;
   $29 = ($27|0)>($28|0);
   if ($29) {
    $0 = -1;
    break;
   }
   $30 = $y1;
   $31 = $y2;
   $32 = ($30|0)<($31|0);
   if ($32) {
    $0 = 1;
    break;
   }
   $33 = $a1;
   $34 = (($33) + 76|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + 56|0);
   $37 = HEAP32[$36>>2]|0;
   $y1 = $37;
   $38 = $a2;
   $39 = (($38) + 76|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + 56|0);
   $42 = HEAP32[$41>>2]|0;
   $y2 = $42;
   $43 = $y1;
   $44 = $y2;
   $45 = ($43|0)<($44|0);
   if ($45) {
    $0 = -1;
    break;
   }
   $46 = $y1;
   $47 = $y2;
   $48 = ($46|0)>($47|0);
   if ($48) {
    $0 = 1;
    break;
   }
   $49 = $a1;
   $50 = (($49) + 72|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + 112|0);
   $53 = HEAP8[$52]|0;
   $54 = $53 << 24 >> 24;
   $y1 = $54;
   $55 = $a2;
   $56 = (($55) + 72|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + 112|0);
   $59 = HEAP8[$58]|0;
   $60 = $59 << 24 >> 24;
   $y2 = $60;
   $61 = $y1;
   $62 = $y2;
   $63 = ($61|0)<($62|0);
   if ($63) {
    $0 = -1;
    break;
   }
   $64 = $y1;
   $65 = $y2;
   $66 = ($64|0)>($65|0);
   if ($66) {
    $0 = 1;
    break;
   }
   $67 = $a1;
   $68 = (($67) + 76|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (($69) + 112|0);
   $71 = HEAP8[$70]|0;
   $72 = $71 << 24 >> 24;
   $y1 = $72;
   $73 = $a2;
   $74 = (($73) + 76|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($75) + 112|0);
   $77 = HEAP8[$76]|0;
   $78 = $77 << 24 >> 24;
   $y2 = $78;
   $79 = $y1;
   $80 = $y2;
   $81 = ($79|0)<($80|0);
   if ($81) {
    $0 = -1;
    break;
   }
   $82 = $y1;
   $83 = $y2;
   $84 = ($82|0)>($83|0);
   if ($84) {
    $0 = 1;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $85 = $0;
 STACKTOP = sp;return ($85|0);
}
function __ZL17characterize_pairP8p3retvalPK18p3_global_settingsPK8seq_argsiiiP11primer_pairPK15dpal_arg_holderPK15thal_arg_holderi($retval,$pa,$sa,$m,$n,$int_num,$ppair,$dpal_arg_to_use,$thal_arg_to_use,$update_stats) {
 $retval = $retval|0;
 $pa = $pa|0;
 $sa = $sa|0;
 $m = $m|0;
 $n = $n|0;
 $int_num = $int_num|0;
 $ppair = $ppair|0;
 $dpal_arg_to_use = $dpal_arg_to_use|0;
 $thal_arg_to_use = $thal_arg_to_use|0;
 $update_stats = $update_stats|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0.0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0.0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0.0, $1025 = 0, $1026 = 0, $1027 = 0.0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0.0;
 var $1033 = 0, $1034 = 0, $1035 = 0.0, $1036 = 0, $1037 = 0.0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0.0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0.0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0.0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0.0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0.0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0.0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0.0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0.0;
 var $1105 = 0.0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0.0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0.0, $1118 = 0.0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0.0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0.0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0.0, $1133 = 0.0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0.0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0.0, $1143 = 0, $1144 = 0, $1145 = 0.0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0.0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0.0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0.0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0.0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0.0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0.0, $1202 = 0.0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0.0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0.0, $1215 = 0.0, $1216 = 0, $1217 = 0, $1218 = 0.0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0.0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0.0, $123 = 0, $1230 = 0.0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0.0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0.0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0.0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0.0, $332 = 0, $333 = 0, $334 = 0, $335 = 0.0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0.0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0.0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0, $373 = 0.0, $374 = 0.0;
 var $375 = 0.0, $376 = 0, $377 = 0, $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0, $381 = 0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0.0, $395 = 0, $396 = 0, $397 = 0.0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0.0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $413 = 0.0, $414 = 0, $415 = 0, $416 = 0.0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0;
 var $429 = 0, $43 = 0, $430 = 0, $431 = 0.0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0.0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0.0, $446 = 0;
 var $447 = 0, $448 = 0.0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0;
 var $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0;
 var $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0.0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0.0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0;
 var $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0.0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0.0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0.0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0.0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0;
 var $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0;
 var $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0;
 var $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0;
 var $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0;
 var $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0;
 var $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0;
 var $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0;
 var $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0;
 var $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0.0, $879 = 0;
 var $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0.0, $884 = 0, $885 = 0, $886 = 0.0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0;
 var $898 = 0, $899 = 0.0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0.0, $905 = 0, $906 = 0, $907 = 0.0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0;
 var $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0.0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0.0, $925 = 0, $926 = 0, $927 = 0.0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0;
 var $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0.0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0.0, $947 = 0, $948 = 0, $949 = 0.0, $95 = 0, $950 = 0.0;
 var $951 = 0, $952 = 0.0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0.0, $958 = 0, $959 = 0, $96 = 0, $960 = 0.0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0;
 var $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0.0, $978 = 0, $979 = 0, $98 = 0, $980 = 0.0, $981 = 0, $982 = 0.0, $983 = 0, $984 = 0, $985 = 0, $986 = 0.0, $987 = 0;
 var $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0.0, $997 = 0, $998 = 0, $999 = 0, $compl_end = 0.0, $i = 0, $included = 0, $l_end = 0, $l_start = 0, $min_oligo_tm = 0.0, $must_use = 0;
 var $pair_expl = 0, $r_end = 0, $r_start = 0, $s1 = 0, $s1_rev = 0, $s2 = 0, $s2_rev = 0, $thal_args_for_template_mispriming = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer18 = 0, $vararg_buffer24 = 0, $vararg_buffer30 = 0, $vararg_buffer36 = 0, $vararg_buffer42 = 0, $vararg_buffer48 = 0, $vararg_buffer54 = 0, $vararg_buffer6 = 0, $vararg_ptr10 = 0;
 var $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr3 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr4 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr45 = 0, $vararg_ptr46 = 0;
 var $vararg_ptr47 = 0, $vararg_ptr5 = 0, $vararg_ptr51 = 0, $vararg_ptr52 = 0, $vararg_ptr53 = 0, $vararg_ptr57 = 0, $vararg_ptr58 = 0, $vararg_ptr59 = 0, $vararg_ptr9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0;
 $vararg_buffer54 = sp + 120|0;
 $vararg_buffer48 = sp + 168|0;
 $vararg_buffer42 = sp + 152|0;
 $vararg_buffer36 = sp + 104|0;
 $vararg_buffer30 = sp + 88|0;
 $vararg_buffer24 = sp + 72|0;
 $vararg_buffer18 = sp + 48|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 64|0;
 $s1 = sp + 375|0;
 $s2 = sp + 264|0;
 $s1_rev = sp + 301|0;
 $s2_rev = sp + 338|0;
 $1 = $retval;
 $2 = $pa;
 $3 = $sa;
 $4 = $m;
 $5 = $n;
 $6 = $int_num;
 $7 = $ppair;
 $8 = $dpal_arg_to_use;
 $9 = $thal_arg_to_use;
 $10 = $update_stats;
 $11 = $1;
 $12 = (($11) + 348|0);
 $13 = (($12) + 12|0);
 $pair_expl = $13;
 $must_use = 0;
 $14 = $9;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $thal_args_for_template_mispriming = $16;
 $17 = $7;
 dest=$17+0|0; stop=dest+104|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $18 = $4;
 $19 = $1;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + ($18<<7)|0);
 $22 = $7;
 $23 = (($22) + 72|0);
 HEAP32[$23>>2] = $21;
 $24 = $5;
 $25 = $1;
 $26 = (($25) + 232|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + ($24<<7)|0);
 $29 = $7;
 $30 = (($29) + 76|0);
 HEAP32[$30>>2] = $28;
 $31 = $5;
 $32 = $1;
 $33 = (($32) + 232|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + ($31<<7)|0);
 $36 = (($35) + 56|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $4;
 $39 = $1;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + ($38<<7)|0);
 $42 = (($41) + 56|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($37) - ($43))|0;
 $45 = (($44) + 1)|0;
 $46 = $7;
 $47 = (($46) + 88|0);
 HEAP32[$47>>2] = $45;
 $48 = $7;
 $49 = (($48) + 92|0);
 HEAP32[$49>>2] = 0;
 $50 = $7;
 $51 = (($50) + 48|0);
 HEAPF64[$51>>3] = 0.0;
 $52 = $7;
 $53 = (($52) + 40|0);
 HEAPF64[$53>>3] = 0.0;
 $54 = $10;
 $55 = ($54|0)!=(0);
 if ($55) {
  $56 = $pair_expl;
  $57 = HEAP32[$56>>2]|0;
  $58 = (($57) + 1)|0;
  HEAP32[$56>>2] = $58;
 }
 $59 = $2;
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)==(10);
 if ($61) {
  $must_use = 1;
 }
 $62 = $7;
 $63 = (($62) + 72|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($64) + 114|0);
 $66 = HEAP8[$65]|0;
 $67 = $66 << 24 >> 24;
 $68 = ($67|0)!=(0);
 do {
  if ($68) {
   $69 = $7;
   $70 = (($69) + 76|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($71) + 114|0);
   $73 = HEAP8[$72]|0;
   $74 = $73 << 24 >> 24;
   $75 = ($74|0)!=(0);
   if ($75) {
    $76 = $7;
    $77 = (($76) + 88|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($78|0)<(1);
    if (!($79)) {
     $must_use = 1;
     break;
    }
    $80 = $pair_expl;
    $81 = (($80) + 56|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (($82) + 1)|0;
    HEAP32[$81>>2] = $83;
    $0 = 0;
    $1252 = $0;
    STACKTOP = sp;return ($1252|0);
   }
  }
 } while(0);
 $84 = $must_use;
 $85 = $84&255;
 $86 = $7;
 $87 = (($86) + 84|0);
 HEAP8[$87] = $85;
 $88 = $3;
 $89 = (($88) + 1600|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ($90|0)>(0);
 if ($91) {
  $92 = $7;
  $93 = $3;
  $94 = (__ZL17pair_spans_targetPK11primer_pairPK8seq_args($92,$93)|0);
  $95 = ($94|0)!=(0);
  do {
   if ($95) {
    $96 = $7;
    $97 = (($96) + 92|0);
    HEAP32[$97>>2] = 1;
   } else {
    $98 = $7;
    $99 = (($98) + 92|0);
    HEAP32[$99>>2] = -1;
    $100 = $10;
    $101 = ($100|0)!=(0);
    if ($101) {
     $102 = $pair_expl;
     $103 = (($102) + 8|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = (($104) + 1)|0;
     HEAP32[$103>>2] = $105;
    }
    $106 = $must_use;
    $107 = ($106|0)!=(0);
    if ($107) {
     break;
    }
    $0 = 0;
    $1252 = $0;
    STACKTOP = sp;return ($1252|0);
   }
  } while(0);
 }
 $108 = $3;
 $109 = (($108) + 4812|0);
 $110 = (($109) + 3212|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ($111|0)>(0);
 if ($112) {
  $113 = $3;
  $114 = (($113) + 4812|0);
  $115 = (($114) + 3208|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ($116|0)!=(0);
  if (!($117)) {
   $included = 0;
   $118 = $7;
   $119 = (($118) + 72|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (($120) + 56|0);
   $122 = HEAP32[$121>>2]|0;
   $l_start = $122;
   $123 = $7;
   $124 = (($123) + 72|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (($125) + 56|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = $7;
   $129 = (($128) + 72|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (($130) + 112|0);
   $132 = HEAP8[$131]|0;
   $133 = $132 << 24 >> 24;
   $134 = (($127) + ($133))|0;
   $135 = (($134) - 1)|0;
   $l_end = $135;
   $136 = $7;
   $137 = (($136) + 76|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (($138) + 56|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = $7;
   $142 = (($141) + 76|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = (($143) + 112|0);
   $145 = HEAP8[$144]|0;
   $146 = $145 << 24 >> 24;
   $147 = (($140) - ($146))|0;
   $148 = (($147) + 1)|0;
   $r_start = $148;
   $149 = $7;
   $150 = (($149) + 76|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = (($151) + 56|0);
   $153 = HEAP32[$152>>2]|0;
   $r_end = $153;
   $i = 0;
   while(1) {
    $154 = $i;
    $155 = $3;
    $156 = (($155) + 4812|0);
    $157 = (($156) + 3212|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($154|0)<($158|0);
    if (!($159)) {
     break;
    }
    $160 = $i;
    $161 = $3;
    $162 = (($161) + 4812|0);
    $163 = (($162) + ($160<<3)|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ($164|0)==(-1);
    if ($165) {
     $166 = $r_start;
     $167 = $i;
     $168 = $3;
     $169 = (($168) + 4812|0);
     $170 = (($169) + 1600|0);
     $171 = (($170) + ($167<<3)|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = ($166|0)>=($172|0);
     if ($173) {
      $174 = $r_end;
      $175 = $i;
      $176 = $3;
      $177 = (($176) + 4812|0);
      $178 = (($177) + 1600|0);
      $179 = (($178) + ($175<<3)|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = $i;
      $182 = $3;
      $183 = (($182) + 4812|0);
      $184 = (($183) + 1600|0);
      $185 = (($184) + ($181<<3)|0);
      $186 = (($185) + 4|0);
      $187 = HEAP32[$186>>2]|0;
      $188 = (($180) + ($187))|0;
      $189 = (($188) - 1)|0;
      $190 = ($174|0)<=($189|0);
      if ($190) {
       label = 26;
       break;
      }
     }
    } else {
     $191 = $i;
     $192 = $3;
     $193 = (($192) + 4812|0);
     $194 = (($193) + 1600|0);
     $195 = (($194) + ($191<<3)|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ($196|0)==(-1);
     if ($197) {
      $198 = $l_start;
      $199 = $i;
      $200 = $3;
      $201 = (($200) + 4812|0);
      $202 = (($201) + ($199<<3)|0);
      $203 = HEAP32[$202>>2]|0;
      $204 = ($198|0)>=($203|0);
      if ($204) {
       $205 = $l_end;
       $206 = $i;
       $207 = $3;
       $208 = (($207) + 4812|0);
       $209 = (($208) + ($206<<3)|0);
       $210 = HEAP32[$209>>2]|0;
       $211 = $i;
       $212 = $3;
       $213 = (($212) + 4812|0);
       $214 = (($213) + ($211<<3)|0);
       $215 = (($214) + 4|0);
       $216 = HEAP32[$215>>2]|0;
       $217 = (($210) + ($216))|0;
       $218 = (($217) - 1)|0;
       $219 = ($205|0)<=($218|0);
       if ($219) {
        label = 31;
        break;
       }
      }
     } else {
      $220 = $l_start;
      $221 = $i;
      $222 = $3;
      $223 = (($222) + 4812|0);
      $224 = (($223) + ($221<<3)|0);
      $225 = HEAP32[$224>>2]|0;
      $226 = ($220|0)>=($225|0);
      if ($226) {
       $227 = $l_end;
       $228 = $i;
       $229 = $3;
       $230 = (($229) + 4812|0);
       $231 = (($230) + ($228<<3)|0);
       $232 = HEAP32[$231>>2]|0;
       $233 = $i;
       $234 = $3;
       $235 = (($234) + 4812|0);
       $236 = (($235) + ($233<<3)|0);
       $237 = (($236) + 4|0);
       $238 = HEAP32[$237>>2]|0;
       $239 = (($232) + ($238))|0;
       $240 = (($239) - 1)|0;
       $241 = ($227|0)<=($240|0);
       if ($241) {
        $242 = $r_start;
        $243 = $i;
        $244 = $3;
        $245 = (($244) + 4812|0);
        $246 = (($245) + 1600|0);
        $247 = (($246) + ($243<<3)|0);
        $248 = HEAP32[$247>>2]|0;
        $249 = ($242|0)>=($248|0);
        if ($249) {
         $250 = $r_end;
         $251 = $i;
         $252 = $3;
         $253 = (($252) + 4812|0);
         $254 = (($253) + 1600|0);
         $255 = (($254) + ($251<<3)|0);
         $256 = HEAP32[$255>>2]|0;
         $257 = $i;
         $258 = $3;
         $259 = (($258) + 4812|0);
         $260 = (($259) + 1600|0);
         $261 = (($260) + ($257<<3)|0);
         $262 = (($261) + 4|0);
         $263 = HEAP32[$262>>2]|0;
         $264 = (($256) + ($263))|0;
         $265 = (($264) - 1)|0;
         $266 = ($250|0)<=($265|0);
         if ($266) {
          label = 37;
          break;
         }
        }
       }
      }
     }
    }
    $267 = $i;
    $268 = (($267) + 1)|0;
    $i = $268;
   }
   if ((label|0) == 26) {
    $included = 1;
   }
   else if ((label|0) == 31) {
    $included = 1;
   }
   else if ((label|0) == 37) {
    $included = 1;
   }
   $269 = $included;
   $270 = ($269|0)!=(0);
   do {
    if (!($270)) {
     $271 = $10;
     $272 = ($271|0)!=(0);
     if ($272) {
      $273 = $pair_expl;
      $274 = (($273) + 52|0);
      $275 = HEAP32[$274>>2]|0;
      $276 = (($275) + 1)|0;
      HEAP32[$274>>2] = $276;
     }
     $277 = $must_use;
     $278 = ($277|0)!=(0);
     if ($278) {
      break;
     }
     $0 = 0;
     $1252 = $0;
     STACKTOP = sp;return ($1252|0);
    }
   } while(0);
  }
 }
 $279 = $7;
 $280 = (($279) + 76|0);
 $281 = HEAP32[$280>>2]|0;
 $282 = (($281) + 56|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = $7;
 $285 = (($284) + 72|0);
 $286 = HEAP32[$285>>2]|0;
 $287 = (($286) + 56|0);
 $288 = HEAP32[$287>>2]|0;
 $289 = (($283) - ($288))|0;
 $290 = (($289) + 1)|0;
 $291 = ($290|0)<=(0);
 if ($291) {
  $292 = HEAP32[_stderr>>2]|0;
  (_fprintf(($292|0),(13192|0),($vararg_buffer|0))|0);
 }
 $293 = $7;
 $294 = (($293) + 76|0);
 $295 = HEAP32[$294>>2]|0;
 $296 = (($295) + 56|0);
 $297 = HEAP32[$296>>2]|0;
 $298 = $7;
 $299 = (($298) + 72|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = (($300) + 56|0);
 $302 = HEAP32[$301>>2]|0;
 $303 = (($297) - ($302))|0;
 $304 = (($303) + 1)|0;
 $305 = ($304|0)>(0);
 if (!($305)) {
  $306 = HEAP32[_stderr>>2]|0;
  $307 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $307;
  $vararg_ptr3 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr3>>2] = 56;
  $vararg_ptr4 = (($vararg_buffer1) + 8|0);
  HEAP32[$vararg_ptr4>>2] = 3968;
  $vararg_ptr5 = (($vararg_buffer1) + 12|0);
  HEAP32[$vararg_ptr5>>2] = 13208;
  (_fprintf(($306|0),(16|0),($vararg_buffer1|0))|0);
  _abort();
  // unreachable;
 }
 $308 = $3;
 $309 = (($308) + 8868|0);
 $310 = HEAP32[$309>>2]|0;
 $311 = $7;
 $312 = (($311) + 72|0);
 $313 = HEAP32[$312>>2]|0;
 $314 = (($313) + 56|0);
 $315 = HEAP32[$314>>2]|0;
 $316 = $7;
 $317 = (($316) + 76|0);
 $318 = HEAP32[$317>>2]|0;
 $319 = (($318) + 56|0);
 $320 = HEAP32[$319>>2]|0;
 $321 = $7;
 $322 = (($321) + 72|0);
 $323 = HEAP32[$322>>2]|0;
 $324 = (($323) + 56|0);
 $325 = HEAP32[$324>>2]|0;
 $326 = (($320) - ($325))|0;
 $327 = (($326) + 1)|0;
 $328 = $2;
 $329 = (($328) + 48|0);
 $330 = (($329) + 216|0);
 $331 = +HEAPF64[$330>>3];
 $332 = $2;
 $333 = (($332) + 48|0);
 $334 = (($333) + 224|0);
 $335 = +HEAPF64[$334>>3];
 $336 = $2;
 $337 = (($336) + 48|0);
 $338 = (($337) + 232|0);
 $339 = +HEAPF64[$338>>3];
 $340 = (+_long_seq_tm(($310|0),($315|0),($327|0),(+$331),(+$335),(+$339)));
 $341 = $7;
 $342 = (($341) + 16|0);
 HEAPF64[$342>>3] = $340;
 $343 = $7;
 $344 = (($343) + 16|0);
 $345 = +HEAPF64[$344>>3];
 $346 = $345 != -999999.999900000053457;
 if (!($346)) {
  $347 = HEAP32[_stderr>>2]|0;
  $348 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer6>>2] = $348;
  $vararg_ptr9 = (($vararg_buffer6) + 4|0);
  HEAP32[$vararg_ptr9>>2] = 56;
  $vararg_ptr10 = (($vararg_buffer6) + 8|0);
  HEAP32[$vararg_ptr10>>2] = 3977;
  $vararg_ptr11 = (($vararg_buffer6) + 12|0);
  HEAP32[$vararg_ptr11>>2] = 13264;
  (_fprintf(($347|0),(16|0),($vararg_buffer6|0))|0);
  _abort();
  // unreachable;
 }
 $349 = $7;
 $350 = (($349) + 72|0);
 $351 = HEAP32[$350>>2]|0;
 $352 = (($351) + 16|0);
 $353 = +HEAPF64[$352>>3];
 $354 = $7;
 $355 = (($354) + 76|0);
 $356 = HEAP32[$355>>2]|0;
 $357 = (($356) + 16|0);
 $358 = +HEAPF64[$357>>3];
 $359 = $353 > $358;
 if ($359) {
  $360 = $7;
  $361 = (($360) + 76|0);
  $362 = HEAP32[$361>>2]|0;
  $363 = (($362) + 16|0);
  $364 = +HEAPF64[$363>>3];
  $370 = $364;
 } else {
  $365 = $7;
  $366 = (($365) + 72|0);
  $367 = HEAP32[$366>>2]|0;
  $368 = (($367) + 16|0);
  $369 = +HEAPF64[$368>>3];
  $370 = $369;
 }
 $min_oligo_tm = $370;
 $371 = $7;
 $372 = (($371) + 16|0);
 $373 = +HEAPF64[$372>>3];
 $374 = $min_oligo_tm;
 $375 = $373 - $374;
 $376 = $7;
 $377 = (($376) + 24|0);
 HEAPF64[$377>>3] = $375;
 $378 = $min_oligo_tm;
 $379 = 0.299999999999999988898 * $378;
 $380 = $7;
 $381 = (($380) + 16|0);
 $382 = +HEAPF64[$381>>3];
 $383 = 0.699999999999999955591 * $382;
 $384 = $379 + $383;
 $385 = $384 - 14.9000000000000003553;
 $386 = $7;
 $387 = (($386) + 32|0);
 HEAPF64[$387>>3] = $385;
 $388 = $2;
 $389 = (($388) + 2432|0);
 $390 = +HEAPF64[$389>>3];
 $391 = $390 != -1.0E+6;
 do {
  if ($391) {
   $392 = $7;
   $393 = (($392) + 16|0);
   $394 = +HEAPF64[$393>>3];
   $395 = $2;
   $396 = (($395) + 2432|0);
   $397 = +HEAPF64[$396>>3];
   $398 = $394 < $397;
   if ($398) {
    $399 = $10;
    $400 = ($399|0)!=(0);
    if ($400) {
     $401 = $pair_expl;
     $402 = (($401) + 36|0);
     $403 = HEAP32[$402>>2]|0;
     $404 = (($403) + 1)|0;
     HEAP32[$402>>2] = $404;
    }
    $405 = $must_use;
    $406 = ($405|0)!=(0);
    if ($406) {
     break;
    }
    $0 = 0;
    $1252 = $0;
    STACKTOP = sp;return ($1252|0);
   }
  }
 } while(0);
 $407 = $2;
 $408 = (($407) + 2424|0);
 $409 = +HEAPF64[$408>>3];
 $410 = $409 != 1.0E+6;
 do {
  if ($410) {
   $411 = $7;
   $412 = (($411) + 16|0);
   $413 = +HEAPF64[$412>>3];
   $414 = $2;
   $415 = (($414) + 2424|0);
   $416 = +HEAPF64[$415>>3];
   $417 = $413 > $416;
   if ($417) {
    $418 = $10;
    $419 = ($418|0)!=(0);
    if ($419) {
     $420 = $pair_expl;
     $421 = (($420) + 32|0);
     $422 = HEAP32[$421>>2]|0;
     $423 = (($422) + 1)|0;
     HEAP32[$421>>2] = $423;
    }
    $424 = $must_use;
    $425 = ($424|0)!=(0);
    if ($425) {
     break;
    }
    $0 = 0;
    $1252 = $0;
    STACKTOP = sp;return ($1252|0);
   }
  }
 } while(0);
 $426 = $4;
 $427 = $1;
 $428 = HEAP32[$427>>2]|0;
 $429 = (($428) + ($426<<7)|0);
 $430 = (($429) + 16|0);
 $431 = +HEAPF64[$430>>3];
 $432 = $5;
 $433 = $1;
 $434 = (($433) + 232|0);
 $435 = HEAP32[$434>>2]|0;
 $436 = (($435) + ($432<<7)|0);
 $437 = (($436) + 16|0);
 $438 = +HEAPF64[$437>>3];
 $439 = $431 - $438;
 $440 = (+Math_abs((+$439)));
 $441 = $7;
 $442 = (($441) + 8|0);
 HEAPF64[$442>>3] = $440;
 $443 = $7;
 $444 = (($443) + 8|0);
 $445 = +HEAPF64[$444>>3];
 $446 = $2;
 $447 = (($446) + 2512|0);
 $448 = +HEAPF64[$447>>3];
 $449 = $445 > $448;
 do {
  if ($449) {
   $450 = $10;
   $451 = ($450|0)!=(0);
   if ($451) {
    $452 = $pair_expl;
    $453 = (($452) + 12|0);
    $454 = HEAP32[$453>>2]|0;
    $455 = (($454) + 1)|0;
    HEAP32[$453>>2] = $455;
   }
   $456 = $must_use;
   $457 = ($456|0)!=(0);
   if ($457) {
    break;
   }
   $0 = 0;
   $1252 = $0;
   STACKTOP = sp;return ($1252|0);
  }
 } while(0);
 $458 = $3;
 $459 = (($458) + 8868|0);
 $460 = HEAP32[$459>>2]|0;
 $461 = $4;
 $462 = $1;
 $463 = HEAP32[$462>>2]|0;
 $464 = (($463) + ($461<<7)|0);
 $465 = (($464) + 56|0);
 $466 = HEAP32[$465>>2]|0;
 $467 = $4;
 $468 = $1;
 $469 = HEAP32[$468>>2]|0;
 $470 = (($469) + ($467<<7)|0);
 $471 = (($470) + 112|0);
 $472 = HEAP8[$471]|0;
 $473 = $472 << 24 >> 24;
 __ZL10_pr_substrPKciiPc($460,$466,$473,$s1);
 $474 = $3;
 $475 = (($474) + 8868|0);
 $476 = HEAP32[$475>>2]|0;
 $477 = $5;
 $478 = $1;
 $479 = (($478) + 232|0);
 $480 = HEAP32[$479>>2]|0;
 $481 = (($480) + ($477<<7)|0);
 $482 = (($481) + 56|0);
 $483 = HEAP32[$482>>2]|0;
 $484 = $5;
 $485 = $1;
 $486 = (($485) + 232|0);
 $487 = HEAP32[$486>>2]|0;
 $488 = (($487) + ($484<<7)|0);
 $489 = (($488) + 112|0);
 $490 = HEAP8[$489]|0;
 $491 = $490 << 24 >> 24;
 $492 = (($483) - ($491))|0;
 $493 = (($492) + 1)|0;
 $494 = $5;
 $495 = $1;
 $496 = (($495) + 232|0);
 $497 = HEAP32[$496>>2]|0;
 $498 = (($497) + ($494<<7)|0);
 $499 = (($498) + 112|0);
 $500 = HEAP8[$499]|0;
 $501 = $500 << 24 >> 24;
 __ZL10_pr_substrPKciiPc($476,$493,$501,$s2);
 _p3_reverse_complement($s1,$s1_rev);
 _p3_reverse_complement($s2,$s2_rev);
 $502 = $4;
 $503 = $1;
 $504 = HEAP32[$503>>2]|0;
 $505 = (($504) + ($502<<7)|0);
 $506 = (($505) + 72|0);
 $507 = +HEAPF64[$506>>3];
 $508 = $507 == -1.79769313486231570815E+308;
 if ($508) {
  $509 = $2;
  $510 = (($509) + 2504|0);
  $511 = HEAP32[$510>>2]|0;
  $512 = ($511|0)==(0);
  if ($512) {
   $513 = $4;
   $514 = $1;
   $515 = HEAP32[$514>>2]|0;
   $516 = (($515) + ($513<<7)|0);
   $517 = $2;
   $518 = (($517) + 48|0);
   $519 = $1;
   $520 = (($519) + 16|0);
   $521 = $8;
   __ZL11oligo_complP10primer_recPK28args_for_one_oligo_or_primerP11oligo_statsPK15dpal_arg_holderPKcSA_($516,$518,$520,$521,$s1,$s1_rev);
   $522 = $4;
   $523 = $1;
   $524 = HEAP32[$523>>2]|0;
   $525 = (($524) + ($522<<7)|0);
   $526 = (_p3_ol_has_any_problem($525)|0);
   $527 = ($526|0)!=(0);
   do {
    if ($527) {
     $528 = $4;
     $529 = $1;
     $530 = HEAP32[$529>>2]|0;
     $531 = (($530) + ($528<<7)|0);
     $532 = (($531) + 114|0);
     $533 = HEAP8[$532]|0;
     $534 = ($533<<24>>24)!=(0);
     if (!($534)) {
      $535 = $pair_expl;
      $536 = HEAP32[$535>>2]|0;
      $537 = (($536) + -1)|0;
      HEAP32[$535>>2] = $537;
      $538 = $must_use;
      $539 = ($538|0)!=(0);
      if ($539) {
       break;
      }
      $0 = 0;
      $1252 = $0;
      STACKTOP = sp;return ($1252|0);
     }
    }
   } while(0);
  }
 }
 $540 = $4;
 $541 = $1;
 $542 = HEAP32[$541>>2]|0;
 $543 = (($542) + ($540<<7)|0);
 $544 = (($543) + 72|0);
 $545 = +HEAPF64[$544>>3];
 $546 = $545 == -1.79769313486231570815E+308;
 if ($546) {
  $547 = $2;
  $548 = (($547) + 2504|0);
  $549 = HEAP32[$548>>2]|0;
  $550 = ($549|0)==(1);
  if ($550) {
   $551 = $4;
   $552 = $1;
   $553 = HEAP32[$552>>2]|0;
   $554 = (($553) + ($551<<7)|0);
   $555 = $2;
   $556 = (($555) + 48|0);
   $557 = $1;
   $558 = (($557) + 16|0);
   $559 = $9;
   __ZL19oligo_compl_thermodP10primer_recPK28args_for_one_oligo_or_primerP11oligo_statsPK15thal_arg_holderPKcSA_($554,$556,$558,$559,$s1,$s1);
   $560 = $4;
   $561 = $1;
   $562 = HEAP32[$561>>2]|0;
   $563 = (($562) + ($560<<7)|0);
   $564 = (_p3_ol_has_any_problem($563)|0);
   $565 = ($564|0)!=(0);
   do {
    if ($565) {
     $566 = $4;
     $567 = $1;
     $568 = HEAP32[$567>>2]|0;
     $569 = (($568) + ($566<<7)|0);
     $570 = (($569) + 114|0);
     $571 = HEAP8[$570]|0;
     $572 = ($571<<24>>24)!=(0);
     if (!($572)) {
      $573 = $pair_expl;
      $574 = HEAP32[$573>>2]|0;
      $575 = (($574) + -1)|0;
      HEAP32[$573>>2] = $575;
      $576 = $must_use;
      $577 = ($576|0)!=(0);
      if ($577) {
       break;
      }
      $0 = 0;
      $1252 = $0;
      STACKTOP = sp;return ($1252|0);
     }
    }
   } while(0);
  }
 }
 $578 = $4;
 $579 = $1;
 $580 = HEAP32[$579>>2]|0;
 $581 = (($580) + ($578<<7)|0);
 $582 = (($581) + 88|0);
 $583 = +HEAPF64[$582>>3];
 $584 = $583 == -1.79769313486231570815E+308;
 if ($584) {
  $585 = $2;
  $586 = (($585) + 2504|0);
  $587 = HEAP32[$586>>2]|0;
  $588 = ($587|0)==(1);
  if ($588) {
   $589 = $4;
   $590 = $1;
   $591 = HEAP32[$590>>2]|0;
   $592 = (($591) + ($589<<7)|0);
   $593 = $2;
   $594 = (($593) + 48|0);
   $595 = $1;
   $596 = (($595) + 16|0);
   $597 = $9;
   __ZL13oligo_hairpinP10primer_recPK28args_for_one_oligo_or_primerP11oligo_statsPK15thal_arg_holderPKc($592,$594,$596,$597,$s1);
   $598 = $4;
   $599 = $1;
   $600 = HEAP32[$599>>2]|0;
   $601 = (($600) + ($598<<7)|0);
   $602 = (_p3_ol_has_any_problem($601)|0);
   $603 = ($602|0)!=(0);
   do {
    if ($603) {
     $604 = $4;
     $605 = $1;
     $606 = HEAP32[$605>>2]|0;
     $607 = (($606) + ($604<<7)|0);
     $608 = (($607) + 114|0);
     $609 = HEAP8[$608]|0;
     $610 = ($609<<24>>24)!=(0);
     if (!($610)) {
      $611 = $pair_expl;
      $612 = HEAP32[$611>>2]|0;
      $613 = (($612) + -1)|0;
      HEAP32[$611>>2] = $613;
      $614 = $must_use;
      $615 = ($614|0)!=(0);
      if ($615) {
       break;
      }
      $0 = 0;
      $1252 = $0;
      STACKTOP = sp;return ($1252|0);
     }
    }
   } while(0);
  }
 }
 $616 = $5;
 $617 = $1;
 $618 = (($617) + 232|0);
 $619 = HEAP32[$618>>2]|0;
 $620 = (($619) + ($616<<7)|0);
 $621 = (($620) + 72|0);
 $622 = +HEAPF64[$621>>3];
 $623 = $622 == -1.79769313486231570815E+308;
 if ($623) {
  $624 = $2;
  $625 = (($624) + 2504|0);
  $626 = HEAP32[$625>>2]|0;
  $627 = ($626|0)==(0);
  if ($627) {
   $628 = $5;
   $629 = $1;
   $630 = (($629) + 232|0);
   $631 = HEAP32[$630>>2]|0;
   $632 = (($631) + ($628<<7)|0);
   $633 = $2;
   $634 = (($633) + 48|0);
   $635 = $1;
   $636 = (($635) + 232|0);
   $637 = (($636) + 16|0);
   $638 = $8;
   __ZL11oligo_complP10primer_recPK28args_for_one_oligo_or_primerP11oligo_statsPK15dpal_arg_holderPKcSA_($632,$634,$637,$638,$s2_rev,$s2);
   $639 = $5;
   $640 = $1;
   $641 = (($640) + 232|0);
   $642 = HEAP32[$641>>2]|0;
   $643 = (($642) + ($639<<7)|0);
   $644 = (_p3_ol_has_any_problem($643)|0);
   $645 = ($644|0)!=(0);
   do {
    if ($645) {
     $646 = $5;
     $647 = $1;
     $648 = (($647) + 232|0);
     $649 = HEAP32[$648>>2]|0;
     $650 = (($649) + ($646<<7)|0);
     $651 = (($650) + 114|0);
     $652 = HEAP8[$651]|0;
     $653 = ($652<<24>>24)!=(0);
     if (!($653)) {
      $654 = $pair_expl;
      $655 = HEAP32[$654>>2]|0;
      $656 = (($655) + -1)|0;
      HEAP32[$654>>2] = $656;
      $657 = $must_use;
      $658 = ($657|0)!=(0);
      if ($658) {
       break;
      }
      $0 = 0;
      $1252 = $0;
      STACKTOP = sp;return ($1252|0);
     }
    }
   } while(0);
  }
 }
 $659 = $5;
 $660 = $1;
 $661 = (($660) + 232|0);
 $662 = HEAP32[$661>>2]|0;
 $663 = (($662) + ($659<<7)|0);
 $664 = (($663) + 72|0);
 $665 = +HEAPF64[$664>>3];
 $666 = $665 == -1.79769313486231570815E+308;
 if ($666) {
  $667 = $2;
  $668 = (($667) + 2504|0);
  $669 = HEAP32[$668>>2]|0;
  $670 = ($669|0)==(1);
  if ($670) {
   $671 = $5;
   $672 = $1;
   $673 = (($672) + 232|0);
   $674 = HEAP32[$673>>2]|0;
   $675 = (($674) + ($671<<7)|0);
   $676 = $2;
   $677 = (($676) + 48|0);
   $678 = $1;
   $679 = (($678) + 232|0);
   $680 = (($679) + 16|0);
   $681 = $9;
   __ZL19oligo_compl_thermodP10primer_recPK28args_for_one_oligo_or_primerP11oligo_statsPK15thal_arg_holderPKcSA_($675,$677,$680,$681,$s2_rev,$s2_rev);
   $682 = $5;
   $683 = $1;
   $684 = (($683) + 232|0);
   $685 = HEAP32[$684>>2]|0;
   $686 = (($685) + ($682<<7)|0);
   $687 = (_p3_ol_has_any_problem($686)|0);
   $688 = ($687|0)!=(0);
   do {
    if ($688) {
     $689 = $5;
     $690 = $1;
     $691 = (($690) + 232|0);
     $692 = HEAP32[$691>>2]|0;
     $693 = (($692) + ($689<<7)|0);
     $694 = (($693) + 114|0);
     $695 = HEAP8[$694]|0;
     $696 = ($695<<24>>24)!=(0);
     if (!($696)) {
      $697 = $pair_expl;
      $698 = HEAP32[$697>>2]|0;
      $699 = (($698) + -1)|0;
      HEAP32[$697>>2] = $699;
      $700 = $must_use;
      $701 = ($700|0)!=(0);
      if ($701) {
       break;
      }
      $0 = 0;
      $1252 = $0;
      STACKTOP = sp;return ($1252|0);
     }
    }
   } while(0);
  }
 }
 $702 = $5;
 $703 = $1;
 $704 = (($703) + 232|0);
 $705 = HEAP32[$704>>2]|0;
 $706 = (($705) + ($702<<7)|0);
 $707 = (($706) + 88|0);
 $708 = +HEAPF64[$707>>3];
 $709 = $708 == -1.79769313486231570815E+308;
 if ($709) {
  $710 = $2;
  $711 = (($710) + 2504|0);
  $712 = HEAP32[$711>>2]|0;
  $713 = ($712|0)==(1);
  if ($713) {
   $714 = $5;
   $715 = $1;
   $716 = (($715) + 232|0);
   $717 = HEAP32[$716>>2]|0;
   $718 = (($717) + ($714<<7)|0);
   $719 = $2;
   $720 = (($719) + 48|0);
   $721 = $1;
   $722 = (($721) + 232|0);
   $723 = (($722) + 16|0);
   $724 = $9;
   __ZL13oligo_hairpinP10primer_recPK28args_for_one_oligo_or_primerP11oligo_statsPK15thal_arg_holderPKc($718,$720,$723,$724,$s2_rev);
   $725 = $5;
   $726 = $1;
   $727 = (($726) + 232|0);
   $728 = HEAP32[$727>>2]|0;
   $729 = (($728) + ($725<<7)|0);
   $730 = (_p3_ol_has_any_problem($729)|0);
   $731 = ($730|0)!=(0);
   do {
    if ($731) {
     $732 = $5;
     $733 = $1;
     $734 = (($733) + 232|0);
     $735 = HEAP32[$734>>2]|0;
     $736 = (($735) + ($732<<7)|0);
     $737 = (($736) + 114|0);
     $738 = HEAP8[$737]|0;
     $739 = ($738<<24>>24)!=(0);
     if (!($739)) {
      $740 = $pair_expl;
      $741 = HEAP32[$740>>2]|0;
      $742 = (($741) + -1)|0;
      HEAP32[$740>>2] = $742;
      $743 = $must_use;
      $744 = ($743|0)!=(0);
      if ($744) {
       break;
      }
      $0 = 0;
      $1252 = $0;
      STACKTOP = sp;return ($1252|0);
     }
    }
   } while(0);
  }
 }
 $745 = $4;
 $746 = $1;
 $747 = HEAP32[$746>>2]|0;
 $748 = (($747) + ($745<<7)|0);
 $749 = (($748) + 8|0);
 $750 = HEAP32[$749>>2]|0;
 $751 = ($750|0)==(0|0);
 if ($751) {
  $752 = $4;
  $753 = $1;
  $754 = HEAP32[$753>>2]|0;
  $755 = (($754) + ($752<<7)|0);
  $756 = $2;
  $757 = $3;
  $758 = $1;
  $759 = (($758) + 16|0);
  $760 = $8;
  __ZL31oligo_repeat_library_misprimingP10primer_recPK18p3_global_settingsPK8seq_args10oligo_typeP11oligo_statsPK15dpal_arg_holder($755,$756,$757,0,$759,$760);
  $761 = $4;
  $762 = $1;
  $763 = HEAP32[$762>>2]|0;
  $764 = (($763) + ($761<<7)|0);
  $765 = (_p3_ol_has_any_problem($764)|0);
  $766 = ($765|0)!=(0);
  if ($766) {
   $767 = $4;
   $768 = $1;
   $769 = HEAP32[$768>>2]|0;
   $770 = (($769) + ($767<<7)|0);
   $771 = (($770) + 114|0);
   $772 = HEAP8[$771]|0;
   $773 = ($772<<24>>24)!=(0);
   if ($773) {
    label = 129;
   }
  } else {
   label = 129;
  }
  if ((label|0) == 129) {
   $774 = $4;
   $775 = $1;
   $776 = HEAP32[$775>>2]|0;
   $777 = (($776) + ($774<<7)|0);
   $778 = $2;
   $779 = $3;
   $780 = $1;
   $781 = (($780) + 16|0);
   $782 = $8;
   $783 = (($782) + 8|0);
   $784 = HEAP32[$783>>2]|0;
   $785 = $thal_args_for_template_mispriming;
   __ZL25oligo_template_misprimingP10primer_recPK18p3_global_settingsPK8seq_args10oligo_typeP11oligo_statsPK9dpal_argsPK9thal_args($777,$778,$779,0,$781,$784,$785);
  }
  $786 = $4;
  $787 = $1;
  $788 = HEAP32[$787>>2]|0;
  $789 = (($788) + ($786<<7)|0);
  $790 = (_p3_ol_has_any_problem($789)|0);
  $791 = ($790|0)!=(0);
  do {
   if ($791) {
    $792 = $4;
    $793 = $1;
    $794 = HEAP32[$793>>2]|0;
    $795 = (($794) + ($792<<7)|0);
    $796 = (($795) + 114|0);
    $797 = HEAP8[$796]|0;
    $798 = ($797<<24>>24)!=(0);
    if (!($798)) {
     $799 = $pair_expl;
     $800 = HEAP32[$799>>2]|0;
     $801 = (($800) + -1)|0;
     HEAP32[$799>>2] = $801;
     $802 = $must_use;
     $803 = ($802|0)!=(0);
     if ($803) {
      break;
     }
     $0 = 0;
     $1252 = $0;
     STACKTOP = sp;return ($1252|0);
    }
   }
  } while(0);
 }
 $804 = $5;
 $805 = $1;
 $806 = (($805) + 232|0);
 $807 = HEAP32[$806>>2]|0;
 $808 = (($807) + ($804<<7)|0);
 $809 = (($808) + 8|0);
 $810 = HEAP32[$809>>2]|0;
 $811 = ($810|0)==(0|0);
 if ($811) {
  $812 = $5;
  $813 = $1;
  $814 = (($813) + 232|0);
  $815 = HEAP32[$814>>2]|0;
  $816 = (($815) + ($812<<7)|0);
  $817 = $2;
  $818 = $3;
  $819 = $1;
  $820 = (($819) + 232|0);
  $821 = (($820) + 16|0);
  $822 = $8;
  __ZL31oligo_repeat_library_misprimingP10primer_recPK18p3_global_settingsPK8seq_args10oligo_typeP11oligo_statsPK15dpal_arg_holder($816,$817,$818,1,$821,$822);
  $823 = $5;
  $824 = $1;
  $825 = (($824) + 232|0);
  $826 = HEAP32[$825>>2]|0;
  $827 = (($826) + ($823<<7)|0);
  $828 = (_p3_ol_has_any_problem($827)|0);
  $829 = ($828|0)!=(0);
  if ($829) {
   $830 = $5;
   $831 = $1;
   $832 = (($831) + 232|0);
   $833 = HEAP32[$832>>2]|0;
   $834 = (($833) + ($830<<7)|0);
   $835 = (($834) + 114|0);
   $836 = HEAP8[$835]|0;
   $837 = ($836<<24>>24)!=(0);
   if ($837) {
    label = 139;
   }
  } else {
   label = 139;
  }
  if ((label|0) == 139) {
   $838 = $5;
   $839 = $1;
   $840 = (($839) + 232|0);
   $841 = HEAP32[$840>>2]|0;
   $842 = (($841) + ($838<<7)|0);
   $843 = $2;
   $844 = $3;
   $845 = $1;
   $846 = (($845) + 232|0);
   $847 = (($846) + 16|0);
   $848 = $8;
   $849 = (($848) + 8|0);
   $850 = HEAP32[$849>>2]|0;
   $851 = $thal_args_for_template_mispriming;
   __ZL25oligo_template_misprimingP10primer_recPK18p3_global_settingsPK8seq_args10oligo_typeP11oligo_statsPK9dpal_argsPK9thal_args($842,$843,$844,1,$847,$850,$851);
  }
  $852 = $5;
  $853 = $1;
  $854 = (($853) + 232|0);
  $855 = HEAP32[$854>>2]|0;
  $856 = (($855) + ($852<<7)|0);
  $857 = (_p3_ol_has_any_problem($856)|0);
  $858 = ($857|0)!=(0);
  do {
   if ($858) {
    $859 = $5;
    $860 = $1;
    $861 = (($860) + 232|0);
    $862 = HEAP32[$861>>2]|0;
    $863 = (($862) + ($859<<7)|0);
    $864 = (($863) + 114|0);
    $865 = HEAP8[$864]|0;
    $866 = ($865<<24>>24)!=(0);
    if (!($866)) {
     $867 = $pair_expl;
     $868 = HEAP32[$867>>2]|0;
     $869 = (($868) + -1)|0;
     HEAP32[$867>>2] = $869;
     $870 = $must_use;
     $871 = ($870|0)!=(0);
     if ($871) {
      break;
     }
     $0 = 0;
     $1252 = $0;
     STACKTOP = sp;return ($1252|0);
    }
   }
  } while(0);
 }
 $872 = $2;
 $873 = (($872) + 2504|0);
 $874 = HEAP32[$873>>2]|0;
 $875 = ($874|0)==(0);
 if ($875) {
  $876 = $8;
  $877 = HEAP32[$876>>2]|0;
  $878 = (+__ZL5alignPKcS0_PK9dpal_args($s1,$s2,$877));
  $879 = $7;
  $880 = (($879) + 40|0);
  HEAPF64[$880>>3] = $878;
  $881 = $7;
  $882 = (($881) + 40|0);
  $883 = +HEAPF64[$882>>3];
  $884 = $2;
  $885 = (($884) + 2472|0);
  $886 = +HEAPF64[$885>>3];
  $887 = $883 > $886;
  do {
   if ($887) {
    $888 = $10;
    $889 = ($888|0)!=(0);
    if ($889) {
     $890 = $pair_expl;
     $891 = (($890) + 16|0);
     $892 = HEAP32[$891>>2]|0;
     $893 = (($892) + 1)|0;
     HEAP32[$891>>2] = $893;
    }
    $894 = $must_use;
    $895 = ($894|0)!=(0);
    if ($895) {
     break;
    }
    $0 = 0;
    $1252 = $0;
    STACKTOP = sp;return ($1252|0);
   }
  } while(0);
  $896 = $8;
  $897 = (($896) + 4|0);
  $898 = HEAP32[$897>>2]|0;
  $899 = (+__ZL5alignPKcS0_PK9dpal_args($s1,$s2,$898));
  $900 = $7;
  $901 = (($900) + 48|0);
  HEAPF64[$901>>3] = $899;
  $902 = $7;
  $903 = (($902) + 48|0);
  $904 = +HEAPF64[$903>>3];
  $905 = $2;
  $906 = (($905) + 2488|0);
  $907 = +HEAPF64[$906>>3];
  $908 = $904 > $907;
  do {
   if ($908) {
    $909 = $10;
    $910 = ($909|0)!=(0);
    if ($910) {
     $911 = $pair_expl;
     $912 = (($911) + 20|0);
     $913 = HEAP32[$912>>2]|0;
     $914 = (($913) + 1)|0;
     HEAP32[$912>>2] = $914;
    }
    $915 = $must_use;
    $916 = ($915|0)!=(0);
    if ($916) {
     break;
    }
    $0 = 0;
    $1252 = $0;
    STACKTOP = sp;return ($1252|0);
   }
  } while(0);
 } else {
  $917 = $9;
  $918 = HEAP32[$917>>2]|0;
  $919 = (+__ZL13align_thermodPKcS0_PK9thal_args($s1,$s2_rev,$918));
  $920 = $7;
  $921 = (($920) + 40|0);
  HEAPF64[$921>>3] = $919;
  $922 = $7;
  $923 = (($922) + 40|0);
  $924 = +HEAPF64[$923>>3];
  $925 = $2;
  $926 = (($925) + 2480|0);
  $927 = +HEAPF64[$926>>3];
  $928 = $924 > $927;
  do {
   if ($928) {
    $929 = $10;
    $930 = ($929|0)!=(0);
    if ($930) {
     $931 = $pair_expl;
     $932 = (($931) + 16|0);
     $933 = HEAP32[$932>>2]|0;
     $934 = (($933) + 1)|0;
     HEAP32[$932>>2] = $934;
    }
    $935 = $must_use;
    $936 = ($935|0)!=(0);
    if ($936) {
     break;
    }
    $0 = 0;
    $1252 = $0;
    STACKTOP = sp;return ($1252|0);
   }
  } while(0);
  $937 = $9;
  $938 = (($937) + 4|0);
  $939 = HEAP32[$938>>2]|0;
  $940 = (+__ZL13align_thermodPKcS0_PK9thal_args($s1,$s2_rev,$939));
  $941 = $7;
  $942 = (($941) + 48|0);
  HEAPF64[$942>>3] = $940;
  $943 = $9;
  $944 = (($943) + 8|0);
  $945 = HEAP32[$944>>2]|0;
  $946 = (+__ZL13align_thermodPKcS0_PK9thal_args($s1,$s2_rev,$945));
  $compl_end = $946;
  $947 = $7;
  $948 = (($947) + 48|0);
  $949 = +HEAPF64[$948>>3];
  $950 = $compl_end;
  $951 = $949 < $950;
  if ($951) {
   $952 = $compl_end;
   $953 = $7;
   $954 = (($953) + 48|0);
   HEAPF64[$954>>3] = $952;
  }
  $955 = $7;
  $956 = (($955) + 48|0);
  $957 = +HEAPF64[$956>>3];
  $958 = $2;
  $959 = (($958) + 2496|0);
  $960 = +HEAPF64[$959>>3];
  $961 = $957 > $960;
  do {
   if ($961) {
    $962 = $10;
    $963 = ($962|0)!=(0);
    if ($963) {
     $964 = $pair_expl;
     $965 = (($964) + 20|0);
     $966 = HEAP32[$965>>2]|0;
     $967 = (($966) + 1)|0;
     HEAP32[$965>>2] = $967;
    }
    $968 = $must_use;
    $969 = ($968|0)!=(0);
    if ($969) {
     break;
    }
    $0 = 0;
    $1252 = $0;
    STACKTOP = sp;return ($1252|0);
   }
  } while(0);
 }
 $970 = $2;
 $971 = (($970) + 2504|0);
 $972 = HEAP32[$971>>2]|0;
 $973 = ($972|0)==(0);
 if ($973) {
  $974 = $8;
  $975 = (($974) + 4|0);
  $976 = HEAP32[$975>>2]|0;
  $977 = (+__ZL5alignPKcS0_PK9dpal_args($s2_rev,$s1_rev,$976));
  $compl_end = $977;
  $978 = $7;
  $979 = (($978) + 48|0);
  $980 = +HEAPF64[$979>>3];
  $981 = $977 > $980;
  if ($981) {
   $982 = $compl_end;
   $983 = $2;
   $984 = (($983) + 48|0);
   $985 = (($984) + 288|0);
   $986 = +HEAPF64[$985>>3];
   $987 = $982 > $986;
   do {
    if ($987) {
     $988 = $10;
     $989 = ($988|0)!=(0);
     if ($989) {
      $990 = $pair_expl;
      $991 = (($990) + 20|0);
      $992 = HEAP32[$991>>2]|0;
      $993 = (($992) + 1)|0;
      HEAP32[$991>>2] = $993;
     }
     $994 = $must_use;
     $995 = ($994|0)!=(0);
     if ($995) {
      break;
     }
     $0 = 0;
     $1252 = $0;
     STACKTOP = sp;return ($1252|0);
    }
   } while(0);
   $996 = $compl_end;
   $997 = $7;
   $998 = (($997) + 48|0);
   HEAPF64[$998>>3] = $996;
  }
 }
 $999 = $7;
 $1000 = $2;
 $1001 = (__ZL15pair_repeat_simP11primer_pairPK18p3_global_settings($999,$1000)|0);
 $1002 = (+($1001|0));
 $1003 = $7;
 $1004 = (($1003) + 64|0);
 HEAPF64[$1004>>3] = $1002;
 $1005 = $2;
 $1006 = (($1005) + 2464|0);
 $1007 = +HEAPF64[$1006>>3];
 $1008 = $1002 > $1007;
 do {
  if ($1008) {
   $1009 = $10;
   $1010 = ($1009|0)!=(0);
   if ($1010) {
    $1011 = $pair_expl;
    $1012 = (($1011) + 28|0);
    $1013 = HEAP32[$1012>>2]|0;
    $1014 = (($1013) + 1)|0;
    HEAP32[$1012>>2] = $1014;
   }
   $1015 = $must_use;
   $1016 = ($1015|0)!=(0);
   if ($1016) {
    break;
   }
   $0 = 0;
   $1252 = $0;
   STACKTOP = sp;return ($1252|0);
  }
 } while(0);
 $1017 = $2;
 $1018 = (($1017) + 2504|0);
 $1019 = HEAP32[$1018>>2]|0;
 $1020 = ($1019|0)==(1);
 do {
  if ($1020) {
   $1021 = $9;
   $1022 = (($1021) + 4|0);
   $1023 = HEAP32[$1022>>2]|0;
   $1024 = (+__ZL13align_thermodPKcS0_PK9thal_args($s2,$s1_rev,$1023));
   $compl_end = $1024;
   $1025 = $7;
   $1026 = (($1025) + 48|0);
   $1027 = +HEAPF64[$1026>>3];
   $1028 = $1024 > $1027;
   if (!($1028)) {
    $1029 = $9;
    $1030 = (($1029) + 8|0);
    $1031 = HEAP32[$1030>>2]|0;
    $1032 = (+__ZL13align_thermodPKcS0_PK9thal_args($s2,$s1_rev,$1031));
    $compl_end = $1032;
    $1033 = $7;
    $1034 = (($1033) + 48|0);
    $1035 = +HEAPF64[$1034>>3];
    $1036 = $1032 > $1035;
    if (!($1036)) {
     break;
    }
   }
   $1037 = $compl_end;
   $1038 = $2;
   $1039 = (($1038) + 48|0);
   $1040 = (($1039) + 304|0);
   $1041 = +HEAPF64[$1040>>3];
   $1042 = $1037 > $1041;
   do {
    if ($1042) {
     $1043 = $10;
     $1044 = ($1043|0)!=(0);
     if ($1044) {
      $1045 = $pair_expl;
      $1046 = (($1045) + 20|0);
      $1047 = HEAP32[$1046>>2]|0;
      $1048 = (($1047) + 1)|0;
      HEAP32[$1046>>2] = $1048;
     }
     $1049 = $must_use;
     $1050 = ($1049|0)!=(0);
     if ($1050) {
      break;
     }
     $0 = 0;
     $1252 = $0;
     STACKTOP = sp;return ($1252|0);
    }
   } while(0);
   $1051 = $compl_end;
   $1052 = $7;
   $1053 = (($1052) + 48|0);
   HEAPF64[$1053>>3] = $1051;
  }
 } while(0);
 $1054 = $2;
 $1055 = (($1054) + 2508|0);
 $1056 = HEAP32[$1055>>2]|0;
 $1057 = ($1056|0)==(0);
 if ($1057) {
  $1058 = $2;
  $1059 = (__ZL33_pr_need_pair_template_misprimingPK18p3_global_settings($1058)|0);
  $1060 = ($1059|0)!=(0);
  if ($1060) {
   $1063 = $7;
   $1064 = (($1063) + 72|0);
   $1065 = HEAP32[$1064>>2]|0;
   $1066 = (($1065) + 96|0);
   $1067 = +HEAPF64[$1066>>3];
   $1068 = $1067 != -1.79769313486231570815E+308;
   if (!($1068)) {
    $1069 = HEAP32[_stderr>>2]|0;
    $1070 = HEAP32[8>>2]|0;
    HEAP32[$vararg_buffer12>>2] = $1070;
    $vararg_ptr15 = (($vararg_buffer12) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 56;
    $vararg_ptr16 = (($vararg_buffer12) + 8|0);
    HEAP32[$vararg_ptr16>>2] = 4222;
    $vararg_ptr17 = (($vararg_buffer12) + 12|0);
    HEAP32[$vararg_ptr17>>2] = 13304;
    (_fprintf(($1069|0),(16|0),($vararg_buffer12|0))|0);
    _abort();
    // unreachable;
   }
   $1071 = $7;
   $1072 = (($1071) + 72|0);
   $1073 = HEAP32[$1072>>2]|0;
   $1074 = (($1073) + 104|0);
   $1075 = +HEAPF64[$1074>>3];
   $1076 = $1075 != -1.79769313486231570815E+308;
   if (!($1076)) {
    $1077 = HEAP32[_stderr>>2]|0;
    $1078 = HEAP32[8>>2]|0;
    HEAP32[$vararg_buffer18>>2] = $1078;
    $vararg_ptr21 = (($vararg_buffer18) + 4|0);
    HEAP32[$vararg_ptr21>>2] = 56;
    $vararg_ptr22 = (($vararg_buffer18) + 8|0);
    HEAP32[$vararg_ptr22>>2] = 4223;
    $vararg_ptr23 = (($vararg_buffer18) + 12|0);
    HEAP32[$vararg_ptr23>>2] = 13368;
    (_fprintf(($1077|0),(16|0),($vararg_buffer18|0))|0);
    _abort();
    // unreachable;
   }
   $1079 = $7;
   $1080 = (($1079) + 76|0);
   $1081 = HEAP32[$1080>>2]|0;
   $1082 = (($1081) + 96|0);
   $1083 = +HEAPF64[$1082>>3];
   $1084 = $1083 != -1.79769313486231570815E+308;
   if (!($1084)) {
    $1085 = HEAP32[_stderr>>2]|0;
    $1086 = HEAP32[8>>2]|0;
    HEAP32[$vararg_buffer24>>2] = $1086;
    $vararg_ptr27 = (($vararg_buffer24) + 4|0);
    HEAP32[$vararg_ptr27>>2] = 56;
    $vararg_ptr28 = (($vararg_buffer24) + 8|0);
    HEAP32[$vararg_ptr28>>2] = 4224;
    $vararg_ptr29 = (($vararg_buffer24) + 12|0);
    HEAP32[$vararg_ptr29>>2] = 13432;
    (_fprintf(($1085|0),(16|0),($vararg_buffer24|0))|0);
    _abort();
    // unreachable;
   }
   $1087 = $7;
   $1088 = (($1087) + 76|0);
   $1089 = HEAP32[$1088>>2]|0;
   $1090 = (($1089) + 104|0);
   $1091 = +HEAPF64[$1090>>3];
   $1092 = $1091 != -1.79769313486231570815E+308;
   if (!($1092)) {
    $1093 = HEAP32[_stderr>>2]|0;
    $1094 = HEAP32[8>>2]|0;
    HEAP32[$vararg_buffer30>>2] = $1094;
    $vararg_ptr33 = (($vararg_buffer30) + 4|0);
    HEAP32[$vararg_ptr33>>2] = 56;
    $vararg_ptr34 = (($vararg_buffer30) + 8|0);
    HEAP32[$vararg_ptr34>>2] = 4225;
    $vararg_ptr35 = (($vararg_buffer30) + 12|0);
    HEAP32[$vararg_ptr35>>2] = 13496;
    (_fprintf(($1093|0),(16|0),($vararg_buffer30|0))|0);
    _abort();
    // unreachable;
   }
   $1095 = $7;
   $1096 = (($1095) + 72|0);
   $1097 = HEAP32[$1096>>2]|0;
   $1098 = (($1097) + 96|0);
   $1099 = +HEAPF64[$1098>>3];
   $1100 = $7;
   $1101 = (($1100) + 76|0);
   $1102 = HEAP32[$1101>>2]|0;
   $1103 = (($1102) + 104|0);
   $1104 = +HEAPF64[$1103>>3];
   $1105 = $1099 + $1104;
   $1106 = $7;
   $1107 = (($1106) + 56|0);
   HEAPF64[$1107>>3] = $1105;
   $1108 = $7;
   $1109 = (($1108) + 72|0);
   $1110 = HEAP32[$1109>>2]|0;
   $1111 = (($1110) + 104|0);
   $1112 = +HEAPF64[$1111>>3];
   $1113 = $7;
   $1114 = (($1113) + 76|0);
   $1115 = HEAP32[$1114>>2]|0;
   $1116 = (($1115) + 96|0);
   $1117 = +HEAPF64[$1116>>3];
   $1118 = $1112 + $1117;
   $1119 = $7;
   $1120 = (($1119) + 56|0);
   $1121 = +HEAPF64[$1120>>3];
   $1122 = $1118 > $1121;
   if ($1122) {
    $1123 = $7;
    $1124 = (($1123) + 72|0);
    $1125 = HEAP32[$1124>>2]|0;
    $1126 = (($1125) + 104|0);
    $1127 = +HEAPF64[$1126>>3];
    $1128 = $7;
    $1129 = (($1128) + 76|0);
    $1130 = HEAP32[$1129>>2]|0;
    $1131 = (($1130) + 96|0);
    $1132 = +HEAPF64[$1131>>3];
    $1133 = $1127 + $1132;
    $1134 = $7;
    $1135 = (($1134) + 56|0);
    HEAPF64[$1135>>3] = $1133;
   }
   $1136 = $2;
   $1137 = (($1136) + 2448|0);
   $1138 = +HEAPF64[$1137>>3];
   $1139 = $1138 >= 0.0;
   do {
    if ($1139) {
     $1140 = $7;
     $1141 = (($1140) + 56|0);
     $1142 = +HEAPF64[$1141>>3];
     $1143 = $2;
     $1144 = (($1143) + 2448|0);
     $1145 = +HEAPF64[$1144>>3];
     $1146 = $1142 > $1145;
     if ($1146) {
      $1147 = $10;
      $1148 = ($1147|0)!=(0);
      if ($1148) {
       $1149 = $pair_expl;
       $1150 = (($1149) + 40|0);
       $1151 = HEAP32[$1150>>2]|0;
       $1152 = (($1151) + 1)|0;
       HEAP32[$1150>>2] = $1152;
      }
      $1153 = $must_use;
      $1154 = ($1153|0)!=(0);
      if ($1154) {
       break;
      }
      $0 = 0;
      $1252 = $0;
      STACKTOP = sp;return ($1252|0);
     }
    }
   } while(0);
  } else {
   $1061 = $7;
   $1062 = (($1061) + 56|0);
   HEAPF64[$1062>>3] = -1.79769313486231570815E+308;
  }
 } else {
  $1155 = $2;
  $1156 = (__ZL41_pr_need_pair_template_mispriming_thermodPK18p3_global_settings($1155)|0);
  $1157 = ($1156|0)!=(0);
  if ($1157) {
   $1160 = $7;
   $1161 = (($1160) + 72|0);
   $1162 = HEAP32[$1161>>2]|0;
   $1163 = (($1162) + 96|0);
   $1164 = +HEAPF64[$1163>>3];
   $1165 = $1164 != -1.79769313486231570815E+308;
   if (!($1165)) {
    $1166 = HEAP32[_stderr>>2]|0;
    $1167 = HEAP32[8>>2]|0;
    HEAP32[$vararg_buffer36>>2] = $1167;
    $vararg_ptr39 = (($vararg_buffer36) + 4|0);
    HEAP32[$vararg_ptr39>>2] = 56;
    $vararg_ptr40 = (($vararg_buffer36) + 8|0);
    HEAP32[$vararg_ptr40>>2] = 4243;
    $vararg_ptr41 = (($vararg_buffer36) + 12|0);
    HEAP32[$vararg_ptr41>>2] = 13304;
    (_fprintf(($1166|0),(16|0),($vararg_buffer36|0))|0);
    _abort();
    // unreachable;
   }
   $1168 = $7;
   $1169 = (($1168) + 72|0);
   $1170 = HEAP32[$1169>>2]|0;
   $1171 = (($1170) + 104|0);
   $1172 = +HEAPF64[$1171>>3];
   $1173 = $1172 != -1.79769313486231570815E+308;
   if (!($1173)) {
    $1174 = HEAP32[_stderr>>2]|0;
    $1175 = HEAP32[8>>2]|0;
    HEAP32[$vararg_buffer42>>2] = $1175;
    $vararg_ptr45 = (($vararg_buffer42) + 4|0);
    HEAP32[$vararg_ptr45>>2] = 56;
    $vararg_ptr46 = (($vararg_buffer42) + 8|0);
    HEAP32[$vararg_ptr46>>2] = 4244;
    $vararg_ptr47 = (($vararg_buffer42) + 12|0);
    HEAP32[$vararg_ptr47>>2] = 13368;
    (_fprintf(($1174|0),(16|0),($vararg_buffer42|0))|0);
    _abort();
    // unreachable;
   }
   $1176 = $7;
   $1177 = (($1176) + 76|0);
   $1178 = HEAP32[$1177>>2]|0;
   $1179 = (($1178) + 96|0);
   $1180 = +HEAPF64[$1179>>3];
   $1181 = $1180 != -1.79769313486231570815E+308;
   if (!($1181)) {
    $1182 = HEAP32[_stderr>>2]|0;
    $1183 = HEAP32[8>>2]|0;
    HEAP32[$vararg_buffer48>>2] = $1183;
    $vararg_ptr51 = (($vararg_buffer48) + 4|0);
    HEAP32[$vararg_ptr51>>2] = 56;
    $vararg_ptr52 = (($vararg_buffer48) + 8|0);
    HEAP32[$vararg_ptr52>>2] = 4245;
    $vararg_ptr53 = (($vararg_buffer48) + 12|0);
    HEAP32[$vararg_ptr53>>2] = 13432;
    (_fprintf(($1182|0),(16|0),($vararg_buffer48|0))|0);
    _abort();
    // unreachable;
   }
   $1184 = $7;
   $1185 = (($1184) + 76|0);
   $1186 = HEAP32[$1185>>2]|0;
   $1187 = (($1186) + 104|0);
   $1188 = +HEAPF64[$1187>>3];
   $1189 = $1188 != -1.79769313486231570815E+308;
   if (!($1189)) {
    $1190 = HEAP32[_stderr>>2]|0;
    $1191 = HEAP32[8>>2]|0;
    HEAP32[$vararg_buffer54>>2] = $1191;
    $vararg_ptr57 = (($vararg_buffer54) + 4|0);
    HEAP32[$vararg_ptr57>>2] = 56;
    $vararg_ptr58 = (($vararg_buffer54) + 8|0);
    HEAP32[$vararg_ptr58>>2] = 4246;
    $vararg_ptr59 = (($vararg_buffer54) + 12|0);
    HEAP32[$vararg_ptr59>>2] = 13496;
    (_fprintf(($1190|0),(16|0),($vararg_buffer54|0))|0);
    _abort();
    // unreachable;
   }
   $1192 = $7;
   $1193 = (($1192) + 72|0);
   $1194 = HEAP32[$1193>>2]|0;
   $1195 = (($1194) + 96|0);
   $1196 = +HEAPF64[$1195>>3];
   $1197 = $7;
   $1198 = (($1197) + 76|0);
   $1199 = HEAP32[$1198>>2]|0;
   $1200 = (($1199) + 104|0);
   $1201 = +HEAPF64[$1200>>3];
   $1202 = $1196 + $1201;
   $1203 = $7;
   $1204 = (($1203) + 56|0);
   HEAPF64[$1204>>3] = $1202;
   $1205 = $7;
   $1206 = (($1205) + 72|0);
   $1207 = HEAP32[$1206>>2]|0;
   $1208 = (($1207) + 104|0);
   $1209 = +HEAPF64[$1208>>3];
   $1210 = $7;
   $1211 = (($1210) + 76|0);
   $1212 = HEAP32[$1211>>2]|0;
   $1213 = (($1212) + 96|0);
   $1214 = +HEAPF64[$1213>>3];
   $1215 = $1209 + $1214;
   $1216 = $7;
   $1217 = (($1216) + 56|0);
   $1218 = +HEAPF64[$1217>>3];
   $1219 = $1215 > $1218;
   if ($1219) {
    $1220 = $7;
    $1221 = (($1220) + 72|0);
    $1222 = HEAP32[$1221>>2]|0;
    $1223 = (($1222) + 104|0);
    $1224 = +HEAPF64[$1223>>3];
    $1225 = $7;
    $1226 = (($1225) + 76|0);
    $1227 = HEAP32[$1226>>2]|0;
    $1228 = (($1227) + 96|0);
    $1229 = +HEAPF64[$1228>>3];
    $1230 = $1224 + $1229;
    $1231 = $7;
    $1232 = (($1231) + 56|0);
    HEAPF64[$1232>>3] = $1230;
   }
   $1233 = $2;
   $1234 = (($1233) + 2456|0);
   $1235 = +HEAPF64[$1234>>3];
   $1236 = $1235 != 0.0;
   do {
    if ($1236) {
     $1237 = $7;
     $1238 = (($1237) + 56|0);
     $1239 = +HEAPF64[$1238>>3];
     $1240 = $2;
     $1241 = (($1240) + 2456|0);
     $1242 = +HEAPF64[$1241>>3];
     $1243 = $1239 > $1242;
     if ($1243) {
      $1244 = $10;
      $1245 = ($1244|0)!=(0);
      if ($1245) {
       $1246 = $pair_expl;
       $1247 = (($1246) + 40|0);
       $1248 = HEAP32[$1247>>2]|0;
       $1249 = (($1248) + 1)|0;
       HEAP32[$1247>>2] = $1249;
      }
      $1250 = $must_use;
      $1251 = ($1250|0)!=(0);
      if ($1251) {
       break;
      }
      $0 = 0;
      $1252 = $0;
      STACKTOP = sp;return ($1252|0);
     }
    }
   } while(0);
  } else {
   $1158 = $7;
   $1159 = (($1158) + 56|0);
   HEAPF64[$1159>>3] = -1.79769313486231570815E+308;
  }
 }
 $0 = 1;
 $1252 = $0;
 STACKTOP = sp;return ($1252|0);
}
function __ZL21choose_internal_oligoP8p3retvalPK10primer_recS3_PiPK8seq_argsPK18p3_global_settingsPK15dpal_arg_holderPK15thal_arg_holder($retval,$left,$right,$nm,$sa,$pa,$dpal_arg_to_use,$thal_arg_to_use) {
 $retval = $retval|0;
 $left = $left|0;
 $right = $right|0;
 $nm = $nm|0;
 $sa = $sa|0;
 $pa = $pa|0;
 $dpal_arg_to_use = $dpal_arg_to_use|0;
 $thal_arg_to_use = $thal_arg_to_use|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $h = 0, $i = 0, $k = 0, $min = 0.0, $oligo_seq = 0, $revc_oligo_seq = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $oligo_seq = sp + 93|0;
 $revc_oligo_seq = sp + 56|0;
 $1 = $retval;
 $2 = $left;
 $3 = $right;
 $4 = $nm;
 $5 = $sa;
 $6 = $pa;
 $7 = $dpal_arg_to_use;
 $8 = $thal_arg_to_use;
 $min = 1.0E+6;
 $i = -1;
 $k = 0;
 while(1) {
  $9 = $k;
  $10 = $1;
  $11 = (($10) + 116|0);
  $12 = (($11) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($9|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $k;
  $16 = $1;
  $17 = (($16) + 116|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($15<<7)|0);
  $h = $19;
  $20 = $h;
  $21 = (($20) + 56|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $2;
  $24 = (($23) + 56|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $2;
  $27 = (($26) + 112|0);
  $28 = HEAP8[$27]|0;
  $29 = $28 << 24 >> 24;
  $30 = (($29) - 1)|0;
  $31 = (($25) + ($30))|0;
  $32 = ($22|0)>($31|0);
  do {
   if ($32) {
    $33 = $h;
    $34 = (($33) + 56|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $h;
    $37 = (($36) + 112|0);
    $38 = HEAP8[$37]|0;
    $39 = $38 << 24 >> 24;
    $40 = (($39) - 1)|0;
    $41 = (($35) + ($40))|0;
    $42 = $3;
    $43 = (($42) + 56|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $3;
    $46 = (($45) + 112|0);
    $47 = HEAP8[$46]|0;
    $48 = $47 << 24 >> 24;
    $49 = (($44) - ($48))|0;
    $50 = (($49) + 1)|0;
    $51 = ($41|0)<($50|0);
    if ($51) {
     $52 = $h;
     $53 = (($52) + 40|0);
     $54 = +HEAPF64[$53>>3];
     $55 = $min;
     $56 = $54 < $55;
     if ($56) {
      $57 = $h;
      $58 = (_p3_ol_has_any_problem($57)|0);
      $59 = ($58|0)!=(0);
      if ($59) {
       $60 = $h;
       $61 = (($60) + 114|0);
       $62 = HEAP8[$61]|0;
       $63 = ($62<<24>>24)!=(0);
       if (!($63)) {
        label = 32;
        break;
       }
      }
      $64 = $h;
      $65 = (($64) + 72|0);
      $66 = +HEAPF64[$65>>3];
      $67 = $66 == -1.79769313486231570815E+308;
      if ($67) {
       $68 = $6;
       $69 = (($68) + 2504|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = ($70|0)==(0);
       if ($71) {
        $72 = $5;
        $73 = (($72) + 8868|0);
        $74 = HEAP32[$73>>2]|0;
        $75 = $h;
        $76 = (($75) + 56|0);
        $77 = HEAP32[$76>>2]|0;
        $78 = $h;
        $79 = (($78) + 112|0);
        $80 = HEAP8[$79]|0;
        $81 = $80 << 24 >> 24;
        __ZL10_pr_substrPKciiPc($74,$77,$81,$oligo_seq);
        _p3_reverse_complement($oligo_seq,$revc_oligo_seq);
        $82 = $h;
        $83 = $6;
        $84 = (($83) + 400|0);
        $85 = $1;
        $86 = (($85) + 116|0);
        $87 = (($86) + 16|0);
        $88 = $7;
        __ZL11oligo_complP10primer_recPK28args_for_one_oligo_or_primerP11oligo_statsPK15dpal_arg_holderPKcSA_($82,$84,$87,$88,$oligo_seq,$revc_oligo_seq);
        $89 = $h;
        $90 = (_p3_ol_has_any_problem($89)|0);
        $91 = ($90|0)!=(0);
        if ($91) {
         $92 = $h;
         $93 = (($92) + 114|0);
         $94 = HEAP8[$93]|0;
         $95 = ($94<<24>>24)!=(0);
         if (!($95)) {
          break;
         }
        }
       }
      }
      $96 = $h;
      $97 = (($96) + 72|0);
      $98 = +HEAPF64[$97>>3];
      $99 = $98 == -1.79769313486231570815E+308;
      if ($99) {
       $100 = $6;
       $101 = (($100) + 2504|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = ($102|0)==(1);
       if ($103) {
        $104 = $5;
        $105 = (($104) + 8868|0);
        $106 = HEAP32[$105>>2]|0;
        $107 = $h;
        $108 = (($107) + 56|0);
        $109 = HEAP32[$108>>2]|0;
        $110 = $h;
        $111 = (($110) + 112|0);
        $112 = HEAP8[$111]|0;
        $113 = $112 << 24 >> 24;
        __ZL10_pr_substrPKciiPc($106,$109,$113,$oligo_seq);
        _p3_reverse_complement($oligo_seq,$revc_oligo_seq);
        $114 = $h;
        $115 = $6;
        $116 = (($115) + 400|0);
        $117 = $1;
        $118 = (($117) + 116|0);
        $119 = (($118) + 16|0);
        $120 = HEAP32[192>>2]|0;
        __ZL19oligo_compl_thermodP10primer_recPK28args_for_one_oligo_or_primerP11oligo_statsPK15thal_arg_holderPKcSA_($114,$116,$119,$120,$oligo_seq,$oligo_seq);
        $121 = $h;
        $122 = (_p3_ol_has_any_problem($121)|0);
        $123 = ($122|0)!=(0);
        if ($123) {
         $124 = $h;
         $125 = (($124) + 114|0);
         $126 = HEAP8[$125]|0;
         $127 = ($126<<24>>24)!=(0);
         if (!($127)) {
          break;
         }
        }
       }
      }
      $128 = $h;
      $129 = (($128) + 88|0);
      $130 = +HEAPF64[$129>>3];
      $131 = $130 == -1.79769313486231570815E+308;
      if ($131) {
       $132 = $6;
       $133 = (($132) + 2504|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = ($134|0)==(1);
       if ($135) {
        $136 = $5;
        $137 = (($136) + 8868|0);
        $138 = HEAP32[$137>>2]|0;
        $139 = $h;
        $140 = (($139) + 56|0);
        $141 = HEAP32[$140>>2]|0;
        $142 = $h;
        $143 = (($142) + 112|0);
        $144 = HEAP8[$143]|0;
        $145 = $144 << 24 >> 24;
        __ZL10_pr_substrPKciiPc($138,$141,$145,$oligo_seq);
        $146 = $h;
        $147 = $6;
        $148 = (($147) + 400|0);
        $149 = $1;
        $150 = (($149) + 116|0);
        $151 = (($150) + 16|0);
        $152 = HEAP32[192>>2]|0;
        __ZL13oligo_hairpinP10primer_recPK28args_for_one_oligo_or_primerP11oligo_statsPK15thal_arg_holderPKc($146,$148,$151,$152,$oligo_seq);
        $153 = $h;
        $154 = (_p3_ol_has_any_problem($153)|0);
        $155 = ($154|0)!=(0);
        if ($155) {
         $156 = $h;
         $157 = (($156) + 114|0);
         $158 = HEAP8[$157]|0;
         $159 = ($158<<24>>24)!=(0);
         if (!($159)) {
          break;
         }
        }
       }
      }
      $160 = $h;
      $161 = (($160) + 8|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==(0|0);
      if ($163) {
       $164 = $h;
       $165 = $6;
       $166 = $5;
       $167 = $1;
       $168 = (($167) + 116|0);
       $169 = (($168) + 16|0);
       $170 = $7;
       __ZL31oligo_repeat_library_misprimingP10primer_recPK18p3_global_settingsPK8seq_args10oligo_typeP11oligo_statsPK15dpal_arg_holder($164,$165,$166,2,$169,$170);
       $171 = $h;
       $172 = (_p3_ol_has_any_problem($171)|0);
       $173 = ($172|0)!=(0);
       if ($173) {
        $174 = $h;
        $175 = (($174) + 114|0);
        $176 = HEAP8[$175]|0;
        $177 = ($176<<24>>24)!=(0);
        if (!($177)) {
         break;
        }
       }
      }
      $178 = $h;
      $179 = (($178) + 40|0);
      $180 = +HEAPF64[$179>>3];
      $min = $180;
      $181 = $k;
      $i = $181;
      label = 32;
     } else {
      label = 32;
     }
    } else {
     label = 32;
    }
   } else {
    label = 32;
   }
  } while(0);
  if ((label|0) == 32) {
   label = 0;
  }
  $182 = $k;
  $183 = (($182) + 1)|0;
  $k = $183;
 }
 $184 = $i;
 $185 = $4;
 HEAP32[$185>>2] = $184;
 $186 = $4;
 $187 = HEAP32[$186>>2]|0;
 $188 = ($187|0)<(0);
 if ($188) {
  $0 = 1;
  $189 = $0;
  STACKTOP = sp;return ($189|0);
 } else {
  $0 = 0;
  $189 = $0;
  STACKTOP = sp;return ($189|0);
 }
 return 0|0;
}
function __ZN9__gnu_cxx8hash_mapIiP11primer_pairNS_4hashIiEENSt3__18equal_toIiEENS5_9allocatorINS5_4pairIKiS2_EEEEEixERSA_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__i = 0;
 var $__i1$i$i = 0, $__i1$i$i$i = 0, $__i1$i$i1 = 0, $__r = 0, $__t$i = 0, $__t$i$i$i = 0, $__t21$i$i$i = 0, $__tmp$i$i$i = 0, $__tmp$i$i$i13 = 0, $__tmp$i$i$i27 = 0, $__tmp$i$i$i6 = 0, $__u1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0;
 $10 = sp;
 $13 = sp + 1034|0;
 $16 = sp + 40|0;
 $19 = sp + 1036|0;
 $__i1$i$i$i = sp + 120|0;
 $37 = sp + 96|0;
 $40 = sp + 640|0;
 $66 = sp + 972|0;
 $67 = sp + 16|0;
 $70 = sp + 1004|0;
 $71 = sp + 1016|0;
 $__t21$i$i$i = sp + 24|0;
 $74 = sp + 64|0;
 $77 = sp + 888|0;
 $__u1$i = sp + 72|0;
 $79 = sp + 80|0;
 $87 = sp + 128|0;
 $90 = sp + 1035|0;
 $93 = sp + 88|0;
 $96 = sp + 1033|0;
 $124 = sp + 32|0;
 $127 = sp + 1037|0;
 $130 = sp + 112|0;
 $133 = sp + 1032|0;
 $160 = sp + 8|0;
 $163 = sp + 1038|0;
 $166 = sp + 104|0;
 $169 = sp + 1039|0;
 $__i1$i$i1 = sp + 136|0;
 $193 = sp + 144|0;
 $203 = sp + 484|0;
 $205 = sp + 492|0;
 $207 = sp + 500|0;
 $__i1$i$i = sp + 56|0;
 $210 = sp + 48|0;
 $213 = sp + 520|0;
 $__i = sp + 536|0;
 $217 = sp + 540|0;
 $__h = sp + 544|0;
 $218 = sp + 556|0;
 $219 = sp + 560|0;
 $__r = sp + 584|0;
 $222 = sp + 592|0;
 $215 = $this;
 $216 = $__k;
 $224 = $215;
 $225 = $216;
 $211 = $224;
 $212 = $225;
 $226 = $211;
 $227 = $212;
 __ZNSt3__112__hash_tableINS_4pairIiP11primer_pairEEN9__gnu_cxx17__hash_map_hasherIS4_NS5_4hashIiEELb1EEENS5_16__hash_map_equalIS4_NS_8equal_toIiEELb1EEENS_9allocatorIS4_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS4_PvEEEERKT_($213,$226,$227);
 ;HEAP8[$210+0|0]=HEAP8[$213+0|0]|0;HEAP8[$210+1|0]=HEAP8[$213+1|0]|0;HEAP8[$210+2|0]=HEAP8[$213+2|0]|0;HEAP8[$210+3|0]=HEAP8[$213+3|0]|0;
 $209 = $__i;
 $228 = $209;
 ;HEAP8[$__i1$i$i+0|0]=HEAP8[$210+0|0]|0;HEAP8[$__i1$i$i+1|0]=HEAP8[$210+1|0]|0;HEAP8[$__i1$i$i+2|0]=HEAP8[$210+2|0]|0;HEAP8[$__i1$i$i+3|0]=HEAP8[$210+3|0]|0;
 $208 = $228;
 $229 = $208;
 ;HEAP32[$229+0>>2]=HEAP32[$__i1$i$i+0>>2]|0;
 $206 = $224;
 $230 = $206;
 $204 = $230;
 $201 = $203;
 $202 = -1;
 $231 = $201;
 $232 = $202;
 $199 = $231;
 $200 = $232;
 $233 = $199;
 HEAP32[$233>>2] = 0;
 $234 = HEAP32[$203>>2]|0;
 HEAP32[$205>>2] = $234;
 $194 = $205;
 $197 = $207;
 $198 = 0;
 $235 = $197;
 $236 = $198;
 $195 = $235;
 $196 = $236;
 $237 = $195;
 $238 = $196;
 HEAP32[$237>>2] = $238;
 ;HEAP8[$193+0|0]=HEAP8[$207+0|0]|0;HEAP8[$193+1|0]=HEAP8[$207+1|0]|0;HEAP8[$193+2|0]=HEAP8[$207+2|0]|0;HEAP8[$193+3|0]=HEAP8[$207+3|0]|0;
 $192 = $217;
 $239 = $192;
 ;HEAP8[$__i1$i$i1+0|0]=HEAP8[$193+0|0]|0;HEAP8[$__i1$i$i1+1|0]=HEAP8[$193+1|0]|0;HEAP8[$__i1$i$i1+2|0]=HEAP8[$193+2|0]|0;HEAP8[$__i1$i$i1+3|0]=HEAP8[$193+3|0]|0;
 $191 = $239;
 $240 = $191;
 ;HEAP32[$240+0>>2]=HEAP32[$__i1$i$i1+0>>2]|0;
 $189 = $__i;
 $190 = $217;
 $241 = $189;
 $242 = $190;
 $187 = $241;
 $188 = $242;
 $243 = $187;
 $244 = $188;
 $185 = $243;
 $186 = $244;
 $245 = $185;
 $246 = HEAP32[$245>>2]|0;
 $247 = $186;
 $248 = HEAP32[$247>>2]|0;
 $249 = ($246|0)==($248|0);
 $250 = $249 ^ 1;
 if ($250) {
  $152 = $__i;
  $251 = $152;
  $151 = $251;
  $252 = $151;
  $253 = HEAP32[$252>>2]|0;
  $254 = (($253) + 8|0);
  $150 = $254;
  $255 = $150;
  $149 = $255;
  $256 = $149;
  $257 = (($256) + 4|0);
  $214 = $257;
  $455 = $214;
  STACKTOP = sp;return ($455|0);
 }
 $258 = $216;
 __ZN9__gnu_cxx8hash_mapIiP11primer_pairNS_4hashIiEENSt3__18equal_toIiEENS5_9allocatorINS5_4pairIKiS2_EEEEE16__construct_nodeERSA_($219,$224,$258);
 $116 = $219;
 $259 = $116;
 $114 = $218;
 $115 = $259;
 $260 = $114;
 $261 = $115;
 $112 = $260;
 $113 = $261;
 $262 = $112;
 $263 = $113;
 HEAP32[$262>>2] = $263;
 ;HEAP8[$79+0|0]=HEAP8[$218+0|0]|0;HEAP8[$79+1|0]=HEAP8[$218+1|0]|0;HEAP8[$79+2|0]=HEAP8[$218+2|0]|0;HEAP8[$79+3|0]=HEAP8[$218+3|0]|0;
 $78 = $__h;
 $264 = $78;
 ;HEAP8[$__u1$i+0|0]=HEAP8[$79+0|0]|0;HEAP8[$__u1$i+1|0]=HEAP8[$79+1|0]|0;HEAP8[$__u1$i+2|0]=HEAP8[$79+2|0]|0;HEAP8[$__u1$i+3|0]=HEAP8[$79+3|0]|0;
 $76 = $264;
 $265 = $76;
 $75 = $__u1$i;
 $266 = $75;
 $267 = HEAP32[$266>>2]|0;
 $56 = $267;
 $268 = $56;
 $55 = $268;
 $269 = $55;
 $54 = $269;
 $270 = $54;
 $271 = HEAP32[$270>>2]|0;
 $__t$i$i$i = $271;
 $53 = $268;
 $272 = $53;
 $52 = $272;
 $273 = $52;
 HEAP32[$273>>2] = 0;
 $274 = $__t$i$i$i;
 $57 = $__u1$i;
 $275 = $57;
 $276 = HEAP32[$275>>2]|0;
 $60 = $276;
 $277 = $60;
 $59 = $277;
 $278 = $59;
 $58 = $278;
 $279 = $58;
 $280 = (($279) + 4|0);
 $61 = $280;
 $281 = $61;
 ;HEAP32[$77+0>>2]=HEAP32[$281+0>>2]|0;HEAP32[$77+4>>2]=HEAP32[$281+4>>2]|0;
 ;HEAP8[$74+0|0]=HEAP8[$77+0|0]|0;HEAP8[$74+1|0]=HEAP8[$77+1|0]|0;HEAP8[$74+2|0]=HEAP8[$77+2|0]|0;HEAP8[$74+3|0]=HEAP8[$77+3|0]|0;HEAP8[$74+4|0]=HEAP8[$77+4|0]|0;HEAP8[$74+5|0]=HEAP8[$77+5|0]|0;HEAP8[$74+6|0]=HEAP8[$77+6|0]|0;HEAP8[$74+7|0]=HEAP8[$77+7|0]|0;
 $72 = $265;
 $73 = $274;
 $282 = $72;
 $283 = $73;
 ;HEAP8[$__t21$i$i$i+0|0]=HEAP8[$74+0|0]|0;HEAP8[$__t21$i$i$i+1|0]=HEAP8[$74+1|0]|0;HEAP8[$__t21$i$i$i+2|0]=HEAP8[$74+2|0]|0;HEAP8[$__t21$i$i$i+3|0]=HEAP8[$74+3|0]|0;HEAP8[$__t21$i$i$i+4|0]=HEAP8[$74+4|0]|0;HEAP8[$__t21$i$i$i+5|0]=HEAP8[$74+5|0]|0;HEAP8[$__t21$i$i$i+6|0]=HEAP8[$74+6|0]|0;HEAP8[$__t21$i$i$i+7|0]=HEAP8[$74+7|0]|0;
 $69 = $282;
 HEAP32[$70>>2] = $283;
 $284 = $69;
 $68 = $70;
 $285 = $68;
 $286 = HEAP32[$285>>2]|0;
 $62 = $__t21$i$i$i;
 $287 = $62;
 ;HEAP32[$71+0>>2]=HEAP32[$287+0>>2]|0;HEAP32[$71+4>>2]=HEAP32[$287+4>>2]|0;
 ;HEAP8[$67+0|0]=HEAP8[$71+0|0]|0;HEAP8[$67+1|0]=HEAP8[$71+1|0]|0;HEAP8[$67+2|0]=HEAP8[$71+2|0]|0;HEAP8[$67+3|0]=HEAP8[$71+3|0]|0;HEAP8[$67+4|0]=HEAP8[$71+4|0]|0;HEAP8[$67+5|0]=HEAP8[$71+5|0]|0;HEAP8[$67+6|0]=HEAP8[$71+6|0]|0;HEAP8[$67+7|0]=HEAP8[$71+7|0]|0;
 $65 = $284;
 HEAP32[$66>>2] = $286;
 $288 = $65;
 $64 = $66;
 $289 = $64;
 $290 = HEAP32[$289>>2]|0;
 HEAP32[$288>>2] = $290;
 $291 = (($288) + 4|0);
 $63 = $67;
 $292 = $63;
 ;HEAP32[$291+0>>2]=HEAP32[$292+0>>2]|0;HEAP32[$291+4>>2]=HEAP32[$292+4>>2]|0;
 $34 = $219;
 $293 = $34;
 $33 = $293;
 $294 = $33;
 $31 = $294;
 $32 = 0;
 $295 = $31;
 $30 = $295;
 $296 = $30;
 $29 = $296;
 $297 = $29;
 $298 = HEAP32[$297>>2]|0;
 $__tmp$i$i$i27 = $298;
 $299 = $32;
 $6 = $295;
 $300 = $6;
 $5 = $300;
 $301 = $5;
 HEAP32[$301>>2] = $299;
 $302 = $__tmp$i$i$i27;
 $303 = ($302|0)!=(0|0);
 if ($303) {
  $4 = $295;
  $304 = $4;
  $3 = $304;
  $305 = $3;
  $306 = (($305) + 4|0);
  $307 = $__tmp$i$i$i27;
  $27 = $306;
  $28 = $307;
  $308 = $27;
  $309 = (($308) + 5|0);
  $310 = HEAP8[$309]|0;
  $311 = $310&1;
  if ($311) {
   $312 = HEAP32[$308>>2]|0;
   $313 = $28;
   $314 = (($313) + 8|0);
   $315 = (($314) + 4|0);
   $26 = $315;
   $316 = $26;
   $17 = $312;
   $18 = $316;
   $317 = $17;
   $318 = $18;
   ;HEAP8[$16+0|0]=HEAP8[$19+0|0]|0;
   $14 = $317;
   $15 = $318;
  }
  $319 = (($308) + 4|0);
  $320 = HEAP8[$319]|0;
  $321 = $320&1;
  if ($321) {
   $322 = HEAP32[$308>>2]|0;
   $323 = $28;
   $324 = (($323) + 8|0);
   $7 = $324;
   $325 = $7;
   $11 = $322;
   $12 = $325;
   $326 = $11;
   $327 = $12;
   ;HEAP8[$10+0|0]=HEAP8[$13+0|0]|0;
   $8 = $326;
   $9 = $327;
  }
  $328 = $28;
  $329 = ($328|0)!=(0|0);
  if ($329) {
   $330 = HEAP32[$308>>2]|0;
   $331 = $28;
   $23 = $330;
   $24 = $331;
   $25 = 1;
   $332 = $23;
   $333 = $24;
   $334 = $25;
   $20 = $332;
   $21 = $333;
   $22 = $334;
   $335 = $21;
   __ZdlPv($335);
  }
 }
 $2 = $__h;
 $336 = $2;
 $1 = $336;
 $337 = $1;
 $0 = $337;
 $338 = $0;
 $339 = HEAP32[$338>>2]|0;
 __THREW__ = 0;
 invoke_viii(3,($222|0),($224|0),($339|0));
 $340 = __THREW__; __THREW__ = 0;
 $341 = $340&1;
 if ($341) {
  $410 = ___cxa_find_matching_catch(-1,-1)|0;
  $411 = tempRet0;
  $220 = $410;
  $221 = $411;
  $184 = $__h;
  $412 = $184;
  $183 = $412;
  $413 = $183;
  $181 = $413;
  $182 = 0;
  $414 = $181;
  $180 = $414;
  $415 = $180;
  $179 = $415;
  $416 = $179;
  $417 = HEAP32[$416>>2]|0;
  $__tmp$i$i$i = $417;
  $418 = $182;
  $156 = $414;
  $419 = $156;
  $155 = $419;
  $420 = $155;
  HEAP32[$420>>2] = $418;
  $421 = $__tmp$i$i$i;
  $422 = ($421|0)!=(0|0);
  if ($422) {
   $154 = $414;
   $423 = $154;
   $153 = $423;
   $424 = $153;
   $425 = (($424) + 4|0);
   $426 = $__tmp$i$i$i;
   $177 = $425;
   $178 = $426;
   $427 = $177;
   $428 = (($427) + 5|0);
   $429 = HEAP8[$428]|0;
   $430 = $429&1;
   if ($430) {
    $431 = HEAP32[$427>>2]|0;
    $432 = $178;
    $433 = (($432) + 8|0);
    $434 = (($433) + 4|0);
    $176 = $434;
    $435 = $176;
    $167 = $431;
    $168 = $435;
    $436 = $167;
    $437 = $168;
    ;HEAP8[$166+0|0]=HEAP8[$169+0|0]|0;
    $164 = $436;
    $165 = $437;
   }
   $438 = (($427) + 4|0);
   $439 = HEAP8[$438]|0;
   $440 = $439&1;
   if ($440) {
    $441 = HEAP32[$427>>2]|0;
    $442 = $178;
    $443 = (($442) + 8|0);
    $157 = $443;
    $444 = $157;
    $161 = $441;
    $162 = $444;
    $445 = $161;
    $446 = $162;
    ;HEAP8[$160+0|0]=HEAP8[$163+0|0]|0;
    $158 = $445;
    $159 = $446;
   }
   $447 = $178;
   $448 = ($447|0)!=(0|0);
   if ($448) {
    $449 = HEAP32[$427>>2]|0;
    $450 = $178;
    $173 = $449;
    $174 = $450;
    $175 = 1;
    $451 = $173;
    $452 = $174;
    $453 = $175;
    $170 = $451;
    $171 = $452;
    $172 = $453;
    $454 = $171;
    __ZdlPv($454);
   }
  }
  $456 = $220;
  $457 = $221;
  ___resumeException($456|0);
  // unreachable;
 }
 $41 = $__r;
 $42 = $222;
 $342 = $41;
 $343 = $42;
 $38 = $342;
 $39 = $343;
 $344 = $38;
 $345 = $39;
 ;HEAP32[$40+0>>2]=HEAP32[$345+0>>2]|0;
 ;HEAP8[$37+0|0]=HEAP8[$40+0|0]|0;HEAP8[$37+1|0]=HEAP8[$40+1|0]|0;HEAP8[$37+2|0]=HEAP8[$40+2|0]|0;HEAP8[$37+3|0]=HEAP8[$40+3|0]|0;
 $36 = $344;
 $346 = $36;
 ;HEAP8[$__i1$i$i$i+0|0]=HEAP8[$37+0|0]|0;HEAP8[$__i1$i$i$i+1|0]=HEAP8[$37+1|0]|0;HEAP8[$__i1$i$i$i+2|0]=HEAP8[$37+2|0]|0;HEAP8[$__i1$i$i$i+3|0]=HEAP8[$37+3|0]|0;
 $35 = $346;
 $347 = $35;
 ;HEAP32[$347+0>>2]=HEAP32[$__i1$i$i$i+0>>2]|0;
 $348 = (($344) + 4|0);
 $349 = $39;
 $350 = (($349) + 4|0);
 $351 = HEAP8[$350]|0;
 $352 = $351&1;
 $353 = $352&1;
 HEAP8[$348] = $353;
 $47 = $__h;
 $354 = $47;
 $46 = $354;
 $355 = $46;
 $45 = $355;
 $356 = $45;
 $357 = HEAP32[$356>>2]|0;
 $__t$i = $357;
 $44 = $354;
 $358 = $44;
 $43 = $358;
 $359 = $43;
 HEAP32[$359>>2] = 0;
 $51 = $__r;
 $360 = $51;
 $50 = $360;
 $361 = $50;
 $362 = HEAP32[$361>>2]|0;
 $363 = (($362) + 8|0);
 $49 = $363;
 $364 = $49;
 $48 = $364;
 $365 = $48;
 $366 = (($365) + 4|0);
 $214 = $366;
 $223 = 1;
 $111 = $__h;
 $367 = $111;
 $110 = $367;
 $368 = $110;
 $108 = $368;
 $109 = 0;
 $369 = $108;
 $107 = $369;
 $370 = $107;
 $106 = $370;
 $371 = $106;
 $372 = HEAP32[$371>>2]|0;
 $__tmp$i$i$i13 = $372;
 $373 = $109;
 $83 = $369;
 $374 = $83;
 $82 = $374;
 $375 = $82;
 HEAP32[$375>>2] = $373;
 $376 = $__tmp$i$i$i13;
 $377 = ($376|0)!=(0|0);
 if ($377) {
  $81 = $369;
  $378 = $81;
  $80 = $378;
  $379 = $80;
  $380 = (($379) + 4|0);
  $381 = $__tmp$i$i$i13;
  $104 = $380;
  $105 = $381;
  $382 = $104;
  $383 = (($382) + 5|0);
  $384 = HEAP8[$383]|0;
  $385 = $384&1;
  if ($385) {
   $386 = HEAP32[$382>>2]|0;
   $387 = $105;
   $388 = (($387) + 8|0);
   $389 = (($388) + 4|0);
   $103 = $389;
   $390 = $103;
   $94 = $386;
   $95 = $390;
   $391 = $94;
   $392 = $95;
   ;HEAP8[$93+0|0]=HEAP8[$96+0|0]|0;
   $91 = $391;
   $92 = $392;
  }
  $393 = (($382) + 4|0);
  $394 = HEAP8[$393]|0;
  $395 = $394&1;
  if ($395) {
   $396 = HEAP32[$382>>2]|0;
   $397 = $105;
   $398 = (($397) + 8|0);
   $84 = $398;
   $399 = $84;
   $88 = $396;
   $89 = $399;
   $400 = $88;
   $401 = $89;
   ;HEAP8[$87+0|0]=HEAP8[$90+0|0]|0;
   $85 = $400;
   $86 = $401;
  }
  $402 = $105;
  $403 = ($402|0)!=(0|0);
  if ($403) {
   $404 = HEAP32[$382>>2]|0;
   $405 = $105;
   $100 = $404;
   $101 = $405;
   $102 = 1;
   $406 = $100;
   $407 = $101;
   $408 = $102;
   $97 = $406;
   $98 = $407;
   $99 = $408;
   $409 = $98;
   __ZdlPv($409);
  }
 }
 $455 = $214;
 STACKTOP = sp;return ($455|0);
}
function __ZL6obj_fnPK18p3_global_settingsP11primer_pair($pa,$h) {
 $pa = $pa|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0;
 var $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0;
 var $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0.0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0.0, $292 = 0, $293 = 0, $294 = 0, $295 = 0.0, $296 = 0;
 var $297 = 0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0.0, $340 = 0.0, $341 = 0, $342 = 0, $343 = 0, $344 = 0.0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0.0, $377 = 0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0, $384 = 0, $385 = 0, $386 = 0.0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0.0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0.0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0, $416 = 0, $417 = 0, $418 = 0.0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0.0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0, $433 = 0.0, $434 = 0, $435 = 0, $436 = 0, $437 = 0.0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0.0, $442 = 0.0, $443 = 0, $444 = 0, $445 = 0.0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0.0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0, $456 = 0, $457 = 0, $458 = 0.0;
 var $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0, $467 = 0, $468 = 0, $469 = 0.0, $47 = 0.0, $470 = 0.0, $471 = 0, $472 = 0, $473 = 0.0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0.0, $479 = 0.0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0.0, $484 = 0.0, $485 = 0.0, $486 = 0, $487 = 0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0;
 var $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $lower_tm = 0.0;
 var $sum = 0.0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer16 = 0, $vararg_buffer22 = 0, $vararg_buffer28 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr3 = 0, $vararg_ptr31 = 0;
 var $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer22 = sp + 80|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer4 = sp + 40|0;
 $vararg_buffer = sp + 8|0;
 $0 = $pa;
 $1 = $h;
 $sum = 0.0;
 $2 = $1;
 $3 = (($2) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 16|0);
 $6 = +HEAPF64[$5>>3];
 $lower_tm = $6;
 $7 = $1;
 $8 = (($7) + 72|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 16|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $1;
 $13 = (($12) + 76|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 16|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $11 < $16;
 if ($17) {
  $18 = $1;
  $19 = (($18) + 72|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 16|0);
  $22 = +HEAPF64[$21>>3];
  $lower_tm = $22;
 }
 $23 = $0;
 $24 = (($23) + 2520|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $25 != 0.0;
 if ($26) {
  $27 = $0;
  $28 = (($27) + 2520|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $1;
  $31 = (($30) + 72|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 40|0);
  $34 = +HEAPF64[$33>>3];
  $35 = $1;
  $36 = (($35) + 76|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + 40|0);
  $39 = +HEAPF64[$38>>3];
  $40 = $34 + $39;
  $41 = $29 * $40;
  $42 = $sum;
  $43 = $42 + $41;
  $sum = $43;
 }
 $44 = $0;
 $45 = (($44) + 2520|0);
 $46 = (($45) + 8|0);
 $47 = +HEAPF64[$46>>3];
 $48 = $47 != 0.0;
 if ($48) {
  $49 = $0;
  $50 = (($49) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)!=(0);
  if ($52) {
   $53 = $0;
   $54 = (($53) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)!=(0);
   if ($56) {
    $57 = $0;
    $58 = (($57) + 12|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($59|0)!=(0);
    if ($60) {
     $61 = $0;
     $62 = (($61) + 2520|0);
     $63 = (($62) + 8|0);
     $64 = +HEAPF64[$63>>3];
     $65 = $1;
     $66 = (($65) + 80|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = (($67) + 40|0);
     $69 = +HEAPF64[$68>>3];
     $70 = $64 * $69;
     $71 = $sum;
     $72 = $71 + $70;
     $sum = $72;
    }
   }
  }
 }
 $73 = $0;
 $74 = (($73) + 2520|0);
 $75 = (($74) + 16|0);
 $76 = +HEAPF64[$75>>3];
 $77 = $76 != 0.0;
 if ($77) {
  $78 = $0;
  $79 = (($78) + 2520|0);
  $80 = (($79) + 16|0);
  $81 = +HEAPF64[$80>>3];
  $82 = $1;
  $83 = (($82) + 8|0);
  $84 = +HEAPF64[$83>>3];
  $85 = $81 * $84;
  $86 = $sum;
  $87 = $86 + $85;
  $sum = $87;
 }
 $88 = $0;
 $89 = (($88) + 2504|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ($90|0)==(0);
 if ($91) {
  $92 = $0;
  $93 = (($92) + 2520|0);
  $94 = (($93) + 24|0);
  $95 = +HEAPF64[$94>>3];
  $96 = $95 != 0.0;
  if ($96) {
   $97 = $0;
   $98 = (($97) + 2520|0);
   $99 = (($98) + 24|0);
   $100 = +HEAPF64[$99>>3];
   $101 = $1;
   $102 = (($101) + 40|0);
   $103 = +HEAPF64[$102>>3];
   $104 = $100 * $103;
   $105 = $sum;
   $106 = $105 + $104;
   $sum = $106;
  }
  $107 = $0;
  $108 = (($107) + 2520|0);
  $109 = (($108) + 40|0);
  $110 = +HEAPF64[$109>>3];
  $111 = $110 != 0.0;
  if ($111) {
   $112 = $0;
   $113 = (($112) + 2520|0);
   $114 = (($113) + 40|0);
   $115 = +HEAPF64[$114>>3];
   $116 = $1;
   $117 = (($116) + 48|0);
   $118 = +HEAPF64[$117>>3];
   $119 = $115 * $118;
   $120 = $sum;
   $121 = $120 + $119;
   $sum = $121;
  }
 } else {
  $122 = $0;
  $123 = (($122) + 2504|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ($124|0)==(1);
  if (!($125)) {
   $260 = HEAP32[_stderr>>2]|0;
   $261 = HEAP32[8>>2]|0;
   HEAP32[$vararg_buffer>>2] = $261;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 56;
   $vararg_ptr2 = (($vararg_buffer) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 4387;
   $vararg_ptr3 = (($vararg_buffer) + 12|0);
   HEAP32[$vararg_ptr3>>2] = 11584;
   (_fprintf(($260|0),(16|0),($vararg_buffer|0))|0);
   _abort();
   // unreachable;
  }
  $126 = $0;
  $127 = (($126) + 2520|0);
  $128 = (($127) + 32|0);
  $129 = +HEAPF64[$128>>3];
  $130 = $129 != 0.0;
  if ($130) {
   $131 = $lower_tm;
   $132 = $0;
   $133 = (($132) + 2520|0);
   $134 = (($133) + 56|0);
   $135 = +HEAPF64[$134>>3];
   $136 = $131 - $135;
   $137 = $1;
   $138 = (($137) + 40|0);
   $139 = +HEAPF64[$138>>3];
   $140 = $136 <= $139;
   if ($140) {
    $141 = $0;
    $142 = (($141) + 2520|0);
    $143 = (($142) + 32|0);
    $144 = +HEAPF64[$143>>3];
    $145 = $1;
    $146 = (($145) + 40|0);
    $147 = +HEAPF64[$146>>3];
    $148 = $lower_tm;
    $149 = $0;
    $150 = (($149) + 2520|0);
    $151 = (($150) + 56|0);
    $152 = +HEAPF64[$151>>3];
    $153 = $148 - $152;
    $154 = $153 - 1.0;
    $155 = $147 - $154;
    $156 = $144 * $155;
    $157 = $sum;
    $158 = $157 + $156;
    $sum = $158;
   }
  }
  $159 = $0;
  $160 = (($159) + 2520|0);
  $161 = (($160) + 32|0);
  $162 = +HEAPF64[$161>>3];
  $163 = $162 != 0.0;
  if ($163) {
   $164 = $lower_tm;
   $165 = $0;
   $166 = (($165) + 2520|0);
   $167 = (($166) + 56|0);
   $168 = +HEAPF64[$167>>3];
   $169 = $164 - $168;
   $170 = $1;
   $171 = (($170) + 40|0);
   $172 = +HEAPF64[$171>>3];
   $173 = $169 > $172;
   if ($173) {
    $174 = $0;
    $175 = (($174) + 2520|0);
    $176 = (($175) + 32|0);
    $177 = +HEAPF64[$176>>3];
    $178 = $lower_tm;
    $179 = $0;
    $180 = (($179) + 2520|0);
    $181 = (($180) + 56|0);
    $182 = +HEAPF64[$181>>3];
    $183 = $178 - $182;
    $184 = $183 + 1.0;
    $185 = $1;
    $186 = (($185) + 40|0);
    $187 = +HEAPF64[$186>>3];
    $188 = $184 - $187;
    $189 = 1.0 / $188;
    $190 = $177 * $189;
    $191 = $sum;
    $192 = $191 + $190;
    $sum = $192;
   }
  }
  $193 = $0;
  $194 = (($193) + 2520|0);
  $195 = (($194) + 48|0);
  $196 = +HEAPF64[$195>>3];
  $197 = $196 != 0.0;
  if ($197) {
   $198 = $lower_tm;
   $199 = $0;
   $200 = (($199) + 2520|0);
   $201 = (($200) + 56|0);
   $202 = +HEAPF64[$201>>3];
   $203 = $198 - $202;
   $204 = $1;
   $205 = (($204) + 48|0);
   $206 = +HEAPF64[$205>>3];
   $207 = $203 <= $206;
   if ($207) {
    $208 = $0;
    $209 = (($208) + 2520|0);
    $210 = (($209) + 48|0);
    $211 = +HEAPF64[$210>>3];
    $212 = $1;
    $213 = (($212) + 48|0);
    $214 = +HEAPF64[$213>>3];
    $215 = $lower_tm;
    $216 = $0;
    $217 = (($216) + 2520|0);
    $218 = (($217) + 56|0);
    $219 = +HEAPF64[$218>>3];
    $220 = $215 - $219;
    $221 = $220 - 1.0;
    $222 = $214 - $221;
    $223 = $211 * $222;
    $224 = $sum;
    $225 = $224 + $223;
    $sum = $225;
   }
  }
  $226 = $0;
  $227 = (($226) + 2520|0);
  $228 = (($227) + 48|0);
  $229 = +HEAPF64[$228>>3];
  $230 = $229 != 0.0;
  if ($230) {
   $231 = $lower_tm;
   $232 = $0;
   $233 = (($232) + 2520|0);
   $234 = (($233) + 56|0);
   $235 = +HEAPF64[$234>>3];
   $236 = $231 - $235;
   $237 = $1;
   $238 = (($237) + 48|0);
   $239 = +HEAPF64[$238>>3];
   $240 = $236 > $239;
   if ($240) {
    $241 = $0;
    $242 = (($241) + 2520|0);
    $243 = (($242) + 48|0);
    $244 = +HEAPF64[$243>>3];
    $245 = $lower_tm;
    $246 = $0;
    $247 = (($246) + 2520|0);
    $248 = (($247) + 56|0);
    $249 = +HEAPF64[$248>>3];
    $250 = $245 - $249;
    $251 = $250 + 1.0;
    $252 = $1;
    $253 = (($252) + 48|0);
    $254 = +HEAPF64[$253>>3];
    $255 = $251 - $254;
    $256 = 1.0 / $255;
    $257 = $244 * $256;
    $258 = $sum;
    $259 = $258 + $257;
    $sum = $259;
   }
  }
 }
 $262 = $0;
 $263 = (($262) + 2520|0);
 $264 = (($263) + 64|0);
 $265 = +HEAPF64[$264>>3];
 $266 = $265 != 0.0;
 if ($266) {
  $267 = $1;
  $268 = (($267) + 16|0);
  $269 = +HEAPF64[$268>>3];
  $270 = $0;
  $271 = (($270) + 2440|0);
  $272 = +HEAPF64[$271>>3];
  $273 = $269 < $272;
  if ($273) {
   $274 = $0;
   $275 = (($274) + 2520|0);
   $276 = (($275) + 64|0);
   $277 = +HEAPF64[$276>>3];
   $278 = $0;
   $279 = (($278) + 2440|0);
   $280 = +HEAPF64[$279>>3];
   $281 = $1;
   $282 = (($281) + 16|0);
   $283 = +HEAPF64[$282>>3];
   $284 = $280 - $283;
   $285 = $277 * $284;
   $286 = $sum;
   $287 = $286 + $285;
   $sum = $287;
  }
 }
 $288 = $0;
 $289 = (($288) + 2520|0);
 $290 = (($289) + 72|0);
 $291 = +HEAPF64[$290>>3];
 $292 = $291 != 0.0;
 if ($292) {
  $293 = $1;
  $294 = (($293) + 16|0);
  $295 = +HEAPF64[$294>>3];
  $296 = $0;
  $297 = (($296) + 2440|0);
  $298 = +HEAPF64[$297>>3];
  $299 = $295 > $298;
  if ($299) {
   $300 = $0;
   $301 = (($300) + 2520|0);
   $302 = (($301) + 72|0);
   $303 = +HEAPF64[$302>>3];
   $304 = $1;
   $305 = (($304) + 16|0);
   $306 = +HEAPF64[$305>>3];
   $307 = $0;
   $308 = (($307) + 2440|0);
   $309 = +HEAPF64[$308>>3];
   $310 = $306 - $309;
   $311 = $303 * $310;
   $312 = $sum;
   $313 = $312 + $311;
   $sum = $313;
  }
 }
 $314 = $0;
 $315 = (($314) + 2520|0);
 $316 = (($315) + 80|0);
 $317 = +HEAPF64[$316>>3];
 $318 = $317 != 0.0;
 if ($318) {
  $319 = $1;
  $320 = (($319) + 88|0);
  $321 = HEAP32[$320>>2]|0;
  $322 = $0;
  $323 = (($322) + 2420|0);
  $324 = HEAP32[$323>>2]|0;
  $325 = ($321|0)<($324|0);
  if ($325) {
   $326 = $0;
   $327 = (($326) + 2520|0);
   $328 = (($327) + 80|0);
   $329 = +HEAPF64[$328>>3];
   $330 = $0;
   $331 = (($330) + 2420|0);
   $332 = HEAP32[$331>>2]|0;
   $333 = $1;
   $334 = (($333) + 88|0);
   $335 = HEAP32[$334>>2]|0;
   $336 = (($332) - ($335))|0;
   $337 = (+($336|0));
   $338 = $329 * $337;
   $339 = $sum;
   $340 = $339 + $338;
   $sum = $340;
  }
 }
 $341 = $0;
 $342 = (($341) + 2520|0);
 $343 = (($342) + 88|0);
 $344 = +HEAPF64[$343>>3];
 $345 = $344 != 0.0;
 if ($345) {
  $346 = $1;
  $347 = (($346) + 88|0);
  $348 = HEAP32[$347>>2]|0;
  $349 = $0;
  $350 = (($349) + 2420|0);
  $351 = HEAP32[$350>>2]|0;
  $352 = ($348|0)>($351|0);
  if ($352) {
   $353 = $0;
   $354 = (($353) + 2520|0);
   $355 = (($354) + 88|0);
   $356 = +HEAPF64[$355>>3];
   $357 = $1;
   $358 = (($357) + 88|0);
   $359 = HEAP32[$358>>2]|0;
   $360 = $0;
   $361 = (($360) + 2420|0);
   $362 = HEAP32[$361>>2]|0;
   $363 = (($359) - ($362))|0;
   $364 = (+($363|0));
   $365 = $356 * $364;
   $366 = $sum;
   $367 = $366 + $365;
   $sum = $367;
  }
 }
 $368 = $0;
 $369 = (($368) + 2520|0);
 $370 = (($369) + 96|0);
 $371 = +HEAPF64[$370>>3];
 $372 = $371 != 0.0;
 if ($372) {
  $373 = $0;
  $374 = (($373) + 2520|0);
  $375 = (($374) + 96|0);
  $376 = +HEAPF64[$375>>3];
  $377 = $1;
  $378 = (($377) + 64|0);
  $379 = +HEAPF64[$378>>3];
  $380 = $376 * $379;
  $381 = $sum;
  $382 = $381 + $380;
  $sum = $382;
 }
 $383 = $0;
 $384 = (($383) + 2520|0);
 $385 = (($384) + 104|0);
 $386 = +HEAPF64[$385>>3];
 $387 = $386 != 0.0;
 do {
  if ($387) {
   $388 = $0;
   $389 = (($388) + 2508|0);
   $390 = HEAP32[$389>>2]|0;
   $391 = ($390|0)==(0);
   if ($391) {
    $392 = $0;
    $393 = (($392) + 2520|0);
    $394 = (($393) + 104|0);
    $395 = +HEAPF64[$394>>3];
    $396 = $395 >= 0.0;
    if (!($396)) {
     $397 = HEAP32[_stderr>>2]|0;
     $398 = HEAP32[8>>2]|0;
     HEAP32[$vararg_buffer4>>2] = $398;
     $vararg_ptr7 = (($vararg_buffer4) + 4|0);
     HEAP32[$vararg_ptr7>>2] = 56;
     $vararg_ptr8 = (($vararg_buffer4) + 8|0);
     HEAP32[$vararg_ptr8>>2] = 4413;
     $vararg_ptr9 = (($vararg_buffer4) + 12|0);
     HEAP32[$vararg_ptr9>>2] = 13040;
     (_fprintf(($397|0),(16|0),($vararg_buffer4|0))|0);
     _abort();
     // unreachable;
    }
    $399 = $1;
    $400 = (($399) + 56|0);
    $401 = +HEAPF64[$400>>3];
    $402 = $401 >= 0.0;
    if ($402) {
     $405 = $0;
     $406 = (($405) + 2520|0);
     $407 = (($406) + 104|0);
     $408 = +HEAPF64[$407>>3];
     $409 = $1;
     $410 = (($409) + 56|0);
     $411 = +HEAPF64[$410>>3];
     $412 = $408 * $411;
     $413 = $sum;
     $414 = $413 + $412;
     $sum = $414;
     break;
    } else {
     $403 = HEAP32[_stderr>>2]|0;
     $404 = HEAP32[8>>2]|0;
     HEAP32[$vararg_buffer10>>2] = $404;
     $vararg_ptr13 = (($vararg_buffer10) + 4|0);
     HEAP32[$vararg_ptr13>>2] = 56;
     $vararg_ptr14 = (($vararg_buffer10) + 8|0);
     HEAP32[$vararg_ptr14>>2] = 4414;
     $vararg_ptr15 = (($vararg_buffer10) + 12|0);
     HEAP32[$vararg_ptr15>>2] = 13088;
     (_fprintf(($403|0),(16|0),($vararg_buffer10|0))|0);
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $415 = $0;
 $416 = (($415) + 2520|0);
 $417 = (($416) + 112|0);
 $418 = +HEAPF64[$417>>3];
 $419 = $418 != 0.0;
 if ($419) {
  $420 = $0;
  $421 = (($420) + 2508|0);
  $422 = HEAP32[$421>>2]|0;
  $423 = ($422|0)==(1);
  if ($423) {
   $424 = $0;
   $425 = (($424) + 2520|0);
   $426 = (($425) + 112|0);
   $427 = +HEAPF64[$426>>3];
   $428 = $427 >= 0.0;
   if (!($428)) {
    $429 = HEAP32[_stderr>>2]|0;
    $430 = HEAP32[8>>2]|0;
    HEAP32[$vararg_buffer16>>2] = $430;
    $vararg_ptr19 = (($vararg_buffer16) + 4|0);
    HEAP32[$vararg_ptr19>>2] = 56;
    $vararg_ptr20 = (($vararg_buffer16) + 8|0);
    HEAP32[$vararg_ptr20>>2] = 4418;
    $vararg_ptr21 = (($vararg_buffer16) + 12|0);
    HEAP32[$vararg_ptr21>>2] = 13120;
    (_fprintf(($429|0),(16|0),($vararg_buffer16|0))|0);
    _abort();
    // unreachable;
   }
   $431 = $1;
   $432 = (($431) + 56|0);
   $433 = +HEAPF64[$432>>3];
   $434 = $433 >= 0.0;
   if (!($434)) {
    $435 = HEAP32[_stderr>>2]|0;
    $436 = HEAP32[8>>2]|0;
    HEAP32[$vararg_buffer22>>2] = $436;
    $vararg_ptr25 = (($vararg_buffer22) + 4|0);
    HEAP32[$vararg_ptr25>>2] = 56;
    $vararg_ptr26 = (($vararg_buffer22) + 8|0);
    HEAP32[$vararg_ptr26>>2] = 4419;
    $vararg_ptr27 = (($vararg_buffer22) + 12|0);
    HEAP32[$vararg_ptr27>>2] = 13088;
    (_fprintf(($435|0),(16|0),($vararg_buffer22|0))|0);
    _abort();
    // unreachable;
   }
   $437 = $lower_tm;
   $438 = $0;
   $439 = (($438) + 2520|0);
   $440 = (($439) + 56|0);
   $441 = +HEAPF64[$440>>3];
   $442 = $437 - $441;
   $443 = $1;
   $444 = (($443) + 56|0);
   $445 = +HEAPF64[$444>>3];
   $446 = $442 <= $445;
   if ($446) {
    $447 = $0;
    $448 = (($447) + 2520|0);
    $449 = (($448) + 112|0);
    $450 = +HEAPF64[$449>>3];
    $451 = $1;
    $452 = (($451) + 56|0);
    $453 = +HEAPF64[$452>>3];
    $454 = $lower_tm;
    $455 = $0;
    $456 = (($455) + 2520|0);
    $457 = (($456) + 56|0);
    $458 = +HEAPF64[$457>>3];
    $459 = $454 - $458;
    $460 = $459 - 1.0;
    $461 = $453 - $460;
    $462 = $450 * $461;
    $463 = $sum;
    $464 = $463 + $462;
    $sum = $464;
   }
   $465 = $lower_tm;
   $466 = $0;
   $467 = (($466) + 2520|0);
   $468 = (($467) + 56|0);
   $469 = +HEAPF64[$468>>3];
   $470 = $465 - $469;
   $471 = $1;
   $472 = (($471) + 56|0);
   $473 = +HEAPF64[$472>>3];
   $474 = $470 > $473;
   if ($474) {
    $475 = $0;
    $476 = (($475) + 2520|0);
    $477 = (($476) + 112|0);
    $478 = +HEAPF64[$477>>3];
    $479 = $lower_tm;
    $480 = $0;
    $481 = (($480) + 2520|0);
    $482 = (($481) + 56|0);
    $483 = +HEAPF64[$482>>3];
    $484 = $479 - $483;
    $485 = $484 + 1.0;
    $486 = $1;
    $487 = (($486) + 56|0);
    $488 = +HEAPF64[$487>>3];
    $489 = $485 - $488;
    $490 = 1.0 / $489;
    $491 = $478 * $490;
    $492 = $sum;
    $493 = $492 + $491;
    $sum = $493;
   }
  }
 }
 $494 = $sum;
 $495 = $494 >= 0.0;
 if ($495) {
  $498 = $sum;
  STACKTOP = sp;return (+$498);
 } else {
  $496 = HEAP32[_stderr>>2]|0;
  $497 = HEAP32[8>>2]|0;
  HEAP32[$vararg_buffer28>>2] = $497;
  $vararg_ptr31 = (($vararg_buffer28) + 4|0);
  HEAP32[$vararg_ptr31>>2] = 56;
  $vararg_ptr32 = (($vararg_buffer28) + 8|0);
  HEAP32[$vararg_ptr32>>2] = 4427;
  $vararg_ptr33 = (($vararg_buffer28) + 12|0);
  HEAP32[$vararg_ptr33>>2] = 13176;
  (_fprintf(($496|0),(16|0),($vararg_buffer28|0))|0);
  _abort();
  // unreachable;
 }
 return +0;
}
function __ZL8add_pairPK11primer_pairP12pair_array_t($pair,$retpair) {
 $pair = $pair|0;
 $retpair = $retpair|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $pair;
 $1 = $retpair;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (0)==($3|0);
 if ($4) {
  $5 = $1;
  HEAP32[$5>>2] = 5;
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7*104)|0;
  $9 = (__ZL14pr_safe_mallocj($8)|0);
  $10 = $1;
  $11 = (($10) + 8|0);
  HEAP32[$11>>2] = $9;
 } else {
  $12 = $1;
  $13 = HEAP32[$12>>2]|0;
  $14 = $1;
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($13|0)==($16|0);
  if ($17) {
   $18 = $1;
   $19 = HEAP32[$18>>2]|0;
   $20 = $19<<1;
   HEAP32[$18>>2] = $20;
   $21 = $1;
   $22 = (($21) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $1;
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25*104)|0;
   $27 = (__ZL15pr_safe_reallocPvj($23,$26)|0);
   $28 = $1;
   $29 = (($28) + 8|0);
   HEAP32[$29>>2] = $27;
  }
 }
 $30 = $1;
 $31 = (($30) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $1;
 $34 = (($33) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + (($32*104)|0)|0);
 $37 = $0;
 dest=$36+0|0; src=$37+0|0; stop=dest+104|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $38 = $1;
 $39 = (($38) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + 1)|0;
 HEAP32[$39>>2] = $41;
 STACKTOP = sp;return;
}
function __ZL39right_oligo_in_pair_overlaps_used_oligoPK10primer_recPK11primer_pairi($right,$best_pair,$min_dist) {
 $right = $right|0;
 $best_pair = $best_pair|0;
 $min_dist = $min_dist|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $best_pos = 0;
 var $pair_pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $right;
 $2 = $best_pair;
 $3 = $min_dist;
 $4 = $3;
 $5 = ($4|0)==(-1);
 if ($5) {
  $0 = 0;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 $6 = $2;
 $7 = (($6) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = (($11) + 76|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 112|0);
 $15 = HEAP8[$14]|0;
 $16 = $15 << 24 >> 24;
 $17 = (($10) - ($16))|0;
 $18 = (($17) + 1)|0;
 $best_pos = $18;
 $19 = $1;
 $20 = (($19) + 56|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $1;
 $23 = (($22) + 112|0);
 $24 = HEAP8[$23]|0;
 $25 = $24 << 24 >> 24;
 $26 = (($21) - ($25))|0;
 $27 = (($26) + 1)|0;
 $pair_pos = $27;
 $28 = $best_pos;
 $29 = $pair_pos;
 $30 = (($28) - ($29))|0;
 $31 = (Math_abs(($30|0))|0);
 $32 = $3;
 $33 = ($31|0)<($32|0);
 if ($33) {
  $34 = $3;
  $35 = ($34|0)!=(0);
  if ($35) {
   $0 = 1;
   $58 = $0;
   STACKTOP = sp;return ($58|0);
  }
 }
 $36 = $2;
 $37 = (($36) + 76|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + 112|0);
 $40 = HEAP8[$39]|0;
 $41 = $40 << 24 >> 24;
 $42 = $1;
 $43 = (($42) + 112|0);
 $44 = HEAP8[$43]|0;
 $45 = $44 << 24 >> 24;
 $46 = ($41|0)==($45|0);
 if ($46) {
  $47 = $2;
  $48 = (($47) + 76|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + 56|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $1;
  $53 = (($52) + 56|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($51|0)==($54|0);
  if ($55) {
   $56 = $3;
   $57 = ($56|0)==(0);
   if ($57) {
    $0 = 1;
    $58 = $0;
    STACKTOP = sp;return ($58|0);
   }
  }
 }
 $0 = 0;
 $58 = $0;
 STACKTOP = sp;return ($58|0);
}
function __ZL38left_oligo_in_pair_overlaps_used_oligoPK10primer_recPK11primer_pairi($left,$best_pair,$min_dist) {
 $left = $left|0;
 $best_pair = $best_pair|0;
 $min_dist = $min_dist|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $best_pos = 0;
 var $pair_pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $left;
 $2 = $best_pair;
 $3 = $min_dist;
 $4 = $3;
 $5 = ($4|0)==(-1);
 if ($5) {
  $0 = 0;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 $6 = $2;
 $7 = (($6) + 72|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = (($11) + 72|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 112|0);
 $15 = HEAP8[$14]|0;
 $16 = $15 << 24 >> 24;
 $17 = (($10) + ($16))|0;
 $18 = (($17) - 1)|0;
 $best_pos = $18;
 $19 = $1;
 $20 = (($19) + 56|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $1;
 $23 = (($22) + 112|0);
 $24 = HEAP8[$23]|0;
 $25 = $24 << 24 >> 24;
 $26 = (($21) + ($25))|0;
 $27 = (($26) - 1)|0;
 $pair_pos = $27;
 $28 = $best_pos;
 $29 = $pair_pos;
 $30 = (($28) - ($29))|0;
 $31 = (Math_abs(($30|0))|0);
 $32 = $3;
 $33 = ($31|0)<($32|0);
 if ($33) {
  $34 = $3;
  $35 = ($34|0)!=(0);
  if ($35) {
   $0 = 1;
   $58 = $0;
   STACKTOP = sp;return ($58|0);
  }
 }
 $36 = $2;
 $37 = (($36) + 72|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + 112|0);
 $40 = HEAP8[$39]|0;
 $41 = $40 << 24 >> 24;
 $42 = $1;
 $43 = (($42) + 112|0);
 $44 = HEAP8[$43]|0;
 $45 = $44 << 24 >> 24;
 $46 = ($41|0)==($45|0);
 if ($46) {
  $47 = $2;
  $48 = (($47) + 72|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + 56|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $1;
  $53 = (($52) + 56|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($51|0)==($54|0);
  if ($55) {
   $56 = $3;
   $57 = ($56|0)==(0);
   if ($57) {
    $0 = 1;
    $58 = $0;
    STACKTOP = sp;return ($58|0);
   }
  }
 }
 $0 = 0;
 $58 = $0;
 STACKTOP = sp;return ($58|0);
}
function __ZN9__gnu_cxx8hash_mapIiP11primer_pairNS_4hashIiEENSt3__18equal_toIiEENS5_9allocatorINS5_4pairIKiS2_EEEEE16__construct_nodeERSA_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__d1$i = 0, $__h = 0, $__na = 0, $__t$i$i$i = 0, $__t$i$i$i$i = 0, $__t$i$i$i11$i = 0, $__t21$i$i$i = 0, $__t21$i$i$i$i = 0, $__t21$i$i$i12$i = 0, $__t21$i$i$i25 = 0, $__tmp$i$i$i = 0, $__tmp$i$i$i16 = 0, $__tmp$i$i$i2 = 0, $__tmp$i$i$i2$i = 0, $__tmp$i$i$i9 = 0, $__u1$i = 0, $__u1$i$i = 0, $__u1$i13$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1536|0;
 $26 = sp + 1100|0;
 $27 = sp;
 $30 = sp + 1088|0;
 $31 = sp + 1080|0;
 $__t21$i$i$i12$i = sp + 96|0;
 $34 = sp + 104|0;
 $37 = sp + 1056|0;
 $__u1$i13$i = sp + 128|0;
 $39 = sp + 136|0;
 $47 = sp + 80|0;
 $50 = sp + 1526|0;
 $53 = sp + 56|0;
 $56 = sp + 1527|0;
 $91 = sp + 1244|0;
 $92 = sp + 232|0;
 $95 = sp + 1456|0;
 $96 = sp + 1448|0;
 $__t21$i$i$i$i = sp + 192|0;
 $99 = sp + 40|0;
 $102 = sp + 1416|0;
 $__u1$i$i = sp + 72|0;
 $104 = sp + 48|0;
 $110 = sp + 1516|0;
 $111 = sp + 1504|0;
 $112 = sp + 1500|0;
 $132 = sp + 1260|0;
 $133 = sp + 144|0;
 $136 = sp + 1316|0;
 $137 = sp + 1320|0;
 $__t21$i$i$i25 = sp + 112|0;
 $140 = sp + 88|0;
 $143 = sp + 1344|0;
 $__u1$i = sp + 8|0;
 $145 = sp + 16|0;
 $156 = sp + 208|0;
 $159 = sp + 1521|0;
 $162 = sp + 184|0;
 $165 = sp + 1520|0;
 $189 = sp + 32|0;
 $192 = sp + 1523|0;
 $195 = sp + 160|0;
 $198 = sp + 1522|0;
 $224 = sp + 64|0;
 $227 = sp + 1528|0;
 $230 = sp + 224|0;
 $233 = sp + 1529|0;
 $254 = sp + 588|0;
 $255 = sp + 120|0;
 $258 = sp + 600|0;
 $259 = sp + 608|0;
 $__t21$i$i$i = sp + 168|0;
 $262 = sp + 200|0;
 $265 = sp + 632|0;
 $266 = sp + 640|0;
 $__d1$i = sp + 176|0;
 $269 = sp + 216|0;
 $277 = sp + 24|0;
 $280 = sp + 1525|0;
 $283 = sp + 152|0;
 $286 = sp + 1524|0;
 $__h = sp + 832|0;
 $316 = sp + 848|0;
 $319 = sp + 864|0;
 $320 = sp + 868|0;
 $314 = $this;
 $315 = $__k;
 $322 = $314;
 $313 = $322;
 $323 = $313;
 $324 = (($323) + 8|0);
 $312 = $324;
 $325 = $312;
 $311 = $325;
 $326 = $311;
 $__na = $326;
 $327 = $__na;
 $309 = $327;
 $310 = 1;
 $328 = $309;
 $329 = $310;
 $306 = $328;
 $307 = $329;
 $308 = 0;
 $330 = $307;
 $331 = $330<<4;
 $332 = (__Znwj($331)|0);
 $333 = $__na;
 $304 = $316;
 $305 = $333;
 $334 = $304;
 $335 = $305;
 $302 = $334;
 $303 = $335;
 $336 = $302;
 $337 = $303;
 HEAP32[$336>>2] = $337;
 $338 = (($336) + 4|0);
 HEAP8[$338] = 0;
 $339 = (($336) + 5|0);
 HEAP8[$339] = 0;
 ;HEAP8[$269+0|0]=HEAP8[$316+0|0]|0;HEAP8[$269+1|0]=HEAP8[$316+1|0]|0;HEAP8[$269+2|0]=HEAP8[$316+2|0]|0;HEAP8[$269+3|0]=HEAP8[$316+3|0]|0;HEAP8[$269+4|0]=HEAP8[$316+4|0]|0;HEAP8[$269+5|0]=HEAP8[$316+5|0]|0;HEAP8[$269+6|0]=HEAP8[$316+6|0]|0;HEAP8[$269+7|0]=HEAP8[$316+7|0]|0;
 $267 = $__h;
 $268 = $332;
 $340 = $267;
 $341 = $268;
 ;HEAP8[$__d1$i+0|0]=HEAP8[$269+0|0]|0;HEAP8[$__d1$i+1|0]=HEAP8[$269+1|0]|0;HEAP8[$__d1$i+2|0]=HEAP8[$269+2|0]|0;HEAP8[$__d1$i+3|0]=HEAP8[$269+3|0]|0;HEAP8[$__d1$i+4|0]=HEAP8[$269+4|0]|0;HEAP8[$__d1$i+5|0]=HEAP8[$269+5|0]|0;HEAP8[$__d1$i+6|0]=HEAP8[$269+6|0]|0;HEAP8[$__d1$i+7|0]=HEAP8[$269+7|0]|0;
 $264 = $340;
 HEAP32[$265>>2] = $341;
 $342 = $264;
 $263 = $265;
 $343 = $263;
 $344 = HEAP32[$343>>2]|0;
 $249 = $__d1$i;
 $345 = $249;
 ;HEAP32[$266+0>>2]=HEAP32[$345+0>>2]|0;HEAP32[$266+4>>2]=HEAP32[$345+4>>2]|0;
 ;HEAP8[$262+0|0]=HEAP8[$266+0|0]|0;HEAP8[$262+1|0]=HEAP8[$266+1|0]|0;HEAP8[$262+2|0]=HEAP8[$266+2|0]|0;HEAP8[$262+3|0]=HEAP8[$266+3|0]|0;HEAP8[$262+4|0]=HEAP8[$266+4|0]|0;HEAP8[$262+5|0]=HEAP8[$266+5|0]|0;HEAP8[$262+6|0]=HEAP8[$266+6|0]|0;HEAP8[$262+7|0]=HEAP8[$266+7|0]|0;
 $260 = $342;
 $261 = $344;
 $346 = $260;
 $347 = $261;
 ;HEAP8[$__t21$i$i$i+0|0]=HEAP8[$262+0|0]|0;HEAP8[$__t21$i$i$i+1|0]=HEAP8[$262+1|0]|0;HEAP8[$__t21$i$i$i+2|0]=HEAP8[$262+2|0]|0;HEAP8[$__t21$i$i$i+3|0]=HEAP8[$262+3|0]|0;HEAP8[$__t21$i$i$i+4|0]=HEAP8[$262+4|0]|0;HEAP8[$__t21$i$i$i+5|0]=HEAP8[$262+5|0]|0;HEAP8[$__t21$i$i$i+6|0]=HEAP8[$262+6|0]|0;HEAP8[$__t21$i$i$i+7|0]=HEAP8[$262+7|0]|0;
 $257 = $346;
 HEAP32[$258>>2] = $347;
 $348 = $257;
 $256 = $258;
 $349 = $256;
 $350 = HEAP32[$349>>2]|0;
 $250 = $__t21$i$i$i;
 $351 = $250;
 ;HEAP32[$259+0>>2]=HEAP32[$351+0>>2]|0;HEAP32[$259+4>>2]=HEAP32[$351+4>>2]|0;
 ;HEAP8[$255+0|0]=HEAP8[$259+0|0]|0;HEAP8[$255+1|0]=HEAP8[$259+1|0]|0;HEAP8[$255+2|0]=HEAP8[$259+2|0]|0;HEAP8[$255+3|0]=HEAP8[$259+3|0]|0;HEAP8[$255+4|0]=HEAP8[$259+4|0]|0;HEAP8[$255+5|0]=HEAP8[$259+5|0]|0;HEAP8[$255+6|0]=HEAP8[$259+6|0]|0;HEAP8[$255+7|0]=HEAP8[$259+7|0]|0;
 $253 = $348;
 HEAP32[$254>>2] = $350;
 $352 = $253;
 $252 = $254;
 $353 = $252;
 $354 = HEAP32[$353>>2]|0;
 HEAP32[$352>>2] = $354;
 $355 = (($352) + 4|0);
 $251 = $255;
 $356 = $251;
 ;HEAP32[$355+0>>2]=HEAP32[$356+0>>2]|0;HEAP32[$355+4>>2]=HEAP32[$356+4>>2]|0;
 $357 = $__na;
 $216 = $__h;
 $358 = $216;
 $215 = $358;
 $359 = $215;
 $214 = $359;
 $360 = $214;
 $361 = HEAP32[$360>>2]|0;
 $362 = (($361) + 8|0);
 $181 = $362;
 $363 = $181;
 $364 = $315;
 $146 = $357;
 $147 = $363;
 $148 = $364;
 $365 = $147;
 $366 = ($365|0)==(0|0);
 if (!($366)) {
  $367 = $148;
  $368 = HEAP32[$367>>2]|0;
  HEAP32[$365>>2] = $368;
 }
 $11 = $__h;
 $369 = $11;
 $10 = $369;
 $370 = $10;
 $9 = $370;
 $371 = $9;
 $372 = (($371) + 4|0);
 $373 = (($372) + 4|0);
 HEAP8[$373] = 1;
 $374 = $__na;
 $2 = $__h;
 $375 = $2;
 $1 = $375;
 $376 = $1;
 $0 = $376;
 $377 = $0;
 $378 = HEAP32[$377>>2]|0;
 $379 = (($378) + 8|0);
 $380 = (($379) + 4|0);
 $3 = $380;
 $381 = $3;
 $4 = $374;
 $5 = $381;
 $382 = $5;
 $383 = ($382|0)==(0|0);
 if (!($383)) {
  HEAP32[$382>>2] = 0;
 }
 $8 = $__h;
 $384 = $8;
 $7 = $384;
 $385 = $7;
 $6 = $385;
 $386 = $6;
 $387 = (($386) + 4|0);
 $388 = (($387) + 5|0);
 HEAP8[$388] = 1;
 $109 = $__h;
 $389 = $109;
 $107 = $112;
 $108 = $389;
 $390 = $107;
 $391 = $108;
 $105 = $390;
 $106 = $391;
 $392 = $105;
 $393 = $106;
 HEAP32[$392>>2] = $393;
 ;HEAP8[$104+0|0]=HEAP8[$112+0|0]|0;HEAP8[$104+1|0]=HEAP8[$112+1|0]|0;HEAP8[$104+2|0]=HEAP8[$112+2|0]|0;HEAP8[$104+3|0]=HEAP8[$112+3|0]|0;
 $103 = $111;
 $394 = $103;
 ;HEAP8[$__u1$i$i+0|0]=HEAP8[$104+0|0]|0;HEAP8[$__u1$i$i+1|0]=HEAP8[$104+1|0]|0;HEAP8[$__u1$i$i+2|0]=HEAP8[$104+2|0]|0;HEAP8[$__u1$i$i+3|0]=HEAP8[$104+3|0]|0;
 $101 = $394;
 $395 = $101;
 $100 = $__u1$i$i;
 $396 = $100;
 $397 = HEAP32[$396>>2]|0;
 $81 = $397;
 $398 = $81;
 $80 = $398;
 $399 = $80;
 $79 = $399;
 $400 = $79;
 $401 = HEAP32[$400>>2]|0;
 $__t$i$i$i$i = $401;
 $78 = $398;
 $402 = $78;
 $77 = $402;
 $403 = $77;
 HEAP32[$403>>2] = 0;
 $404 = $__t$i$i$i$i;
 $82 = $__u1$i$i;
 $405 = $82;
 $406 = HEAP32[$405>>2]|0;
 $85 = $406;
 $407 = $85;
 $84 = $407;
 $408 = $84;
 $83 = $408;
 $409 = $83;
 $410 = (($409) + 4|0);
 $86 = $410;
 $411 = $86;
 ;HEAP32[$102+0>>2]=HEAP32[$411+0>>2]|0;HEAP32[$102+4>>2]=HEAP32[$411+4>>2]|0;
 ;HEAP8[$99+0|0]=HEAP8[$102+0|0]|0;HEAP8[$99+1|0]=HEAP8[$102+1|0]|0;HEAP8[$99+2|0]=HEAP8[$102+2|0]|0;HEAP8[$99+3|0]=HEAP8[$102+3|0]|0;HEAP8[$99+4|0]=HEAP8[$102+4|0]|0;HEAP8[$99+5|0]=HEAP8[$102+5|0]|0;HEAP8[$99+6|0]=HEAP8[$102+6|0]|0;HEAP8[$99+7|0]=HEAP8[$102+7|0]|0;
 $97 = $395;
 $98 = $404;
 $412 = $97;
 $413 = $98;
 ;HEAP8[$__t21$i$i$i$i+0|0]=HEAP8[$99+0|0]|0;HEAP8[$__t21$i$i$i$i+1|0]=HEAP8[$99+1|0]|0;HEAP8[$__t21$i$i$i$i+2|0]=HEAP8[$99+2|0]|0;HEAP8[$__t21$i$i$i$i+3|0]=HEAP8[$99+3|0]|0;HEAP8[$__t21$i$i$i$i+4|0]=HEAP8[$99+4|0]|0;HEAP8[$__t21$i$i$i$i+5|0]=HEAP8[$99+5|0]|0;HEAP8[$__t21$i$i$i$i+6|0]=HEAP8[$99+6|0]|0;HEAP8[$__t21$i$i$i$i+7|0]=HEAP8[$99+7|0]|0;
 $94 = $412;
 HEAP32[$95>>2] = $413;
 $414 = $94;
 $93 = $95;
 $415 = $93;
 $416 = HEAP32[$415>>2]|0;
 $87 = $__t21$i$i$i$i;
 $417 = $87;
 ;HEAP32[$96+0>>2]=HEAP32[$417+0>>2]|0;HEAP32[$96+4>>2]=HEAP32[$417+4>>2]|0;
 ;HEAP8[$92+0|0]=HEAP8[$96+0|0]|0;HEAP8[$92+1|0]=HEAP8[$96+1|0]|0;HEAP8[$92+2|0]=HEAP8[$96+2|0]|0;HEAP8[$92+3|0]=HEAP8[$96+3|0]|0;HEAP8[$92+4|0]=HEAP8[$96+4|0]|0;HEAP8[$92+5|0]=HEAP8[$96+5|0]|0;HEAP8[$92+6|0]=HEAP8[$96+6|0]|0;HEAP8[$92+7|0]=HEAP8[$96+7|0]|0;
 $90 = $414;
 HEAP32[$91>>2] = $416;
 $418 = $90;
 $89 = $91;
 $419 = $89;
 $420 = HEAP32[$419>>2]|0;
 HEAP32[$418>>2] = $420;
 $421 = (($418) + 4|0);
 $88 = $92;
 $422 = $88;
 ;HEAP32[$421+0>>2]=HEAP32[$422+0>>2]|0;HEAP32[$421+4>>2]=HEAP32[$422+4>>2]|0;
 $76 = $111;
 $423 = $76;
 $74 = $110;
 $75 = $423;
 $424 = $74;
 $425 = $75;
 $72 = $424;
 $73 = $425;
 $426 = $72;
 $427 = $73;
 HEAP32[$426>>2] = $427;
 ;HEAP8[$39+0|0]=HEAP8[$110+0|0]|0;HEAP8[$39+1|0]=HEAP8[$110+1|0]|0;HEAP8[$39+2|0]=HEAP8[$110+2|0]|0;HEAP8[$39+3|0]=HEAP8[$110+3|0]|0;
 $38 = $320;
 $428 = $38;
 ;HEAP8[$__u1$i13$i+0|0]=HEAP8[$39+0|0]|0;HEAP8[$__u1$i13$i+1|0]=HEAP8[$39+1|0]|0;HEAP8[$__u1$i13$i+2|0]=HEAP8[$39+2|0]|0;HEAP8[$__u1$i13$i+3|0]=HEAP8[$39+3|0]|0;
 $36 = $428;
 $429 = $36;
 $35 = $__u1$i13$i;
 $430 = $35;
 $431 = HEAP32[$430>>2]|0;
 $16 = $431;
 $432 = $16;
 $15 = $432;
 $433 = $15;
 $14 = $433;
 $434 = $14;
 $435 = HEAP32[$434>>2]|0;
 $__t$i$i$i11$i = $435;
 $13 = $432;
 $436 = $13;
 $12 = $436;
 $437 = $12;
 HEAP32[$437>>2] = 0;
 $438 = $__t$i$i$i11$i;
 $17 = $__u1$i13$i;
 $439 = $17;
 $440 = HEAP32[$439>>2]|0;
 $20 = $440;
 $441 = $20;
 $19 = $441;
 $442 = $19;
 $18 = $442;
 $443 = $18;
 $444 = (($443) + 4|0);
 $21 = $444;
 $445 = $21;
 ;HEAP32[$37+0>>2]=HEAP32[$445+0>>2]|0;HEAP32[$37+4>>2]=HEAP32[$445+4>>2]|0;
 ;HEAP8[$34+0|0]=HEAP8[$37+0|0]|0;HEAP8[$34+1|0]=HEAP8[$37+1|0]|0;HEAP8[$34+2|0]=HEAP8[$37+2|0]|0;HEAP8[$34+3|0]=HEAP8[$37+3|0]|0;HEAP8[$34+4|0]=HEAP8[$37+4|0]|0;HEAP8[$34+5|0]=HEAP8[$37+5|0]|0;HEAP8[$34+6|0]=HEAP8[$37+6|0]|0;HEAP8[$34+7|0]=HEAP8[$37+7|0]|0;
 $32 = $429;
 $33 = $438;
 $446 = $32;
 $447 = $33;
 ;HEAP8[$__t21$i$i$i12$i+0|0]=HEAP8[$34+0|0]|0;HEAP8[$__t21$i$i$i12$i+1|0]=HEAP8[$34+1|0]|0;HEAP8[$__t21$i$i$i12$i+2|0]=HEAP8[$34+2|0]|0;HEAP8[$__t21$i$i$i12$i+3|0]=HEAP8[$34+3|0]|0;HEAP8[$__t21$i$i$i12$i+4|0]=HEAP8[$34+4|0]|0;HEAP8[$__t21$i$i$i12$i+5|0]=HEAP8[$34+5|0]|0;HEAP8[$__t21$i$i$i12$i+6|0]=HEAP8[$34+6|0]|0;HEAP8[$__t21$i$i$i12$i+7|0]=HEAP8[$34+7|0]|0;
 $29 = $446;
 HEAP32[$30>>2] = $447;
 $448 = $29;
 $28 = $30;
 $449 = $28;
 $450 = HEAP32[$449>>2]|0;
 $22 = $__t21$i$i$i12$i;
 $451 = $22;
 ;HEAP32[$31+0>>2]=HEAP32[$451+0>>2]|0;HEAP32[$31+4>>2]=HEAP32[$451+4>>2]|0;
 ;HEAP8[$27+0|0]=HEAP8[$31+0|0]|0;HEAP8[$27+1|0]=HEAP8[$31+1|0]|0;HEAP8[$27+2|0]=HEAP8[$31+2|0]|0;HEAP8[$27+3|0]=HEAP8[$31+3|0]|0;HEAP8[$27+4|0]=HEAP8[$31+4|0]|0;HEAP8[$27+5|0]=HEAP8[$31+5|0]|0;HEAP8[$27+6|0]=HEAP8[$31+6|0]|0;HEAP8[$27+7|0]=HEAP8[$31+7|0]|0;
 $25 = $448;
 HEAP32[$26>>2] = $450;
 $452 = $25;
 $24 = $26;
 $453 = $24;
 $454 = HEAP32[$453>>2]|0;
 HEAP32[$452>>2] = $454;
 $455 = (($452) + 4|0);
 $23 = $27;
 $456 = $23;
 ;HEAP32[$455+0>>2]=HEAP32[$456+0>>2]|0;HEAP32[$455+4>>2]=HEAP32[$456+4>>2]|0;
 $71 = $111;
 $457 = $71;
 $70 = $457;
 $458 = $70;
 $68 = $458;
 $69 = 0;
 $459 = $68;
 $67 = $459;
 $460 = $67;
 $66 = $460;
 $461 = $66;
 $462 = HEAP32[$461>>2]|0;
 $__tmp$i$i$i2$i = $462;
 $463 = $69;
 $43 = $459;
 $464 = $43;
 $42 = $464;
 $465 = $42;
 HEAP32[$465>>2] = $463;
 $466 = $__tmp$i$i$i2$i;
 $467 = ($466|0)!=(0|0);
 if ($467) {
  $41 = $459;
  $468 = $41;
  $40 = $468;
  $469 = $40;
  $470 = (($469) + 4|0);
  $471 = $__tmp$i$i$i2$i;
  $64 = $470;
  $65 = $471;
  $472 = $64;
  $473 = (($472) + 5|0);
  $474 = HEAP8[$473]|0;
  $475 = $474&1;
  if ($475) {
   $476 = HEAP32[$472>>2]|0;
   $477 = $65;
   $478 = (($477) + 8|0);
   $479 = (($478) + 4|0);
   $63 = $479;
   $480 = $63;
   $54 = $476;
   $55 = $480;
   $481 = $54;
   $482 = $55;
   ;HEAP8[$53+0|0]=HEAP8[$56+0|0]|0;
   $51 = $481;
   $52 = $482;
  }
  $483 = (($472) + 4|0);
  $484 = HEAP8[$483]|0;
  $485 = $484&1;
  if ($485) {
   $486 = HEAP32[$472>>2]|0;
   $487 = $65;
   $488 = (($487) + 8|0);
   $44 = $488;
   $489 = $44;
   $48 = $486;
   $49 = $489;
   $490 = $48;
   $491 = $49;
   ;HEAP8[$47+0|0]=HEAP8[$50+0|0]|0;
   $45 = $490;
   $46 = $491;
  }
  $492 = $65;
  $493 = ($492|0)!=(0|0);
  if ($493) {
   $494 = HEAP32[$472>>2]|0;
   $495 = $65;
   $60 = $494;
   $61 = $495;
   $62 = 1;
   $496 = $60;
   $497 = $61;
   $498 = $62;
   $57 = $496;
   $58 = $497;
   $59 = $498;
   $499 = $58;
   __ZdlPv($499);
  }
 }
 $117 = $320;
 $500 = $117;
 $115 = $319;
 $116 = $500;
 $501 = $115;
 $502 = $116;
 $113 = $501;
 $114 = $502;
 $503 = $113;
 $504 = $114;
 HEAP32[$503>>2] = $504;
 ;HEAP8[$145+0|0]=HEAP8[$319+0|0]|0;HEAP8[$145+1|0]=HEAP8[$319+1|0]|0;HEAP8[$145+2|0]=HEAP8[$319+2|0]|0;HEAP8[$145+3|0]=HEAP8[$319+3|0]|0;
 $144 = $agg$result;
 $505 = $144;
 ;HEAP8[$__u1$i+0|0]=HEAP8[$145+0|0]|0;HEAP8[$__u1$i+1|0]=HEAP8[$145+1|0]|0;HEAP8[$__u1$i+2|0]=HEAP8[$145+2|0]|0;HEAP8[$__u1$i+3|0]=HEAP8[$145+3|0]|0;
 $142 = $505;
 $506 = $142;
 $141 = $__u1$i;
 $507 = $141;
 $508 = HEAP32[$507>>2]|0;
 $122 = $508;
 $509 = $122;
 $121 = $509;
 $510 = $121;
 $120 = $510;
 $511 = $120;
 $512 = HEAP32[$511>>2]|0;
 $__t$i$i$i = $512;
 $119 = $509;
 $513 = $119;
 $118 = $513;
 $514 = $118;
 HEAP32[$514>>2] = 0;
 $515 = $__t$i$i$i;
 $123 = $__u1$i;
 $516 = $123;
 $517 = HEAP32[$516>>2]|0;
 $126 = $517;
 $518 = $126;
 $125 = $518;
 $519 = $125;
 $124 = $519;
 $520 = $124;
 $521 = (($520) + 4|0);
 $127 = $521;
 $522 = $127;
 ;HEAP32[$143+0>>2]=HEAP32[$522+0>>2]|0;HEAP32[$143+4>>2]=HEAP32[$522+4>>2]|0;
 ;HEAP8[$140+0|0]=HEAP8[$143+0|0]|0;HEAP8[$140+1|0]=HEAP8[$143+1|0]|0;HEAP8[$140+2|0]=HEAP8[$143+2|0]|0;HEAP8[$140+3|0]=HEAP8[$143+3|0]|0;HEAP8[$140+4|0]=HEAP8[$143+4|0]|0;HEAP8[$140+5|0]=HEAP8[$143+5|0]|0;HEAP8[$140+6|0]=HEAP8[$143+6|0]|0;HEAP8[$140+7|0]=HEAP8[$143+7|0]|0;
 $138 = $506;
 $139 = $515;
 $523 = $138;
 $524 = $139;
 ;HEAP8[$__t21$i$i$i25+0|0]=HEAP8[$140+0|0]|0;HEAP8[$__t21$i$i$i25+1|0]=HEAP8[$140+1|0]|0;HEAP8[$__t21$i$i$i25+2|0]=HEAP8[$140+2|0]|0;HEAP8[$__t21$i$i$i25+3|0]=HEAP8[$140+3|0]|0;HEAP8[$__t21$i$i$i25+4|0]=HEAP8[$140+4|0]|0;HEAP8[$__t21$i$i$i25+5|0]=HEAP8[$140+5|0]|0;HEAP8[$__t21$i$i$i25+6|0]=HEAP8[$140+6|0]|0;HEAP8[$__t21$i$i$i25+7|0]=HEAP8[$140+7|0]|0;
 $135 = $523;
 HEAP32[$136>>2] = $524;
 $525 = $135;
 $134 = $136;
 $526 = $134;
 $527 = HEAP32[$526>>2]|0;
 $128 = $__t21$i$i$i25;
 $528 = $128;
 ;HEAP32[$137+0>>2]=HEAP32[$528+0>>2]|0;HEAP32[$137+4>>2]=HEAP32[$528+4>>2]|0;
 ;HEAP8[$133+0|0]=HEAP8[$137+0|0]|0;HEAP8[$133+1|0]=HEAP8[$137+1|0]|0;HEAP8[$133+2|0]=HEAP8[$137+2|0]|0;HEAP8[$133+3|0]=HEAP8[$137+3|0]|0;HEAP8[$133+4|0]=HEAP8[$137+4|0]|0;HEAP8[$133+5|0]=HEAP8[$137+5|0]|0;HEAP8[$133+6|0]=HEAP8[$137+6|0]|0;HEAP8[$133+7|0]=HEAP8[$137+7|0]|0;
 $131 = $525;
 HEAP32[$132>>2] = $527;
 $529 = $131;
 $130 = $132;
 $530 = $130;
 $531 = HEAP32[$530>>2]|0;
 HEAP32[$529>>2] = $531;
 $532 = (($529) + 4|0);
 $129 = $133;
 $533 = $129;
 ;HEAP32[$532+0>>2]=HEAP32[$533+0>>2]|0;HEAP32[$532+4>>2]=HEAP32[$533+4>>2]|0;
 $180 = $320;
 $534 = $180;
 $179 = $534;
 $535 = $179;
 $177 = $535;
 $178 = 0;
 $536 = $177;
 $176 = $536;
 $537 = $176;
 $175 = $537;
 $538 = $175;
 $539 = HEAP32[$538>>2]|0;
 $__tmp$i$i$i16 = $539;
 $540 = $178;
 $152 = $536;
 $541 = $152;
 $151 = $541;
 $542 = $151;
 HEAP32[$542>>2] = $540;
 $543 = $__tmp$i$i$i16;
 $544 = ($543|0)!=(0|0);
 if ($544) {
  $150 = $536;
  $545 = $150;
  $149 = $545;
  $546 = $149;
  $547 = (($546) + 4|0);
  $548 = $__tmp$i$i$i16;
  $173 = $547;
  $174 = $548;
  $549 = $173;
  $550 = (($549) + 5|0);
  $551 = HEAP8[$550]|0;
  $552 = $551&1;
  if ($552) {
   $553 = HEAP32[$549>>2]|0;
   $554 = $174;
   $555 = (($554) + 8|0);
   $556 = (($555) + 4|0);
   $172 = $556;
   $557 = $172;
   $163 = $553;
   $164 = $557;
   $558 = $163;
   $559 = $164;
   ;HEAP8[$162+0|0]=HEAP8[$165+0|0]|0;
   $160 = $558;
   $161 = $559;
  }
  $560 = (($549) + 4|0);
  $561 = HEAP8[$560]|0;
  $562 = $561&1;
  if ($562) {
   $563 = HEAP32[$549>>2]|0;
   $564 = $174;
   $565 = (($564) + 8|0);
   $153 = $565;
   $566 = $153;
   $157 = $563;
   $158 = $566;
   $567 = $157;
   $568 = $158;
   ;HEAP8[$156+0|0]=HEAP8[$159+0|0]|0;
   $154 = $567;
   $155 = $568;
  }
  $569 = $174;
  $570 = ($569|0)!=(0|0);
  if ($570) {
   $571 = HEAP32[$549>>2]|0;
   $572 = $174;
   $169 = $571;
   $170 = $572;
   $171 = 1;
   $573 = $169;
   $574 = $170;
   $575 = $171;
   $166 = $573;
   $167 = $574;
   $168 = $575;
   $576 = $167;
   __ZdlPv($576);
  }
 }
 $321 = 1;
 $213 = $__h;
 $577 = $213;
 $212 = $577;
 $578 = $212;
 $210 = $578;
 $211 = 0;
 $579 = $210;
 $209 = $579;
 $580 = $209;
 $208 = $580;
 $581 = $208;
 $582 = HEAP32[$581>>2]|0;
 $__tmp$i$i$i9 = $582;
 $583 = $211;
 $185 = $579;
 $584 = $185;
 $184 = $584;
 $585 = $184;
 HEAP32[$585>>2] = $583;
 $586 = $__tmp$i$i$i9;
 $587 = ($586|0)!=(0|0);
 if (!($587)) {
  STACKTOP = sp;return;
 }
 $183 = $579;
 $588 = $183;
 $182 = $588;
 $589 = $182;
 $590 = (($589) + 4|0);
 $591 = $__tmp$i$i$i9;
 $206 = $590;
 $207 = $591;
 $592 = $206;
 $593 = (($592) + 5|0);
 $594 = HEAP8[$593]|0;
 $595 = $594&1;
 if ($595) {
  $596 = HEAP32[$592>>2]|0;
  $597 = $207;
  $598 = (($597) + 8|0);
  $599 = (($598) + 4|0);
  $205 = $599;
  $600 = $205;
  $196 = $596;
  $197 = $600;
  $601 = $196;
  $602 = $197;
  ;HEAP8[$195+0|0]=HEAP8[$198+0|0]|0;
  $193 = $601;
  $194 = $602;
 }
 $603 = (($592) + 4|0);
 $604 = HEAP8[$603]|0;
 $605 = $604&1;
 if ($605) {
  $606 = HEAP32[$592>>2]|0;
  $607 = $207;
  $608 = (($607) + 8|0);
  $186 = $608;
  $609 = $186;
  $190 = $606;
  $191 = $609;
  $610 = $190;
  $611 = $191;
  ;HEAP8[$189+0|0]=HEAP8[$192+0|0]|0;
  $187 = $610;
  $188 = $611;
 }
 $612 = $207;
 $613 = ($612|0)!=(0|0);
 if ($613) {
  $614 = HEAP32[$592>>2]|0;
  $615 = $207;
  $202 = $614;
  $203 = $615;
  $204 = 1;
  $616 = $202;
  $617 = $203;
  $618 = $204;
  $199 = $616;
  $200 = $617;
  $201 = $618;
  $619 = $200;
  __ZdlPv($619);
 }
 STACKTOP = sp;return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNSt3__112__hash_tableINS_4pairIiP11primer_pairEEN9__gnu_cxx17__hash_map_hasherIS4_NS5_4hashIiEELb1EEENS5_16__hash_map_equalIS4_NS_8equal_toIiEELb1EEENS_9allocatorIS4_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS4_PvEE($agg$result,$this,$__nd) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0.0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__inserted = 0, $__ndptr = 0, $__pn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0;
 $10 = sp + 360|0;
 $16 = sp + 292|0;
 $55 = sp;
 $58 = sp + 520|0;
 $80 = sp + 72|0;
 $94 = sp + 48|0;
 $__inserted = sp + 521|0;
 $120 = sp + 228|0;
 $121 = sp + 232|0;
 $122 = sp + 236|0;
 $123 = sp + 240|0;
 $124 = sp + 248|0;
 $125 = sp + 252|0;
 $126 = sp + 256|0;
 $118 = $this;
 $119 = $__nd;
 $127 = $118;
 $117 = $127;
 $128 = $117;
 $129 = (($128) + 12|0);
 $116 = $129;
 $130 = $116;
 $115 = $130;
 $131 = $115;
 $132 = $119;
 $133 = (($132) + 8|0);
 $61 = $131;
 $62 = $133;
 $134 = $61;
 $135 = $62;
 $136 = HEAP32[$135>>2]|0;
 $59 = $134;
 $60 = $136;
 $137 = $60;
 $138 = $119;
 $139 = (($138) + 4|0);
 HEAP32[$139>>2] = $137;
 $48 = $127;
 $140 = $48;
 $47 = $140;
 $141 = $47;
 $46 = $141;
 $142 = $46;
 $45 = $142;
 $143 = $45;
 $144 = (($143) + 4|0);
 $44 = $144;
 $145 = $44;
 $43 = $145;
 $146 = $43;
 $42 = $146;
 $147 = $42;
 $148 = HEAP32[$147>>2]|0;
 $__bc = $148;
 HEAP8[$__inserted] = 0;
 $149 = $__bc;
 $150 = ($149|0)!=(0);
 if ($150) {
  $151 = $119;
  $152 = (($151) + 4|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = $__bc;
  $0 = $153;
  $1 = $154;
  $155 = $1;
  $156 = $1;
  $157 = (($156) - 1)|0;
  $158 = $155 & $157;
  $159 = ($158|0)!=(0);
  if ($159) {
   $164 = $0;
   $165 = $1;
   $166 = (($164>>>0) % ($165>>>0))&-1;
   $167 = $166;
  } else {
   $160 = $0;
   $161 = $1;
   $162 = (($161) - 1)|0;
   $163 = $160 & $162;
   $167 = $163;
  }
  $__chash = $167;
  $168 = $__chash;
  $4 = $127;
  $5 = $168;
  $169 = $4;
  $170 = $5;
  $3 = $169;
  $171 = $3;
  $2 = $171;
  $172 = $2;
  $173 = HEAP32[$172>>2]|0;
  $174 = (($173) + ($170<<2)|0);
  $175 = HEAP32[$174>>2]|0;
  $__ndptr = $175;
  $176 = $__ndptr;
  $8 = $10;
  $9 = -1;
  $177 = $8;
  $178 = $9;
  $6 = $177;
  $7 = $178;
  $179 = $6;
  HEAP32[$179>>2] = 0;
  $180 = HEAP32[$10>>2]|0;
  HEAP32[$120>>2] = $180;
  $11 = $120;
  $181 = ($176|0)!=(0|0);
  do {
   if ($181) {
    $182 = $__ndptr;
    $183 = HEAP32[$182>>2]|0;
    $__ndptr = $183;
    while(1) {
     $184 = $__ndptr;
     $14 = $16;
     $15 = -1;
     $185 = $14;
     $186 = $15;
     $12 = $185;
     $13 = $186;
     $187 = $12;
     HEAP32[$187>>2] = 0;
     $188 = HEAP32[$16>>2]|0;
     HEAP32[$121>>2] = $188;
     $17 = $121;
     $189 = ($184|0)!=(0|0);
     if ($189) {
      $190 = $__ndptr;
      $191 = (($190) + 4|0);
      $192 = HEAP32[$191>>2]|0;
      $193 = $__bc;
      $18 = $192;
      $19 = $193;
      $194 = $19;
      $195 = $19;
      $196 = (($195) - 1)|0;
      $197 = $194 & $196;
      $198 = ($197|0)!=(0);
      if ($198) {
       $203 = $18;
       $204 = $19;
       $205 = (($203>>>0) % ($204>>>0))&-1;
       $208 = $205;
      } else {
       $199 = $18;
       $200 = $19;
       $201 = (($200) - 1)|0;
       $202 = $199 & $201;
       $208 = $202;
      }
      $206 = $__chash;
      $207 = ($208|0)==($206|0);
      $406 = $207;
     } else {
      $406 = 0;
     }
     if (!($406)) {
      label = 17;
      break;
     }
     $22 = $127;
     $209 = $22;
     $210 = (($209) + 16|0);
     $21 = $210;
     $211 = $21;
     $20 = $211;
     $212 = $20;
     $213 = $__ndptr;
     $214 = (($213) + 8|0);
     $215 = $119;
     $216 = (($215) + 8|0);
     $26 = $212;
     $27 = $214;
     $28 = $216;
     $217 = $26;
     $218 = $27;
     $219 = $28;
     $23 = $217;
     $24 = $218;
     $25 = $219;
     $220 = $24;
     $221 = HEAP32[$220>>2]|0;
     $222 = $25;
     $223 = HEAP32[$222>>2]|0;
     $224 = ($221|0)==($223|0);
     if ($224) {
      break;
     }
     $225 = $__ndptr;
     $226 = HEAP32[$225>>2]|0;
     $__ndptr = $226;
    }
    if ((label|0) == 17) {
     break;
    }
    $391 = $__ndptr;
    $107 = $126;
    $108 = $391;
    $392 = $107;
    $393 = $108;
    $105 = $392;
    $106 = $393;
    $394 = $105;
    $395 = $106;
    HEAP32[$394>>2] = $395;
    $112 = $agg$result;
    $113 = $126;
    $114 = $__inserted;
    $396 = $112;
    $397 = $114;
    $398 = $113;
    $109 = $396;
    $110 = $398;
    $111 = $397;
    $399 = $109;
    $400 = $110;
    ;HEAP32[$399+0>>2]=HEAP32[$400+0>>2]|0;
    $401 = (($399) + 4|0);
    $402 = $111;
    $403 = HEAP8[$402]|0;
    $404 = $403&1;
    $405 = $404&1;
    HEAP8[$401] = $405;
    STACKTOP = sp;return;
   }
  } while(0);
 }
 $31 = $127;
 $227 = $31;
 $228 = (($227) + 12|0);
 $30 = $228;
 $229 = $30;
 $29 = $229;
 $230 = $29;
 $231 = HEAP32[$230>>2]|0;
 $232 = (($231) + 1)|0;
 $233 = (+($232>>>0));
 $234 = $__bc;
 $235 = (+($234>>>0));
 $34 = $127;
 $236 = $34;
 $237 = (($236) + 16|0);
 $33 = $237;
 $238 = $33;
 $32 = $238;
 $239 = $32;
 $240 = +HEAPF32[$239>>2];
 $241 = $235 * $240;
 $242 = $233 > $241;
 if ($242) {
  label = 21;
 } else {
  $243 = $__bc;
  $244 = ($243|0)==(0);
  if ($244) {
   label = 21;
  }
 }
 if ((label|0) == 21) {
  $245 = $__bc;
  $246 = $245<<1;
  $247 = $__bc;
  $35 = $247;
  $248 = $35;
  $249 = ($248>>>0)>(2);
  if ($249) {
   $250 = $35;
   $251 = $35;
   $252 = (($251) - 1)|0;
   $253 = $250 & $252;
   $254 = ($253|0)!=(0);
   $255 = $254 ^ 1;
   $257 = $255;
  } else {
   $257 = 0;
  }
  $256 = $257 ^ 1;
  $258 = $256&1;
  $259 = (($246) + ($258))|0;
  HEAP32[$122>>2] = $259;
  $38 = $127;
  $260 = $38;
  $261 = (($260) + 12|0);
  $37 = $261;
  $262 = $37;
  $36 = $262;
  $263 = $36;
  $264 = HEAP32[$263>>2]|0;
  $265 = (($264) + 1)|0;
  $266 = (+($265>>>0));
  $41 = $127;
  $267 = $41;
  $268 = (($267) + 16|0);
  $40 = $268;
  $269 = $40;
  $39 = $269;
  $270 = $39;
  $271 = +HEAPF32[$270>>2];
  $272 = $266 / $271;
  $49 = $272;
  $273 = $49;
  $274 = (+Math_ceil((+$273)));
  $275 = (~~(($274))>>>0);
  HEAP32[$123>>2] = $275;
  $56 = $122;
  $57 = $123;
  $276 = $56;
  $277 = $57;
  ;HEAP8[$55+0|0]=HEAP8[$58+0|0]|0;
  $53 = $276;
  $54 = $277;
  $278 = $53;
  $279 = $54;
  $50 = $55;
  $51 = $278;
  $52 = $279;
  $280 = $51;
  $281 = HEAP32[$280>>2]|0;
  $282 = $52;
  $283 = HEAP32[$282>>2]|0;
  $284 = ($281>>>0)<($283>>>0);
  if ($284) {
   $285 = $54;
   $288 = $285;
  } else {
   $286 = $53;
   $288 = $286;
  }
  $287 = HEAP32[$288>>2]|0;
  __ZNSt3__112__hash_tableINS_4pairIiP11primer_pairEEN9__gnu_cxx17__hash_map_hasherIS4_NS5_4hashIiEELb1EEENS5_16__hash_map_equalIS4_NS_8equal_toIiEELb1EEENS_9allocatorIS4_EEE6rehashEj($127,$287);
  $69 = $127;
  $289 = $69;
  $68 = $289;
  $290 = $68;
  $67 = $290;
  $291 = $67;
  $66 = $291;
  $292 = $66;
  $293 = (($292) + 4|0);
  $65 = $293;
  $294 = $65;
  $64 = $294;
  $295 = $64;
  $63 = $295;
  $296 = $63;
  $297 = HEAP32[$296>>2]|0;
  $__bc = $297;
  $298 = $119;
  $299 = (($298) + 4|0);
  $300 = HEAP32[$299>>2]|0;
  $301 = $__bc;
  $70 = $300;
  $71 = $301;
  $302 = $71;
  $303 = $71;
  $304 = (($303) - 1)|0;
  $305 = $302 & $304;
  $306 = ($305|0)!=(0);
  if ($306) {
   $311 = $70;
   $312 = $71;
   $313 = (($311>>>0) % ($312>>>0))&-1;
   $314 = $313;
  } else {
   $307 = $70;
   $308 = $71;
   $309 = (($308) - 1)|0;
   $310 = $307 & $309;
   $314 = $310;
  }
  $__chash = $314;
 }
 $315 = $__chash;
 $74 = $127;
 $75 = $315;
 $316 = $74;
 $317 = $75;
 $73 = $316;
 $318 = $73;
 $72 = $318;
 $319 = $72;
 $320 = HEAP32[$319>>2]|0;
 $321 = (($320) + ($317<<2)|0);
 $322 = HEAP32[$321>>2]|0;
 $__pn = $322;
 $323 = $__pn;
 $78 = $80;
 $79 = -1;
 $324 = $78;
 $325 = $79;
 $76 = $324;
 $77 = $325;
 $326 = $76;
 HEAP32[$326>>2] = 0;
 $327 = HEAP32[$80>>2]|0;
 HEAP32[$124>>2] = $327;
 $81 = $124;
 $328 = ($323|0)==(0|0);
 if ($328) {
  $329 = (($127) + 8|0);
  $83 = $329;
  $330 = $83;
  $82 = $330;
  $331 = $82;
  $85 = $331;
  $332 = $85;
  $84 = $332;
  $333 = $84;
  $__pn = $333;
  $334 = $__pn;
  $335 = HEAP32[$334>>2]|0;
  $336 = $119;
  HEAP32[$336>>2] = $335;
  $337 = $119;
  $338 = $__pn;
  HEAP32[$338>>2] = $337;
  $339 = $__pn;
  $340 = $__chash;
  $88 = $127;
  $89 = $340;
  $341 = $88;
  $342 = $89;
  $87 = $341;
  $343 = $87;
  $86 = $343;
  $344 = $86;
  $345 = HEAP32[$344>>2]|0;
  $346 = (($345) + ($342<<2)|0);
  HEAP32[$346>>2] = $339;
  $347 = $119;
  $348 = HEAP32[$347>>2]|0;
  $92 = $94;
  $93 = -1;
  $349 = $92;
  $350 = $93;
  $90 = $349;
  $91 = $350;
  $351 = $90;
  HEAP32[$351>>2] = 0;
  $352 = HEAP32[$94>>2]|0;
  HEAP32[$125>>2] = $352;
  $95 = $125;
  $353 = ($348|0)!=(0|0);
  if ($353) {
   $354 = $119;
   $355 = $119;
   $356 = HEAP32[$355>>2]|0;
   $357 = (($356) + 4|0);
   $358 = HEAP32[$357>>2]|0;
   $359 = $__bc;
   $96 = $358;
   $97 = $359;
   $360 = $97;
   $361 = $97;
   $362 = (($361) - 1)|0;
   $363 = $360 & $362;
   $364 = ($363|0)!=(0);
   if ($364) {
    $369 = $96;
    $370 = $97;
    $371 = (($369>>>0) % ($370>>>0))&-1;
    $372 = $371;
   } else {
    $365 = $96;
    $366 = $97;
    $367 = (($366) - 1)|0;
    $368 = $365 & $367;
    $372 = $368;
   }
   $100 = $127;
   $101 = $372;
   $373 = $100;
   $374 = $101;
   $99 = $373;
   $375 = $99;
   $98 = $375;
   $376 = $98;
   $377 = HEAP32[$376>>2]|0;
   $378 = (($377) + ($374<<2)|0);
   HEAP32[$378>>2] = $354;
  }
 } else {
  $379 = $__pn;
  $380 = HEAP32[$379>>2]|0;
  $381 = $119;
  HEAP32[$381>>2] = $380;
  $382 = $119;
  $383 = $__pn;
  HEAP32[$383>>2] = $382;
 }
 $384 = $119;
 $__ndptr = $384;
 $104 = $127;
 $385 = $104;
 $386 = (($385) + 12|0);
 $103 = $386;
 $387 = $103;
 $102 = $387;
 $388 = $102;
 $389 = HEAP32[$388>>2]|0;
 $390 = (($389) + 1)|0;
 HEAP32[$388>>2] = $390;
 HEAP8[$__inserted] = 1;
 $391 = $__ndptr;
 $107 = $126;
 $108 = $391;
 $392 = $107;
 $393 = $108;
 $105 = $392;
 $106 = $393;
 $394 = $105;
 $395 = $106;
 HEAP32[$394>>2] = $395;
 $112 = $agg$result;
 $113 = $126;
 $114 = $__inserted;
 $396 = $112;
 $397 = $114;
 $398 = $113;
 $109 = $396;
 $110 = $398;
 $111 = $397;
 $399 = $109;
 $400 = $110;
 ;HEAP32[$399+0>>2]=HEAP32[$400+0>>2]|0;
 $401 = (($399) + 4|0);
 $402 = $111;
 $403 = HEAP8[$402]|0;
 $404 = $403&1;
 $405 = $404&1;
 HEAP8[$401] = $405;
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_4pairIiP11primer_pairEEN9__gnu_cxx17__hash_map_hasherIS4_NS5_4hashIiEELb1EEENS5_16__hash_map_equalIS4_NS_8equal_toIiEELb1EEENS_9allocatorIS4_EEE6rehashEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, $__bc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $21 = sp;
 $24 = sp + 144|0;
 $34 = sp + 56|0;
 $35 = sp + 64|0;
 $33 = $this;
 HEAP32[$34>>2] = $__n;
 $36 = $33;
 $37 = HEAP32[$34>>2]|0;
 $38 = ($37|0)==(1);
 if ($38) {
  HEAP32[$34>>2] = 2;
 } else {
  $39 = HEAP32[$34>>2]|0;
  $40 = HEAP32[$34>>2]|0;
  $41 = (($40) - 1)|0;
  $42 = $39 & $41;
  $43 = ($42|0)!=(0);
  if ($43) {
   $44 = HEAP32[$34>>2]|0;
   $45 = (__ZNSt3__112__next_primeEj($44)|0);
   HEAP32[$34>>2] = $45;
  }
 }
 $32 = $36;
 $46 = $32;
 $31 = $46;
 $47 = $31;
 $30 = $47;
 $48 = $30;
 $29 = $48;
 $49 = $29;
 $50 = (($49) + 4|0);
 $28 = $50;
 $51 = $28;
 $27 = $51;
 $52 = $27;
 $26 = $52;
 $53 = $26;
 $54 = HEAP32[$53>>2]|0;
 $__bc = $54;
 $55 = HEAP32[$34>>2]|0;
 $56 = $__bc;
 $57 = ($55>>>0)>($56>>>0);
 if ($57) {
  $58 = HEAP32[$34>>2]|0;
  __ZNSt3__112__hash_tableINS_4pairIiP11primer_pairEEN9__gnu_cxx17__hash_map_hasherIS4_NS5_4hashIiEELb1EEENS5_16__hash_map_equalIS4_NS_8equal_toIiEELb1EEENS_9allocatorIS4_EEE8__rehashEj($36,$58);
  STACKTOP = sp;return;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = $__bc;
 $61 = ($59>>>0)<($60>>>0);
 if ($61) {
  $62 = $__bc;
  $25 = $62;
  $63 = $25;
  $64 = ($63>>>0)>(2);
  if ($64) {
   $65 = $25;
   $66 = $25;
   $67 = (($66) - 1)|0;
   $68 = $65 & $67;
   $69 = ($68|0)!=(0);
   $70 = $69 ^ 1;
   $126 = $70;
  } else {
   $126 = 0;
  }
  if ($126) {
   $14 = $36;
   $71 = $14;
   $72 = (($71) + 12|0);
   $13 = $72;
   $73 = $13;
   $12 = $73;
   $74 = $12;
   $75 = HEAP32[$74>>2]|0;
   $76 = (+($75>>>0));
   $2 = $36;
   $77 = $2;
   $78 = (($77) + 16|0);
   $1 = $78;
   $79 = $1;
   $0 = $79;
   $80 = $0;
   $81 = +HEAPF32[$80>>2];
   $82 = $76 / $81;
   $3 = $82;
   $83 = $3;
   $84 = (+Math_ceil((+$83)));
   $85 = (~~(($84))>>>0);
   $5 = $85;
   $86 = $5;
   $87 = (($86) - 1)|0;
   $4 = $87;
   $88 = $4;
   $89 = (_llvm_ctlz_i32(($88|0))|0);
   $90 = (32 - ($89))|0;
   $91 = 1 << $90;
   $108 = $91;
  } else {
   $8 = $36;
   $92 = $8;
   $93 = (($92) + 12|0);
   $7 = $93;
   $94 = $7;
   $6 = $94;
   $95 = $6;
   $96 = HEAP32[$95>>2]|0;
   $97 = (+($96>>>0));
   $11 = $36;
   $98 = $11;
   $99 = (($98) + 16|0);
   $10 = $99;
   $100 = $10;
   $9 = $100;
   $101 = $9;
   $102 = +HEAPF32[$101>>2];
   $103 = $97 / $102;
   $15 = $103;
   $104 = $15;
   $105 = (+Math_ceil((+$104)));
   $106 = (~~(($105))>>>0);
   $107 = (__ZNSt3__112__next_primeEj($106)|0);
   $108 = $107;
  }
  HEAP32[$35>>2] = $108;
  $22 = $34;
  $23 = $35;
  $109 = $22;
  $110 = $23;
  ;HEAP8[$21+0|0]=HEAP8[$24+0|0]|0;
  $19 = $109;
  $20 = $110;
  $111 = $19;
  $112 = $20;
  $16 = $21;
  $17 = $111;
  $18 = $112;
  $113 = $17;
  $114 = HEAP32[$113>>2]|0;
  $115 = $18;
  $116 = HEAP32[$115>>2]|0;
  $117 = ($114>>>0)<($116>>>0);
  if ($117) {
   $118 = $20;
   $121 = $118;
  } else {
   $119 = $19;
   $121 = $119;
  }
  $120 = HEAP32[$121>>2]|0;
  HEAP32[$34>>2] = $120;
  $122 = HEAP32[$34>>2]|0;
  $123 = $__bc;
  $124 = ($122>>>0)<($123>>>0);
  if ($124) {
   $125 = HEAP32[$34>>2]|0;
   __ZNSt3__112__hash_tableINS_4pairIiP11primer_pairEEN9__gnu_cxx17__hash_map_hasherIS4_NS5_4hashIiEELb1EEENS5_16__hash_map_equalIS4_NS_8equal_toIiEELb1EEENS_9allocatorIS4_EEE8__rehashEj($36,$125);
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_4pairIiP11primer_pairEEN9__gnu_cxx17__hash_map_hasherIS4_NS5_4hashIiEELb1EEENS5_16__hash_map_equalIS4_NS_8equal_toIiEELb1EEENS_9allocatorIS4_EEE8__rehashEj($this,$__nbc) {
 $this = $this|0;
 $__nbc = $__nbc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__chash = 0, $__cp = 0, $__i = 0, $__np = 0, $__npa = 0, $__phash = 0, $__pp = 0, $__tmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0;
 $9 = sp + 488|0;
 $46 = sp + 336|0;
 $60 = sp + 280|0;
 $72 = sp + 100|0;
 $84 = sp;
 $94 = sp + 44|0;
 $118 = sp + 212|0;
 $119 = sp + 220|0;
 $120 = sp + 232|0;
 $121 = sp + 244|0;
 $122 = sp + 248|0;
 $123 = sp + 256|0;
 $116 = $this;
 $117 = $__nbc;
 $124 = $116;
 $115 = $124;
 $125 = $115;
 $114 = $125;
 $126 = $114;
 $113 = $126;
 $127 = $113;
 $128 = (($127) + 4|0);
 $13 = $128;
 $129 = $13;
 $12 = $129;
 $130 = $12;
 $11 = $130;
 $131 = $11;
 $__npa = $131;
 $132 = $117;
 $133 = ($132>>>0)>(0);
 if ($133) {
  $134 = $__npa;
  $135 = $117;
  $3 = $134;
  $4 = $135;
  $136 = $3;
  $137 = $4;
  $0 = $136;
  $1 = $137;
  $2 = 0;
  $138 = $1;
  $139 = $138<<2;
  $140 = (__Znwj($139)|0);
  $145 = $140;
 } else {
  $7 = $9;
  $8 = -1;
  $141 = $7;
  $142 = $8;
  $5 = $141;
  $6 = $142;
  $143 = $5;
  HEAP32[$143>>2] = 0;
  $144 = HEAP32[$9>>2]|0;
  HEAP32[$118>>2] = $144;
  $10 = $118;
  $145 = 0;
 }
 $34 = $124;
 $35 = $145;
 $146 = $34;
 $33 = $146;
 $147 = $33;
 $32 = $147;
 $148 = $32;
 $149 = HEAP32[$148>>2]|0;
 $__tmp$i = $149;
 $150 = $35;
 $17 = $146;
 $151 = $17;
 $16 = $151;
 $152 = $16;
 HEAP32[$152>>2] = $150;
 $153 = $__tmp$i;
 $154 = ($153|0)!=(0|0);
 if ($154) {
  $15 = $146;
  $155 = $15;
  $14 = $155;
  $156 = $14;
  $157 = (($156) + 4|0);
  $158 = $__tmp$i;
  $30 = $157;
  $31 = $158;
  $159 = $30;
  $29 = $159;
  $160 = $29;
  $28 = $160;
  $161 = $28;
  $27 = $161;
  $162 = $27;
  $163 = $31;
  $20 = $159;
  $164 = $20;
  $19 = $164;
  $165 = $19;
  $18 = $165;
  $166 = $18;
  $167 = HEAP32[$166>>2]|0;
  $24 = $162;
  $25 = $163;
  $26 = $167;
  $168 = $24;
  $169 = $25;
  $170 = $26;
  $21 = $168;
  $22 = $169;
  $23 = $170;
  $171 = $22;
  __ZdlPv($171);
 }
 $172 = $117;
 $38 = $124;
 $173 = $38;
 $37 = $173;
 $174 = $37;
 $36 = $174;
 $175 = $36;
 $176 = (($175) + 4|0);
 $41 = $176;
 $177 = $41;
 $40 = $177;
 $178 = $40;
 $39 = $178;
 $179 = $39;
 HEAP32[$179>>2] = $172;
 $180 = $117;
 $181 = ($180>>>0)>(0);
 if (!($181)) {
  STACKTOP = sp;return;
 }
 $__i = 0;
 while(1) {
  $182 = $__i;
  $183 = $117;
  $184 = ($182>>>0)<($183>>>0);
  if (!($184)) {
   break;
  }
  $44 = $46;
  $45 = -1;
  $185 = $44;
  $186 = $45;
  $42 = $185;
  $43 = $186;
  $187 = $42;
  HEAP32[$187>>2] = 0;
  $188 = HEAP32[$46>>2]|0;
  HEAP32[$119>>2] = $188;
  $47 = $119;
  $189 = $__i;
  $50 = $124;
  $51 = $189;
  $190 = $50;
  $191 = $51;
  $49 = $190;
  $192 = $49;
  $48 = $192;
  $193 = $48;
  $194 = HEAP32[$193>>2]|0;
  $195 = (($194) + ($191<<2)|0);
  HEAP32[$195>>2] = 0;
  $196 = $__i;
  $197 = (($196) + 1)|0;
  $__i = $197;
 }
 $198 = (($124) + 8|0);
 $53 = $198;
 $199 = $53;
 $52 = $199;
 $200 = $52;
 $55 = $200;
 $201 = $55;
 $54 = $201;
 $202 = $54;
 $__pp = $202;
 $203 = $__pp;
 $204 = HEAP32[$203>>2]|0;
 $__cp = $204;
 $205 = $__cp;
 $58 = $60;
 $59 = -1;
 $206 = $58;
 $207 = $59;
 $56 = $206;
 $57 = $207;
 $208 = $56;
 HEAP32[$208>>2] = 0;
 $209 = HEAP32[$60>>2]|0;
 HEAP32[$120>>2] = $209;
 $61 = $120;
 $210 = ($205|0)!=(0|0);
 if ($210) {
  $211 = $__cp;
  $212 = (($211) + 4|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = $117;
  $62 = $213;
  $63 = $214;
  $215 = $63;
  $216 = $63;
  $217 = (($216) - 1)|0;
  $218 = $215 & $217;
  $219 = ($218|0)!=(0);
  if ($219) {
   $224 = $62;
   $225 = $63;
   $226 = (($224>>>0) % ($225>>>0))&-1;
   $227 = $226;
  } else {
   $220 = $62;
   $221 = $63;
   $222 = (($221) - 1)|0;
   $223 = $220 & $222;
   $227 = $223;
  }
  $__chash = $227;
  $228 = $__pp;
  $229 = $__chash;
  $66 = $124;
  $67 = $229;
  $230 = $66;
  $231 = $67;
  $65 = $230;
  $232 = $65;
  $64 = $232;
  $233 = $64;
  $234 = HEAP32[$233>>2]|0;
  $235 = (($234) + ($231<<2)|0);
  HEAP32[$235>>2] = $228;
  $236 = $__chash;
  $__phash = $236;
  $237 = $__cp;
  $__pp = $237;
  $238 = $__cp;
  $239 = HEAP32[$238>>2]|0;
  $__cp = $239;
  while(1) {
   $240 = $__cp;
   $70 = $72;
   $71 = -1;
   $241 = $70;
   $242 = $71;
   $68 = $241;
   $69 = $242;
   $243 = $68;
   HEAP32[$243>>2] = 0;
   $244 = HEAP32[$72>>2]|0;
   HEAP32[$121>>2] = $244;
   $73 = $121;
   $245 = ($240|0)!=(0|0);
   if (!($245)) {
    break;
   }
   $246 = $__cp;
   $247 = (($246) + 4|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = $117;
   $74 = $248;
   $75 = $249;
   $250 = $75;
   $251 = $75;
   $252 = (($251) - 1)|0;
   $253 = $250 & $252;
   $254 = ($253|0)!=(0);
   if ($254) {
    $259 = $74;
    $260 = $75;
    $261 = (($259>>>0) % ($260>>>0))&-1;
    $262 = $261;
   } else {
    $255 = $74;
    $256 = $75;
    $257 = (($256) - 1)|0;
    $258 = $255 & $257;
    $262 = $258;
   }
   $__chash = $262;
   $263 = $__chash;
   $264 = $__phash;
   $265 = ($263|0)==($264|0);
   if ($265) {
    $266 = $__cp;
    $__pp = $266;
   } else {
    $267 = $__chash;
    $78 = $124;
    $79 = $267;
    $268 = $78;
    $269 = $79;
    $77 = $268;
    $270 = $77;
    $76 = $270;
    $271 = $76;
    $272 = HEAP32[$271>>2]|0;
    $273 = (($272) + ($269<<2)|0);
    $274 = HEAP32[$273>>2]|0;
    $82 = $84;
    $83 = -1;
    $275 = $82;
    $276 = $83;
    $80 = $275;
    $81 = $276;
    $277 = $80;
    HEAP32[$277>>2] = 0;
    $278 = HEAP32[$84>>2]|0;
    HEAP32[$122>>2] = $278;
    $85 = $122;
    $279 = ($274|0)==(0|0);
    if ($279) {
     $280 = $__pp;
     $281 = $__chash;
     $88 = $124;
     $89 = $281;
     $282 = $88;
     $283 = $89;
     $87 = $282;
     $284 = $87;
     $86 = $284;
     $285 = $86;
     $286 = HEAP32[$285>>2]|0;
     $287 = (($286) + ($283<<2)|0);
     HEAP32[$287>>2] = $280;
     $288 = $__cp;
     $__pp = $288;
     $289 = $__chash;
     $__phash = $289;
    } else {
     $290 = $__cp;
     $__np = $290;
     while(1) {
      $291 = $__np;
      $292 = HEAP32[$291>>2]|0;
      $92 = $94;
      $93 = -1;
      $293 = $92;
      $294 = $93;
      $90 = $293;
      $91 = $294;
      $295 = $90;
      HEAP32[$295>>2] = 0;
      $296 = HEAP32[$94>>2]|0;
      HEAP32[$123>>2] = $296;
      $95 = $123;
      $297 = ($292|0)!=(0|0);
      if ($297) {
       $98 = $124;
       $298 = $98;
       $299 = (($298) + 16|0);
       $97 = $299;
       $300 = $97;
       $96 = $300;
       $301 = $96;
       $302 = $__cp;
       $303 = (($302) + 8|0);
       $304 = $__np;
       $305 = HEAP32[$304>>2]|0;
       $306 = (($305) + 8|0);
       $102 = $301;
       $103 = $303;
       $104 = $306;
       $307 = $102;
       $308 = $103;
       $309 = $104;
       $99 = $307;
       $100 = $308;
       $101 = $309;
       $310 = $100;
       $311 = HEAP32[$310>>2]|0;
       $312 = $101;
       $313 = HEAP32[$312>>2]|0;
       $314 = ($311|0)==($313|0);
       $341 = $314;
      } else {
       $341 = 0;
      }
      if (!($341)) {
       break;
      }
      $315 = $__np;
      $316 = HEAP32[$315>>2]|0;
      $__np = $316;
     }
     $317 = $__np;
     $318 = HEAP32[$317>>2]|0;
     $319 = $__pp;
     HEAP32[$319>>2] = $318;
     $320 = $__chash;
     $107 = $124;
     $108 = $320;
     $321 = $107;
     $322 = $108;
     $106 = $321;
     $323 = $106;
     $105 = $323;
     $324 = $105;
     $325 = HEAP32[$324>>2]|0;
     $326 = (($325) + ($322<<2)|0);
     $327 = HEAP32[$326>>2]|0;
     $328 = HEAP32[$327>>2]|0;
     $329 = $__np;
     HEAP32[$329>>2] = $328;
     $330 = $__cp;
     $331 = $__chash;
     $111 = $124;
     $112 = $331;
     $332 = $111;
     $333 = $112;
     $110 = $332;
     $334 = $110;
     $109 = $334;
     $335 = $109;
     $336 = HEAP32[$335>>2]|0;
     $337 = (($336) + ($333<<2)|0);
     $338 = HEAP32[$337>>2]|0;
     HEAP32[$338>>2] = $330;
    }
   }
   $339 = $__pp;
   $340 = HEAP32[$339>>2]|0;
   $__cp = $340;
  }
 }
 STACKTOP = sp;return;
}
function __ZL17pair_spans_targetPK11primer_pairPK8seq_args($pair,$sa) {
 $pair = $pair|0;
 $sa = $sa|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $first_of_right = 0, $i = 0;
 var $last_of_left = 0, $target_first = 0, $target_last = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $pair;
 $2 = $sa;
 $3 = $1;
 $4 = (($3) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 56|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = (($8) + 72|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 112|0);
 $12 = HEAP8[$11]|0;
 $13 = $12 << 24 >> 24;
 $14 = (($7) + ($13))|0;
 $15 = (($14) - 1)|0;
 $last_of_left = $15;
 $16 = $1;
 $17 = (($16) + 76|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 56|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $1;
 $22 = (($21) + 76|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 112|0);
 $25 = HEAP8[$24]|0;
 $26 = $25 << 24 >> 24;
 $27 = (($20) - ($26))|0;
 $28 = (($27) + 1)|0;
 $first_of_right = $28;
 $i = 0;
 while(1) {
  $29 = $i;
  $30 = $2;
  $31 = (($30) + 1600|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($29|0)<($32|0);
  if (!($33)) {
   label = 9;
   break;
  }
  $34 = $i;
  $35 = $2;
  $36 = (($35) + ($34<<3)|0);
  $37 = HEAP32[$36>>2]|0;
  $target_first = $37;
  $38 = $target_first;
  $39 = $i;
  $40 = $2;
  $41 = (($40) + ($39<<3)|0);
  $42 = (($41) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($38) + ($43))|0;
  $45 = (($44) - 1)|0;
  $target_last = $45;
  $46 = $last_of_left;
  $47 = $target_last;
  $48 = ($46|0)<=($47|0);
  if ($48) {
   $49 = $first_of_right;
   $50 = $target_first;
   $51 = ($49|0)>=($50|0);
   if ($51) {
    $52 = $last_of_left;
    $53 = $first_of_right;
    $54 = ($52|0)<($53|0);
    if ($54) {
     label = 6;
     break;
    }
   }
  }
  $55 = $i;
  $56 = (($55) + 1)|0;
  $i = $56;
 }
 if ((label|0) == 6) {
  $0 = 1;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 else if ((label|0) == 9) {
  $0 = 0;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 return 0|0;
}
function __ZL15pair_repeat_simP11primer_pairPK18p3_global_settings($h,$pa) {
 $h = $h|0;
 $pa = $pa|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fw = 0, $i = 0, $max = 0, $n = 0, $rev = 0;
 var $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $h;
 $2 = $pa;
 $3 = $1;
 $4 = (($3) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $fw = $5;
 $6 = $1;
 $7 = (($6) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $rev = $8;
 $max = 0;
 $9 = $2;
 $10 = (($9) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_seq_lib_num_seq($11)|0);
 $n = $12;
 $13 = $n;
 $14 = ($13|0)==(0);
 if ($14) {
  $0 = 0;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 $15 = $2;
 $16 = (($15) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$18>>2]|0;
 $20 = $1;
 $21 = (($20) + 96|0);
 HEAP32[$21>>2] = $19;
 $i = 0;
 while(1) {
  $22 = $i;
  $23 = $n;
  $24 = ($22|0)<($23|0);
  if (!($24)) {
   break;
  }
  $25 = $i;
  $26 = $fw;
  $27 = (($26) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + ($25<<3)|0);
  $30 = +HEAPF64[$29>>3];
  $31 = $i;
  $32 = $rev;
  $33 = (($32) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + ($31<<3)|0);
  $36 = +HEAPF64[$35>>3];
  $37 = $30 + $36;
  $38 = (~~(($37)));
  $w = $38;
  $39 = $max;
  $40 = ($38|0)>($39|0);
  if ($40) {
   $41 = $w;
   $max = $41;
   $42 = $i;
   $43 = $2;
   $44 = (($43) + 48|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + ($42<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $1;
   $50 = (($49) + 96|0);
   HEAP32[$50>>2] = $48;
  }
  $51 = $i;
  $52 = (($51) + 1)|0;
  $i = $52;
 }
 $53 = $max;
 $0 = $53;
 $54 = $0;
 STACKTOP = sp;return ($54|0);
}
function __ZNSt3__112__hash_tableINS_4pairIiP11primer_pairEEN9__gnu_cxx17__hash_map_hasherIS4_NS5_4hashIiEELb1EEENS5_16__hash_map_equalIS4_NS_8equal_toIiEELb1EEENS_9allocatorIS4_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__112__hash_tableINS_4pairIiP11primer_pairEEN9__gnu_cxx17__hash_map_hasherIS4_NS5_4hashIiEELb1EEENS5_16__hash_map_equalIS4_NS_8equal_toIiEELb1EEENS_9allocatorIS4_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_4pairIiP11primer_pairEEN9__gnu_cxx17__hash_map_hasherIS4_NS5_4hashIiEELb1EEENS5_16__hash_map_equalIS4_NS_8equal_toIiEELb1EEENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__tmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $26 = $this;
 $27 = $26;
 $28 = (($27) + 8|0);
 $25 = $28;
 $29 = $25;
 $24 = $29;
 $30 = $24;
 $31 = HEAP32[$30>>2]|0;
 __ZNSt3__112__hash_tableINS_4pairIiP11primer_pairEEN9__gnu_cxx17__hash_map_hasherIS4_NS5_4hashIiEELb1EEENS5_16__hash_map_equalIS4_NS_8equal_toIiEELb1EEENS_9allocatorIS4_EEE12__deallocateEPNS_11__hash_nodeIS4_PvEE($27,$31);
 $23 = $27;
 $32 = $23;
 $22 = $32;
 $33 = $22;
 $20 = $33;
 $21 = 0;
 $34 = $20;
 $19 = $34;
 $35 = $19;
 $18 = $35;
 $36 = $18;
 $37 = HEAP32[$36>>2]|0;
 $__tmp$i$i$i = $37;
 $38 = $21;
 $3 = $34;
 $39 = $3;
 $2 = $39;
 $40 = $2;
 HEAP32[$40>>2] = $38;
 $41 = $__tmp$i$i$i;
 $42 = ($41|0)!=(0|0);
 if (!($42)) {
  STACKTOP = sp;return;
 }
 $1 = $34;
 $43 = $1;
 $0 = $43;
 $44 = $0;
 $45 = (($44) + 4|0);
 $46 = $__tmp$i$i$i;
 $16 = $45;
 $17 = $46;
 $47 = $16;
 $15 = $47;
 $48 = $15;
 $14 = $48;
 $49 = $14;
 $13 = $49;
 $50 = $13;
 $51 = $17;
 $6 = $47;
 $52 = $6;
 $5 = $52;
 $53 = $5;
 $4 = $53;
 $54 = $4;
 $55 = HEAP32[$54>>2]|0;
 $10 = $50;
 $11 = $51;
 $12 = $55;
 $56 = $10;
 $57 = $11;
 $58 = $12;
 $7 = $56;
 $8 = $57;
 $9 = $58;
 $59 = $8;
 __ZdlPv($59);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_4pairIiP11primer_pairEEN9__gnu_cxx17__hash_map_hasherIS4_NS5_4hashIiEELb1EEENS5_16__hash_map_equalIS4_NS_8equal_toIiEELb1EEENS_9allocatorIS4_EEE12__deallocateEPNS_11__hash_nodeIS4_PvEE($this,$__np) {
 $this = $this|0;
 $__np = $__np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, $__next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $4 = sp;
 $7 = sp + 112|0;
 $12 = sp + 68|0;
 $26 = sp + 56|0;
 $22 = $this;
 $23 = $__np;
 $27 = $22;
 $21 = $27;
 $28 = $21;
 $29 = (($28) + 8|0);
 $20 = $29;
 $30 = $20;
 $19 = $30;
 $31 = $19;
 $__na = $31;
 while(1) {
  $32 = $23;
  $10 = $12;
  $11 = -1;
  $33 = $10;
  $34 = $11;
  $8 = $33;
  $9 = $34;
  $35 = $8;
  HEAP32[$35>>2] = 0;
  $36 = HEAP32[$12>>2]|0;
  HEAP32[$26>>2] = $36;
  $0 = $26;
  $37 = ($32|0)!=(0|0);
  if (!($37)) {
   break;
  }
  $38 = $23;
  $39 = HEAP32[$38>>2]|0;
  $__next = $39;
  $40 = $__na;
  $41 = $23;
  $42 = (($41) + 8|0);
  $1 = $42;
  $43 = $1;
  $5 = $40;
  $6 = $43;
  $44 = $5;
  $45 = $6;
  ;HEAP8[$4+0|0]=HEAP8[$7+0|0]|0;
  $2 = $44;
  $3 = $45;
  $46 = $__na;
  $47 = $23;
  $16 = $46;
  $17 = $47;
  $18 = 1;
  $48 = $16;
  $49 = $17;
  $50 = $18;
  $13 = $48;
  $14 = $49;
  $15 = $50;
  $51 = $14;
  __ZdlPv($51);
  $52 = $__next;
  $23 = $52;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_4pairIiP11primer_pairEEN9__gnu_cxx17__hash_map_hasherIS4_NS5_4hashIiEELb1EEENS5_16__hash_map_equalIS4_NS_8equal_toIiEELb1EEENS_9allocatorIS4_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS4_PvEEEERKT_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__hash = 0, $__nd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $21 = sp + 180|0;
 $27 = sp + 156|0;
 $53 = sp + 76|0;
 $55 = sp + 84|0;
 $61 = sp + 124|0;
 $62 = sp + 128|0;
 $59 = $this;
 $60 = $__k;
 $63 = $59;
 $58 = $63;
 $64 = $58;
 $65 = (($64) + 12|0);
 $57 = $65;
 $66 = $57;
 $56 = $66;
 $67 = $56;
 $68 = $60;
 $2 = $67;
 $3 = $68;
 $69 = $2;
 $70 = $3;
 $71 = HEAP32[$70>>2]|0;
 $0 = $69;
 $1 = $71;
 $72 = $1;
 $__hash = $72;
 $10 = $63;
 $73 = $10;
 $9 = $73;
 $74 = $9;
 $8 = $74;
 $75 = $8;
 $7 = $75;
 $76 = $7;
 $77 = (($76) + 4|0);
 $6 = $77;
 $78 = $6;
 $5 = $78;
 $79 = $5;
 $4 = $79;
 $80 = $4;
 $81 = HEAP32[$80>>2]|0;
 $__bc = $81;
 $82 = $__bc;
 $83 = ($82|0)!=(0);
 if ($83) {
  $84 = $__hash;
  $85 = $__bc;
  $11 = $84;
  $12 = $85;
  $86 = $12;
  $87 = $12;
  $88 = (($87) - 1)|0;
  $89 = $86 & $88;
  $90 = ($89|0)!=(0);
  if ($90) {
   $95 = $11;
   $96 = $12;
   $97 = (($95>>>0) % ($96>>>0))&-1;
   $98 = $97;
  } else {
   $91 = $11;
   $92 = $12;
   $93 = (($92) - 1)|0;
   $94 = $91 & $93;
   $98 = $94;
  }
  $__chash = $98;
  $99 = $__chash;
  $15 = $63;
  $16 = $99;
  $100 = $15;
  $101 = $16;
  $14 = $100;
  $102 = $14;
  $13 = $102;
  $103 = $13;
  $104 = HEAP32[$103>>2]|0;
  $105 = (($104) + ($101<<2)|0);
  $106 = HEAP32[$105>>2]|0;
  $__nd = $106;
  $107 = $__nd;
  $19 = $21;
  $20 = -1;
  $108 = $19;
  $109 = $20;
  $17 = $108;
  $18 = $109;
  $110 = $17;
  HEAP32[$110>>2] = 0;
  $111 = HEAP32[$21>>2]|0;
  HEAP32[$61>>2] = $111;
  $22 = $61;
  $112 = ($107|0)!=(0|0);
  do {
   if ($112) {
    $113 = $__nd;
    $114 = HEAP32[$113>>2]|0;
    $__nd = $114;
    while(1) {
     $115 = $__nd;
     $25 = $27;
     $26 = -1;
     $116 = $25;
     $117 = $26;
     $23 = $116;
     $24 = $117;
     $118 = $23;
     HEAP32[$118>>2] = 0;
     $119 = HEAP32[$27>>2]|0;
     HEAP32[$62>>2] = $119;
     $28 = $62;
     $120 = ($115|0)!=(0|0);
     if ($120) {
      $121 = $__nd;
      $122 = (($121) + 4|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = $__bc;
      $29 = $123;
      $30 = $124;
      $125 = $30;
      $126 = $30;
      $127 = (($126) - 1)|0;
      $128 = $125 & $127;
      $129 = ($128|0)!=(0);
      if ($129) {
       $134 = $29;
       $135 = $30;
       $136 = (($134>>>0) % ($135>>>0))&-1;
       $139 = $136;
      } else {
       $130 = $29;
       $131 = $30;
       $132 = (($131) - 1)|0;
       $133 = $130 & $132;
       $139 = $133;
      }
      $137 = $__chash;
      $138 = ($139|0)==($137|0);
      $170 = $138;
     } else {
      $170 = 0;
     }
     if (!($170)) {
      label = 17;
      break;
     }
     $33 = $63;
     $140 = $33;
     $141 = (($140) + 16|0);
     $32 = $141;
     $142 = $32;
     $31 = $142;
     $143 = $31;
     $144 = $__nd;
     $145 = (($144) + 8|0);
     $146 = $60;
     $37 = $143;
     $38 = $145;
     $39 = $146;
     $147 = $37;
     $148 = $38;
     $149 = $39;
     $34 = $147;
     $35 = $148;
     $36 = $149;
     $150 = $35;
     $151 = HEAP32[$150>>2]|0;
     $152 = $36;
     $153 = HEAP32[$152>>2]|0;
     $154 = ($151|0)==($153|0);
     if ($154) {
      break;
     }
     $160 = $__nd;
     $161 = HEAP32[$160>>2]|0;
     $__nd = $161;
    }
    if ((label|0) == 17) {
     break;
    }
    $155 = $__nd;
    $42 = $agg$result;
    $43 = $155;
    $156 = $42;
    $157 = $43;
    $40 = $156;
    $41 = $157;
    $158 = $40;
    $159 = $41;
    HEAP32[$158>>2] = $159;
    STACKTOP = sp;return;
   }
  } while(0);
 }
 $54 = $63;
 $51 = $53;
 $52 = -1;
 $162 = $51;
 $163 = $52;
 $49 = $162;
 $50 = $163;
 $164 = $49;
 HEAP32[$164>>2] = 0;
 $165 = HEAP32[$53>>2]|0;
 HEAP32[$55>>2] = $165;
 $44 = $55;
 $47 = $agg$result;
 $48 = 0;
 $166 = $47;
 $167 = $48;
 $45 = $166;
 $46 = $167;
 $168 = $45;
 $169 = $46;
 HEAP32[$168>>2] = $169;
 STACKTOP = sp;return;
}
function __ZN9__gnu_cxx8hash_mapIiP11primer_pairNS_4hashIiEENSt3__18equal_toIiEENS5_9allocatorINS5_4pairIKiS2_EEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__112__hash_tableINS_4pairIiP11primer_pairEEN9__gnu_cxx17__hash_map_hasherIS4_NS5_4hashIiEELb1EEENS5_16__hash_map_equalIS4_NS_8equal_toIiEELb1EEENS_9allocatorIS4_EEED1Ev($1);
 STACKTOP = sp;return;
}
function _seq_lib_num_seq($lib) {
 $lib = $lib|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $lib;
 $2 = $1;
 $3 = (0|0)==($2|0);
 if ($3) {
  $0 = 0;
 } else {
  $4 = $1;
  $5 = (($4) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  $0 = $6;
 }
 $7 = $0;
 STACKTOP = sp;return ($7|0);
}
function __ZNSt3__18ios_base4InitC2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp;
 $2 = sp + 4|0;
 $3 = sp + 8|0;
 $4 = HEAP32[_stdin>>2]|0;
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(14296,$4,14352);
 HEAP32[13584>>2] = ((16184 + 12|0));
 HEAP32[((13584 + 8|0))>>2] = ((16184 + 32|0));
 HEAP32[((13584 + 4|0))>>2] = 0;
 __THREW__ = 0;
 invoke_vii(43,(((13584 + 8|0))|0),(14296|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch(-1,-1)|0;
  $8 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((13584 + 8|0)));
  ___resumeException($7|0);
  // unreachable;
 }
 HEAP32[((13584 + 80|0))>>2] = 0;
 HEAP32[((13584 + 84|0))>>2] = -1;
 $9 = HEAP32[_stdout>>2]|0;
 HEAP32[14400>>2] = ((16056 + 8|0));
 __ZNSt3__16localeC2Ev(((14400 + 4|0)));
 ;HEAP32[((14400 + 8|0))+0>>2]=0|0;HEAP32[((14400 + 8|0))+4>>2]=0|0;HEAP32[((14400 + 8|0))+8>>2]=0|0;HEAP32[((14400 + 8|0))+12>>2]=0|0;HEAP32[((14400 + 8|0))+16>>2]=0|0;HEAP32[((14400 + 8|0))+20>>2]=0|0;
 HEAP32[14400>>2] = ((14904 + 8|0));
 HEAP32[((14400 + 32|0))>>2] = $9;
 __ZNSt3__16localeC2ERKS0_($3,((14400 + 4|0)));
 __THREW__ = 0;
 $10 = (invoke_iii(17,($3|0),(18856|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  __ZNSt3__16localeD2Ev($3);
  HEAP32[14400>>2] = ((16056 + 8|0));
  __ZNSt3__16localeD2Ev(((14400 + 4|0)));
  ___resumeException($13|0);
  // unreachable;
 }
 __ZNSt3__16localeD2Ev($3);
 HEAP32[((14400 + 36|0))>>2] = $10;
 HEAP32[((14400 + 40|0))>>2] = ((14352 + 8|0));
 $15 = HEAP32[$10>>2]|0;
 $16 = (($15) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (FUNCTION_TABLE_ii[$17 & 127]($10)|0);
 $19 = $18&1;
 HEAP8[((14400 + 44|0))] = $19;
 HEAP32[13672>>2] = ((16264 + 12|0));
 HEAP32[((13672 + 4|0))>>2] = ((16264 + 32|0));
 __THREW__ = 0;
 invoke_vii(43,(((13672 + 4|0))|0),(14400|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch(-1,-1)|0;
  $23 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((13672 + 4|0)));
  ___resumeException($22|0);
  // unreachable;
 }
 HEAP32[((13672 + 76|0))>>2] = 0;
 HEAP32[((13672 + 80|0))>>2] = -1;
 $24 = HEAP32[_stderr>>2]|0;
 HEAP32[14448>>2] = ((16056 + 8|0));
 __ZNSt3__16localeC2Ev(((14448 + 4|0)));
 ;HEAP32[((14448 + 8|0))+0>>2]=0|0;HEAP32[((14448 + 8|0))+4>>2]=0|0;HEAP32[((14448 + 8|0))+8>>2]=0|0;HEAP32[((14448 + 8|0))+12>>2]=0|0;HEAP32[((14448 + 8|0))+16>>2]=0|0;HEAP32[((14448 + 8|0))+20>>2]=0|0;
 HEAP32[14448>>2] = ((14904 + 8|0));
 HEAP32[((14448 + 32|0))>>2] = $24;
 __ZNSt3__16localeC2ERKS0_($2,((14448 + 4|0)));
 __THREW__ = 0;
 $25 = (invoke_iii(17,($2|0),(18856|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $28 = ___cxa_find_matching_catch(-1,-1)|0;
  $29 = tempRet0;
  __ZNSt3__16localeD2Ev($2);
  HEAP32[14448>>2] = ((16056 + 8|0));
  __ZNSt3__16localeD2Ev(((14448 + 4|0)));
  ___resumeException($28|0);
  // unreachable;
 }
 __ZNSt3__16localeD2Ev($2);
 HEAP32[((14448 + 36|0))>>2] = $25;
 HEAP32[((14448 + 40|0))>>2] = ((14352 + 16|0));
 $30 = HEAP32[$25>>2]|0;
 $31 = (($30) + 28|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (FUNCTION_TABLE_ii[$32 & 127]($25)|0);
 $34 = $33&1;
 HEAP8[((14448 + 44|0))] = $34;
 HEAP32[13760>>2] = ((16264 + 12|0));
 HEAP32[((13760 + 4|0))>>2] = ((16264 + 32|0));
 __THREW__ = 0;
 invoke_vii(43,(((13760 + 4|0))|0),(14448|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $37 = ___cxa_find_matching_catch(-1,-1)|0;
  $38 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((13760 + 4|0)));
  ___resumeException($37|0);
  // unreachable;
 }
 HEAP32[((13760 + 76|0))>>2] = 0;
 HEAP32[((13760 + 80|0))>>2] = -1;
 $39 = HEAP32[13760>>2]|0;
 $40 = (($39) + -12|0);
 $41 = HEAP32[$40>>2]|0;
 $$sum = (($41) + 24)|0;
 $42 = (13760 + ($$sum)|0);
 $43 = HEAP32[$42>>2]|0;
 HEAP32[13848>>2] = ((16264 + 12|0));
 HEAP32[((13848 + 4|0))>>2] = ((16264 + 32|0));
 __THREW__ = 0;
 invoke_vii(43,(((13848 + 4|0))|0),($43|0));
 $44 = __THREW__; __THREW__ = 0;
 $45 = $44&1;
 if ($45) {
  $46 = ___cxa_find_matching_catch(-1,-1)|0;
  $47 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((13848 + 4|0)));
  ___resumeException($46|0);
  // unreachable;
 }
 HEAP32[((13848 + 76|0))>>2] = 0;
 HEAP32[((13848 + 80|0))>>2] = -1;
 $48 = HEAP32[13584>>2]|0;
 $49 = (($48) + -12|0);
 $50 = HEAP32[$49>>2]|0;
 $$sum7 = (($50) + 72)|0;
 $51 = (13584 + ($$sum7)|0);
 HEAP32[$51>>2] = 13672;
 $52 = HEAP32[13760>>2]|0;
 $53 = (($52) + -12|0);
 $54 = HEAP32[$53>>2]|0;
 $$sum8 = (($54) + 4)|0;
 $55 = (13760 + ($$sum8)|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $56 | 8192;
 HEAP32[$55>>2] = $57;
 $58 = HEAP32[13760>>2]|0;
 $59 = (($58) + -12|0);
 $60 = HEAP32[$59>>2]|0;
 $$sum9 = (($60) + 72)|0;
 $61 = (13760 + ($$sum9)|0);
 HEAP32[$61>>2] = 13672;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(14496,$4,((14352 + 24|0)));
 HEAP32[13936>>2] = ((16224 + 12|0));
 HEAP32[((13936 + 8|0))>>2] = ((16224 + 32|0));
 HEAP32[((13936 + 4|0))>>2] = 0;
 __THREW__ = 0;
 invoke_vii(43,(((13936 + 8|0))|0),(14496|0));
 $62 = __THREW__; __THREW__ = 0;
 $63 = $62&1;
 if ($63) {
  $64 = ___cxa_find_matching_catch(-1,-1)|0;
  $65 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((13936 + 8|0)));
  ___resumeException($64|0);
  // unreachable;
 }
 HEAP32[((13936 + 80|0))>>2] = 0;
 HEAP32[((13936 + 84|0))>>2] = -1;
 HEAP32[14552>>2] = ((16120 + 8|0));
 __ZNSt3__16localeC2Ev(((14552 + 4|0)));
 ;HEAP32[((14552 + 8|0))+0>>2]=0|0;HEAP32[((14552 + 8|0))+4>>2]=0|0;HEAP32[((14552 + 8|0))+8>>2]=0|0;HEAP32[((14552 + 8|0))+12>>2]=0|0;HEAP32[((14552 + 8|0))+16>>2]=0|0;HEAP32[((14552 + 8|0))+20>>2]=0|0;
 HEAP32[14552>>2] = ((14648 + 8|0));
 HEAP32[((14552 + 32|0))>>2] = $9;
 __ZNSt3__16localeC2ERKS0_($1,((14552 + 4|0)));
 __THREW__ = 0;
 $66 = (invoke_iii(17,($1|0),(18864|0))|0);
 $67 = __THREW__; __THREW__ = 0;
 $68 = $67&1;
 if ($68) {
  $69 = ___cxa_find_matching_catch(-1,-1)|0;
  $70 = tempRet0;
  __ZNSt3__16localeD2Ev($1);
  HEAP32[14552>>2] = ((16120 + 8|0));
  __ZNSt3__16localeD2Ev(((14552 + 4|0)));
  ___resumeException($69|0);
  // unreachable;
 }
 __ZNSt3__16localeD2Ev($1);
 HEAP32[((14552 + 36|0))>>2] = $66;
 HEAP32[((14552 + 40|0))>>2] = ((14352 + 32|0));
 $71 = HEAP32[$66>>2]|0;
 $72 = (($71) + 28|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (FUNCTION_TABLE_ii[$73 & 127]($66)|0);
 $75 = $74&1;
 HEAP8[((14552 + 44|0))] = $75;
 HEAP32[14024>>2] = ((16304 + 12|0));
 HEAP32[((14024 + 4|0))>>2] = ((16304 + 32|0));
 __THREW__ = 0;
 invoke_vii(43,(((14024 + 4|0))|0),(14552|0));
 $76 = __THREW__; __THREW__ = 0;
 $77 = $76&1;
 if ($77) {
  $78 = ___cxa_find_matching_catch(-1,-1)|0;
  $79 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((14024 + 4|0)));
  ___resumeException($78|0);
  // unreachable;
 }
 HEAP32[((14024 + 76|0))>>2] = 0;
 HEAP32[((14024 + 80|0))>>2] = -1;
 HEAP32[14600>>2] = ((16120 + 8|0));
 __ZNSt3__16localeC2Ev(((14600 + 4|0)));
 ;HEAP32[((14600 + 8|0))+0>>2]=0|0;HEAP32[((14600 + 8|0))+4>>2]=0|0;HEAP32[((14600 + 8|0))+8>>2]=0|0;HEAP32[((14600 + 8|0))+12>>2]=0|0;HEAP32[((14600 + 8|0))+16>>2]=0|0;HEAP32[((14600 + 8|0))+20>>2]=0|0;
 HEAP32[14600>>2] = ((14648 + 8|0));
 HEAP32[((14600 + 32|0))>>2] = $24;
 __ZNSt3__16localeC2ERKS0_($0,((14600 + 4|0)));
 __THREW__ = 0;
 $80 = (invoke_iii(17,($0|0),(18864|0))|0);
 $81 = __THREW__; __THREW__ = 0;
 $82 = $81&1;
 if ($82) {
  $83 = ___cxa_find_matching_catch(-1,-1)|0;
  $84 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  HEAP32[14600>>2] = ((16120 + 8|0));
  __ZNSt3__16localeD2Ev(((14600 + 4|0)));
  ___resumeException($83|0);
  // unreachable;
 }
 __ZNSt3__16localeD2Ev($0);
 HEAP32[((14600 + 36|0))>>2] = $80;
 HEAP32[((14600 + 40|0))>>2] = ((14352 + 40|0));
 $85 = HEAP32[$80>>2]|0;
 $86 = (($85) + 28|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (FUNCTION_TABLE_ii[$87 & 127]($80)|0);
 $89 = $88&1;
 HEAP8[((14600 + 44|0))] = $89;
 HEAP32[14112>>2] = ((16304 + 12|0));
 HEAP32[((14112 + 4|0))>>2] = ((16304 + 32|0));
 __THREW__ = 0;
 invoke_vii(43,(((14112 + 4|0))|0),(14600|0));
 $90 = __THREW__; __THREW__ = 0;
 $91 = $90&1;
 if ($91) {
  $92 = ___cxa_find_matching_catch(-1,-1)|0;
  $93 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((14112 + 4|0)));
  ___resumeException($92|0);
  // unreachable;
 }
 HEAP32[((14112 + 76|0))>>2] = 0;
 HEAP32[((14112 + 80|0))>>2] = -1;
 $94 = HEAP32[14112>>2]|0;
 $95 = (($94) + -12|0);
 $96 = HEAP32[$95>>2]|0;
 $$sum10 = (($96) + 24)|0;
 $97 = (14112 + ($$sum10)|0);
 $98 = HEAP32[$97>>2]|0;
 HEAP32[14200>>2] = ((16304 + 12|0));
 HEAP32[((14200 + 4|0))>>2] = ((16304 + 32|0));
 __THREW__ = 0;
 invoke_vii(43,(((14200 + 4|0))|0),($98|0));
 $99 = __THREW__; __THREW__ = 0;
 $100 = $99&1;
 if ($100) {
  $101 = ___cxa_find_matching_catch(-1,-1)|0;
  $102 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((14200 + 4|0)));
  ___resumeException($101|0);
  // unreachable;
 } else {
  HEAP32[((14200 + 76|0))>>2] = 0;
  HEAP32[((14200 + 80|0))>>2] = -1;
  $103 = HEAP32[13936>>2]|0;
  $104 = (($103) + -12|0);
  $105 = HEAP32[$104>>2]|0;
  $$sum11 = (($105) + 72)|0;
  $106 = (13936 + ($$sum11)|0);
  HEAP32[$106>>2] = 14024;
  $107 = HEAP32[14112>>2]|0;
  $108 = (($107) + -12|0);
  $109 = HEAP32[$108>>2]|0;
  $$sum12 = (($109) + 4)|0;
  $110 = (14112 + ($$sum12)|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $111 | 8192;
  HEAP32[$110>>2] = $112;
  $113 = HEAP32[14112>>2]|0;
  $114 = (($113) + -12|0);
  $115 = HEAP32[$114>>2]|0;
  $$sum13 = (($115) + 72)|0;
  $116 = (14112 + ($$sum13)|0);
  HEAP32[$116>>2] = 14024;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__18ios_base4InitD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 (invoke_ii(66,(13672|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  (invoke_ii(66,(13848|0))|0);
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  if (!($3)) {
   __THREW__ = 0;
   (invoke_ii(67,(14024|0))|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if (!($5)) {
    __THREW__ = 0;
    (invoke_ii(67,(14200|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     STACKTOP = sp;return;
    }
   }
  }
 }
 $8 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNSt3__111__stdoutbufIwED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((16120 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((16120 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 127]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,18864)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 127]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 31]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0]|0;
 $2 = ($1<<24>>24)==(0);
 L1: do {
  if ($2) {
   $3 = ($__n|0)>(0);
   if ($3) {
    $$012 = $__s;$__i$03 = 0;
    while(1) {
     $7 = HEAP32[$this>>2]|0;
     $8 = (($7) + 52|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = HEAP32[$$012>>2]|0;
     $11 = (FUNCTION_TABLE_iii[$9 & 31]($this,$10)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      $$0 = $__i$03;
      break L1;
     }
     $13 = (($__i$03) + 1)|0;
     $14 = (($$012) + 4|0);
     $15 = ($13|0)<($__n|0);
     if ($15) {
      $$012 = $14;$__i$03 = $13;
     } else {
      $$0 = $13;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  } else {
   $4 = (($this) + 32|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (_fwrite(($__s|0),4,($__n|0),($5|0))|0);
   $$0 = $6;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__e = 0;
 var $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__1buf = sp;
 $__extbe = sp + 4|0;
 $__e = sp + 8|0;
 $0 = ($__c|0)==(-1);
 L1: do {
  if (!($0)) {
   HEAP32[$__1buf>>2] = $__c;
   $1 = (($this) + 44|0);
   $2 = HEAP8[$1]|0;
   $3 = ($2<<24>>24)==(0);
   if (!($3)) {
    $4 = (($this) + 32|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = (_fwrite(($__1buf|0),4,1,($5|0))|0);
    $7 = ($6|0)==(1);
    if ($7) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $8 = (($__1buf) + 4|0);
   $9 = (($this) + 36|0);
   $10 = (($this) + 40|0);
   $11 = (($__extbuf) + 8|0);
   $12 = $__extbuf;
   $13 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $14 = HEAP32[$9>>2]|0;
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$14>>2]|0;
    $17 = (($16) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 15]($14,$15,$pbase$0,$8,$__e,$__extbuf,$11,$__extbe)|0);
    $20 = HEAP32[$__e>>2]|0;
    $21 = ($20|0)==($pbase$0|0);
    if ($21) {
     $$0 = -1;
     label = 12;
     break;
    }
    $22 = ($19|0)==(3);
    if ($22) {
     label = 7;
     break;
    }
    $26 = ($19|0)==(1);
    $27 = ($19>>>0)<(2);
    if (!($27)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $28 = HEAP32[$__extbe>>2]|0;
    $29 = $28;
    $30 = (($29) - ($12))|0;
    $31 = HEAP32[$13>>2]|0;
    $32 = (_fwrite(($__extbuf|0),1,($30|0),($31|0))|0);
    $33 = ($32|0)==($30|0);
    if (!($33)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $34 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $26 ? $34 : $pbase$0;
    if ($26) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $23 = HEAP32[$13>>2]|0;
    $24 = (_fwrite(($pbase$0|0),1,1,($23|0))|0);
    $25 = ($24|0)==(1);
    if ($25) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $0 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$this>>2] = ((16120 + 8|0));
 $1 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($1);
 $2 = (($this) + 8|0);
 ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
 HEAP32[$this>>2] = ((14760 + 8|0));
 $3 = (($this) + 32|0);
 HEAP32[$3>>2] = $__fp;
 $4 = (($this) + 40|0);
 HEAP32[$4>>2] = $__st;
 $5 = (($this) + 48|0);
 HEAP32[$5>>2] = -1;
 $6 = (($this) + 52|0);
 HEAP8[$6] = 0;
 __ZNSt3__16localeC2ERKS0_($0,$1);
 __THREW__ = 0;
 $7 = (invoke_iii(17,($0|0),(18864|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $27 = ___cxa_find_matching_catch(-1,-1)|0;
  $28 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  HEAP32[$this>>2] = ((16120 + 8|0));
  __ZNSt3__16localeD2Ev($1);
  ___resumeException($27|0);
  // unreachable;
 }
 $10 = (($this) + 36|0);
 HEAP32[$10>>2] = $7;
 $11 = HEAP32[$7>>2]|0;
 $12 = (($11) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 127]($7)|0);
 $15 = (($this) + 44|0);
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$10>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (FUNCTION_TABLE_ii[$19 & 127]($16)|0);
 $21 = (($this) + 53|0);
 $22 = $20&1;
 HEAP8[$21] = $22;
 $23 = HEAP32[$15>>2]|0;
 $24 = ($23|0)>(8);
 if (!($24)) {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_vi(119,(14864|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $27 = ___cxa_find_matching_catch(-1,-1)|0;
  $28 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  HEAP32[$this>>2] = ((16120 + 8|0));
  __ZNSt3__16localeD2Ev($1);
  ___resumeException($27|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIwED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((16120 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((16120 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,18864)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 127]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 127]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 __ZNSt3__121__throw_runtime_errorEPKc(14864);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__enxt = sp;
 $__ci = sp + 4|0;
 $__inxt = sp + 8|0;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($0) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(-1);
  $7 = $6&1;
  HEAP8[$1] = $7;
  $$01 = $5;
  STACKTOP = sp;return ($$01|0);
 }
 $8 = (($this) + 48|0);
 L8: do {
  if ($3) {
   $9 = HEAP32[$8>>2]|0;
   HEAP32[$__ci>>2] = $9;
   $10 = (($this) + 36|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($this) + 40|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($__ci) + 4|0);
   $15 = (($__extbuf) + 8|0);
   $16 = HEAP32[$11>>2]|0;
   $17 = (($16) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 15]($11,$13,$__ci,$14,$__inxt,$__extbuf,$15,$__enxt)|0);
   if ((($19|0) == 1) | (($19|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   } else if ((($19|0) == 3)) {
    $20 = HEAP32[$8>>2]|0;
    $21 = $20&255;
    HEAP8[$__extbuf] = $21;
    $22 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $22;
   }
   $23 = (($this) + 32|0);
   while(1) {
    $24 = HEAP32[$__enxt>>2]|0;
    $25 = ($24>>>0)>($__extbuf>>>0);
    if (!($25)) {
     break L8;
    }
    $26 = (($24) + -1|0);
    HEAP32[$__enxt>>2] = $26;
    $27 = HEAP8[$26]|0;
    $28 = $27 << 24 >> 24;
    $29 = HEAP32[$23>>2]|0;
    $30 = (_ungetc(($28|0),($29|0))|0);
    $31 = ($30|0)==(-1);
    if ($31) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$8>>2] = $__c;
 HEAP8[$1] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__1buf = sp;
 $__enxt = sp + 4|0;
 $__inxt = sp + 8|0;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  if (!($__consume)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$3>>2] = -1;
  HEAP8[$0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 $8 = $7 ? $6 : 1;
 $9 = ($8|0)>(0);
 L8: do {
  if ($9) {
   $10 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $11 = HEAP32[$10>>2]|0;
    $12 = (_fgetc(($11|0))|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0 = -1;
     break;
    }
    $14 = $12&255;
    $15 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$15] = $14;
    $16 = (($__i$09) + 1)|0;
    $17 = ($16|0)<($8|0);
    if ($17) {
     $__i$09 = $16;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = (($this) + 53|0);
 $19 = HEAP8[$18]|0;
 $20 = ($19<<24>>24)==(0);
 L15: do {
  if ($20) {
   $21 = (($this) + 40|0);
   $22 = (($this) + 36|0);
   $23 = (($__1buf) + 4|0);
   $24 = (($this) + 32|0);
   $__nread$0 = $8;
   while(1) {
    $27 = HEAP32[$21>>2]|0;
    $28 = $27;
    $29 = $28;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 4)|0;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP32[$22>>2]|0;
    $35 = (($__extbuf) + ($__nread$0)|0);
    $36 = HEAP32[$34>>2]|0;
    $37 = (($36) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iiiiiiiii[$38 & 15]($34,$27,$__extbuf,$35,$__enxt,$__1buf,$23,$__inxt)|0);
    if ((($39|0) == 2)) {
     $$0 = -1;
     label = 22;
     break;
    } else if ((($39|0) == 3)) {
     label = 14;
     break;
    } else if (!((($39|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $40 = HEAP32[$21>>2]|0;
    $41 = $40;
    $42 = $41;
    HEAP32[$42>>2] = $30;
    $43 = (($41) + 4)|0;
    $44 = $43;
    HEAP32[$44>>2] = $33;
    $45 = ($__nread$0|0)==(8);
    if ($45) {
     $$0 = -1;
     label = 22;
     break;
    }
    $46 = HEAP32[$24>>2]|0;
    $47 = (_fgetc(($46|0))|0);
    $48 = ($47|0)==(-1);
    if ($48) {
     $$0 = -1;
     label = 22;
     break;
    }
    $51 = $47&255;
    HEAP8[$35] = $51;
    $52 = (($__nread$0) + 1)|0;
    $__nread$0 = $52;
   }
   if ((label|0) == 14) {
    $49 = HEAP8[$__extbuf]|0;
    $50 = $49 << 24 >> 24;
    HEAP32[$__1buf>>2] = $50;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 22) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $25 = HEAP8[$__extbuf]|0;
   $26 = $25 << 24 >> 24;
   HEAP32[$__1buf>>2] = $26;
   $__nread$2 = $8;
  }
 } while(0);
 if ($__consume) {
  $62 = HEAP32[$__1buf>>2]|0;
  $63 = (($this) + 48|0);
  HEAP32[$63>>2] = $62;
  $$0 = $62;
  STACKTOP = sp;return ($$0|0);
 }
 $53 = (($this) + 32|0);
 $__i2$0 = $__nread$2;
 while(1) {
  $54 = ($__i2$0|0)>(0);
  if (!($54)) {
   break;
  }
  $55 = (($__i2$0) + -1)|0;
  $56 = (($__extbuf) + ($55)|0);
  $57 = HEAP8[$56]|0;
  $58 = $57 << 24 >> 24;
  $59 = HEAP32[$53>>2]|0;
  $60 = (_ungetc(($58|0),($59|0))|0);
  $61 = ($60|0)==(-1);
  if ($61) {
   $$0 = -1;
   label = 22;
   break;
  } else {
   $__i2$0 = $55;
  }
 }
 if ((label|0) == 22) {
  STACKTOP = sp;return ($$0|0);
 }
 $$pre = HEAP32[$__1buf>>2]|0;
 $$0 = $$pre;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__111__stdoutbufIcED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((16056 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((16056 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 127]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,18856)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 127]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 31]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fwrite(($__s|0),1,($__n|0),($5|0))|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($__n|0)>(0);
 if ($3) {
  $$012 = $__s;$__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP8[$$012]|0;
  $11 = $10&255;
  $12 = (FUNCTION_TABLE_iii[$9 & 31]($this,$11)|0);
  $13 = ($12|0)==(-1);
  if ($13) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $14 = (($__i$03) + 1)|0;
  $15 = (($$012) + 1|0);
  $16 = ($14|0)<($__n|0);
  if ($16) {
   $$012 = $15;$__i$03 = $14;
  } else {
   $$0 = $14;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0;
 var $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp;
 $__e = sp + 4|0;
 $0 = ($__c|0)==(-1);
 L1: do {
  if (!($0)) {
   $1 = $__c&255;
   HEAP8[$__1buf] = $1;
   $2 = (($this) + 44|0);
   $3 = HEAP8[$2]|0;
   $4 = ($3<<24>>24)==(0);
   if (!($4)) {
    $5 = (($this) + 32|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = (_fwrite(($__1buf|0),1,1,($6|0))|0);
    $8 = ($7|0)==(1);
    if ($8) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $9 = (($__1buf) + 1|0);
   $10 = (($this) + 36|0);
   $11 = (($this) + 40|0);
   $12 = (($__extbuf) + 8|0);
   $13 = $__extbuf;
   $14 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$11>>2]|0;
    $17 = HEAP32[$15>>2]|0;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 15]($15,$16,$pbase$0,$9,$__e,$__extbuf,$12,$__extbe)|0);
    $21 = HEAP32[$__e>>2]|0;
    $22 = ($21|0)==($pbase$0|0);
    if ($22) {
     $$0 = -1;
     label = 12;
     break;
    }
    $23 = ($20|0)==(3);
    if ($23) {
     label = 7;
     break;
    }
    $27 = ($20|0)==(1);
    $28 = ($20>>>0)<(2);
    if (!($28)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $29 = HEAP32[$__extbe>>2]|0;
    $30 = $29;
    $31 = (($30) - ($13))|0;
    $32 = HEAP32[$14>>2]|0;
    $33 = (_fwrite(($__extbuf|0),1,($31|0),($32|0))|0);
    $34 = ($33|0)==($31|0);
    if (!($34)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $35 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $27 ? $35 : $pbase$0;
    if ($27) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $24 = HEAP32[$14>>2]|0;
    $25 = (_fwrite(($pbase$0|0),1,1,($24|0))|0);
    $26 = ($25|0)==(1);
    if ($26) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $0 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$this>>2] = ((16056 + 8|0));
 $1 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($1);
 $2 = (($this) + 8|0);
 ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
 HEAP32[$this>>2] = ((15016 + 8|0));
 $3 = (($this) + 32|0);
 HEAP32[$3>>2] = $__fp;
 $4 = (($this) + 40|0);
 HEAP32[$4>>2] = $__st;
 $5 = (($this) + 48|0);
 HEAP32[$5>>2] = -1;
 $6 = (($this) + 52|0);
 HEAP8[$6] = 0;
 __ZNSt3__16localeC2ERKS0_($0,$1);
 __THREW__ = 0;
 $7 = (invoke_iii(17,($0|0),(18856|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $27 = ___cxa_find_matching_catch(-1,-1)|0;
  $28 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  HEAP32[$this>>2] = ((16056 + 8|0));
  __ZNSt3__16localeD2Ev($1);
  ___resumeException($27|0);
  // unreachable;
 }
 $10 = (($this) + 36|0);
 HEAP32[$10>>2] = $7;
 $11 = HEAP32[$7>>2]|0;
 $12 = (($11) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 127]($7)|0);
 $15 = (($this) + 44|0);
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$10>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (FUNCTION_TABLE_ii[$19 & 127]($16)|0);
 $21 = (($this) + 53|0);
 $22 = $20&1;
 HEAP8[$21] = $22;
 $23 = HEAP32[$15>>2]|0;
 $24 = ($23|0)>(8);
 if (!($24)) {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_vi(119,(14864|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $27 = ___cxa_find_matching_catch(-1,-1)|0;
  $28 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  HEAP32[$this>>2] = ((16056 + 8|0));
  __ZNSt3__16localeD2Ev($1);
  ___resumeException($27|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIcED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((16056 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((16056 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,18856)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 127]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 127]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 __ZNSt3__121__throw_runtime_errorEPKc(14864);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__enxt = sp;
 $__ci = sp + 8|0;
 $__inxt = sp + 4|0;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($0) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(-1);
  $7 = $6&1;
  HEAP8[$1] = $7;
  $$01 = $5;
  STACKTOP = sp;return ($$01|0);
 }
 $8 = (($this) + 48|0);
 L8: do {
  if ($3) {
   $9 = HEAP32[$8>>2]|0;
   $10 = $9&255;
   HEAP8[$__ci] = $10;
   $11 = (($this) + 36|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($this) + 40|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($__ci) + 1|0);
   $16 = (($__extbuf) + 8|0);
   $17 = HEAP32[$12>>2]|0;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 15]($12,$14,$__ci,$15,$__inxt,$__extbuf,$16,$__enxt)|0);
   if ((($20|0) == 1) | (($20|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   } else if ((($20|0) == 3)) {
    $21 = HEAP32[$8>>2]|0;
    $22 = $21&255;
    HEAP8[$__extbuf] = $22;
    $23 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $23;
   }
   $24 = (($this) + 32|0);
   while(1) {
    $25 = HEAP32[$__enxt>>2]|0;
    $26 = ($25>>>0)>($__extbuf>>>0);
    if (!($26)) {
     break L8;
    }
    $27 = (($25) + -1|0);
    HEAP32[$__enxt>>2] = $27;
    $28 = HEAP8[$27]|0;
    $29 = $28 << 24 >> 24;
    $30 = HEAP32[$24>>2]|0;
    $31 = (_ungetc(($29|0),($30|0))|0);
    $32 = ($31|0)==(-1);
    if ($32) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$8>>2] = $__c;
 HEAP8[$1] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp;
 $__inxt = sp + 4|0;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  if (!($__consume)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$3>>2] = -1;
  HEAP8[$0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 $8 = $7 ? $6 : 1;
 $9 = ($8|0)>(0);
 L8: do {
  if ($9) {
   $10 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $11 = HEAP32[$10>>2]|0;
    $12 = (_fgetc(($11|0))|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0 = -1;
     break;
    }
    $14 = $12&255;
    $15 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$15] = $14;
    $16 = (($__i$09) + 1)|0;
    $17 = ($16|0)<($8|0);
    if ($17) {
     $__i$09 = $16;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = (($this) + 53|0);
 $19 = HEAP8[$18]|0;
 $20 = ($19<<24>>24)==(0);
 L15: do {
  if ($20) {
   $21 = (($this) + 40|0);
   $22 = (($this) + 36|0);
   $23 = (($__1buf) + 1|0);
   $24 = (($this) + 32|0);
   $__nread$0 = $8;
   while(1) {
    $26 = HEAP32[$21>>2]|0;
    $27 = $26;
    $28 = $27;
    $29 = HEAP32[$28>>2]|0;
    $30 = (($27) + 4)|0;
    $31 = $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = HEAP32[$22>>2]|0;
    $34 = (($__extbuf) + ($__nread$0)|0);
    $35 = HEAP32[$33>>2]|0;
    $36 = (($35) + 16|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_iiiiiiiii[$37 & 15]($33,$26,$__extbuf,$34,$__enxt,$__1buf,$23,$__inxt)|0);
    if ((($38|0) == 3)) {
     label = 14;
     break;
    } else if ((($38|0) == 2)) {
     $$0 = -1;
     label = 23;
     break;
    } else if (!((($38|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $39 = HEAP32[$21>>2]|0;
    $40 = $39;
    $41 = $40;
    HEAP32[$41>>2] = $29;
    $42 = (($40) + 4)|0;
    $43 = $42;
    HEAP32[$43>>2] = $32;
    $44 = ($__nread$0|0)==(8);
    if ($44) {
     $$0 = -1;
     label = 23;
     break;
    }
    $45 = HEAP32[$24>>2]|0;
    $46 = (_fgetc(($45|0))|0);
    $47 = ($46|0)==(-1);
    if ($47) {
     $$0 = -1;
     label = 23;
     break;
    }
    $49 = $46&255;
    HEAP8[$34] = $49;
    $50 = (($__nread$0) + 1)|0;
    $__nread$0 = $50;
   }
   if ((label|0) == 14) {
    $48 = HEAP8[$__extbuf]|0;
    HEAP8[$__1buf] = $48;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $25 = HEAP8[$__extbuf]|0;
   HEAP8[$__1buf] = $25;
   $__nread$2 = $8;
  }
 } while(0);
 do {
  if ($__consume) {
   $60 = HEAP8[$__1buf]|0;
   $61 = $60&255;
   $62 = (($this) + 48|0);
   HEAP32[$62>>2] = $61;
   $64 = $60;
  } else {
   $51 = (($this) + 32|0);
   $__i2$0 = $__nread$2;
   while(1) {
    $52 = ($__i2$0|0)>(0);
    if (!($52)) {
     label = 21;
     break;
    }
    $53 = (($__i2$0) + -1)|0;
    $54 = (($__extbuf) + ($53)|0);
    $55 = HEAP8[$54]|0;
    $56 = $55&255;
    $57 = HEAP32[$51>>2]|0;
    $58 = (_ungetc(($56|0),($57|0))|0);
    $59 = ($58|0)==(-1);
    if ($59) {
     $$0 = -1;
     label = 23;
     break;
    } else {
     $__i2$0 = $53;
    }
   }
   if ((label|0) == 21) {
    $$pre = HEAP8[$__1buf]|0;
    $64 = $$pre;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $63 = $64&255;
 $$0 = $63;
 STACKTOP = sp;return ($$0|0);
}
function __GLOBAL__I_a() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_base4InitC2Ev(0);
 (_atexit((120|0),(14288|0),(___dso_handle|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+1)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+-1)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[$this>>2]|0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 255]($this);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt11logic_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((15160 + 8|0));
 $0 = (_strlen(($msg|0))|0);
 $1 = (($0) + 13)|0;
 __THREW__ = 0;
 $2 = (invoke_ii(68,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $10 = ___cxa_find_matching_catch(-1,-1)|0;
  $11 = tempRet0;
  __ZNSt9exceptionD2Ev(($this|0));
  ___resumeException($10|0);
  // unreachable;
 } else {
  $5 = (($this) + 4|0);
  $6 = (($0) + 1)|0;
  $7 = (($2) + 4|0);
  HEAP32[$7>>2] = $0;
  HEAP32[$2>>2] = $0;
  $8 = (($2) + 12|0);
  HEAP32[$5>>2] = $8;
  $9 = (($2) + 8|0);
  HEAP32[$9>>2] = 0;
  _memcpy(($8|0),($msg|0),($6|0))|0;
  STACKTOP = sp;return;
 }
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((15160 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + -12|0);
  __ZdaPv($6);
 }
 __ZNSt9exceptionD2Ev(($this|0));
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((15160 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if (!($4)) {
  __ZNSt9exceptionD2Ev(($this|0));
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + -12|0);
 __ZdaPv($6);
 __ZNSt9exceptionD2Ev(($this|0));
 STACKTOP = sp;return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $$idx$val = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $$idx$val = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($$idx$val|0);
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((15184 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP8[$msg]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($msg) + 1|0);
  $7 = $6;
 } else {
  $4 = (($msg) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_strlen(($7|0))|0);
 $9 = (($8) + 13)|0;
 __THREW__ = 0;
 $10 = (invoke_ii(68,($9|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $17 = ___cxa_find_matching_catch(-1,-1)|0;
  $18 = tempRet0;
  __ZNSt9exceptionD2Ev(($this|0));
  ___resumeException($17|0);
  // unreachable;
 } else {
  $13 = (($8) + 1)|0;
  $14 = (($10) + 4|0);
  HEAP32[$14>>2] = $8;
  HEAP32[$10>>2] = $8;
  $15 = (($10) + 12|0);
  HEAP32[$0>>2] = $15;
  $16 = (($10) + 8|0);
  HEAP32[$16>>2] = 0;
  _memcpy(($15|0),($7|0),($13|0))|0;
  STACKTOP = sp;return;
 }
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((15184 + 8|0));
 $0 = (_strlen(($msg|0))|0);
 $1 = (($0) + 13)|0;
 __THREW__ = 0;
 $2 = (invoke_ii(68,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $10 = ___cxa_find_matching_catch(-1,-1)|0;
  $11 = tempRet0;
  __ZNSt9exceptionD2Ev(($this|0));
  ___resumeException($10|0);
  // unreachable;
 } else {
  $5 = (($this) + 4|0);
  $6 = (($0) + 1)|0;
  $7 = (($2) + 4|0);
  HEAP32[$7>>2] = $0;
  HEAP32[$2>>2] = $0;
  $8 = (($2) + 12|0);
  HEAP32[$5>>2] = $8;
  $9 = (($2) + 8|0);
  HEAP32[$9>>2] = 0;
  _memcpy(($8|0),($msg|0),($6|0))|0;
  STACKTOP = sp;return;
 }
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((15184 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + -12|0);
  __ZdaPv($6);
 }
 __ZNSt9exceptionD2Ev(($this|0));
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((15184 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if (!($4)) {
  __ZNSt9exceptionD2Ev(($this|0));
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + -12|0);
 __ZdaPv($6);
 __ZNSt9exceptionD2Ev(($this|0));
 STACKTOP = sp;return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $$idx$val = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $$idx$val = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($$idx$val|0);
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((15160 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + -12|0);
  __ZdaPv($6);
 }
 __ZNSt9exceptionD2Ev(($this|0));
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt14overflow_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((15184 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + -12|0);
  __ZdaPv($6);
 }
 __ZNSt9exceptionD2Ev(($this|0));
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = $ev;
 $0 = (($agg$result) + 4|0);
 HEAP32[$0>>2] = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 15]($0,$this,$code);
 $4 = (($0) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($condition) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if (!($8)) {
  $12 = 0;
  STACKTOP = sp;return ($12|0);
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = HEAP32[$condition>>2]|0;
 $11 = ($9|0)==($10|0);
 $12 = $11;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($code) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  $5 = 0;
  STACKTOP = sp;return ($5|0);
 }
 $3 = HEAP32[$code>>2]|0;
 $4 = ($3|0)==($condition|0);
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strerror(($ev|0))|0);
 $1 = (_strlen(($0|0))|0);
 $2 = ($1>>>0)>(4294967279);
 if ($2) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $3 = ($1>>>0)<(11);
 if ($3) {
  $4 = $1 << 1;
  $5 = $4&255;
  HEAP8[$agg$result] = $5;
  $6 = (($agg$result) + 1|0);
  $__p$0$i$i$i = $6;
  _memcpy(($__p$0$i$i$i|0),($0|0),($1|0))|0;
  $13 = (($__p$0$i$i$i) + ($1)|0);
  HEAP8[$13] = 0;
  STACKTOP = sp;return;
 } else {
  $7 = (($1) + 16)|0;
  $8 = $7 & -16;
  $9 = (__Znwj($8)|0);
  $10 = (($agg$result) + 8|0);
  HEAP32[$10>>2] = $9;
  $11 = $8 | 1;
  HEAP32[$agg$result>>2] = $11;
  $12 = (($agg$result) + 4|0);
  HEAP32[$12>>2] = $1;
  $__p$0$i$i$i = $9;
  _memcpy(($__p$0$i$i$i|0),($0|0),($1|0))|0;
  $13 = (($__p$0$i$i$i) + ($1)|0);
  HEAP8[$13] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$ec,$what_arg) {
 $agg$result = $agg$result|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = HEAP32[$ec>>2]|0;
 $2 = ($1|0)==(0);
 do {
  if (!($2)) {
   $3 = HEAP8[$what_arg]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = $3&255;
    $9 = $8 >>> 1;
    $11 = $9;
   } else {
    $6 = (($what_arg) + 4|0);
    $7 = HEAP32[$6>>2]|0;
    $11 = $7;
   }
   $10 = ($11|0)==(0);
   if ($10) {
    $17 = $1;
   } else {
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg,15408,2)|0);
    $$pre = HEAP32[$ec>>2]|0;
    $17 = $$pre;
   }
   $12 = (($ec) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 24|0);
   $16 = HEAP32[$15>>2]|0;
   FUNCTION_TABLE_viii[$16 & 15]($0,$13,$17);
   $18 = HEAP8[$0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   if ($20) {
    $25 = (($0) + 1|0);
    $26 = $18&255;
    $27 = $26 >>> 1;
    $28 = $25;$29 = $27;
   } else {
    $21 = (($0) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($0) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $28 = $22;$29 = $24;
   }
   __THREW__ = 0;
   (invoke_iiii(24,($what_arg|0),($28|0),($29|0))|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if (!($31)) {
    $32 = HEAP8[$0]|0;
    $33 = $32 & 1;
    $34 = ($33<<24>>24)==(0);
    if ($34) {
     break;
    }
    $35 = (($0) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    __ZdlPv($36);
    break;
   }
   $37 = ___cxa_find_matching_catch(-1,-1)|0;
   $38 = tempRet0;
   $39 = HEAP8[$0]|0;
   $40 = $39 & 1;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    ___resumeException($37|0);
    // unreachable;
   }
   $42 = (($0) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   __ZdlPv($43);
   ___resumeException($37|0);
   // unreachable;
  }
 } while(0);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$what_arg+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$what_arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$what_arg+8>>2]|0;
 ;HEAP32[$what_arg+0>>2]=0|0;HEAP32[$what_arg+4>>2]=0|0;HEAP32[$what_arg+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg) {
 $this = $this|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 12|0;
 $1 = sp;
 $2 = (_strlen(($what_arg|0))|0);
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  HEAP8[$1] = $6;
  $7 = (($1) + 1|0);
  $__p$0$i$i$i = $7;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = (($1) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  HEAP32[$1>>2] = $12;
  $13 = (($1) + 4|0);
  HEAP32[$13>>2] = $2;
  $__p$0$i$i$i = $10;
 }
 _memcpy(($__p$0$i$i$i|0),($what_arg|0),($2|0))|0;
 $14 = (($__p$0$i$i$i) + ($2)|0);
 HEAP8[$14] = 0;
 __THREW__ = 0;
 invoke_viii(4,($0|0),($ec|0),($1|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 do {
  if ($16) {
   $40 = ___cxa_find_matching_catch(-1,-1)|0;
   $41 = tempRet0;
   $$0 = $41;$$01 = $40;
  } else {
   __THREW__ = 0;
   invoke_vii(44,($this|0),($0|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    $42 = ___cxa_find_matching_catch(-1,-1)|0;
    $43 = tempRet0;
    $44 = HEAP8[$0]|0;
    $45 = $44 & 1;
    $46 = ($45<<24>>24)==(0);
    if ($46) {
     $$0 = $43;$$01 = $42;
     break;
    }
    $47 = (($0) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    __ZdlPv($48);
    $$0 = $43;$$01 = $42;
    break;
   }
   $19 = HEAP8[$0]|0;
   $20 = $19 & 1;
   $21 = ($20<<24>>24)==(0);
   if (!($21)) {
    $22 = (($0) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    __ZdlPv($23);
   }
   $24 = HEAP8[$1]|0;
   $25 = $24 & 1;
   $26 = ($25<<24>>24)==(0);
   if ($26) {
    HEAP32[$this>>2] = ((15416 + 8|0));
    $29 = (($this) + 8|0);
    $30 = $ec;
    $31 = $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = (($30) + 4)|0;
    $34 = $33;
    $35 = HEAP32[$34>>2]|0;
    $36 = $29;
    $37 = $36;
    HEAP32[$37>>2] = $32;
    $38 = (($36) + 4)|0;
    $39 = $38;
    HEAP32[$39>>2] = $35;
    STACKTOP = sp;return;
   }
   $27 = (($1) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   __ZdlPv($28);
   HEAP32[$this>>2] = ((15416 + 8|0));
   $29 = (($this) + 8|0);
   $30 = $ec;
   $31 = $30;
   $32 = HEAP32[$31>>2]|0;
   $33 = (($30) + 4)|0;
   $34 = $33;
   $35 = HEAP32[$34>>2]|0;
   $36 = $29;
   $37 = $36;
   HEAP32[$37>>2] = $32;
   $38 = (($36) + 4)|0;
   $39 = $38;
   HEAP32[$39>>2] = $35;
   STACKTOP = sp;return;
  }
 } while(0);
 $49 = HEAP8[$1]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 if ($51) {
  ___resumeException($$01|0);
  // unreachable;
 }
 $52 = (($1) + 8|0);
 $53 = HEAP32[$52>>2]|0;
 __ZdlPv($53);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112__next_primeEj($n) {
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$0$ph$i$i$i = 0, $$0$ph$i$i$i2 = 0, $$k0$0 = 0, $$neg1$i$i$i = 0, $$neg1$i$i$i6 = 0, $$sum$i$i$i = 0, $$sum$i$i$i5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__len$0$i$i$i = 0, $__len$0$i$i$i4 = 0;
 var $__len$0$ph$i$i$i = 0, $__len$0$ph$i$i$i1 = 0, $i$015 = 0, $in$0 = 0, $j$012 = 0, $k0$0 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n>>>0)<(212);
 if ($0) {
  $$0$ph$i$i$i = 15560;$__len$0$ph$i$i$i = 48;
  L2: while(1) {
   $__len$0$i$i$i = $__len$0$ph$i$i$i;
   while(1) {
    $1 = ($__len$0$i$i$i|0)==(0);
    if ($1) {
     break L2;
    }
    $2 = (($__len$0$i$i$i|0) / 2)&-1;
    $3 = (($$0$ph$i$i$i) + ($2<<2)|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = ($4>>>0)<($n>>>0);
    if ($5) {
     break;
    } else {
     $__len$0$i$i$i = $2;
    }
   }
   $$sum$i$i$i = (($2) + 1)|0;
   $6 = (($$0$ph$i$i$i) + ($$sum$i$i$i<<2)|0);
   $$neg1$i$i$i = (($__len$0$i$i$i) + -1)|0;
   $7 = (($$neg1$i$i$i) - ($2))|0;
   $$0$ph$i$i$i = $6;$__len$0$ph$i$i$i = $7;
  }
  $8 = HEAP32[$$0$ph$i$i$i>>2]|0;
  $$0 = $8;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = ($n>>>0)>(4294967291);
 if ($9) {
  $10 = (___cxa_allocate_exception(8)|0);
  __THREW__ = 0;
  invoke_vii(45,($10|0),(15944|0));
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if ($12) {
   $13 = ___cxa_find_matching_catch(-1,-1)|0;
   $14 = tempRet0;
   ___cxa_free_exception(($10|0));
   ___resumeException($13|0);
   // unreachable;
  } else {
   HEAP32[$10>>2] = ((15344 + 8|0));
   ___cxa_throw(($10|0),(15392|0),(11|0));
   // unreachable;
  }
 }
 $15 = (($n>>>0) / 210)&-1;
 $16 = ($15*210)|0;
 $17 = (($n) - ($16))|0;
 $$0$ph$i$i$i2 = 15752;$__len$0$ph$i$i$i1 = 48;
 L17: while(1) {
  $__len$0$i$i$i4 = $__len$0$ph$i$i$i1;
  while(1) {
   $18 = ($__len$0$i$i$i4|0)==(0);
   if ($18) {
    break L17;
   }
   $19 = (($__len$0$i$i$i4|0) / 2)&-1;
   $20 = (($$0$ph$i$i$i2) + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21>>>0)<($17>>>0);
   if ($22) {
    break;
   } else {
    $__len$0$i$i$i4 = $19;
   }
  }
  $$sum$i$i$i5 = (($19) + 1)|0;
  $23 = (($$0$ph$i$i$i2) + ($$sum$i$i$i5<<2)|0);
  $$neg1$i$i$i6 = (($__len$0$i$i$i4) + -1)|0;
  $24 = (($$neg1$i$i$i6) - ($19))|0;
  $$0$ph$i$i$i2 = $23;$__len$0$ph$i$i$i1 = $24;
 }
 $25 = $$0$ph$i$i$i2;
 $26 = (($25) - (15752))|0;
 $27 = $26 >> 2;
 $28 = (15752 + ($27<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + ($16))|0;
 $in$0 = $27;$k0$0 = $15;$storemerge = $30;
 L24: while(1) {
  $j$012 = 5;
  while(1) {
   $33 = (15560 + ($j$012<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($storemerge>>>0) / ($34>>>0))&-1;
   $36 = ($35>>>0)<($34>>>0);
   if ($36) {
    $$0 = $storemerge;
    label = 120;
    break L24;
   }
   $37 = Math_imul($35, $34)|0;
   $38 = ($storemerge|0)==($37|0);
   $32 = (($j$012) + 1)|0;
   if ($38) {
    break;
   }
   $31 = ($32>>>0)<(47);
   if ($31) {
    $j$012 = $32;
   } else {
    label = 21;
    break;
   }
  }
  L30: do {
   if ((label|0) == 21) {
    label = 0;
    $39 = ($storemerge>>>0)<(44521);
    if ($39) {
     $$0 = $storemerge;
     label = 120;
     break L24;
    }
    $40 = (($storemerge>>>0) / 211)&-1;
    $45 = $40;$i$015 = 211;
    while(1) {
     $44 = Math_imul($45, $i$015)|0;
     $46 = ($storemerge|0)==($44|0);
     if ($46) {
      break L30;
     }
     $47 = (($i$015) + 10)|0;
     $48 = (($storemerge>>>0) / ($47>>>0))&-1;
     $49 = ($48>>>0)<($47>>>0);
     if ($49) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $50 = Math_imul($48, $47)|0;
     $51 = ($storemerge|0)==($50|0);
     if ($51) {
      break L30;
     }
     $52 = (($i$015) + 12)|0;
     $53 = (($storemerge>>>0) / ($52>>>0))&-1;
     $54 = ($53>>>0)<($52>>>0);
     if ($54) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $55 = Math_imul($53, $52)|0;
     $56 = ($storemerge|0)==($55|0);
     if ($56) {
      break L30;
     }
     $57 = (($i$015) + 16)|0;
     $58 = (($storemerge>>>0) / ($57>>>0))&-1;
     $59 = ($58>>>0)<($57>>>0);
     if ($59) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $60 = Math_imul($58, $57)|0;
     $61 = ($storemerge|0)==($60|0);
     if ($61) {
      break L30;
     }
     $62 = (($i$015) + 18)|0;
     $63 = (($storemerge>>>0) / ($62>>>0))&-1;
     $64 = ($63>>>0)<($62>>>0);
     if ($64) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $65 = Math_imul($63, $62)|0;
     $66 = ($storemerge|0)==($65|0);
     if ($66) {
      break L30;
     }
     $67 = (($i$015) + 22)|0;
     $68 = (($storemerge>>>0) / ($67>>>0))&-1;
     $69 = ($68>>>0)<($67>>>0);
     if ($69) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $70 = Math_imul($68, $67)|0;
     $71 = ($storemerge|0)==($70|0);
     if ($71) {
      break L30;
     }
     $72 = (($i$015) + 28)|0;
     $73 = (($storemerge>>>0) / ($72>>>0))&-1;
     $74 = ($73>>>0)<($72>>>0);
     if ($74) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $75 = Math_imul($73, $72)|0;
     $76 = ($storemerge|0)==($75|0);
     if ($76) {
      break L30;
     }
     $77 = (($i$015) + 30)|0;
     $78 = (($storemerge>>>0) / ($77>>>0))&-1;
     $79 = ($78>>>0)<($77>>>0);
     if ($79) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $80 = Math_imul($78, $77)|0;
     $81 = ($storemerge|0)==($80|0);
     if ($81) {
      break L30;
     }
     $82 = (($i$015) + 36)|0;
     $83 = (($storemerge>>>0) / ($82>>>0))&-1;
     $84 = ($83>>>0)<($82>>>0);
     if ($84) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $85 = Math_imul($83, $82)|0;
     $86 = ($storemerge|0)==($85|0);
     if ($86) {
      break L30;
     }
     $87 = (($i$015) + 40)|0;
     $88 = (($storemerge>>>0) / ($87>>>0))&-1;
     $89 = ($88>>>0)<($87>>>0);
     if ($89) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $90 = Math_imul($88, $87)|0;
     $91 = ($storemerge|0)==($90|0);
     if ($91) {
      break L30;
     }
     $92 = (($i$015) + 42)|0;
     $93 = (($storemerge>>>0) / ($92>>>0))&-1;
     $94 = ($93>>>0)<($92>>>0);
     if ($94) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $95 = Math_imul($93, $92)|0;
     $96 = ($storemerge|0)==($95|0);
     if ($96) {
      break L30;
     }
     $97 = (($i$015) + 46)|0;
     $98 = (($storemerge>>>0) / ($97>>>0))&-1;
     $99 = ($98>>>0)<($97>>>0);
     if ($99) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $100 = Math_imul($98, $97)|0;
     $101 = ($storemerge|0)==($100|0);
     if ($101) {
      break L30;
     }
     $102 = (($i$015) + 52)|0;
     $103 = (($storemerge>>>0) / ($102>>>0))&-1;
     $104 = ($103>>>0)<($102>>>0);
     if ($104) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $105 = Math_imul($103, $102)|0;
     $106 = ($storemerge|0)==($105|0);
     if ($106) {
      break L30;
     }
     $107 = (($i$015) + 58)|0;
     $108 = (($storemerge>>>0) / ($107>>>0))&-1;
     $109 = ($108>>>0)<($107>>>0);
     if ($109) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $110 = Math_imul($108, $107)|0;
     $111 = ($storemerge|0)==($110|0);
     if ($111) {
      break L30;
     }
     $112 = (($i$015) + 60)|0;
     $113 = (($storemerge>>>0) / ($112>>>0))&-1;
     $114 = ($113>>>0)<($112>>>0);
     if ($114) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $115 = Math_imul($113, $112)|0;
     $116 = ($storemerge|0)==($115|0);
     if ($116) {
      break L30;
     }
     $117 = (($i$015) + 66)|0;
     $118 = (($storemerge>>>0) / ($117>>>0))&-1;
     $119 = ($118>>>0)<($117>>>0);
     if ($119) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $120 = Math_imul($118, $117)|0;
     $121 = ($storemerge|0)==($120|0);
     if ($121) {
      break L30;
     }
     $122 = (($i$015) + 70)|0;
     $123 = (($storemerge>>>0) / ($122>>>0))&-1;
     $124 = ($123>>>0)<($122>>>0);
     if ($124) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $125 = Math_imul($123, $122)|0;
     $126 = ($storemerge|0)==($125|0);
     if ($126) {
      break L30;
     }
     $127 = (($i$015) + 72)|0;
     $128 = (($storemerge>>>0) / ($127>>>0))&-1;
     $129 = ($128>>>0)<($127>>>0);
     if ($129) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $130 = Math_imul($128, $127)|0;
     $131 = ($storemerge|0)==($130|0);
     if ($131) {
      break L30;
     }
     $132 = (($i$015) + 78)|0;
     $133 = (($storemerge>>>0) / ($132>>>0))&-1;
     $134 = ($133>>>0)<($132>>>0);
     if ($134) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $135 = Math_imul($133, $132)|0;
     $136 = ($storemerge|0)==($135|0);
     if ($136) {
      break L30;
     }
     $137 = (($i$015) + 82)|0;
     $138 = (($storemerge>>>0) / ($137>>>0))&-1;
     $139 = ($138>>>0)<($137>>>0);
     if ($139) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $140 = Math_imul($138, $137)|0;
     $141 = ($storemerge|0)==($140|0);
     if ($141) {
      break L30;
     }
     $142 = (($i$015) + 88)|0;
     $143 = (($storemerge>>>0) / ($142>>>0))&-1;
     $144 = ($143>>>0)<($142>>>0);
     if ($144) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $145 = Math_imul($143, $142)|0;
     $146 = ($storemerge|0)==($145|0);
     if ($146) {
      break L30;
     }
     $147 = (($i$015) + 96)|0;
     $148 = (($storemerge>>>0) / ($147>>>0))&-1;
     $149 = ($148>>>0)<($147>>>0);
     if ($149) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $150 = Math_imul($148, $147)|0;
     $151 = ($storemerge|0)==($150|0);
     if ($151) {
      break L30;
     }
     $152 = (($i$015) + 100)|0;
     $153 = (($storemerge>>>0) / ($152>>>0))&-1;
     $154 = ($153>>>0)<($152>>>0);
     if ($154) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $155 = Math_imul($153, $152)|0;
     $156 = ($storemerge|0)==($155|0);
     if ($156) {
      break L30;
     }
     $157 = (($i$015) + 102)|0;
     $158 = (($storemerge>>>0) / ($157>>>0))&-1;
     $159 = ($158>>>0)<($157>>>0);
     if ($159) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $160 = Math_imul($158, $157)|0;
     $161 = ($storemerge|0)==($160|0);
     if ($161) {
      break L30;
     }
     $162 = (($i$015) + 106)|0;
     $163 = (($storemerge>>>0) / ($162>>>0))&-1;
     $164 = ($163>>>0)<($162>>>0);
     if ($164) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $165 = Math_imul($163, $162)|0;
     $166 = ($storemerge|0)==($165|0);
     if ($166) {
      break L30;
     }
     $167 = (($i$015) + 108)|0;
     $168 = (($storemerge>>>0) / ($167>>>0))&-1;
     $169 = ($168>>>0)<($167>>>0);
     if ($169) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $170 = Math_imul($168, $167)|0;
     $171 = ($storemerge|0)==($170|0);
     if ($171) {
      break L30;
     }
     $172 = (($i$015) + 112)|0;
     $173 = (($storemerge>>>0) / ($172>>>0))&-1;
     $174 = ($173>>>0)<($172>>>0);
     if ($174) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $175 = Math_imul($173, $172)|0;
     $176 = ($storemerge|0)==($175|0);
     if ($176) {
      break L30;
     }
     $177 = (($i$015) + 120)|0;
     $178 = (($storemerge>>>0) / ($177>>>0))&-1;
     $179 = ($178>>>0)<($177>>>0);
     if ($179) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $180 = Math_imul($178, $177)|0;
     $181 = ($storemerge|0)==($180|0);
     if ($181) {
      break L30;
     }
     $182 = (($i$015) + 126)|0;
     $183 = (($storemerge>>>0) / ($182>>>0))&-1;
     $184 = ($183>>>0)<($182>>>0);
     if ($184) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $185 = Math_imul($183, $182)|0;
     $186 = ($storemerge|0)==($185|0);
     if ($186) {
      break L30;
     }
     $187 = (($i$015) + 130)|0;
     $188 = (($storemerge>>>0) / ($187>>>0))&-1;
     $189 = ($188>>>0)<($187>>>0);
     if ($189) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $190 = Math_imul($188, $187)|0;
     $191 = ($storemerge|0)==($190|0);
     if ($191) {
      break L30;
     }
     $192 = (($i$015) + 136)|0;
     $193 = (($storemerge>>>0) / ($192>>>0))&-1;
     $194 = ($193>>>0)<($192>>>0);
     if ($194) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $195 = Math_imul($193, $192)|0;
     $196 = ($storemerge|0)==($195|0);
     if ($196) {
      break L30;
     }
     $197 = (($i$015) + 138)|0;
     $198 = (($storemerge>>>0) / ($197>>>0))&-1;
     $199 = ($198>>>0)<($197>>>0);
     if ($199) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $200 = Math_imul($198, $197)|0;
     $201 = ($storemerge|0)==($200|0);
     if ($201) {
      break L30;
     }
     $202 = (($i$015) + 142)|0;
     $203 = (($storemerge>>>0) / ($202>>>0))&-1;
     $204 = ($203>>>0)<($202>>>0);
     if ($204) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $205 = Math_imul($203, $202)|0;
     $206 = ($storemerge|0)==($205|0);
     if ($206) {
      break L30;
     }
     $207 = (($i$015) + 148)|0;
     $208 = (($storemerge>>>0) / ($207>>>0))&-1;
     $209 = ($208>>>0)<($207>>>0);
     if ($209) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $210 = Math_imul($208, $207)|0;
     $211 = ($storemerge|0)==($210|0);
     if ($211) {
      break L30;
     }
     $212 = (($i$015) + 150)|0;
     $213 = (($storemerge>>>0) / ($212>>>0))&-1;
     $214 = ($213>>>0)<($212>>>0);
     if ($214) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $215 = Math_imul($213, $212)|0;
     $216 = ($storemerge|0)==($215|0);
     if ($216) {
      break L30;
     }
     $217 = (($i$015) + 156)|0;
     $218 = (($storemerge>>>0) / ($217>>>0))&-1;
     $219 = ($218>>>0)<($217>>>0);
     if ($219) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $220 = Math_imul($218, $217)|0;
     $221 = ($storemerge|0)==($220|0);
     if ($221) {
      break L30;
     }
     $222 = (($i$015) + 162)|0;
     $223 = (($storemerge>>>0) / ($222>>>0))&-1;
     $224 = ($223>>>0)<($222>>>0);
     if ($224) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $225 = Math_imul($223, $222)|0;
     $226 = ($storemerge|0)==($225|0);
     if ($226) {
      break L30;
     }
     $227 = (($i$015) + 166)|0;
     $228 = (($storemerge>>>0) / ($227>>>0))&-1;
     $229 = ($228>>>0)<($227>>>0);
     if ($229) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $230 = Math_imul($228, $227)|0;
     $231 = ($storemerge|0)==($230|0);
     if ($231) {
      break L30;
     }
     $232 = (($i$015) + 168)|0;
     $233 = (($storemerge>>>0) / ($232>>>0))&-1;
     $234 = ($233>>>0)<($232>>>0);
     if ($234) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $235 = Math_imul($233, $232)|0;
     $236 = ($storemerge|0)==($235|0);
     if ($236) {
      break L30;
     }
     $237 = (($i$015) + 172)|0;
     $238 = (($storemerge>>>0) / ($237>>>0))&-1;
     $239 = ($238>>>0)<($237>>>0);
     if ($239) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $240 = Math_imul($238, $237)|0;
     $241 = ($storemerge|0)==($240|0);
     if ($241) {
      break L30;
     }
     $242 = (($i$015) + 178)|0;
     $243 = (($storemerge>>>0) / ($242>>>0))&-1;
     $244 = ($243>>>0)<($242>>>0);
     if ($244) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $245 = Math_imul($243, $242)|0;
     $246 = ($storemerge|0)==($245|0);
     if ($246) {
      break L30;
     }
     $247 = (($i$015) + 180)|0;
     $248 = (($storemerge>>>0) / ($247>>>0))&-1;
     $249 = ($248>>>0)<($247>>>0);
     if ($249) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $250 = Math_imul($248, $247)|0;
     $251 = ($storemerge|0)==($250|0);
     if ($251) {
      break L30;
     }
     $252 = (($i$015) + 186)|0;
     $253 = (($storemerge>>>0) / ($252>>>0))&-1;
     $254 = ($253>>>0)<($252>>>0);
     if ($254) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $255 = Math_imul($253, $252)|0;
     $256 = ($storemerge|0)==($255|0);
     if ($256) {
      break L30;
     }
     $257 = (($i$015) + 190)|0;
     $258 = (($storemerge>>>0) / ($257>>>0))&-1;
     $259 = ($258>>>0)<($257>>>0);
     if ($259) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $260 = Math_imul($258, $257)|0;
     $261 = ($storemerge|0)==($260|0);
     if ($261) {
      break L30;
     }
     $262 = (($i$015) + 192)|0;
     $263 = (($storemerge>>>0) / ($262>>>0))&-1;
     $264 = ($263>>>0)<($262>>>0);
     if ($264) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $265 = Math_imul($263, $262)|0;
     $266 = ($storemerge|0)==($265|0);
     if ($266) {
      break L30;
     }
     $267 = (($i$015) + 196)|0;
     $268 = (($storemerge>>>0) / ($267>>>0))&-1;
     $269 = ($268>>>0)<($267>>>0);
     if ($269) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $270 = Math_imul($268, $267)|0;
     $271 = ($storemerge|0)==($270|0);
     if ($271) {
      break L30;
     }
     $272 = (($i$015) + 198)|0;
     $273 = (($storemerge>>>0) / ($272>>>0))&-1;
     $274 = ($273>>>0)<($272>>>0);
     if ($274) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $275 = Math_imul($273, $272)|0;
     $276 = ($storemerge|0)==($275|0);
     if ($276) {
      break L30;
     }
     $277 = (($i$015) + 208)|0;
     $278 = (($storemerge>>>0) / ($277>>>0))&-1;
     $279 = ($278>>>0)<($277>>>0);
     if ($279) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $280 = Math_imul($278, $277)|0;
     $281 = ($storemerge|0)==($280|0);
     $42 = (($i$015) + 210)|0;
     if ($281) {
      break L30;
     }
     $41 = (($storemerge>>>0) / ($42>>>0))&-1;
     $43 = ($41>>>0)<($42>>>0);
     if ($43) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     } else {
      $45 = $41;$i$015 = $42;
     }
    }
   }
  } while(0);
  $282 = (($in$0) + 1)|0;
  $283 = ($282|0)==(48);
  $$ = $283 ? 0 : $282;
  $284 = $283&1;
  $$k0$0 = (($284) + ($k0$0))|0;
  $285 = ($$k0$0*210)|0;
  $286 = (15752 + ($$<<2)|0);
  $287 = HEAP32[$286>>2]|0;
  $288 = (($287) + ($285))|0;
  $in$0 = $$;$k0$0 = $$k0$0;$storemerge = $288;
 }
 if ((label|0) == 120) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func) {
 $flag = $flag|0;
 $arg = $arg|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((15968|0))|0);
 $0 = HEAP32[$flag>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  while(1) {
   (_pthread_cond_wait((15992|0),(15968|0))|0);
   $2 = HEAP32[$flag>>2]|0;
   $3 = ($2|0)==(1);
   if (!($3)) {
    break;
   }
  }
 }
 $4 = HEAP32[$flag>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  (_pthread_mutex_unlock((15968|0))|0);
  STACKTOP = sp;return;
 }
 HEAP32[$flag>>2] = 1;
 __THREW__ = 0;
 (invoke_ii(69,(15968|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __THREW__ = 0;
  invoke_vi($func|0,($arg|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   __THREW__ = 0;
   (invoke_ii(70,(15968|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    HEAP32[$flag>>2] = -1;
    __THREW__ = 0;
    (invoke_ii(69,(15968|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     __THREW__ = 0;
     (invoke_ii(71,(15992|0))|0);
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if (!($15)) {
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $17 = tempRet0;
 (___cxa_begin_catch(($16|0))|0);
 __THREW__ = 0;
 (invoke_ii(70,(15968|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if (!($19)) {
  HEAP32[$flag>>2] = 0;
  __THREW__ = 0;
  (invoke_ii(69,(15968|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   __THREW__ = 0;
   (invoke_ii(71,(15992|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    __THREW__ = 0;
    invoke_v(2);
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if (!($25)) {
     // unreachable;
    }
   }
  }
 }
 $26 = ___cxa_find_matching_catch(-1,-1)|0;
 $27 = tempRet0;
 __THREW__ = 0;
 invoke_v(3);
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $30 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $31 = tempRet0;
  ___clang_call_terminate($30);
  // unreachable;
 } else {
  ___resumeException($26|0);
  // unreachable;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(46,($0|0),(16040|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1)|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = ((15240 + 8|0));
  ___cxa_throw(($0|0),(15288|0),(9|0));
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this+0>>2]=HEAP32[$__str+0>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
  STACKTOP = sp;return;
 }
 $3 = (($__str) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($__str) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6>>>0)>(4294967279);
 if ($7) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $8 = ($6>>>0)<(11);
 if ($8) {
  $9 = $6 << 1;
  $10 = $9&255;
  HEAP8[$this] = $10;
  $11 = (($this) + 1|0);
  $__p$0$i$i = $11;
 } else {
  $12 = (($6) + 16)|0;
  $13 = $12 & -16;
  $14 = (__Znwj($13)|0);
  $15 = (($this) + 8|0);
  HEAP32[$15>>2] = $14;
  $16 = $13 | 1;
  HEAP32[$this>>2] = $16;
  $17 = (($this) + 4|0);
  HEAP32[$17>>2] = $6;
  $__p$0$i$i = $14;
 }
 _memcpy(($__p$0$i$i|0),($4|0),($6|0))|0;
 $18 = (($__p$0$i$i) + ($6)|0);
 HEAP8[$18] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = ($__n>>>0)<(11);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__n;
  $__p$0 = $7;
 }
 _memset(($__p$0|0),($__c|0),($__n|0))|0;
 $11 = (($__p$0) + ($__n)|0);
 HEAP8[$11] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = HEAP8[$this]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $10 = $1;$8 = 10;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i$i = (($5) + -1)|0;
  $6 = $4&255;
  $10 = $6;$8 = $phitmp$i$i;
 }
 $7 = ($8>>>0)<($0>>>0);
 $9 = $10 & 1;
 $11 = ($9<<24>>24)==(0);
 if ($7) {
  if ($11) {
   $25 = $10&255;
   $26 = $25 >>> 1;
   $28 = $26;
  } else {
   $23 = (($this) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $28 = $24;
  }
  $27 = (($0) - ($8))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$8,$27,$28,0,$28,$0,$__s);
  STACKTOP = sp;return ($this|0);
 }
 if ($11) {
  $14 = (($this) + 1|0);
  $15 = $14;
 } else {
  $12 = (($this) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $15 = $13;
 }
 _memmove(($15|0),($__s|0),($0|0))|0;
 $16 = (($15) + ($0)|0);
 HEAP8[$16] = 0;
 $17 = HEAP8[$this]|0;
 $18 = $17 & 1;
 $19 = ($18<<24>>24)==(0);
 if ($19) {
  $21 = $0 << 1;
  $22 = $21&255;
  HEAP8[$this] = $22;
  STACKTOP = sp;return ($this|0);
 } else {
  $20 = (($this) + 4|0);
  HEAP32[$20>>2] = $0;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($this) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8>>>0)<($__n>>>0);
 if ($7) {
  $9 = (($__n) - ($8))|0;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$9,$__c)|0);
  STACKTOP = sp;return;
 }
 if ($2) {
  $14 = ((($this) + ($__n)|0) + 1|0);
  HEAP8[$14] = 0;
  $15 = $__n << 1;
  $16 = $15&255;
  HEAP8[$this] = $16;
  STACKTOP = sp;return;
 } else {
  $10 = (($this) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($__n)|0);
  HEAP8[$12] = 0;
  $13 = (($this) + 4|0);
  HEAP32[$13>>2] = $__n;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)==(0);
 if ($0) {
  STACKTOP = sp;return ($this|0);
 }
 $1 = HEAP8[$this]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $15 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $15 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $16 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $16 = $11;
 }
 $14 = (($15) - ($16))|0;
 $17 = ($14>>>0)<($__n>>>0);
 if ($17) {
  $18 = (($__n) - ($15))|0;
  $19 = (($18) + ($16))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
  $$pre = HEAP8[$this]|0;
  $21 = $$pre;
 } else {
  $21 = $8;
 }
 $20 = $21 & 1;
 $22 = ($20<<24>>24)==(0);
 if ($22) {
  $25 = (($this) + 1|0);
  $27 = $25;
 } else {
  $23 = (($this) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 }
 $26 = (($27) + ($16)|0);
 _memset(($26|0),($__c|0),($__n|0))|0;
 $28 = (($16) + ($__n))|0;
 $29 = HEAP8[$this]|0;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)==(0);
 if ($31) {
  $33 = $28 << 1;
  $34 = $33&255;
  HEAP8[$this] = $34;
 } else {
  $32 = (($this) + 4|0);
  HEAP32[$32>>2] = $28;
 }
 $35 = (($27) + ($28)|0);
 HEAP8[$35] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0;
 var $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = HEAP8[$this]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $14 = ($15>>>0)>($__res_arg>>>0);
 $16 = $14 ? $15 : $__res_arg;
 $17 = ($16>>>0)<(11);
 if ($17) {
  $21 = 10;
 } else {
  $18 = (($16) + 16)|0;
  $19 = $18 & -16;
  $phitmp$i2 = (($19) + -1)|0;
  $21 = $phitmp$i2;
 }
 $20 = ($21|0)==($22|0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $23 = ($21|0)==(10);
 do {
  if ($23) {
   $24 = (($this) + 1|0);
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
  } else {
   $27 = ($21>>>0)>($22>>>0);
   $28 = (($21) + 1)|0;
   if ($27) {
    $29 = (__Znwj($28)|0);
    $__new_data$0 = $29;
   } else {
    __THREW__ = 0;
    $30 = (invoke_ii(72,($28|0))|0);
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     $33 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $34 = tempRet0;
     (___cxa_begin_catch(($33|0))|0);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    } else {
     $__new_data$0 = $30;
    }
   }
   $35 = $8 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $39 = (($this) + 1|0);
    $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 0;
    break;
   } else {
    $37 = (($this) + 8|0);
    $38 = HEAP32[$37>>2]|0;
    $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $38;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 $40 = $8 & 1;
 $41 = ($40<<24>>24)==(0);
 if ($41) {
  $44 = $8&255;
  $45 = $44 >>> 1;
  $47 = $45;
 } else {
  $42 = (($this) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $47 = $43;
 }
 $46 = (($47) + 1)|0;
 _memcpy(($__new_data$1|0),($__p$0|0),($46|0))|0;
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0);
 }
 if ($__now_long$0$off0) {
  $48 = (($21) + 1)|0;
  $49 = $48 | 1;
  HEAP32[$this>>2] = $49;
  $50 = (($this) + 4|0);
  HEAP32[$50>>2] = $15;
  $51 = (($this) + 8|0);
  HEAP32[$51>>2] = $__new_data$1;
  STACKTOP = sp;return;
 } else {
  $52 = $15 << 1;
  $53 = $52&255;
  HEAP8[$this] = $53;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 1|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$22] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$22] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $14 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $14 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $15 = $12;
 } else {
  $9 = (($this) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $15 = $10;
 }
 $13 = (($14) - ($15))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $33 = (($__n) - ($14))|0;
  $34 = (($33) + ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$14,$34,$15,$15,0,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 $17 = ($__n|0)==(0);
 if ($17) {
  STACKTOP = sp;return ($this|0);
 }
 $18 = $7 & 1;
 $19 = ($18<<24>>24)==(0);
 if ($19) {
  $22 = (($this) + 1|0);
  $24 = $22;
 } else {
  $20 = (($this) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $24 = $21;
 }
 $23 = (($24) + ($15)|0);
 _memcpy(($23|0),($__s|0),($__n|0))|0;
 $25 = (($15) + ($__n))|0;
 $26 = HEAP8[$this]|0;
 $27 = $26 & 1;
 $28 = ($27<<24>>24)==(0);
 if ($28) {
  $30 = $25 << 1;
  $31 = $30&255;
  HEAP8[$this] = $31;
 } else {
  $29 = (($this) + 4|0);
  HEAP32[$29>>2] = $25;
 }
 $32 = (($24) + ($25)|0);
 HEAP8[$32] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = HEAP8[$this]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = ($__n_add|0)==(0);
 if (!($20)) {
  $21 = (($17) + ($__n_copy)|0);
  _memcpy(($21|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $22 = (($__old_sz) - ($__n_del))|0;
 $23 = ($22|0)==($__n_copy|0);
 if (!($23)) {
  $24 = (($22) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $25 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $26 = (($19) + ($$sum1)|0);
  _memcpy(($25|0),($26|0),($24|0))|0;
 }
 $27 = ($__old_cap|0)==(10);
 if ($27) {
  $28 = (($this) + 8|0);
  HEAP32[$28>>2] = $17;
  $29 = $16 | 1;
  HEAP32[$this>>2] = $29;
  $30 = (($22) + ($__n_add))|0;
  $31 = (($this) + 4|0);
  HEAP32[$31>>2] = $30;
  $32 = (($17) + ($30)|0);
  HEAP8[$32] = 0;
  STACKTOP = sp;return;
 }
 __ZdlPv($19);
 $28 = (($this) + 8|0);
 HEAP32[$28>>2] = $17;
 $29 = $16 | 1;
 HEAP32[$this>>2] = $29;
 $30 = (($22) + ($__n_add))|0;
 $31 = (($this) + 4|0);
 HEAP32[$31>>2] = $30;
 $32 = (($17) + ($30)|0);
 HEAP8[$32] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = HEAP8[$this]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = (($__old_sz) - ($__n_del))|0;
 $21 = ($20|0)==($__n_copy|0);
 if (!($21)) {
  $22 = (($20) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $23 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $24 = (($19) + ($$sum1)|0);
  _memcpy(($23|0),($24|0),($22|0))|0;
 }
 $25 = ($__old_cap|0)==(10);
 if ($25) {
  $26 = (($this) + 8|0);
  HEAP32[$26>>2] = $17;
  $27 = $16 | 1;
  HEAP32[$this>>2] = $27;
  STACKTOP = sp;return;
 }
 __ZdlPv($19);
 $26 = (($this) + 8|0);
 HEAP32[$26>>2] = $17;
 $27 = $16 | 1;
 HEAP32[$this>>2] = $27;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(2);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__sz;
  $__p$0 = $8;
 }
 (_wmemcpy($__p$0,$__s,$__sz)|0);
 $12 = (($__p$0) + ($__sz<<2)|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = ($__n>>>0)<(2);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__n;
  $__p$0 = $8;
 }
 (_wmemset($__p$0,$__c,$__n)|0);
 $12 = (($__p$0) + ($__n<<2)|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = 1;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $7 = $phitmp$i;$9 = $5;
 }
 $6 = ($7>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 if ($6) {
  if ($10) {
   $24 = $9&255;
   $25 = $24 >>> 1;
   $27 = $25;
  } else {
   $22 = (($this) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $27 = $23;
  }
  $26 = (($__n) - ($7))|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$7,$26,$27,0,$27,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 if ($10) {
  $13 = (($this) + 4|0);
  $14 = $13;
 } else {
  $11 = (($this) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $14 = $12;
 }
 (_wmemmove($14,$__s,$__n)|0);
 $15 = (($14) + ($__n<<2)|0);
 HEAP32[$15>>2] = 0;
 $16 = HEAP8[$this]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  $20 = $__n << 1;
  $21 = $20&255;
  HEAP8[$this] = $21;
  STACKTOP = sp;return ($this|0);
 } else {
  $19 = (($this) + 4|0);
  HEAP32[$19>>2] = $__n;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0;
 var $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = HEAP8[$this]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 1;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $14 = ($15>>>0)>($__res_arg>>>0);
 $16 = $14 ? $15 : $__res_arg;
 $17 = ($16>>>0)<(2);
 if ($17) {
  $21 = 1;
 } else {
  $18 = (($16) + 4)|0;
  $19 = $18 & -4;
  $phitmp$i2 = (($19) + -1)|0;
  $21 = $phitmp$i2;
 }
 $20 = ($21|0)==($22|0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $23 = ($21|0)==(1);
 do {
  if ($23) {
   $24 = (($this) + 4|0);
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
  } else {
   $27 = ($21>>>0)>($22>>>0);
   $28 = $21 << 2;
   $29 = (($28) + 4)|0;
   if ($27) {
    $30 = (__Znwj($29)|0);
    $$sink = $30;
   } else {
    __THREW__ = 0;
    $31 = (invoke_ii(72,($29|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     $34 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $35 = tempRet0;
     (___cxa_begin_catch(($34|0))|0);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    } else {
     $$sink = $31;
    }
   }
   $36 = $8 & 1;
   $37 = ($36<<24>>24)==(0);
   if ($37) {
    $40 = (($this) + 4|0);
    $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $40;$__was_long$0$off0 = 0;
    break;
   } else {
    $38 = (($this) + 8|0);
    $39 = HEAP32[$38>>2]|0;
    $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 $41 = $8 & 1;
 $42 = ($41<<24>>24)==(0);
 if ($42) {
  $45 = $8&255;
  $46 = $45 >>> 1;
  $48 = $46;
 } else {
  $43 = (($this) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $48 = $44;
 }
 $47 = (($48) + 1)|0;
 (_wmemcpy($__new_data$1,$__p$0,$47)|0);
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0);
 }
 if ($__now_long$0$off0) {
  $49 = (($21) + 1)|0;
  $50 = $49 | 1;
  HEAP32[$this>>2] = $50;
  $51 = (($this) + 4|0);
  HEAP32[$51>>2] = $15;
  $52 = (($this) + 8|0);
  HEAP32[$52>>2] = $__new_data$1;
  STACKTOP = sp;return;
 } else {
  $53 = $15 << 1;
  $54 = $53&255;
  HEAP8[$this] = $54;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 1;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 4|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
  $__p$0 = (($$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = (($$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741806 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = HEAP8[$this]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $20 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  (_wmemcpy($18,$20,$__n_copy)|0);
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy<<2)|0);
  (_wmemcpy($22,$__p_new_stuff,$__n_add)|0);
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $26 = (($18) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $27 = (($20) + ($$sum1<<2)|0);
  (_wmemcpy($26,$27,$25)|0);
 }
 $28 = ($__old_cap|0)==(1);
 if ($28) {
  $29 = (($this) + 8|0);
  HEAP32[$29>>2] = $18;
  $30 = $17 | 1;
  HEAP32[$this>>2] = $30;
  $31 = (($23) + ($__n_add))|0;
  $32 = (($this) + 4|0);
  HEAP32[$32>>2] = $31;
  $33 = (($18) + ($31<<2)|0);
  HEAP32[$33>>2] = 0;
  STACKTOP = sp;return;
 }
 __ZdlPv($20);
 $29 = (($this) + 8|0);
 HEAP32[$29>>2] = $18;
 $30 = $17 | 1;
 HEAP32[$this>>2] = $30;
 $31 = (($23) + ($__n_add))|0;
 $32 = (($this) + 4|0);
 HEAP32[$32>>2] = $31;
 $33 = (($18) + ($31<<2)|0);
 HEAP32[$33>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741807 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = HEAP8[$this]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $20 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  (_wmemcpy($18,$20,$__n_copy)|0);
 }
 $21 = (($__old_sz) - ($__n_del))|0;
 $22 = ($21|0)==($__n_copy|0);
 if (!($22)) {
  $23 = (($21) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $24 = (($18) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $25 = (($20) + ($$sum1<<2)|0);
  (_wmemcpy($24,$25,$23)|0);
 }
 $26 = ($__old_cap|0)==(1);
 if ($26) {
  $27 = (($this) + 8|0);
  HEAP32[$27>>2] = $18;
  $28 = $17 | 1;
  HEAP32[$this>>2] = $28;
  STACKTOP = sp;return;
 }
 __ZdlPv($20);
 $27 = (($this) + 8|0);
 HEAP32[$27>>2] = $18;
 $28 = $17 | 1;
 HEAP32[$this>>2] = $28;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base5clearEj($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$i$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tmpcast$i$byval_copy = sp + 8|0;
 $0 = sp;
 $1 = (($this) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $5 = $state | 1;
  $6 = (($this) + 16|0);
  HEAP32[$6>>2] = $5;
 } else {
  $4 = (($this) + 16|0);
  HEAP32[$4>>2] = $state;
 }
 $7 = $3&1;
 $8 = $7 | $state;
 $9 = (($this) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8 & $10;
 $12 = ($11|0)==(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = (___cxa_allocate_exception(16)|0);
 $14 = HEAP8[16408]|0;
 $15 = ($14<<24>>24)==(0);
 if ($15) {
  $16 = (___cxa_guard_acquire((16408|0))|0);
  $17 = ($16|0)==(0);
  if (!($17)) {
   HEAP32[16400>>2] = ((17096 + 8|0));
   (_atexit((41|0),(16400|0),(___dso_handle|0))|0);
   ___cxa_guard_release((16408|0));
  }
 }
 $18 = $0;
 $19 = $18;
 HEAP32[$19>>2] = 1;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = (16400);
 __THREW__ = 0;
 ;HEAP32[$tmpcast$i$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$tmpcast$i$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
 invoke_viii(5,($13|0),($tmpcast$i$byval_copy|0),(16456|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $24 = ___cxa_find_matching_catch(-1,-1)|0;
  $25 = tempRet0;
  ___cxa_free_exception(($13|0));
  ___resumeException($24|0);
  // unreachable;
 } else {
  HEAP32[$13>>2] = ((16416 + 8|0));
  ___cxa_throw(($13|0),(16504|0),(37|0));
  // unreachable;
 }
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((16440 + 8|0));
 $0 = (($this) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $$pre = (($this) + 32|0);
 $$pre1 = (($this) + 36|0);
 L1: do {
  if (!($2)) {
   $i$01$i = $1;
   while(1) {
    $3 = (($i$01$i) + -1)|0;
    $4 = HEAP32[$$pre>>2]|0;
    $5 = (($4) + ($3<<2)|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = HEAP32[$$pre1>>2]|0;
    $8 = (($7) + ($3<<2)|0);
    $9 = HEAP32[$8>>2]|0;
    __THREW__ = 0;
    invoke_viii($6|0,0,($this|0),($9|0));
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     break;
    }
    $12 = ($3|0)==(0);
    if ($12) {
     break L1;
    } else {
     $i$01$i = $3;
    }
   }
   $20 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $21 = tempRet0;
   ___clang_call_terminate($20);
   // unreachable;
  }
 } while(0);
 $13 = (($this) + 28|0);
 __ZNSt3__16localeD2Ev($13);
 $14 = HEAP32[$$pre>>2]|0;
 _free($14);
 $15 = HEAP32[$$pre1>>2]|0;
 _free($15);
 $16 = (($this) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 _free($17);
 $18 = (($this) + 60|0);
 $19 = HEAP32[$18>>2]|0;
 _free($19);
 STACKTOP = sp;return;
}
function __ZNKSt3__18ios_base6getlocEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 28|0);
 __ZNSt3__16localeC2ERKS0_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4initEPv($this,$sb) {
 $this = $this|0;
 $sb = $sb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 HEAP32[$0>>2] = $sb;
 $not$ = ($sb|0)==(0|0);
 $1 = $not$&1;
 $2 = (($this) + 16|0);
 HEAP32[$2>>2] = $1;
 $3 = (($this) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = (($this) + 4|0);
 HEAP32[$4>>2] = 4098;
 $5 = (($this) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = (($this) + 8|0);
 HEAP32[$6>>2] = 6;
 $7 = (($this) + 32|0);
 $8 = (($this) + 28|0);
 dest=$7+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__16localeC2Ev($8);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((16056 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((16056 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 12|0);
 $2 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 1|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP8[$3]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 127]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   }
   $13 = $11&255;
   $storemerge = $13;
  }
  HEAP8[$$01] = $storemerge;
  $14 = (($__i$02) + 1)|0;
  $15 = (($$01) + 1|0);
  $16 = ($14|0)<($__n|0);
  if ($16) {
   $$01 = $15;$__i$02 = $14;
  } else {
   $__i$0$lcssa = $14;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 127]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP8[$6]|0;
 $9 = $8&255;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0;
 var $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 24|0);
 $2 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP8[$$02]|0;
   $7 = (($3) + 1|0);
   HEAP32[$1>>2] = $7;
   HEAP8[$3] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP8[$$02]|0;
   $12 = $11&255;
   $13 = (FUNCTION_TABLE_iii[$10 & 31]($this,$12)|0);
   $14 = ($13|0)==(-1);
   if ($14) {
    $__i$0$lcssa = $__i$01;
    label = 7;
    break;
   }
  }
  $15 = (($$02) + 1|0);
  $16 = (($__i$01) + 1)|0;
  $17 = ($16|0)<($__n|0);
  if ($17) {
   $$02 = $15;$__i$01 = $16;
  } else {
   $__i$0$lcssa = $16;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((16120 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((16120 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 12|0);
 $2 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 4|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP32[$3>>2]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 127]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   } else {
    $storemerge = $11;
   }
  }
  HEAP32[$$01>>2] = $storemerge;
  $13 = (($__i$02) + 1)|0;
  $14 = ($13|0)<($__n|0);
  if (!($14)) {
   $__i$0$lcssa = $13;
   label = 8;
   break;
  }
  $15 = (($$01) + 4|0);
  $$01 = $15;$__i$02 = $13;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 127]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP32[$6>>2]|0;
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 24|0);
 $2 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP32[$$02>>2]|0;
   $7 = (($3) + 4|0);
   HEAP32[$1>>2] = $7;
   HEAP32[$3>>2] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$$02>>2]|0;
   $12 = (FUNCTION_TABLE_iii[$10 & 31]($this,$11)|0);
   $13 = ($12|0)==(-1);
   if ($13) {
    $__i$0$lcssa = $__i$01;
    label = 8;
    break;
   }
  }
  $14 = (($__i$01) + 1)|0;
  $15 = ($14|0)<($__n|0);
  if (!($15)) {
   $__i$0$lcssa = $14;
   label = 8;
   break;
  }
  $16 = (($$02) + 4|0);
  $$02 = $16;$__i$01 = $14;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 8)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$phi$trans$insert$phi$trans$insert = 0, $$pre$pre = 0, $$pre12 = 0, $$pre12$pre = 0, $$sum = 0, $$sum10 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return ($this|0);
 }
 HEAP8[$__s] = 0;
 $6 = (($__s) + 4|0);
 HEAP32[$6>>2] = $this;
 $$sum5 = (($2) + 16)|0;
 $7 = (($this) + ($$sum5)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $$sum10 = (($2) + 72)|0;
   $10 = (($this) + ($$sum10)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   do {
    if ($12) {
     $$pre12 = $2;
     label = 6;
    } else {
     __THREW__ = 0;
     (invoke_ii(66,($11|0))|0);
     $13 = __THREW__; __THREW__ = 0;
     $14 = $13&1;
     if ($14) {
      $33 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $34 = tempRet0;
      $$0 = $33;
      break;
     } else {
      $$pre$pre = HEAP32[$this>>2]|0;
      $$phi$trans$insert$phi$trans$insert = (($$pre$pre) + -12|0);
      $$pre12$pre = HEAP32[$$phi$trans$insert$phi$trans$insert>>2]|0;
      $$pre12 = $$pre12$pre;
      label = 6;
      break;
     }
    }
   } while(0);
   if ((label|0) == 6) {
    HEAP8[$__s] = 1;
    $$sum6 = (($$pre12) + 24)|0;
    $15 = (($this) + ($$sum6)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + 24|0);
    $19 = HEAP32[$18>>2]|0;
    __THREW__ = 0;
    $20 = (invoke_ii($19|0,($16|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     $23 = ($20|0)==(-1);
     if (!($23)) {
      break;
     }
     $24 = HEAP32[$this>>2]|0;
     $25 = (($24) + -12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = (($this) + ($26)|0);
     $$sum9 = (($26) + 16)|0;
     $28 = (($this) + ($$sum9)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = $29 | 1;
     __THREW__ = 0;
     invoke_vii(47,($27|0),($30|0));
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      break;
     }
    }
    $35 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $36 = tempRet0;
    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
    $$0 = $35;
   }
   (___cxa_begin_catch(($$0|0))|0);
   $37 = HEAP32[$this>>2]|0;
   $38 = (($37) + -12|0);
   $39 = HEAP32[$38>>2]|0;
   $$sum7 = (($39) + 16)|0;
   $40 = (($this) + ($$sum7)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $41 | 1;
   HEAP32[$40>>2] = $42;
   $$sum8 = (($39) + 20)|0;
   $43 = (($this) + ($$sum8)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 & 1;
   $46 = ($45|0)==(0);
   if ($46) {
    ___cxa_end_catch();
    STACKTOP = sp;return ($this|0);
   }
   __THREW__ = 0;
   invoke_v(2);
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if (!($48)) {
    // unreachable;
   }
   $49 = ___cxa_find_matching_catch(-1,-1)|0;
   $50 = tempRet0;
   __THREW__ = 0;
   invoke_v(3);
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if ($52) {
    $53 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $54 = tempRet0;
    ___clang_call_terminate($53);
    // unreachable;
   } else {
    ___resumeException($49|0);
    // unreachable;
   }
  }
 } while(0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 8)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$phi$trans$insert$phi$trans$insert = 0, $$pre$pre = 0, $$pre12 = 0, $$pre12$pre = 0, $$sum = 0, $$sum10 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return ($this|0);
 }
 HEAP8[$__s] = 0;
 $6 = (($__s) + 4|0);
 HEAP32[$6>>2] = $this;
 $$sum5 = (($2) + 16)|0;
 $7 = (($this) + ($$sum5)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $$sum10 = (($2) + 72)|0;
   $10 = (($this) + ($$sum10)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   do {
    if ($12) {
     $$pre12 = $2;
     label = 6;
    } else {
     __THREW__ = 0;
     (invoke_ii(67,($11|0))|0);
     $13 = __THREW__; __THREW__ = 0;
     $14 = $13&1;
     if ($14) {
      $33 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $34 = tempRet0;
      $$0 = $33;
      break;
     } else {
      $$pre$pre = HEAP32[$this>>2]|0;
      $$phi$trans$insert$phi$trans$insert = (($$pre$pre) + -12|0);
      $$pre12$pre = HEAP32[$$phi$trans$insert$phi$trans$insert>>2]|0;
      $$pre12 = $$pre12$pre;
      label = 6;
      break;
     }
    }
   } while(0);
   if ((label|0) == 6) {
    HEAP8[$__s] = 1;
    $$sum6 = (($$pre12) + 24)|0;
    $15 = (($this) + ($$sum6)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + 24|0);
    $19 = HEAP32[$18>>2]|0;
    __THREW__ = 0;
    $20 = (invoke_ii($19|0,($16|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     $23 = ($20|0)==(-1);
     if (!($23)) {
      break;
     }
     $24 = HEAP32[$this>>2]|0;
     $25 = (($24) + -12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = (($this) + ($26)|0);
     $$sum9 = (($26) + 16)|0;
     $28 = (($this) + ($$sum9)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = $29 | 1;
     __THREW__ = 0;
     invoke_vii(47,($27|0),($30|0));
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      break;
     }
    }
    $35 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $36 = tempRet0;
    __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
    $$0 = $35;
   }
   (___cxa_begin_catch(($$0|0))|0);
   $37 = HEAP32[$this>>2]|0;
   $38 = (($37) + -12|0);
   $39 = HEAP32[$38>>2]|0;
   $$sum7 = (($39) + 16)|0;
   $40 = (($this) + ($$sum7)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $41 | 1;
   HEAP32[$40>>2] = $42;
   $$sum8 = (($39) + 20)|0;
   $43 = (($this) + ($$sum8)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 & 1;
   $46 = ($45|0)==(0);
   if ($46) {
    ___cxa_end_catch();
    STACKTOP = sp;return ($this|0);
   }
   __THREW__ = 0;
   invoke_v(2);
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if (!($48)) {
    // unreachable;
   }
   $49 = ___cxa_find_matching_catch(-1,-1)|0;
   $50 = tempRet0;
   __THREW__ = 0;
   invoke_v(3);
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if ($52) {
    $53 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $54 = tempRet0;
    ___clang_call_terminate($53);
    // unreachable;
   } else {
    ___resumeException($49|0);
    // unreachable;
   }
  }
 } while(0);
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 4)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($4) + 16)|0;
 $8 = (($1) + ($$sum1)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($4) + 4)|0;
 $11 = (($1) + ($$sum2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 8192;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (__ZSt18uncaught_exceptionv()|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum3 = (($19) + 24)|0;
 $20 = (($16) + ($$sum3)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 __THREW__ = 0;
 $25 = (invoke_ii($24|0,($21|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = ($25|0)==(-1);
  if (!($28)) {
   STACKTOP = sp;return;
  }
  $29 = HEAP32[$0>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + ($32)|0);
  $$sum4 = (($32) + 16)|0;
  $34 = (($29) + ($$sum4)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 | 1;
  __THREW__ = 0;
  invoke_vii(47,($33|0),($36|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if (!($38)) {
   STACKTOP = sp;return;
  }
 }
 $39 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $40 = tempRet0;
 (___cxa_begin_catch(($39|0))|0);
 __THREW__ = 0;
 invoke_v(3);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 4)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($4) + 16)|0;
 $8 = (($1) + ($$sum1)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($4) + 4)|0;
 $11 = (($1) + ($$sum2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 8192;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (__ZSt18uncaught_exceptionv()|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum3 = (($19) + 24)|0;
 $20 = (($16) + ($$sum3)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 __THREW__ = 0;
 $25 = (invoke_ii($24|0,($21|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = ($25|0)==(-1);
  if (!($28)) {
   STACKTOP = sp;return;
  }
  $29 = HEAP32[$0>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + ($32)|0);
  $$sum4 = (($32) + 16)|0;
  $34 = (($29) + ($$sum4)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 | 1;
  __THREW__ = 0;
  invoke_vii(47,($33|0),($36|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if (!($38)) {
   STACKTOP = sp;return;
  }
 }
 $39 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $40 = tempRet0;
 (___cxa_begin_catch(($39|0))|0);
 __THREW__ = 0;
 invoke_v(3);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (16344|0);
}
function __ZNKSt3__119__iostream_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ev|0)==(1);
 if ($0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,16360,35);
  STACKTOP = sp;return;
 } else {
  __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__iostream_categoryD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP8[$$024]|0;
    $3 = HEAP8[$$015]|0;
    $4 = ($2<<24>>24)<($3<<24>>24);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3<<24>>24)<($2<<24>>24);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = (($$024) + 1|0);
    $7 = (($$015) + 1|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $$02$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p$0$lcssa$i$i$i = 0, $__p$0$ph$i$i$i = 0, $__p$01$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep3$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__lo;
 $1 = $__hi;
 $2 = (($1) - ($0))|0;
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($agg$result);
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  HEAP8[$agg$result] = $6;
  $7 = (($agg$result) + 1|0);
  $__p$0$ph$i$i$i = $7;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = (($agg$result) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  HEAP32[$agg$result>>2] = $12;
  $13 = (($agg$result) + 4|0);
  HEAP32[$13>>2] = $2;
  $__p$0$ph$i$i$i = $10;
 }
 $14 = ($__lo|0)==($__hi|0);
 if ($14) {
  $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i;
  HEAP8[$__p$0$lcssa$i$i$i] = 0;
  STACKTOP = sp;return;
 } else {
  $$02$i$i$i = $__lo;$__p$01$i$i$i = $__p$0$ph$i$i$i;
 }
 while(1) {
  $15 = HEAP8[$$02$i$i$i]|0;
  HEAP8[$__p$01$i$i$i] = $15;
  $16 = (($$02$i$i$i) + 1|0);
  $17 = (($__p$01$i$i$i) + 1|0);
  $18 = ($16|0)==($__hi|0);
  if ($18) {
   break;
  } else {
   $$02$i$i$i = $16;$__p$01$i$i$i = $17;
  }
 }
 $19 = (0 - ($0))|0;
 $scevgep$i$i$i = (($__hi) + ($19)|0);
 $scevgep3$i$i$i = $scevgep$i$i$i;
 $scevgep4$i$i$i = (($__p$0$ph$i$i$i) + ($scevgep3$i$i$i)|0);
 $__p$0$lcssa$i$i$i = $scevgep4$i$i$i;
 HEAP8[$__p$0$lcssa$i$i$i] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $1 = $__h$02 << 4;
  $2 = HEAP8[$__p$01]|0;
  $3 = $2 << 24 >> 24;
  $4 = (($3) + ($1))|0;
  $5 = $4 & -268435456;
  $6 = $5 >>> 24;
  $7 = $6 | $5;
  $8 = $7 ^ $4;
  $9 = (($__p$01) + 1|0);
  $10 = ($9|0)==($__hi|0);
  if ($10) {
   $__h$0$lcssa = $8;
   break;
  } else {
   $__h$02 = $8;$__p$01 = $9;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP32[$$024>>2]|0;
    $3 = HEAP32[$$015>>2]|0;
    $4 = ($2|0)<($3|0);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3|0)<($2|0);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = (($$024) + 4|0);
    $7 = (($$015) + 4|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $$02$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa$i$i$i = 0, $__p$0$ph$i$i$i = 0, $__p$01$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep5$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__lo;
 $1 = $__hi;
 $2 = (($1) - ($0))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($agg$result);
 }
 $5 = ($3>>>0)<(2);
 if ($5) {
  $6 = $2 >>> 1;
  $7 = $6&255;
  HEAP8[$agg$result] = $7;
  $8 = (($agg$result) + 4|0);
  $__p$0$ph$i$i$i = $8;
 } else {
  $9 = (($3) + 4)|0;
  $10 = $9 & -4;
  $11 = $10 << 2;
  $12 = (__Znwj($11)|0);
  $13 = (($agg$result) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = $10 | 1;
  HEAP32[$agg$result>>2] = $14;
  $15 = (($agg$result) + 4|0);
  HEAP32[$15>>2] = $3;
  $__p$0$ph$i$i$i = $12;
 }
 $16 = ($__lo|0)==($__hi|0);
 if ($16) {
  $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i;
  HEAP32[$__p$0$lcssa$i$i$i>>2] = 0;
  STACKTOP = sp;return;
 }
 $scevgep$i$i$i = (($__hi) + -4|0);
 $17 = (0 - ($0))|0;
 $uglygep$i$i$i = (($scevgep$i$i$i) + ($17)|0);
 $$02$i$i$i = $__lo;$__p$01$i$i$i = $__p$0$ph$i$i$i;
 while(1) {
  $18 = HEAP32[$$02$i$i$i>>2]|0;
  HEAP32[$__p$01$i$i$i>>2] = $18;
  $19 = (($$02$i$i$i) + 4|0);
  $20 = (($__p$01$i$i$i) + 4|0);
  $21 = ($19|0)==($__hi|0);
  if ($21) {
   break;
  } else {
   $$02$i$i$i = $19;$__p$01$i$i$i = $20;
  }
 }
 $uglygep4$i$i$i = $uglygep$i$i$i;
 $22 = $uglygep4$i$i$i >>> 2;
 $23 = (($22) + 1)|0;
 $scevgep5$i$i$i = (($__p$0$ph$i$i$i) + ($23<<2)|0);
 $__p$0$lcssa$i$i$i = $scevgep5$i$i$i;
 HEAP32[$__p$0$lcssa$i$i$i>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $1 = $__h$02 << 4;
  $2 = HEAP32[$__p$01>>2]|0;
  $3 = (($2) + ($1))|0;
  $4 = $3 & -268435456;
  $5 = $4 >>> 24;
  $6 = $5 | $4;
  $7 = $6 ^ $3;
  $8 = (($__p$01) + 4|0);
  $9 = ($8|0)==($__hi|0);
  if ($9) {
   $__h$0$lcssa = $7;
   break;
  } else {
   $__h$02 = $7;$__p$01 = $8;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lv = 0, $__names = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $$byval_copy2 = sp + 88|0;
 $$byval_copy1 = sp + 84|0;
 $$byval_copy = sp + 80|0;
 $__p$i$i$i$i4 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $__lv = sp + 76|0;
 $0 = sp + 28|0;
 $1 = sp + 40|0;
 $2 = sp + 32|0;
 $3 = sp + 36|0;
 $4 = sp + 44|0;
 $__names = sp + 48|0;
 $5 = sp + 72|0;
 $6 = (($__iob) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$__lv>>2] = -1;
  $10 = HEAP32[$this>>2]|0;
  $11 = (($10) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$__b>>2]|0;
  HEAP32[$1>>2] = $13;
  $14 = HEAP32[$__e>>2]|0;
  HEAP32[$2>>2] = $14;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$12 & 63]($0,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv);
  $15 = HEAP32[$0>>2]|0;
  HEAP32[$__b>>2] = $15;
  $16 = HEAP32[$__lv>>2]|0;
  if ((($16|0) == 1)) {
   HEAP8[$__v] = 1;
  } else if ((($16|0) == 0)) {
   HEAP8[$__v] = 0;
  } else {
   HEAP8[$__v] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $15;
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($3,$__iob);
 $17 = HEAP32[$3>>2]|0;
 $18 = HEAP32[18792>>2]|0;
 $19 = ($18|0)==(-1);
 if ($19) {
  label = 9;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 18792;
  $20 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$20>>2] = (121);
  $21 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$21>>2] = 0;
  __THREW__ = 0;
  invoke_viii(6,(18792|0),($__p$i$i$i$i|0),(122|0));
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if (!($23)) {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $24 = HEAP32[((18792 + 4|0))>>2]|0;
  $25 = (($24) + -1)|0;
  $26 = (($17) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($17) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $27;
  $31 = $29;
  $32 = (($30) - ($31))|0;
  $33 = $32 >> 2;
  $34 = ($33>>>0)>($25>>>0);
  if ($34) {
   $35 = (($29) + ($25<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(0|0);
   if (!($37)) {
    $41 = HEAP32[$3>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
    __ZNKSt3__18ios_base6getlocEv($4,$__iob);
    $42 = HEAP32[$4>>2]|0;
    $43 = HEAP32[18936>>2]|0;
    $44 = ($43|0)==(-1);
    if ($44) {
     label = 15;
    } else {
     HEAP32[$__p$i$i$i$i4>>2] = 18936;
     $45 = (($__p$i$i$i$i4) + 4|0);
     HEAP32[$45>>2] = (121);
     $46 = (($__p$i$i$i$i4) + 8|0);
     HEAP32[$46>>2] = 0;
     __THREW__ = 0;
     invoke_viii(6,(18936|0),($__p$i$i$i$i4|0),(122|0));
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     if (!($48)) {
      label = 15;
     }
    }
    if ((label|0) == 15) {
     $49 = HEAP32[((18936 + 4|0))>>2]|0;
     $50 = (($49) + -1)|0;
     $51 = (($42) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (($42) + 8|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = $52;
     $56 = $54;
     $57 = (($55) - ($56))|0;
     $58 = $57 >> 2;
     $59 = ($58>>>0)>($50>>>0);
     if ($59) {
      $60 = (($54) + ($50<<2)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $66 = HEAP32[$4>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($66)|0);
       $67 = HEAP32[$61>>2]|0;
       $68 = (($67) + 24|0);
       $69 = HEAP32[$68>>2]|0;
       __THREW__ = 0;
       invoke_vii($69|0,($__names|0),($61|0));
       $70 = __THREW__; __THREW__ = 0;
       $71 = $70&1;
       if ($71) {
        $$02 = $__names;
       } else {
        $72 = (($__names) + 12|0);
        $73 = HEAP32[$61>>2]|0;
        $74 = (($73) + 28|0);
        $75 = HEAP32[$74>>2]|0;
        __THREW__ = 0;
        invoke_vii($75|0,($72|0),($61|0));
        $76 = __THREW__; __THREW__ = 0;
        $77 = $76&1;
        if ($77) {
         $$02 = $72;
        } else {
         $78 = HEAP32[$__e>>2]|0;
         HEAP32[$5>>2] = $78;
         $79 = (($__names) + 24|0);
         __THREW__ = 0;
         ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
         $80 = (invoke_iiiiiiii(1,($__b|0),($$byval_copy2|0),($__names|0),($79|0),($36|0),($__err|0),1)|0);
         $81 = __THREW__; __THREW__ = 0;
         $82 = $81&1;
         if ($82) {
          $99 = ___cxa_find_matching_catch(-1,-1)|0;
          $100 = tempRet0;
          $101 = (($__names) + 12|0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($101);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names);
          $$0 = $99;$$01 = $100;
          ___resumeException($$0|0);
          // unreachable;
         } else {
          $83 = ($80|0)==($__names|0);
          $84 = $83&1;
          HEAP8[$__v] = $84;
          $85 = HEAP32[$__b>>2]|0;
          HEAP32[$agg$result>>2] = $85;
          $86 = (($__names) + 12|0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($86);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names);
          STACKTOP = sp;return;
         }
        }
       }
       $93 = ___cxa_find_matching_catch(-1,-1)|0;
       $94 = tempRet0;
       $95 = ($__names|0)==($$02|0);
       if ($95) {
        $$0 = $93;$$01 = $94;
        ___resumeException($$0|0);
        // unreachable;
       } else {
        $97 = $$02;
       }
       while(1) {
        $96 = (($97) + -12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($96);
        $98 = ($96|0)==($__names|0);
        if ($98) {
         $$0 = $93;$$01 = $94;
         break;
        } else {
         $97 = $96;
        }
       }
       ___resumeException($$0|0);
       // unreachable;
      }
     }
     $63 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($63);
     __THREW__ = 0;
     invoke_viii(7,($63|0),(26752|0),(102|0));
     $64 = __THREW__; __THREW__ = 0;
     $65 = $64&1;
     if (!($65)) {
      // unreachable;
     }
    }
    $90 = ___cxa_find_matching_catch(-1,-1)|0;
    $91 = tempRet0;
    $92 = HEAP32[$4>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($92)|0);
    $$0 = $90;$$01 = $91;
    ___resumeException($$0|0);
    // unreachable;
   }
  }
  $38 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($38);
  __THREW__ = 0;
  invoke_viii(7,($38|0),(26752|0),(102|0));
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if (!($40)) {
   // unreachable;
  }
 }
 $87 = ___cxa_find_matching_catch(-1,-1)|0;
 $88 = tempRet0;
 $89 = HEAP32[$3>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($89)|0);
 $$0 = $87;$$01 = $88;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0$i$i = 0, $$024 = 0, $$02680 = 0, $$index = 0, $$index10 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i12 = 0, $$pre$i2$i$i16 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off035 = 0, $__consume$0$off035$us = 0, $__consume$1$off0 = 0, $__consume$1$off0$us = 0, $__indx$0 = 0, $__ky$064 = 0, $__ky1$036 = 0, $__ky1$036$us = 0;
 var $__ky2$047 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$062 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$phi = 0, $__n_does_match$3$lcssa = 0, $__n_does_match$332 = 0, $__n_does_match$332$us = 0, $__n_does_match$4 = 0, $__n_does_match$4$us = 0, $__n_does_match$545 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$061 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$2$phi = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$331 = 0;
 var $__n_might_match$331$us = 0, $__n_might_match$4 = 0, $__n_might_match$4$us = 0, $__st$063 = 0, $__st$133 = 0, $__st$133$us = 0, $__st$246 = 0, $__st$32581 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __THREW__ = 0;
   invoke_v(4);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch(-1,-1)|0;
    $10 = tempRet0;
    $$index = $9;$$index10 = $10;
    ___resumeException($$index|0);
    // unreachable;
   } else {
    $18 = 0;$__status$0 = 0;
   }
  } else {
   $18 = $5;$__status$0 = $5;
  }
 } else {
  $18 = 0;$__status$0 = $__statbuf;
 }
 $23 = ($__kb|0)==($__ke|0);
 if ($23) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
 } else {
  $__ky$064 = $__kb;$__n_does_match$062 = 0;$__n_might_match$061 = $3;$__st$063 = $__status$0;
  while(1) {
   $24 = HEAP8[$__ky$064]|0;
   $25 = $24 & 1;
   $26 = ($25<<24>>24)==(0);
   if ($26) {
    $29 = $24&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $27 = (($__ky$064) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    HEAP8[$__st$063] = 2;
    $33 = (($__n_might_match$061) + -1)|0;
    $34 = (($__n_does_match$062) + 1)|0;
    $__n_does_match$1 = $34;$__n_might_match$1 = $33;
   } else {
    HEAP8[$__st$063] = 1;
    $__n_does_match$1 = $__n_does_match$062;$__n_might_match$1 = $__n_might_match$061;
   }
   $35 = (($__ky$064) + 12|0);
   $36 = (($__st$063) + 1|0);
   $37 = ($35|0)==($__ke|0);
   if ($37) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$064 = $35;$__n_does_match$062 = $__n_does_match$1;$__n_might_match$061 = $__n_might_match$1;$__st$063 = $36;
   }
  }
 }
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L19: while(1) {
  $38 = HEAP32[$__b>>2]|0;
  $39 = ($38|0)==(0|0);
  do {
   if ($39) {
    $53 = 0;
   } else {
    $40 = (($38) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($38) + 16|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($41|0)==($43|0);
    if ($44) {
     $45 = HEAP32[$38>>2]|0;
     $46 = (($45) + 36|0);
     $47 = HEAP32[$46>>2]|0;
     __THREW__ = 0;
     $48 = (invoke_ii($47|0,($38|0))|0);
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     if ($50) {
      label = 6;
      break L19;
     }
     $51 = ($48|0)==(-1);
     if ($51) {
      HEAP32[$__b>>2] = 0;
      $53 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $53 = $$pre$i$i$i;
      break;
     }
    } else {
     $53 = $38;
    }
   }
  } while(0);
  $52 = ($53|0)==(0|0);
  $54 = HEAP32[$__e>>2]|0;
  $55 = ($54|0)==(0|0);
  if ($55) {
   $$pre$i2$i$i16 = 0;
  } else {
   $56 = (($54) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($54) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($57|0)==($59|0);
   if ($60) {
    $61 = HEAP32[$54>>2]|0;
    $62 = (($61) + 36|0);
    $63 = HEAP32[$62>>2]|0;
    __THREW__ = 0;
    $64 = (invoke_ii($63|0,($54|0))|0);
    $65 = __THREW__; __THREW__ = 0;
    $66 = $65&1;
    if ($66) {
     label = 6;
     break;
    }
    $67 = ($64|0)==(-1);
    if ($67) {
     HEAP32[$__e>>2] = 0;
     $$pre$i2$i$i16 = 0;
    } else {
     $$pre$i2$i$i16 = $54;
    }
   } else {
    $$pre$i2$i$i16 = $54;
   }
  }
  $68 = ($$pre$i2$i$i16|0)==(0|0);
  $tmp$i$i = $52 ^ $68;
  $69 = ($__n_might_match$2|0)!=(0);
  $$ = $tmp$i$i & $69;
  $70 = HEAP32[$__b>>2]|0;
  if (!($$)) {
   label = 79;
   break;
  }
  $71 = (($70) + 12|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($70) + 16|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($72|0)==($74|0);
  if ($75) {
   $76 = HEAP32[$70>>2]|0;
   $77 = (($76) + 36|0);
   $78 = HEAP32[$77>>2]|0;
   __THREW__ = 0;
   $79 = (invoke_ii($78|0,($70|0))|0);
   $80 = __THREW__; __THREW__ = 0;
   $81 = $80&1;
   if ($81) {
    label = 6;
    break;
   } else {
    $$0$i$i = $79;
   }
  } else {
   $82 = HEAP8[$72]|0;
   $83 = $82&255;
   $$0$i$i = $83;
  }
  $84 = $$0$i$i&255;
  if ($__case_sensitive) {
   $__c$0 = $84;
  } else {
   $85 = HEAP32[$__ct>>2]|0;
   $86 = (($85) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   __THREW__ = 0;
   $88 = (invoke_iii($87|0,($__ct|0),($84|0))|0);
   $89 = __THREW__; __THREW__ = 0;
   $90 = $89&1;
   if ($90) {
    label = 6;
    break;
   } else {
    $__c$0 = $88;
   }
  }
  $$pre = (($__indx$0) + 1)|0;
  if ($23) {
   $__n_might_match$2$phi = $__n_might_match$2;$__n_does_match$2$phi = $__n_does_match$2;$__indx$0 = $$pre;$__n_might_match$2 = $__n_might_match$2$phi;$__n_does_match$2 = $__n_does_match$2$phi;
   continue;
  }
  L44: do {
   if ($__case_sensitive) {
    $__consume$0$off035$us = 0;$__ky1$036$us = $__kb;$__n_does_match$332$us = $__n_does_match$2;$__n_might_match$331$us = $__n_might_match$2;$__st$133$us = $__status$0;
    while(1) {
     $91 = HEAP8[$__st$133$us]|0;
     $92 = ($91<<24>>24)==(1);
     do {
      if ($92) {
       $93 = HEAP8[$__ky1$036$us]|0;
       $94 = $93 & 1;
       $95 = ($94<<24>>24)==(0);
       if ($95) {
        $98 = (($__ky1$036$us) + 1|0);
        $100 = $98;
       } else {
        $96 = (($__ky1$036$us) + 8|0);
        $97 = HEAP32[$96>>2]|0;
        $100 = $97;
       }
       $99 = (($100) + ($__indx$0)|0);
       $101 = HEAP8[$99]|0;
       $102 = ($__c$0<<24>>24)==($101<<24>>24);
       if (!($102)) {
        HEAP8[$__st$133$us] = 0;
        $103 = (($__n_might_match$331$us) + -1)|0;
        $__consume$1$off0$us = $__consume$0$off035$us;$__n_does_match$4$us = $__n_does_match$332$us;$__n_might_match$4$us = $103;
        break;
       }
       if ($95) {
        $106 = $93&255;
        $107 = $106 >>> 1;
        $109 = $107;
       } else {
        $104 = (($__ky1$036$us) + 4|0);
        $105 = HEAP32[$104>>2]|0;
        $109 = $105;
       }
       $108 = ($109|0)==($$pre|0);
       if ($108) {
        HEAP8[$__st$133$us] = 2;
        $110 = (($__n_might_match$331$us) + -1)|0;
        $111 = (($__n_does_match$332$us) + 1)|0;
        $__consume$1$off0$us = 1;$__n_does_match$4$us = $111;$__n_might_match$4$us = $110;
       } else {
        $__consume$1$off0$us = 1;$__n_does_match$4$us = $__n_does_match$332$us;$__n_might_match$4$us = $__n_might_match$331$us;
       }
      } else {
       $__consume$1$off0$us = $__consume$0$off035$us;$__n_does_match$4$us = $__n_does_match$332$us;$__n_might_match$4$us = $__n_might_match$331$us;
      }
     } while(0);
     $112 = (($__ky1$036$us) + 12|0);
     $113 = ($112|0)==($__ke|0);
     if ($113) {
      $__consume$0$off0$lcssa = $__consume$1$off0$us;$__n_does_match$3$lcssa = $__n_does_match$4$us;$__n_might_match$3$lcssa = $__n_might_match$4$us;
      break L44;
     }
     $114 = (($__st$133$us) + 1|0);
     $__consume$0$off035$us = $__consume$1$off0$us;$__ky1$036$us = $112;$__n_does_match$332$us = $__n_does_match$4$us;$__n_might_match$331$us = $__n_might_match$4$us;$__st$133$us = $114;
    }
   } else {
    $__consume$0$off035 = 0;$__ky1$036 = $__kb;$__n_does_match$332 = $__n_does_match$2;$__n_might_match$331 = $__n_might_match$2;$__st$133 = $__status$0;
    while(1) {
     $115 = HEAP8[$__st$133]|0;
     $116 = ($115<<24>>24)==(1);
     do {
      if ($116) {
       $117 = HEAP8[$__ky1$036]|0;
       $118 = $117 & 1;
       $119 = ($118<<24>>24)==(0);
       if ($119) {
        $122 = (($__ky1$036) + 1|0);
        $124 = $122;
       } else {
        $120 = (($__ky1$036) + 8|0);
        $121 = HEAP32[$120>>2]|0;
        $124 = $121;
       }
       $123 = (($124) + ($__indx$0)|0);
       $125 = HEAP8[$123]|0;
       $126 = HEAP32[$__ct>>2]|0;
       $127 = (($126) + 12|0);
       $128 = HEAP32[$127>>2]|0;
       __THREW__ = 0;
       $129 = (invoke_iii($128|0,($__ct|0),($125|0))|0);
       $130 = __THREW__; __THREW__ = 0;
       $131 = $130&1;
       if ($131) {
        label = 5;
        break L19;
       }
       $132 = ($__c$0<<24>>24)==($129<<24>>24);
       if (!($132)) {
        HEAP8[$__st$133] = 0;
        $144 = (($__n_might_match$331) + -1)|0;
        $__consume$1$off0 = $__consume$0$off035;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $144;
        break;
       }
       $133 = HEAP8[$__ky1$036]|0;
       $134 = $133 & 1;
       $135 = ($134<<24>>24)==(0);
       if ($135) {
        $138 = $133&255;
        $139 = $138 >>> 1;
        $141 = $139;
       } else {
        $136 = (($__ky1$036) + 4|0);
        $137 = HEAP32[$136>>2]|0;
        $141 = $137;
       }
       $140 = ($141|0)==($$pre|0);
       if ($140) {
        HEAP8[$__st$133] = 2;
        $142 = (($__n_might_match$331) + -1)|0;
        $143 = (($__n_does_match$332) + 1)|0;
        $__consume$1$off0 = 1;$__n_does_match$4 = $143;$__n_might_match$4 = $142;
       } else {
        $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $__n_might_match$331;
       }
      } else {
       $__consume$1$off0 = $__consume$0$off035;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $__n_might_match$331;
      }
     } while(0);
     $145 = (($__ky1$036) + 12|0);
     $146 = ($145|0)==($__ke|0);
     if ($146) {
      $__consume$0$off0$lcssa = $__consume$1$off0;$__n_does_match$3$lcssa = $__n_does_match$4;$__n_might_match$3$lcssa = $__n_might_match$4;
      break L44;
     }
     $147 = (($__st$133) + 1|0);
     $__consume$0$off035 = $__consume$1$off0;$__ky1$036 = $145;$__n_does_match$332 = $__n_does_match$4;$__n_might_match$331 = $__n_might_match$4;$__st$133 = $147;
    }
   }
  } while(0);
  if (!($__consume$0$off0$lcssa)) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  }
  $148 = HEAP32[$__b>>2]|0;
  $149 = (($148) + 12|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = (($148) + 16|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = ($150|0)==($152|0);
  if ($153) {
   $154 = HEAP32[$148>>2]|0;
   $155 = (($154) + 40|0);
   $156 = HEAP32[$155>>2]|0;
   __THREW__ = 0;
   (invoke_ii($156|0,($148|0))|0);
   $157 = __THREW__; __THREW__ = 0;
   $158 = $157&1;
   if ($158) {
    label = 6;
    break;
   }
  } else {
   $159 = (($150) + 1|0);
   HEAP32[$149>>2] = $159;
  }
  $160 = (($__n_might_match$3$lcssa) + ($__n_does_match$3$lcssa))|0;
  $$not = ($160>>>0)<(2);
  if ($$not) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  } else {
   $__ky2$047 = $__kb;$__n_does_match$545 = $__n_does_match$3$lcssa;$__st$246 = $__status$0;
  }
  while(1) {
   $161 = HEAP8[$__st$246]|0;
   $162 = ($161<<24>>24)==(2);
   if ($162) {
    $163 = HEAP8[$__ky2$047]|0;
    $164 = $163 & 1;
    $165 = ($164<<24>>24)==(0);
    if ($165) {
     $168 = $163&255;
     $169 = $168 >>> 1;
     $171 = $169;
    } else {
     $166 = (($__ky2$047) + 4|0);
     $167 = HEAP32[$166>>2]|0;
     $171 = $167;
    }
    $170 = ($171|0)==($$pre|0);
    if ($170) {
     $__n_does_match$6 = $__n_does_match$545;
    } else {
     HEAP8[$__st$246] = 0;
     $172 = (($__n_does_match$545) + -1)|0;
     $__n_does_match$6 = $172;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$545;
   }
   $173 = (($__ky2$047) + 12|0);
   $174 = (($__st$246) + 1|0);
   $175 = ($173|0)==($__ke|0);
   if ($175) {
    $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3$lcssa;
    continue L19;
   } else {
    $__ky2$047 = $173;$__n_does_match$545 = $__n_does_match$6;$__st$246 = $174;
   }
  }
 }
 if ((label|0) == 5) {
  $11 = ___cxa_find_matching_catch(-1,-1)|0;
  $12 = tempRet0;
  $lpad$phi$index = $11;$lpad$phi$index3 = $12;
 }
 else if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  $lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 else if ((label|0) == 79) {
  $176 = ($70|0)==(0|0);
  do {
   if ($176) {
    $190 = 0;
    label = 85;
   } else {
    $177 = (($70) + 12|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = (($70) + 16|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = ($178|0)==($180|0);
    if ($181) {
     $182 = HEAP32[$70>>2]|0;
     $183 = (($182) + 36|0);
     $184 = HEAP32[$183>>2]|0;
     __THREW__ = 0;
     $185 = (invoke_ii($184|0,($70|0))|0);
     $186 = __THREW__; __THREW__ = 0;
     $187 = $186&1;
     if (!($187)) {
      $188 = ($185|0)==(-1);
      if ($188) {
       HEAP32[$__b>>2] = 0;
       $190 = 0;
       label = 85;
       break;
      } else {
       $$pre$i$i$i12 = HEAP32[$__b>>2]|0;
       $190 = $$pre$i$i$i12;
       label = 85;
       break;
      }
     }
    } else {
     $190 = $70;
     label = 85;
    }
   }
  } while(0);
  L109: do {
   if ((label|0) == 85) {
    $189 = ($190|0)==(0|0);
    do {
     if ($68) {
      label = 91;
     } else {
      $191 = (($$pre$i2$i$i16) + 12|0);
      $192 = HEAP32[$191>>2]|0;
      $193 = (($$pre$i2$i$i16) + 16|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = ($192|0)==($194|0);
      if (!($195)) {
       if ($189) {
        break;
       } else {
        label = 93;
        break;
       }
      }
      $196 = HEAP32[$$pre$i2$i$i16>>2]|0;
      $197 = (($196) + 36|0);
      $198 = HEAP32[$197>>2]|0;
      __THREW__ = 0;
      $199 = (invoke_ii($198|0,($$pre$i2$i$i16|0))|0);
      $200 = __THREW__; __THREW__ = 0;
      $201 = $200&1;
      if ($201) {
       break L109;
      }
      $202 = ($199|0)==(-1);
      if ($202) {
       HEAP32[$__e>>2] = 0;
       label = 91;
       break;
      } else {
       if ($189) {
        break;
       } else {
        label = 93;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 91) {
     if ($189) {
      label = 93;
     }
    }
    if ((label|0) == 93) {
     $203 = HEAP32[$__err>>2]|0;
     $204 = $203 | 2;
     HEAP32[$__err>>2] = $204;
    }
    L125: do {
     if ($23) {
      label = 98;
     } else {
      $205 = HEAP8[$__status$0]|0;
      $206 = ($205<<24>>24)==(2);
      if ($206) {
       $$024 = $__kb;
      } else {
       $$02680 = $__kb;$__st$32581 = $__status$0;
       while(1) {
        $210 = (($$02680) + 12|0);
        $211 = ($210|0)==($__ke|0);
        $208 = (($__st$32581) + 1|0);
        if ($211) {
         label = 98;
         break L125;
        }
        $207 = HEAP8[$208]|0;
        $209 = ($207<<24>>24)==(2);
        if ($209) {
         $$024 = $210;
         break;
        } else {
         $$02680 = $210;$__st$32581 = $208;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 98) {
     $212 = HEAP32[$__err>>2]|0;
     $213 = $212 | 4;
     HEAP32[$__err>>2] = $213;
     $$024 = $__ke;
    }
    $214 = ($18|0)==(0|0);
    if ($214) {
     STACKTOP = sp;return ($$024|0);
    }
    __THREW__ = 0;
    invoke_vi(112,($18|0));
    $215 = __THREW__; __THREW__ = 0;
    $216 = $215&1;
    if ($216) {
     $217 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $218 = tempRet0;
     ___clang_call_terminate($217);
     // unreachable;
    } else {
     STACKTOP = sp;return ($$024|0);
    }
   }
  } while(0);
  $15 = ___cxa_find_matching_catch(-1,-1)|0;
  $16 = tempRet0;
  $lpad$phi$index = $15;$lpad$phi$index3 = $16;
 }
 $17 = ($18|0)==(0|0);
 if ($17) {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(112,($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 4|0;
 $__buf = sp + 16|0;
 $__a_end = sp + 28|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 192|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(8,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $10;$$pre$phi34Z2D = $$pre33;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre31 = (($__buf) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i4|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i4) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i4) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i4>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i4|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 37;
       break;
      }
      $26 = ($23|0)==(-1);
      if ($26) {
       HEAP32[$__b>>2] = 0;
       $28 = 0;
      } else {
       $28 = $$pre$i$i$i4;
      }
     } else {
      $28 = $$pre$i$i$i4;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = HEAP32[$__e>>2]|0;
    $30 = ($29|0)==(0|0);
    do {
     if ($30) {
      label = 21;
     } else {
      $31 = (($29) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($29) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($32|0)==($34|0);
      if (!($35)) {
       if ($27) {
        $160 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
      $36 = HEAP32[$29>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($29|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 37;
       break L12;
      }
      $42 = ($39|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 21;
       break;
      } else {
       if ($27) {
        $160 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 37;
      break;
     }
     $64 = HEAP8[$__buf]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i19 = (($68) + -1)|0;
      $69 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 37;
      break;
     }
     $72 = HEAP8[$__buf]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi32Z2D;
     } else {
      $75 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($28) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($28) + 16|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($84|0)==($86|0);
    if ($87) {
     $88 = HEAP32[$28>>2]|0;
     $89 = (($88) + 36|0);
     $90 = HEAP32[$89>>2]|0;
     __THREW__ = 0;
     $91 = (invoke_ii($90|0,($28|0))|0);
     $92 = __THREW__; __THREW__ = 0;
     $93 = $92&1;
     if ($93) {
      label = 37;
      break;
     } else {
      $$0$i$i = $91;
     }
    } else {
     $94 = HEAP8[$84]|0;
     $95 = $94&255;
     $$0$i$i = $95;
    }
    $96 = $$0$i$i&255;
    $97 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($96,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $98 = ($97|0)==(0);
    if (!($98)) {
     $$pre$i2$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $99 = HEAP32[$83>>2]|0;
    $100 = HEAP32[$85>>2]|0;
    $101 = ($99|0)==($100|0);
    if ($101) {
     $102 = HEAP32[$28>>2]|0;
     $103 = (($102) + 40|0);
     $104 = HEAP32[$103>>2]|0;
     __THREW__ = 0;
     (invoke_ii($104|0,($28|0))|0);
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $107 = (($99) + 1|0);
     HEAP32[$83>>2] = $107;
     $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $108 = HEAP8[$__grouping]|0;
   $109 = $108 & 1;
   $110 = ($109<<24>>24)==(0);
   if ($110) {
    $113 = $108&255;
    $114 = $113 >>> 1;
    $116 = $114;
   } else {
    $111 = (($__grouping) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $116 = $112;
   }
   $115 = ($116|0)==(0);
   if (!($115)) {
    $117 = HEAP32[$__g_end>>2]|0;
    $118 = $117;
    $119 = $__g;
    $120 = (($118) - ($119))|0;
    $121 = ($120|0)<(160);
    if ($121) {
     $122 = HEAP32[$__dc>>2]|0;
     $123 = (($117) + 4|0);
     HEAP32[$__g_end>>2] = $123;
     HEAP32[$117>>2] = $122;
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (invoke_iiiii(6,($__a$2|0),($124|0),($__err|0),($$0$i|0))|0);
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    HEAP32[$__v>>2] = $125;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($28|0)==(0|0);
    if ($129) {
     $143 = 0;
    } else {
     $130 = (($28) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($28) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$28>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($28|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      }
      $141 = ($138|0)==(-1);
      if ($141) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $28;
      }
     } else {
      $143 = $28;
     }
    }
    $142 = ($143|0)==(0|0);
    $144 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($144) {
      label = 65;
     } else {
      $145 = (($$pre$i2$i$i) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($$pre$i2$i$i) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($146|0)==($148|0);
      if (!($149)) {
       if (!($142)) {
        break;
       }
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $150 = HEAP32[$$pre$i2$i$i>>2]|0;
      $151 = (($150) + 36|0);
      $152 = HEAP32[$151>>2]|0;
      __THREW__ = 0;
      $153 = (invoke_ii($152|0,($$pre$i2$i$i|0))|0);
      $154 = __THREW__; __THREW__ = 0;
      $155 = $154&1;
      if ($155) {
       break L6;
      }
      $156 = ($153|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 65;
       break;
      }
      $157 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $142 ^ $157;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if (!($142)) {
      HEAP32[$agg$result>>2] = $143;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $158 = HEAP32[$__err>>2]|0;
    $159 = $158 | 2;
    HEAP32[$__err>>2] = $159;
    HEAP32[$agg$result>>2] = $143;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 4|0;
 $__buf = sp + 16|0;
 $__a_end = sp + 28|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 192|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(8,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $10;$$pre$phi34Z2D = $$pre33;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre31 = (($__buf) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i4|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i4) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i4) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i4>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i4|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 37;
       break;
      }
      $26 = ($23|0)==(-1);
      if ($26) {
       HEAP32[$__b>>2] = 0;
       $28 = 0;
      } else {
       $28 = $$pre$i$i$i4;
      }
     } else {
      $28 = $$pre$i$i$i4;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = HEAP32[$__e>>2]|0;
    $30 = ($29|0)==(0|0);
    do {
     if ($30) {
      label = 21;
     } else {
      $31 = (($29) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($29) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($32|0)==($34|0);
      if (!($35)) {
       if ($27) {
        $165 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
      $36 = HEAP32[$29>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($29|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 37;
       break L12;
      }
      $42 = ($39|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 21;
       break;
      } else {
       if ($27) {
        $165 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $165 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 37;
      break;
     }
     $64 = HEAP8[$__buf]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i19 = (($68) + -1)|0;
      $69 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 37;
      break;
     }
     $72 = HEAP8[$__buf]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi32Z2D;
     } else {
      $75 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($28) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($28) + 16|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($84|0)==($86|0);
    if ($87) {
     $88 = HEAP32[$28>>2]|0;
     $89 = (($88) + 36|0);
     $90 = HEAP32[$89>>2]|0;
     __THREW__ = 0;
     $91 = (invoke_ii($90|0,($28|0))|0);
     $92 = __THREW__; __THREW__ = 0;
     $93 = $92&1;
     if ($93) {
      label = 37;
      break;
     } else {
      $$0$i$i = $91;
     }
    } else {
     $94 = HEAP8[$84]|0;
     $95 = $94&255;
     $$0$i$i = $95;
    }
    $96 = $$0$i$i&255;
    $97 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($96,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $98 = ($97|0)==(0);
    if (!($98)) {
     $$pre$i2$i$i = $165;$__a$2 = $__a$1;
     break;
    }
    $99 = HEAP32[$83>>2]|0;
    $100 = HEAP32[$85>>2]|0;
    $101 = ($99|0)==($100|0);
    if ($101) {
     $102 = HEAP32[$28>>2]|0;
     $103 = (($102) + 40|0);
     $104 = HEAP32[$103>>2]|0;
     __THREW__ = 0;
     (invoke_ii($104|0,($28|0))|0);
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $107 = (($99) + 1|0);
     HEAP32[$83>>2] = $107;
     $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $108 = HEAP8[$__grouping]|0;
   $109 = $108 & 1;
   $110 = ($109<<24>>24)==(0);
   if ($110) {
    $113 = $108&255;
    $114 = $113 >>> 1;
    $116 = $114;
   } else {
    $111 = (($__grouping) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $116 = $112;
   }
   $115 = ($116|0)==(0);
   if (!($115)) {
    $117 = HEAP32[$__g_end>>2]|0;
    $118 = $117;
    $119 = $__g;
    $120 = (($118) - ($119))|0;
    $121 = ($120|0)<(160);
    if ($121) {
     $122 = HEAP32[$__dc>>2]|0;
     $123 = (($117) + 4|0);
     HEAP32[$__g_end>>2] = $123;
     HEAP32[$117>>2] = $122;
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (invoke_iiiii(7,($__a$2|0),($124|0),($__err|0),($$0$i|0))|0);
   $126 = tempRet0;
   $127 = __THREW__; __THREW__ = 0;
   $128 = $127&1;
   if (!($128)) {
    $129 = $__v;
    $130 = $129;
    HEAP32[$130>>2] = $125;
    $131 = (($129) + 4)|0;
    $132 = $131;
    HEAP32[$132>>2] = $126;
    $133 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$133,$__err);
    $134 = ($28|0)==(0|0);
    if ($134) {
     $148 = 0;
    } else {
     $135 = (($28) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($28) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$28>>2]|0;
      $141 = (($140) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      __THREW__ = 0;
      $143 = (invoke_ii($142|0,($28|0))|0);
      $144 = __THREW__; __THREW__ = 0;
      $145 = $144&1;
      if ($145) {
       break;
      }
      $146 = ($143|0)==(-1);
      if ($146) {
       HEAP32[$__b>>2] = 0;
       $148 = 0;
      } else {
       $148 = $28;
      }
     } else {
      $148 = $28;
     }
    }
    $147 = ($148|0)==(0|0);
    $149 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($149) {
      label = 65;
     } else {
      $150 = (($$pre$i2$i$i) + 12|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = (($$pre$i2$i$i) + 16|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = ($151|0)==($153|0);
      if (!($154)) {
       if (!($147)) {
        break;
       }
       HEAP32[$agg$result>>2] = $148;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $155 = HEAP32[$$pre$i2$i$i>>2]|0;
      $156 = (($155) + 36|0);
      $157 = HEAP32[$156>>2]|0;
      __THREW__ = 0;
      $158 = (invoke_ii($157|0,($$pre$i2$i$i|0))|0);
      $159 = __THREW__; __THREW__ = 0;
      $160 = $159&1;
      if ($160) {
       break L6;
      }
      $161 = ($158|0)==(-1);
      if ($161) {
       HEAP32[$__e>>2] = 0;
       label = 65;
       break;
      }
      $162 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $147 ^ $162;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $148;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if (!($147)) {
      HEAP32[$agg$result>>2] = $148;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $163 = HEAP32[$__err>>2]|0;
    $164 = $163 | 2;
    HEAP32[$__err>>2] = $164;
    HEAP32[$agg$result>>2] = $148;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 4|0;
 $__buf = sp + 16|0;
 $__a_end = sp + 28|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 192|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(8,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $10;$$pre$phi34Z2D = $$pre33;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre31 = (($__buf) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i4|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i4) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i4) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i4>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i4|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 37;
       break;
      }
      $26 = ($23|0)==(-1);
      if ($26) {
       HEAP32[$__b>>2] = 0;
       $28 = 0;
      } else {
       $28 = $$pre$i$i$i4;
      }
     } else {
      $28 = $$pre$i$i$i4;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = HEAP32[$__e>>2]|0;
    $30 = ($29|0)==(0|0);
    do {
     if ($30) {
      label = 21;
     } else {
      $31 = (($29) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($29) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($32|0)==($34|0);
      if (!($35)) {
       if ($27) {
        $160 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
      $36 = HEAP32[$29>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($29|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 37;
       break L12;
      }
      $42 = ($39|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 21;
       break;
      } else {
       if ($27) {
        $160 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 37;
      break;
     }
     $64 = HEAP8[$__buf]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i19 = (($68) + -1)|0;
      $69 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 37;
      break;
     }
     $72 = HEAP8[$__buf]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi32Z2D;
     } else {
      $75 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($28) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($28) + 16|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($84|0)==($86|0);
    if ($87) {
     $88 = HEAP32[$28>>2]|0;
     $89 = (($88) + 36|0);
     $90 = HEAP32[$89>>2]|0;
     __THREW__ = 0;
     $91 = (invoke_ii($90|0,($28|0))|0);
     $92 = __THREW__; __THREW__ = 0;
     $93 = $92&1;
     if ($93) {
      label = 37;
      break;
     } else {
      $$0$i$i = $91;
     }
    } else {
     $94 = HEAP8[$84]|0;
     $95 = $94&255;
     $$0$i$i = $95;
    }
    $96 = $$0$i$i&255;
    $97 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($96,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $98 = ($97|0)==(0);
    if (!($98)) {
     $$pre$i2$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $99 = HEAP32[$83>>2]|0;
    $100 = HEAP32[$85>>2]|0;
    $101 = ($99|0)==($100|0);
    if ($101) {
     $102 = HEAP32[$28>>2]|0;
     $103 = (($102) + 40|0);
     $104 = HEAP32[$103>>2]|0;
     __THREW__ = 0;
     (invoke_ii($104|0,($28|0))|0);
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $107 = (($99) + 1|0);
     HEAP32[$83>>2] = $107;
     $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $108 = HEAP8[$__grouping]|0;
   $109 = $108 & 1;
   $110 = ($109<<24>>24)==(0);
   if ($110) {
    $113 = $108&255;
    $114 = $113 >>> 1;
    $116 = $114;
   } else {
    $111 = (($__grouping) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $116 = $112;
   }
   $115 = ($116|0)==(0);
   if (!($115)) {
    $117 = HEAP32[$__g_end>>2]|0;
    $118 = $117;
    $119 = $__g;
    $120 = (($118) - ($119))|0;
    $121 = ($120|0)<(160);
    if ($121) {
     $122 = HEAP32[$__dc>>2]|0;
     $123 = (($117) + 4|0);
     HEAP32[$__g_end>>2] = $123;
     HEAP32[$117>>2] = $122;
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (invoke_iiiii(8,($__a$2|0),($124|0),($__err|0),($$0$i|0))|0);
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    HEAP16[$__v>>1] = $125;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($28|0)==(0|0);
    if ($129) {
     $143 = 0;
    } else {
     $130 = (($28) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($28) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$28>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($28|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      }
      $141 = ($138|0)==(-1);
      if ($141) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $28;
      }
     } else {
      $143 = $28;
     }
    }
    $142 = ($143|0)==(0|0);
    $144 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($144) {
      label = 65;
     } else {
      $145 = (($$pre$i2$i$i) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($$pre$i2$i$i) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($146|0)==($148|0);
      if (!($149)) {
       if (!($142)) {
        break;
       }
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $150 = HEAP32[$$pre$i2$i$i>>2]|0;
      $151 = (($150) + 36|0);
      $152 = HEAP32[$151>>2]|0;
      __THREW__ = 0;
      $153 = (invoke_ii($152|0,($$pre$i2$i$i|0))|0);
      $154 = __THREW__; __THREW__ = 0;
      $155 = $154&1;
      if ($155) {
       break L6;
      }
      $156 = ($153|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 65;
       break;
      }
      $157 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $142 ^ $157;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if (!($142)) {
      HEAP32[$agg$result>>2] = $143;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $158 = HEAP32[$__err>>2]|0;
    $159 = $158 | 2;
    HEAP32[$__err>>2] = $159;
    HEAP32[$agg$result>>2] = $143;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 4|0;
 $__buf = sp + 16|0;
 $__a_end = sp + 28|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 192|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(8,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $10;$$pre$phi34Z2D = $$pre33;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre31 = (($__buf) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i4|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i4) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i4) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i4>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i4|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 37;
       break;
      }
      $26 = ($23|0)==(-1);
      if ($26) {
       HEAP32[$__b>>2] = 0;
       $28 = 0;
      } else {
       $28 = $$pre$i$i$i4;
      }
     } else {
      $28 = $$pre$i$i$i4;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = HEAP32[$__e>>2]|0;
    $30 = ($29|0)==(0|0);
    do {
     if ($30) {
      label = 21;
     } else {
      $31 = (($29) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($29) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($32|0)==($34|0);
      if (!($35)) {
       if ($27) {
        $160 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
      $36 = HEAP32[$29>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($29|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 37;
       break L12;
      }
      $42 = ($39|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 21;
       break;
      } else {
       if ($27) {
        $160 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 37;
      break;
     }
     $64 = HEAP8[$__buf]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i19 = (($68) + -1)|0;
      $69 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 37;
      break;
     }
     $72 = HEAP8[$__buf]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi32Z2D;
     } else {
      $75 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($28) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($28) + 16|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($84|0)==($86|0);
    if ($87) {
     $88 = HEAP32[$28>>2]|0;
     $89 = (($88) + 36|0);
     $90 = HEAP32[$89>>2]|0;
     __THREW__ = 0;
     $91 = (invoke_ii($90|0,($28|0))|0);
     $92 = __THREW__; __THREW__ = 0;
     $93 = $92&1;
     if ($93) {
      label = 37;
      break;
     } else {
      $$0$i$i = $91;
     }
    } else {
     $94 = HEAP8[$84]|0;
     $95 = $94&255;
     $$0$i$i = $95;
    }
    $96 = $$0$i$i&255;
    $97 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($96,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $98 = ($97|0)==(0);
    if (!($98)) {
     $$pre$i2$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $99 = HEAP32[$83>>2]|0;
    $100 = HEAP32[$85>>2]|0;
    $101 = ($99|0)==($100|0);
    if ($101) {
     $102 = HEAP32[$28>>2]|0;
     $103 = (($102) + 40|0);
     $104 = HEAP32[$103>>2]|0;
     __THREW__ = 0;
     (invoke_ii($104|0,($28|0))|0);
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $107 = (($99) + 1|0);
     HEAP32[$83>>2] = $107;
     $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $108 = HEAP8[$__grouping]|0;
   $109 = $108 & 1;
   $110 = ($109<<24>>24)==(0);
   if ($110) {
    $113 = $108&255;
    $114 = $113 >>> 1;
    $116 = $114;
   } else {
    $111 = (($__grouping) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $116 = $112;
   }
   $115 = ($116|0)==(0);
   if (!($115)) {
    $117 = HEAP32[$__g_end>>2]|0;
    $118 = $117;
    $119 = $__g;
    $120 = (($118) - ($119))|0;
    $121 = ($120|0)<(160);
    if ($121) {
     $122 = HEAP32[$__dc>>2]|0;
     $123 = (($117) + 4|0);
     HEAP32[$__g_end>>2] = $123;
     HEAP32[$117>>2] = $122;
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (invoke_iiiii(9,($__a$2|0),($124|0),($__err|0),($$0$i|0))|0);
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    HEAP32[$__v>>2] = $125;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($28|0)==(0|0);
    if ($129) {
     $143 = 0;
    } else {
     $130 = (($28) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($28) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$28>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($28|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      }
      $141 = ($138|0)==(-1);
      if ($141) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $28;
      }
     } else {
      $143 = $28;
     }
    }
    $142 = ($143|0)==(0|0);
    $144 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($144) {
      label = 65;
     } else {
      $145 = (($$pre$i2$i$i) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($$pre$i2$i$i) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($146|0)==($148|0);
      if (!($149)) {
       if (!($142)) {
        break;
       }
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $150 = HEAP32[$$pre$i2$i$i>>2]|0;
      $151 = (($150) + 36|0);
      $152 = HEAP32[$151>>2]|0;
      __THREW__ = 0;
      $153 = (invoke_ii($152|0,($$pre$i2$i$i|0))|0);
      $154 = __THREW__; __THREW__ = 0;
      $155 = $154&1;
      if ($155) {
       break L6;
      }
      $156 = ($153|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 65;
       break;
      }
      $157 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $142 ^ $157;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if (!($142)) {
      HEAP32[$agg$result>>2] = $143;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $158 = HEAP32[$__err>>2]|0;
    $159 = $158 | 2;
    HEAP32[$__err>>2] = $159;
    HEAP32[$agg$result>>2] = $143;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 4|0;
 $__buf = sp + 16|0;
 $__a_end = sp + 28|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 192|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(8,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $10;$$pre$phi34Z2D = $$pre33;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre31 = (($__buf) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i4|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i4) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i4) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i4>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i4|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 37;
       break;
      }
      $26 = ($23|0)==(-1);
      if ($26) {
       HEAP32[$__b>>2] = 0;
       $28 = 0;
      } else {
       $28 = $$pre$i$i$i4;
      }
     } else {
      $28 = $$pre$i$i$i4;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = HEAP32[$__e>>2]|0;
    $30 = ($29|0)==(0|0);
    do {
     if ($30) {
      label = 21;
     } else {
      $31 = (($29) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($29) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($32|0)==($34|0);
      if (!($35)) {
       if ($27) {
        $160 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
      $36 = HEAP32[$29>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($29|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 37;
       break L12;
      }
      $42 = ($39|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 21;
       break;
      } else {
       if ($27) {
        $160 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 37;
      break;
     }
     $64 = HEAP8[$__buf]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i19 = (($68) + -1)|0;
      $69 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 37;
      break;
     }
     $72 = HEAP8[$__buf]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi32Z2D;
     } else {
      $75 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($28) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($28) + 16|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($84|0)==($86|0);
    if ($87) {
     $88 = HEAP32[$28>>2]|0;
     $89 = (($88) + 36|0);
     $90 = HEAP32[$89>>2]|0;
     __THREW__ = 0;
     $91 = (invoke_ii($90|0,($28|0))|0);
     $92 = __THREW__; __THREW__ = 0;
     $93 = $92&1;
     if ($93) {
      label = 37;
      break;
     } else {
      $$0$i$i = $91;
     }
    } else {
     $94 = HEAP8[$84]|0;
     $95 = $94&255;
     $$0$i$i = $95;
    }
    $96 = $$0$i$i&255;
    $97 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($96,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $98 = ($97|0)==(0);
    if (!($98)) {
     $$pre$i2$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $99 = HEAP32[$83>>2]|0;
    $100 = HEAP32[$85>>2]|0;
    $101 = ($99|0)==($100|0);
    if ($101) {
     $102 = HEAP32[$28>>2]|0;
     $103 = (($102) + 40|0);
     $104 = HEAP32[$103>>2]|0;
     __THREW__ = 0;
     (invoke_ii($104|0,($28|0))|0);
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $107 = (($99) + 1|0);
     HEAP32[$83>>2] = $107;
     $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $108 = HEAP8[$__grouping]|0;
   $109 = $108 & 1;
   $110 = ($109<<24>>24)==(0);
   if ($110) {
    $113 = $108&255;
    $114 = $113 >>> 1;
    $116 = $114;
   } else {
    $111 = (($__grouping) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $116 = $112;
   }
   $115 = ($116|0)==(0);
   if (!($115)) {
    $117 = HEAP32[$__g_end>>2]|0;
    $118 = $117;
    $119 = $__g;
    $120 = (($118) - ($119))|0;
    $121 = ($120|0)<(160);
    if ($121) {
     $122 = HEAP32[$__dc>>2]|0;
     $123 = (($117) + 4|0);
     HEAP32[$__g_end>>2] = $123;
     HEAP32[$117>>2] = $122;
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (invoke_iiiii(10,($__a$2|0),($124|0),($__err|0),($$0$i|0))|0);
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    HEAP32[$__v>>2] = $125;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($28|0)==(0|0);
    if ($129) {
     $143 = 0;
    } else {
     $130 = (($28) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($28) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$28>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($28|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      }
      $141 = ($138|0)==(-1);
      if ($141) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $28;
      }
     } else {
      $143 = $28;
     }
    }
    $142 = ($143|0)==(0|0);
    $144 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($144) {
      label = 65;
     } else {
      $145 = (($$pre$i2$i$i) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($$pre$i2$i$i) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($146|0)==($148|0);
      if (!($149)) {
       if (!($142)) {
        break;
       }
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $150 = HEAP32[$$pre$i2$i$i>>2]|0;
      $151 = (($150) + 36|0);
      $152 = HEAP32[$151>>2]|0;
      __THREW__ = 0;
      $153 = (invoke_ii($152|0,($$pre$i2$i$i|0))|0);
      $154 = __THREW__; __THREW__ = 0;
      $155 = $154&1;
      if ($155) {
       break L6;
      }
      $156 = ($153|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 65;
       break;
      }
      $157 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $142 ^ $157;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if (!($142)) {
      HEAP32[$agg$result>>2] = $143;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $158 = HEAP32[$__err>>2]|0;
    $159 = $158 | 2;
    HEAP32[$__err>>2] = $159;
    HEAP32[$agg$result>>2] = $143;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 4|0;
 $__buf = sp + 16|0;
 $__a_end = sp + 28|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 192|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(8,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $10;$$pre$phi34Z2D = $$pre33;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre31 = (($__buf) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i4|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i4) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i4) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i4>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i4|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 37;
       break;
      }
      $26 = ($23|0)==(-1);
      if ($26) {
       HEAP32[$__b>>2] = 0;
       $28 = 0;
      } else {
       $28 = $$pre$i$i$i4;
      }
     } else {
      $28 = $$pre$i$i$i4;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = HEAP32[$__e>>2]|0;
    $30 = ($29|0)==(0|0);
    do {
     if ($30) {
      label = 21;
     } else {
      $31 = (($29) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($29) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($32|0)==($34|0);
      if (!($35)) {
       if ($27) {
        $165 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
      $36 = HEAP32[$29>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($29|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 37;
       break L12;
      }
      $42 = ($39|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 21;
       break;
      } else {
       if ($27) {
        $165 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $165 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 37;
      break;
     }
     $64 = HEAP8[$__buf]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i19 = (($68) + -1)|0;
      $69 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 37;
      break;
     }
     $72 = HEAP8[$__buf]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi32Z2D;
     } else {
      $75 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($28) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($28) + 16|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($84|0)==($86|0);
    if ($87) {
     $88 = HEAP32[$28>>2]|0;
     $89 = (($88) + 36|0);
     $90 = HEAP32[$89>>2]|0;
     __THREW__ = 0;
     $91 = (invoke_ii($90|0,($28|0))|0);
     $92 = __THREW__; __THREW__ = 0;
     $93 = $92&1;
     if ($93) {
      label = 37;
      break;
     } else {
      $$0$i$i = $91;
     }
    } else {
     $94 = HEAP8[$84]|0;
     $95 = $94&255;
     $$0$i$i = $95;
    }
    $96 = $$0$i$i&255;
    $97 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($96,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $98 = ($97|0)==(0);
    if (!($98)) {
     $$pre$i2$i$i = $165;$__a$2 = $__a$1;
     break;
    }
    $99 = HEAP32[$83>>2]|0;
    $100 = HEAP32[$85>>2]|0;
    $101 = ($99|0)==($100|0);
    if ($101) {
     $102 = HEAP32[$28>>2]|0;
     $103 = (($102) + 40|0);
     $104 = HEAP32[$103>>2]|0;
     __THREW__ = 0;
     (invoke_ii($104|0,($28|0))|0);
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $107 = (($99) + 1|0);
     HEAP32[$83>>2] = $107;
     $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $108 = HEAP8[$__grouping]|0;
   $109 = $108 & 1;
   $110 = ($109<<24>>24)==(0);
   if ($110) {
    $113 = $108&255;
    $114 = $113 >>> 1;
    $116 = $114;
   } else {
    $111 = (($__grouping) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $116 = $112;
   }
   $115 = ($116|0)==(0);
   if (!($115)) {
    $117 = HEAP32[$__g_end>>2]|0;
    $118 = $117;
    $119 = $__g;
    $120 = (($118) - ($119))|0;
    $121 = ($120|0)<(160);
    if ($121) {
     $122 = HEAP32[$__dc>>2]|0;
     $123 = (($117) + 4|0);
     HEAP32[$__g_end>>2] = $123;
     HEAP32[$117>>2] = $122;
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (invoke_iiiii(11,($__a$2|0),($124|0),($__err|0),($$0$i|0))|0);
   $126 = tempRet0;
   $127 = __THREW__; __THREW__ = 0;
   $128 = $127&1;
   if (!($128)) {
    $129 = $__v;
    $130 = $129;
    HEAP32[$130>>2] = $125;
    $131 = (($129) + 4)|0;
    $132 = $131;
    HEAP32[$132>>2] = $126;
    $133 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$133,$__err);
    $134 = ($28|0)==(0|0);
    if ($134) {
     $148 = 0;
    } else {
     $135 = (($28) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($28) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$28>>2]|0;
      $141 = (($140) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      __THREW__ = 0;
      $143 = (invoke_ii($142|0,($28|0))|0);
      $144 = __THREW__; __THREW__ = 0;
      $145 = $144&1;
      if ($145) {
       break;
      }
      $146 = ($143|0)==(-1);
      if ($146) {
       HEAP32[$__b>>2] = 0;
       $148 = 0;
      } else {
       $148 = $28;
      }
     } else {
      $148 = $28;
     }
    }
    $147 = ($148|0)==(0|0);
    $149 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($149) {
      label = 65;
     } else {
      $150 = (($$pre$i2$i$i) + 12|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = (($$pre$i2$i$i) + 16|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = ($151|0)==($153|0);
      if (!($154)) {
       if (!($147)) {
        break;
       }
       HEAP32[$agg$result>>2] = $148;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $155 = HEAP32[$$pre$i2$i$i>>2]|0;
      $156 = (($155) + 36|0);
      $157 = HEAP32[$156>>2]|0;
      __THREW__ = 0;
      $158 = (invoke_ii($157|0,($$pre$i2$i$i|0))|0);
      $159 = __THREW__; __THREW__ = 0;
      $160 = $159&1;
      if ($160) {
       break L6;
      }
      $161 = ($158|0)==(-1);
      if ($161) {
       HEAP32[$__e>>2] = 0;
       label = 65;
       break;
      }
      $162 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $147 ^ $162;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $148;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if (!($147)) {
      HEAP32[$agg$result>>2] = $148;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $163 = HEAP32[$__err>>2]|0;
    $164 = $163 | 2;
    HEAP32[$__err>>2] = $164;
    HEAP32[$agg$result>>2] = $148;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 20|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 4|0;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(8,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $7;$$pre$phi35Z2D = $$pre34;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units] = 1;
   HEAP8[$__exp] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point]|0;
   $11 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $160 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $160 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = $41;
    $43 = $__a$0;
    $44 = (($42) - ($43))|0;
    $45 = HEAP8[$__buf]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$9>>2]|0;
     $52 = $48;
    }
    $51 = ($44|0)==($52|0);
    if ($51) {
     if ($47) {
      $54 = $45&255;
      $55 = $54 >>> 1;
      $56 = $45&255;
      $57 = $56 >>> 1;
      $59 = $57;$76 = $55;
     } else {
      $53 = HEAP32[$9>>2]|0;
      $59 = $53;$76 = $53;
     }
     $58 = $59 << 1;
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($58|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 33;
      break;
     }
     $62 = HEAP8[$__buf]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i19 = (($66) + -1)|0;
      $67 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 33;
      break;
     }
     $70 = HEAP8[$__buf]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     if ($72) {
      $75 = $$pre$phi33Z2D;
     } else {
      $73 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $75 = $73;
     }
     $74 = (($75) + ($76)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = (($26) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (($26) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($82|0)==($84|0);
    if ($85) {
     $86 = HEAP32[$26>>2]|0;
     $87 = (($86) + 36|0);
     $88 = HEAP32[$87>>2]|0;
     __THREW__ = 0;
     $89 = (invoke_ii($88|0,($26|0))|0);
     $90 = __THREW__; __THREW__ = 0;
     $91 = $90&1;
     if ($91) {
      label = 33;
      break;
     } else {
      $$0$i$i = $89;
     }
    } else {
     $92 = HEAP8[$82]|0;
     $93 = $92&255;
     $$0$i$i = $93;
    }
    $94 = $$0$i$i&255;
    $95 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($94,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $96 = ($95|0)==(0);
    if (!($96)) {
     $$pre$i2$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $97 = HEAP32[$81>>2]|0;
    $98 = HEAP32[$83>>2]|0;
    $99 = ($97|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$26>>2]|0;
     $101 = (($100) + 40|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     (invoke_ii($102|0,($26|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $105 = (($97) + 1|0);
     HEAP32[$81>>2] = $105;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $106 = HEAP8[$__grouping]|0;
   $107 = $106 & 1;
   $108 = ($107<<24>>24)==(0);
   if ($108) {
    $111 = $106&255;
    $112 = $111 >>> 1;
    $114 = $112;
   } else {
    $109 = (($__grouping) + 4|0);
    $110 = HEAP32[$109>>2]|0;
    $114 = $110;
   }
   $113 = ($114|0)==(0);
   if (!($113)) {
    $115 = HEAP8[$__in_units]|0;
    $116 = ($115<<24>>24)==(0);
    if (!($116)) {
     $117 = HEAP32[$__g_end>>2]|0;
     $118 = $117;
     $119 = $__g;
     $120 = (($118) - ($119))|0;
     $121 = ($120|0)<(160);
     if ($121) {
      $122 = HEAP32[$__dc>>2]|0;
      $123 = (($117) + 4|0);
      HEAP32[$__g_end>>2] = $123;
      HEAP32[$117>>2] = $122;
     }
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (+invoke_diii(1,($__a$2|0),($124|0),($__err|0)));
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    HEAPF32[$__v>>2] = $125;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($26|0)==(0|0);
    if ($129) {
     $143 = 0;
    } else {
     $130 = (($26) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($26) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$26>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($26|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      }
      $141 = ($138|0)==(-1);
      if ($141) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $26;
      }
     } else {
      $143 = $26;
     }
    }
    $142 = ($143|0)==(0|0);
    $144 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($144) {
      label = 62;
     } else {
      $145 = (($$pre$i2$i$i) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($$pre$i2$i$i) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($146|0)==($148|0);
      if (!($149)) {
       if (!($142)) {
        break;
       }
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $150 = HEAP32[$$pre$i2$i$i>>2]|0;
      $151 = (($150) + 36|0);
      $152 = HEAP32[$151>>2]|0;
      __THREW__ = 0;
      $153 = (invoke_ii($152|0,($$pre$i2$i$i|0))|0);
      $154 = __THREW__; __THREW__ = 0;
      $155 = $154&1;
      if ($155) {
       break L1;
      }
      $156 = ($153|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      }
      $157 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $142 ^ $157;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if (!($142)) {
      HEAP32[$agg$result>>2] = $143;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $158 = HEAP32[$__err>>2]|0;
    $159 = $158 | 2;
    HEAP32[$__err>>2] = $159;
    HEAP32[$agg$result>>2] = $143;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $79 = ___cxa_find_matching_catch(-1,-1)|0;
 $80 = tempRet0;
 $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 20|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 4|0;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(8,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $7;$$pre$phi35Z2D = $$pre34;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units] = 1;
   HEAP8[$__exp] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point]|0;
   $11 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $160 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $160 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = $41;
    $43 = $__a$0;
    $44 = (($42) - ($43))|0;
    $45 = HEAP8[$__buf]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$9>>2]|0;
     $52 = $48;
    }
    $51 = ($44|0)==($52|0);
    if ($51) {
     if ($47) {
      $54 = $45&255;
      $55 = $54 >>> 1;
      $56 = $45&255;
      $57 = $56 >>> 1;
      $59 = $57;$76 = $55;
     } else {
      $53 = HEAP32[$9>>2]|0;
      $59 = $53;$76 = $53;
     }
     $58 = $59 << 1;
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($58|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 33;
      break;
     }
     $62 = HEAP8[$__buf]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i19 = (($66) + -1)|0;
      $67 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 33;
      break;
     }
     $70 = HEAP8[$__buf]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     if ($72) {
      $75 = $$pre$phi33Z2D;
     } else {
      $73 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $75 = $73;
     }
     $74 = (($75) + ($76)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = (($26) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (($26) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($82|0)==($84|0);
    if ($85) {
     $86 = HEAP32[$26>>2]|0;
     $87 = (($86) + 36|0);
     $88 = HEAP32[$87>>2]|0;
     __THREW__ = 0;
     $89 = (invoke_ii($88|0,($26|0))|0);
     $90 = __THREW__; __THREW__ = 0;
     $91 = $90&1;
     if ($91) {
      label = 33;
      break;
     } else {
      $$0$i$i = $89;
     }
    } else {
     $92 = HEAP8[$82]|0;
     $93 = $92&255;
     $$0$i$i = $93;
    }
    $94 = $$0$i$i&255;
    $95 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($94,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $96 = ($95|0)==(0);
    if (!($96)) {
     $$pre$i2$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $97 = HEAP32[$81>>2]|0;
    $98 = HEAP32[$83>>2]|0;
    $99 = ($97|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$26>>2]|0;
     $101 = (($100) + 40|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     (invoke_ii($102|0,($26|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $105 = (($97) + 1|0);
     HEAP32[$81>>2] = $105;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $106 = HEAP8[$__grouping]|0;
   $107 = $106 & 1;
   $108 = ($107<<24>>24)==(0);
   if ($108) {
    $111 = $106&255;
    $112 = $111 >>> 1;
    $114 = $112;
   } else {
    $109 = (($__grouping) + 4|0);
    $110 = HEAP32[$109>>2]|0;
    $114 = $110;
   }
   $113 = ($114|0)==(0);
   if (!($113)) {
    $115 = HEAP8[$__in_units]|0;
    $116 = ($115<<24>>24)==(0);
    if (!($116)) {
     $117 = HEAP32[$__g_end>>2]|0;
     $118 = $117;
     $119 = $__g;
     $120 = (($118) - ($119))|0;
     $121 = ($120|0)<(160);
     if ($121) {
      $122 = HEAP32[$__dc>>2]|0;
      $123 = (($117) + 4|0);
      HEAP32[$__g_end>>2] = $123;
      HEAP32[$117>>2] = $122;
     }
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (+invoke_diii(2,($__a$2|0),($124|0),($__err|0)));
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    HEAPF64[$__v>>3] = $125;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($26|0)==(0|0);
    if ($129) {
     $143 = 0;
    } else {
     $130 = (($26) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($26) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$26>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($26|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      }
      $141 = ($138|0)==(-1);
      if ($141) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $26;
      }
     } else {
      $143 = $26;
     }
    }
    $142 = ($143|0)==(0|0);
    $144 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($144) {
      label = 62;
     } else {
      $145 = (($$pre$i2$i$i) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($$pre$i2$i$i) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($146|0)==($148|0);
      if (!($149)) {
       if (!($142)) {
        break;
       }
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $150 = HEAP32[$$pre$i2$i$i>>2]|0;
      $151 = (($150) + 36|0);
      $152 = HEAP32[$151>>2]|0;
      __THREW__ = 0;
      $153 = (invoke_ii($152|0,($$pre$i2$i$i|0))|0);
      $154 = __THREW__; __THREW__ = 0;
      $155 = $154&1;
      if ($155) {
       break L1;
      }
      $156 = ($153|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      }
      $157 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $142 ^ $157;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if (!($142)) {
      HEAP32[$agg$result>>2] = $143;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $158 = HEAP32[$__err>>2]|0;
    $159 = $158 | 2;
    HEAP32[$__err>>2] = $159;
    HEAP32[$agg$result>>2] = $143;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $79 = ___cxa_find_matching_catch(-1,-1)|0;
 $80 = tempRet0;
 $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 20|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 4|0;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(8,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $7;$$pre$phi35Z2D = $$pre34;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units] = 1;
   HEAP8[$__exp] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point]|0;
   $11 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $160 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $160 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = $41;
    $43 = $__a$0;
    $44 = (($42) - ($43))|0;
    $45 = HEAP8[$__buf]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$9>>2]|0;
     $52 = $48;
    }
    $51 = ($44|0)==($52|0);
    if ($51) {
     if ($47) {
      $54 = $45&255;
      $55 = $54 >>> 1;
      $56 = $45&255;
      $57 = $56 >>> 1;
      $59 = $57;$76 = $55;
     } else {
      $53 = HEAP32[$9>>2]|0;
      $59 = $53;$76 = $53;
     }
     $58 = $59 << 1;
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($58|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 33;
      break;
     }
     $62 = HEAP8[$__buf]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i19 = (($66) + -1)|0;
      $67 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 33;
      break;
     }
     $70 = HEAP8[$__buf]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     if ($72) {
      $75 = $$pre$phi33Z2D;
     } else {
      $73 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $75 = $73;
     }
     $74 = (($75) + ($76)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = (($26) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (($26) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($82|0)==($84|0);
    if ($85) {
     $86 = HEAP32[$26>>2]|0;
     $87 = (($86) + 36|0);
     $88 = HEAP32[$87>>2]|0;
     __THREW__ = 0;
     $89 = (invoke_ii($88|0,($26|0))|0);
     $90 = __THREW__; __THREW__ = 0;
     $91 = $90&1;
     if ($91) {
      label = 33;
      break;
     } else {
      $$0$i$i = $89;
     }
    } else {
     $92 = HEAP8[$82]|0;
     $93 = $92&255;
     $$0$i$i = $93;
    }
    $94 = $$0$i$i&255;
    $95 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($94,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $96 = ($95|0)==(0);
    if (!($96)) {
     $$pre$i2$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $97 = HEAP32[$81>>2]|0;
    $98 = HEAP32[$83>>2]|0;
    $99 = ($97|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$26>>2]|0;
     $101 = (($100) + 40|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     (invoke_ii($102|0,($26|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $105 = (($97) + 1|0);
     HEAP32[$81>>2] = $105;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $106 = HEAP8[$__grouping]|0;
   $107 = $106 & 1;
   $108 = ($107<<24>>24)==(0);
   if ($108) {
    $111 = $106&255;
    $112 = $111 >>> 1;
    $114 = $112;
   } else {
    $109 = (($__grouping) + 4|0);
    $110 = HEAP32[$109>>2]|0;
    $114 = $110;
   }
   $113 = ($114|0)==(0);
   if (!($113)) {
    $115 = HEAP8[$__in_units]|0;
    $116 = ($115<<24>>24)==(0);
    if (!($116)) {
     $117 = HEAP32[$__g_end>>2]|0;
     $118 = $117;
     $119 = $__g;
     $120 = (($118) - ($119))|0;
     $121 = ($120|0)<(160);
     if ($121) {
      $122 = HEAP32[$__dc>>2]|0;
      $123 = (($117) + 4|0);
      HEAP32[$__g_end>>2] = $123;
      HEAP32[$117>>2] = $122;
     }
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (+invoke_diii(3,($__a$2|0),($124|0),($__err|0)));
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    HEAPF64[$__v>>3] = $125;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($26|0)==(0|0);
    if ($129) {
     $143 = 0;
    } else {
     $130 = (($26) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($26) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$26>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($26|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      }
      $141 = ($138|0)==(-1);
      if ($141) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $26;
      }
     } else {
      $143 = $26;
     }
    }
    $142 = ($143|0)==(0|0);
    $144 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($144) {
      label = 62;
     } else {
      $145 = (($$pre$i2$i$i) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($$pre$i2$i$i) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($146|0)==($148|0);
      if (!($149)) {
       if (!($142)) {
        break;
       }
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $150 = HEAP32[$$pre$i2$i$i>>2]|0;
      $151 = (($150) + 36|0);
      $152 = HEAP32[$151>>2]|0;
      __THREW__ = 0;
      $153 = (invoke_ii($152|0,($$pre$i2$i$i|0))|0);
      $154 = __THREW__; __THREW__ = 0;
      $155 = $154&1;
      if ($155) {
       break L1;
      }
      $156 = ($153|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      }
      $157 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $142 ^ $157;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if (!($142)) {
      HEAP32[$agg$result>>2] = $143;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $158 = HEAP32[$__err>>2]|0;
    $159 = $158 | 2;
    HEAP32[$__err>>2] = $159;
    HEAP32[$agg$result>>2] = $143;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $79 = ___cxa_find_matching_catch(-1,-1)|0;
 $80 = tempRet0;
 $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$0$lcssa$i$i = 0, $$01 = 0, $$01$i$i = 0, $$ph = 0, $$ph31 = 0, $$ph32 = 0, $$pre = 0, $$pre$i$i$i9 = 0, $$pre$phi39Z2D = 0, $$pre$phi41Z2D = 0, $$pre38 = 0, $$pre40 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__atoms = 0;
 var $__buf = 0, $__g = 0, $__grouping = 0, $__p$i$i$i$i = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0, $phitmp$i22 = 0, $tmp$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $vararg_buffer = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 20|0;
 $0 = sp + 32|0;
 $__buf = sp + 36|0;
 $__g = sp + 48|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(48,($0|0),($__iob|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $113 = ___cxa_find_matching_catch(-1,-1)|0;
  $114 = tempRet0;
  $$0 = $113;$$01 = $114;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($$0|0);
  // unreachable;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[18792>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  label = 4;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 18792;
  $6 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$6>>2] = (121);
  $7 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$7>>2] = 0;
  __THREW__ = 0;
  invoke_viii(6,(18792|0),($__p$i$i$i$i|0),(122|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   label = 4;
  }
 }
 do {
  if ((label|0) == 4) {
   $10 = HEAP32[((18792 + 4|0))>>2]|0;
   $11 = (($10) + -1)|0;
   $12 = (($3) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($3) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $13;
   $17 = $15;
   $18 = (($16) - ($17))|0;
   $19 = $18 >> 2;
   $20 = ($19>>>0)>($11>>>0);
   if ($20) {
    $21 = (($15) + ($11<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if (!($23)) {
     $27 = HEAP32[$22>>2]|0;
     $28 = (($27) + 32|0);
     $29 = HEAP32[$28>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($29|0,($22|0),(17336|0),(((17336 + 26|0))|0),($__atoms|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      break;
     }
     $32 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($32)|0);
     ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),10,0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     L13: do {
      if ($34) {
       label = 44;
      } else {
       $35 = HEAP8[$__buf]|0;
       $36 = $35 & 1;
       $37 = ($36<<24>>24)==(0);
       if ($37) {
        $40 = (($__buf) + 1|0);
        $$pre40 = (($__buf) + 8|0);
        $$pre$phi39Z2D = $40;$$pre$phi41Z2D = $$pre40;$241 = $40;
       } else {
        $38 = (($__buf) + 8|0);
        $39 = HEAP32[$38>>2]|0;
        $$pre38 = (($__buf) + 1|0);
        $$pre$phi39Z2D = $$pre38;$$pre$phi41Z2D = $38;$241 = $39;
       }
       $41 = (($__buf) + 4|0);
       $42 = (($__atoms) + 24|0);
       $43 = (($__atoms) + 25|0);
       $44 = $__g;
       $45 = (($__atoms) + 26|0);
       $46 = $__atoms;
       $47 = (($__grouping) + 4|0);
       $$pre = HEAP32[$__b>>2]|0;
       $$pre$i$i$i9 = $$pre;$154 = $__g;$158 = 0;$78 = $241;$__a$0 = $241;
       L19: while(1) {
        $48 = ($$pre$i$i$i9|0)==(0|0);
        if ($48) {
         $62 = 0;
        } else {
         $49 = (($$pre$i$i$i9) + 12|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = (($$pre$i$i$i9) + 16|0);
         $52 = HEAP32[$51>>2]|0;
         $53 = ($50|0)==($52|0);
         if ($53) {
          $54 = HEAP32[$$pre$i$i$i9>>2]|0;
          $55 = (($54) + 36|0);
          $56 = HEAP32[$55>>2]|0;
          __THREW__ = 0;
          $57 = (invoke_ii($56|0,($$pre$i$i$i9|0))|0);
          $58 = __THREW__; __THREW__ = 0;
          $59 = $58&1;
          if ($59) {
           label = 43;
           break;
          }
          $60 = ($57|0)==(-1);
          if ($60) {
           HEAP32[$__b>>2] = 0;
           $62 = 0;
          } else {
           $62 = $$pre$i$i$i9;
          }
         } else {
          $62 = $$pre$i$i$i9;
         }
        }
        $61 = ($62|0)==(0|0);
        $63 = HEAP32[$__e>>2]|0;
        $64 = ($63|0)==(0|0);
        do {
         if ($64) {
          label = 25;
         } else {
          $65 = (($63) + 12|0);
          $66 = HEAP32[$65>>2]|0;
          $67 = (($63) + 16|0);
          $68 = HEAP32[$67>>2]|0;
          $69 = ($66|0)==($68|0);
          if (!($69)) {
           if ($61) {
            break;
           } else {
            $__a$2 = $__a$0;
            break L19;
           }
          }
          $70 = HEAP32[$63>>2]|0;
          $71 = (($70) + 36|0);
          $72 = HEAP32[$71>>2]|0;
          __THREW__ = 0;
          $73 = (invoke_ii($72|0,($63|0))|0);
          $74 = __THREW__; __THREW__ = 0;
          $75 = $74&1;
          if ($75) {
           label = 43;
           break L19;
          }
          $76 = ($73|0)==(-1);
          if ($76) {
           HEAP32[$__e>>2] = 0;
           label = 25;
           break;
          } else {
           if ($61) {
            break;
           } else {
            $__a$2 = $__a$0;
            break L19;
           }
          }
         }
        } while(0);
        if ((label|0) == 25) {
         label = 0;
         if ($61) {
          $__a$2 = $__a$0;
          break;
         }
        }
        $77 = $78;
        $79 = $__a$0;
        $80 = (($77) - ($79))|0;
        $81 = HEAP8[$__buf]|0;
        $82 = $81 & 1;
        $83 = ($82<<24>>24)==(0);
        if ($83) {
         $85 = $81&255;
         $86 = $85 >>> 1;
         $88 = $86;
        } else {
         $84 = HEAP32[$41>>2]|0;
         $88 = $84;
        }
        $87 = ($80|0)==($88|0);
        if ($87) {
         if ($83) {
          $90 = $81&255;
          $91 = $90 >>> 1;
          $92 = $81&255;
          $93 = $92 >>> 1;
          $112 = $91;$95 = $93;
         } else {
          $89 = HEAP32[$41>>2]|0;
          $112 = $89;$95 = $89;
         }
         $94 = $95 << 1;
         __THREW__ = 0;
         invoke_viii(8,($__buf|0),($94|0),0);
         $96 = __THREW__; __THREW__ = 0;
         $97 = $96&1;
         if ($97) {
          label = 43;
          break;
         }
         $98 = HEAP8[$__buf]|0;
         $99 = $98 & 1;
         $100 = ($99<<24>>24)==(0);
         if ($100) {
          $103 = 10;
         } else {
          $101 = HEAP32[$__buf>>2]|0;
          $102 = $101 & -2;
          $phitmp$i22 = (($102) + -1)|0;
          $103 = $phitmp$i22;
         }
         __THREW__ = 0;
         invoke_viii(8,($__buf|0),($103|0),0);
         $104 = __THREW__; __THREW__ = 0;
         $105 = $104&1;
         if ($105) {
          label = 43;
          break;
         }
         $106 = HEAP8[$__buf]|0;
         $107 = $106 & 1;
         $108 = ($107<<24>>24)==(0);
         if ($108) {
          $111 = $$pre$phi39Z2D;
         } else {
          $109 = HEAP32[$$pre$phi41Z2D>>2]|0;
          $111 = $109;
         }
         $110 = (($111) + ($112)|0);
         $137 = $110;$__a$1 = $111;
        } else {
         $137 = $78;$__a$1 = $__a$0;
        }
        $122 = (($62) + 12|0);
        $123 = HEAP32[$122>>2]|0;
        $124 = (($62) + 16|0);
        $125 = HEAP32[$124>>2]|0;
        $126 = ($123|0)==($125|0);
        if ($126) {
         $127 = HEAP32[$62>>2]|0;
         $128 = (($127) + 36|0);
         $129 = HEAP32[$128>>2]|0;
         __THREW__ = 0;
         $130 = (invoke_ii($129|0,($62|0))|0);
         $131 = __THREW__; __THREW__ = 0;
         $132 = $131&1;
         if ($132) {
          label = 43;
          break;
         } else {
          $$0$i$i = $130;
         }
        } else {
         $133 = HEAP8[$123]|0;
         $134 = $133&255;
         $$0$i$i = $134;
        }
        $135 = $$0$i$i&255;
        $136 = ($137|0)==($__a$1|0);
        do {
         if ($136) {
          $138 = HEAP8[$42]|0;
          $139 = ($138<<24>>24)==($135<<24>>24);
          if (!($139)) {
           $140 = HEAP8[$43]|0;
           $141 = ($140<<24>>24)==($135<<24>>24);
           if (!($141)) {
            label = 53;
            break;
           }
          }
          $142 = $139 ? 43 : 45;
          $143 = (($137) + 1|0);
          HEAP8[$137] = $142;
          $$ph = $143;$$ph31 = $154;$$ph32 = 0;
         } else {
          label = 53;
         }
        } while(0);
        do {
         if ((label|0) == 53) {
          label = 0;
          $144 = HEAP8[$__grouping]|0;
          $145 = $144 & 1;
          $146 = ($145<<24>>24)==(0);
          if ($146) {
           $148 = $144&255;
           $149 = $148 >>> 1;
           $151 = $149;
          } else {
           $147 = HEAP32[$47>>2]|0;
           $151 = $147;
          }
          $150 = ($151|0)!=(0);
          $152 = ($135<<24>>24)==(0);
          $or$cond$i = $150 & $152;
          if ($or$cond$i) {
           $153 = $154;
           $155 = (($153) - ($44))|0;
           $156 = ($155|0)<(160);
           if (!($156)) {
            $$ph = $137;$$ph31 = $154;$$ph32 = $158;
            break;
           }
           $157 = (($154) + 4|0);
           HEAP32[$154>>2] = $158;
           $$ph = $137;$$ph31 = $157;$$ph32 = 0;
           break;
          } else {
           $$01$i$i = $__atoms;
          }
          while(1) {
           $161 = HEAP8[$$01$i$i]|0;
           $162 = ($161<<24>>24)==($135<<24>>24);
           $160 = (($$01$i$i) + 1|0);
           if ($162) {
            $$0$lcssa$i$i = $$01$i$i;
            break;
           }
           $159 = ($160|0)==($45|0);
           if ($159) {
            $$0$lcssa$i$i = $45;
            break;
           } else {
            $$01$i$i = $160;
           }
          }
          $163 = $$0$lcssa$i$i;
          $164 = (($163) - ($46))|0;
          $165 = ($164|0)>(23);
          if ($165) {
           $__a$2 = $__a$1;
           break L19;
          }
          $166 = ($164|0)<(22);
          if ($166) {
           $177 = (17336 + ($164)|0);
           $178 = HEAP8[$177]|0;
           $179 = (($137) + 1|0);
           HEAP8[$137] = $178;
           $180 = (($158) + 1)|0;
           $$ph = $179;$$ph31 = $154;$$ph32 = $180;
           break;
          }
          if ($136) {
           $__a$2 = $137;
           break L19;
          }
          $167 = $137;
          $168 = $__a$1;
          $169 = (($167) - ($168))|0;
          $170 = ($169|0)<(3);
          if (!($170)) {
           $__a$2 = $__a$1;
           break L19;
          }
          $171 = (($137) + -1|0);
          $172 = HEAP8[$171]|0;
          $173 = ($172<<24>>24)==(48);
          if (!($173)) {
           $__a$2 = $__a$1;
           break L19;
          }
          $174 = (17336 + ($164)|0);
          $175 = HEAP8[$174]|0;
          $176 = (($137) + 1|0);
          HEAP8[$137] = $175;
          $$ph = $176;$$ph31 = $154;$$ph32 = 0;
         }
        } while(0);
        $181 = HEAP32[$__b>>2]|0;
        $182 = (($181) + 12|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = (($181) + 16|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($183|0)==($185|0);
        if ($186) {
         $187 = HEAP32[$181>>2]|0;
         $188 = (($187) + 40|0);
         $189 = HEAP32[$188>>2]|0;
         __THREW__ = 0;
         (invoke_ii($189|0,($181|0))|0);
         $190 = __THREW__; __THREW__ = 0;
         $191 = $190&1;
         if ($191) {
          label = 43;
          break;
         } else {
          $$pre$i$i$i9 = $181;$154 = $$ph31;$158 = $$ph32;$78 = $$ph;$__a$0 = $__a$1;
          continue;
         }
        } else {
         $192 = (($183) + 1|0);
         HEAP32[$182>>2] = $192;
         $$pre$i$i$i9 = $181;$154 = $$ph31;$158 = $$ph32;$78 = $$ph;$__a$0 = $__a$1;
         continue;
        }
       }
       if ((label|0) == 43) {
        $118 = ___cxa_find_matching_catch(-1,-1)|0;
        $119 = tempRet0;
        $eh$lpad$body$index3Z2D = $119;$eh$lpad$body$indexZ2D = $118;
        break;
       }
       $193 = (($__a$2) + 3|0);
       HEAP8[$193] = 0;
       $194 = HEAP8[18688]|0;
       $195 = ($194<<24>>24)==(0);
       do {
        if ($195) {
         $196 = (___cxa_guard_acquire((18688|0))|0);
         $197 = ($196|0)==(0);
         if (!($197)) {
          __THREW__ = 0;
          $198 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
          $199 = __THREW__; __THREW__ = 0;
          $200 = $199&1;
          if ($200) {
           $201 = ___cxa_find_matching_catch(-1,-1)|0;
           $202 = tempRet0;
           ___cxa_guard_abort((18688|0));
           $eh$lpad$body$index3Z2D = $202;$eh$lpad$body$indexZ2D = $201;
           break L13;
          } else {
           HEAP32[18680>>2] = $198;
           ___cxa_guard_release((18688|0));
           break;
          }
         }
        }
       } while(0);
       $203 = HEAP32[18680>>2]|0;
       __THREW__ = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $204 = (invoke_iiiii(12,($__a$2|0),($203|0),(17376|0),($vararg_buffer|0))|0);
       $205 = __THREW__; __THREW__ = 0;
       $206 = $205&1;
       if ($206) {
        label = 44;
       } else {
        $207 = ($204|0)==(1);
        if (!($207)) {
         HEAP32[$__err>>2] = 4;
        }
        $208 = HEAP32[$__b>>2]|0;
        $209 = ($208|0)==(0|0);
        if ($209) {
         $223 = 0;
        } else {
         $210 = (($208) + 12|0);
         $211 = HEAP32[$210>>2]|0;
         $212 = (($208) + 16|0);
         $213 = HEAP32[$212>>2]|0;
         $214 = ($211|0)==($213|0);
         if ($214) {
          $215 = HEAP32[$208>>2]|0;
          $216 = (($215) + 36|0);
          $217 = HEAP32[$216>>2]|0;
          __THREW__ = 0;
          $218 = (invoke_ii($217|0,($208|0))|0);
          $219 = __THREW__; __THREW__ = 0;
          $220 = $219&1;
          if ($220) {
           label = 44;
           break;
          }
          $221 = ($218|0)==(-1);
          if ($221) {
           HEAP32[$__b>>2] = 0;
           $223 = 0;
          } else {
           $223 = $208;
          }
         } else {
          $223 = $208;
         }
        }
        $222 = ($223|0)==(0|0);
        $224 = HEAP32[$__e>>2]|0;
        $225 = ($224|0)==(0|0);
        do {
         if ($225) {
          label = 90;
         } else {
          $226 = (($224) + 12|0);
          $227 = HEAP32[$226>>2]|0;
          $228 = (($224) + 16|0);
          $229 = HEAP32[$228>>2]|0;
          $230 = ($227|0)==($229|0);
          if (!($230)) {
           if (!($222)) {
            break;
           }
           HEAP32[$agg$result>>2] = $223;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
           STACKTOP = sp;return;
          }
          $231 = HEAP32[$224>>2]|0;
          $232 = (($231) + 36|0);
          $233 = HEAP32[$232>>2]|0;
          __THREW__ = 0;
          $234 = (invoke_ii($233|0,($224|0))|0);
          $235 = __THREW__; __THREW__ = 0;
          $236 = $235&1;
          if ($236) {
           label = 44;
           break L13;
          }
          $237 = ($234|0)==(-1);
          if ($237) {
           HEAP32[$__e>>2] = 0;
           label = 90;
           break;
          }
          $238 = ($224|0)==(0|0);
          $tmp$i$i = $222 ^ $238;
          if ($tmp$i$i) {
           HEAP32[$agg$result>>2] = $223;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
           STACKTOP = sp;return;
          }
         }
        } while(0);
        if ((label|0) == 90) {
         if (!($222)) {
          HEAP32[$agg$result>>2] = $223;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
          STACKTOP = sp;return;
         }
        }
        $239 = HEAP32[$__err>>2]|0;
        $240 = $239 | 2;
        HEAP32[$__err>>2] = $240;
        HEAP32[$agg$result>>2] = $223;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
        STACKTOP = sp;return;
       }
      }
     } while(0);
     if ((label|0) == 44) {
      $120 = ___cxa_find_matching_catch(-1,-1)|0;
      $121 = tempRet0;
      $eh$lpad$body$index3Z2D = $121;$eh$lpad$body$indexZ2D = $120;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index3Z2D;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     ___resumeException($$0|0);
     // unreachable;
    }
   }
   $24 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($24);
   __THREW__ = 0;
   invoke_viii(7,($24|0),(26752|0),(102|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if (!($26)) {
    // unreachable;
   }
  }
 } while(0);
 $115 = ___cxa_find_matching_catch(-1,-1)|0;
 $116 = tempRet0;
 $117 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($117)|0);
 $$0 = $115;$$01 = $116;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 24|0);
   $3 = HEAP8[$2]|0;
   $4 = ($3<<24>>24)==($__ct<<24>>24);
   if (!($4)) {
    $5 = (($__atoms) + 25|0);
    $6 = HEAP8[$5]|0;
    $7 = ($6<<24>>24)==($__ct<<24>>24);
    if (!($7)) {
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $10 = HEAP8[$__grouping]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $18 = $16;
 } else {
  $13 = (($__grouping) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $18 = $14;
 }
 $17 = ($18|0)!=(0);
 $19 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 $or$cond = $17 & $19;
 if ($or$cond) {
  $20 = HEAP32[$__g_end>>2]|0;
  $21 = $20;
  $22 = $__g;
  $23 = (($21) - ($22))|0;
  $24 = ($23|0)<(160);
  if (!($24)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = HEAP32[$__dc>>2]|0;
  $26 = (($20) + 4|0);
  HEAP32[$__g_end>>2] = $26;
  HEAP32[$20>>2] = $25;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($__atoms) + 26|0);
 $$01$i = $__atoms;
 while(1) {
  $30 = HEAP8[$$01$i]|0;
  $31 = ($30<<24>>24)==($__ct<<24>>24);
  $29 = (($$01$i) + 1|0);
  if ($31) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $28 = ($29|0)==($27|0);
  if ($28) {
   $$0$lcssa$i = $27;
   break;
  } else {
   $$01$i = $29;
  }
 }
 $32 = $$0$lcssa$i;
 $33 = $__atoms;
 $34 = (($32) - ($33))|0;
 $35 = ($34|0)>(23);
 if ($35) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $36 = ($34|0)<($__base|0);
  if (!($36)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($__base|0) == 16)) {
  $37 = ($34|0)<(22);
  if (!($37)) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = $0;
   $39 = $__a;
   $40 = (($38) - ($39))|0;
   $41 = ($40|0)<(3);
   if (!($41)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $42 = (($0) + -1|0);
   $43 = HEAP8[$42]|0;
   $44 = ($43<<24>>24)==(48);
   if (!($44)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $45 = (17336 + ($34)|0);
   $46 = HEAP8[$45]|0;
   $47 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $47;
   HEAP8[$0] = $46;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $48 = (17336 + ($34)|0);
 $49 = HEAP8[$48]|0;
 $50 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $50;
 HEAP8[$0] = $49;
 $51 = HEAP32[$__dc>>2]|0;
 $52 = (($51) + 1)|0;
 HEAP32[$__dc>>2] = $52;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsscanf(($__s|0),($__format|0),($__va|0))|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 __THREW__ = 0;
 (invoke_ii(73,($0|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  STACKTOP = sp;return ($1|0);
 }
 return 0|0;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lv = 0, $__names = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $$byval_copy2 = sp + 88|0;
 $$byval_copy1 = sp + 84|0;
 $$byval_copy = sp + 80|0;
 $__p$i$i$i$i4 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $__lv = sp + 76|0;
 $0 = sp + 28|0;
 $1 = sp + 40|0;
 $2 = sp + 32|0;
 $3 = sp + 36|0;
 $4 = sp + 44|0;
 $__names = sp + 48|0;
 $5 = sp + 72|0;
 $6 = (($__iob) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$__lv>>2] = -1;
  $10 = HEAP32[$this>>2]|0;
  $11 = (($10) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$__b>>2]|0;
  HEAP32[$1>>2] = $13;
  $14 = HEAP32[$__e>>2]|0;
  HEAP32[$2>>2] = $14;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$12 & 63]($0,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv);
  $15 = HEAP32[$0>>2]|0;
  HEAP32[$__b>>2] = $15;
  $16 = HEAP32[$__lv>>2]|0;
  if ((($16|0) == 0)) {
   HEAP8[$__v] = 0;
  } else if ((($16|0) == 1)) {
   HEAP8[$__v] = 1;
  } else {
   HEAP8[$__v] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $15;
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($3,$__iob);
 $17 = HEAP32[$3>>2]|0;
 $18 = HEAP32[18784>>2]|0;
 $19 = ($18|0)==(-1);
 if ($19) {
  label = 9;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 18784;
  $20 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$20>>2] = (121);
  $21 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$21>>2] = 0;
  __THREW__ = 0;
  invoke_viii(6,(18784|0),($__p$i$i$i$i|0),(122|0));
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if (!($23)) {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $24 = HEAP32[((18784 + 4|0))>>2]|0;
  $25 = (($24) + -1)|0;
  $26 = (($17) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($17) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $27;
  $31 = $29;
  $32 = (($30) - ($31))|0;
  $33 = $32 >> 2;
  $34 = ($33>>>0)>($25>>>0);
  if ($34) {
   $35 = (($29) + ($25<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(0|0);
   if (!($37)) {
    $41 = HEAP32[$3>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
    __ZNKSt3__18ios_base6getlocEv($4,$__iob);
    $42 = HEAP32[$4>>2]|0;
    $43 = HEAP32[18944>>2]|0;
    $44 = ($43|0)==(-1);
    if ($44) {
     label = 15;
    } else {
     HEAP32[$__p$i$i$i$i4>>2] = 18944;
     $45 = (($__p$i$i$i$i4) + 4|0);
     HEAP32[$45>>2] = (121);
     $46 = (($__p$i$i$i$i4) + 8|0);
     HEAP32[$46>>2] = 0;
     __THREW__ = 0;
     invoke_viii(6,(18944|0),($__p$i$i$i$i4|0),(122|0));
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     if (!($48)) {
      label = 15;
     }
    }
    if ((label|0) == 15) {
     $49 = HEAP32[((18944 + 4|0))>>2]|0;
     $50 = (($49) + -1)|0;
     $51 = (($42) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (($42) + 8|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = $52;
     $56 = $54;
     $57 = (($55) - ($56))|0;
     $58 = $57 >> 2;
     $59 = ($58>>>0)>($50>>>0);
     if ($59) {
      $60 = (($54) + ($50<<2)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $66 = HEAP32[$4>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($66)|0);
       $67 = HEAP32[$61>>2]|0;
       $68 = (($67) + 24|0);
       $69 = HEAP32[$68>>2]|0;
       __THREW__ = 0;
       invoke_vii($69|0,($__names|0),($61|0));
       $70 = __THREW__; __THREW__ = 0;
       $71 = $70&1;
       if ($71) {
        $$02 = $__names;
       } else {
        $72 = (($__names) + 12|0);
        $73 = HEAP32[$61>>2]|0;
        $74 = (($73) + 28|0);
        $75 = HEAP32[$74>>2]|0;
        __THREW__ = 0;
        invoke_vii($75|0,($72|0),($61|0));
        $76 = __THREW__; __THREW__ = 0;
        $77 = $76&1;
        if ($77) {
         $$02 = $72;
        } else {
         $78 = HEAP32[$__e>>2]|0;
         HEAP32[$5>>2] = $78;
         $79 = (($__names) + 24|0);
         __THREW__ = 0;
         ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
         $80 = (invoke_iiiiiiii(2,($__b|0),($$byval_copy2|0),($__names|0),($79|0),($36|0),($__err|0),1)|0);
         $81 = __THREW__; __THREW__ = 0;
         $82 = $81&1;
         if ($82) {
          $99 = ___cxa_find_matching_catch(-1,-1)|0;
          $100 = tempRet0;
          $101 = (($__names) + 12|0);
          __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($101);
          __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names);
          $$0 = $99;$$01 = $100;
          ___resumeException($$0|0);
          // unreachable;
         } else {
          $83 = ($80|0)==($__names|0);
          $84 = $83&1;
          HEAP8[$__v] = $84;
          $85 = HEAP32[$__b>>2]|0;
          HEAP32[$agg$result>>2] = $85;
          $86 = (($__names) + 12|0);
          __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($86);
          __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names);
          STACKTOP = sp;return;
         }
        }
       }
       $93 = ___cxa_find_matching_catch(-1,-1)|0;
       $94 = tempRet0;
       $95 = ($__names|0)==($$02|0);
       if ($95) {
        $$0 = $93;$$01 = $94;
        ___resumeException($$0|0);
        // unreachable;
       } else {
        $97 = $$02;
       }
       while(1) {
        $96 = (($97) + -12|0);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($96);
        $98 = ($96|0)==($__names|0);
        if ($98) {
         $$0 = $93;$$01 = $94;
         break;
        } else {
         $97 = $96;
        }
       }
       ___resumeException($$0|0);
       // unreachable;
      }
     }
     $63 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($63);
     __THREW__ = 0;
     invoke_viii(7,($63|0),(26752|0),(102|0));
     $64 = __THREW__; __THREW__ = 0;
     $65 = $64&1;
     if (!($65)) {
      // unreachable;
     }
    }
    $90 = ___cxa_find_matching_catch(-1,-1)|0;
    $91 = tempRet0;
    $92 = HEAP32[$4>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($92)|0);
    $$0 = $90;$$01 = $91;
    ___resumeException($$0|0);
    // unreachable;
   }
  }
  $38 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($38);
  __THREW__ = 0;
  invoke_viii(7,($38|0),(26752|0),(102|0));
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if (!($40)) {
   // unreachable;
  }
 }
 $87 = ___cxa_find_matching_catch(-1,-1)|0;
 $88 = tempRet0;
 $89 = HEAP32[$3>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($89)|0);
 $$0 = $87;$$01 = $88;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i17 = 0, $$028 = 0, $$03082 = 0, $$index = 0, $$index10 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i13 = 0, $$pre$i3$i$i19 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off039 = 0, $__consume$0$off039$us = 0, $__consume$1$off0 = 0;
 var $__consume$1$off0$us = 0, $__indx$0 = 0, $__ky$068 = 0, $__ky1$040 = 0, $__ky1$040$us = 0, $__ky2$051 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$066 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$phi = 0, $__n_does_match$3$lcssa = 0, $__n_does_match$336 = 0, $__n_does_match$336$us = 0, $__n_does_match$4 = 0, $__n_does_match$4$us = 0, $__n_does_match$549 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$065 = 0;
 var $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$2$phi = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$335 = 0, $__n_might_match$335$us = 0, $__n_might_match$4 = 0, $__n_might_match$4$us = 0, $__st$067 = 0, $__st$137 = 0, $__st$137$us = 0, $__st$250 = 0, $__st$32983 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i14 = 0, $tmp$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __THREW__ = 0;
   invoke_v(4);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch(-1,-1)|0;
    $10 = tempRet0;
    $$index = $9;$$index10 = $10;
    ___resumeException($$index|0);
    // unreachable;
   } else {
    $18 = 0;$__status$0 = 0;
   }
  } else {
   $18 = $5;$__status$0 = $5;
  }
 } else {
  $18 = 0;$__status$0 = $__statbuf;
 }
 $23 = ($__kb|0)==($__ke|0);
 if ($23) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
 } else {
  $__ky$068 = $__kb;$__n_does_match$066 = 0;$__n_might_match$065 = $3;$__st$067 = $__status$0;
  while(1) {
   $24 = HEAP8[$__ky$068]|0;
   $25 = $24 & 1;
   $26 = ($25<<24>>24)==(0);
   if ($26) {
    $29 = $24&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $27 = (($__ky$068) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    HEAP8[$__st$067] = 2;
    $33 = (($__n_might_match$065) + -1)|0;
    $34 = (($__n_does_match$066) + 1)|0;
    $__n_does_match$1 = $34;$__n_might_match$1 = $33;
   } else {
    HEAP8[$__st$067] = 1;
    $__n_does_match$1 = $__n_does_match$066;$__n_might_match$1 = $__n_might_match$065;
   }
   $35 = (($__ky$068) + 12|0);
   $36 = (($__st$067) + 1|0);
   $37 = ($35|0)==($__ke|0);
   if ($37) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$068 = $35;$__n_does_match$066 = $__n_does_match$1;$__n_might_match$065 = $__n_might_match$1;$__st$067 = $36;
   }
  }
 }
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L19: while(1) {
  $38 = HEAP32[$__b>>2]|0;
  $39 = ($38|0)==(0|0);
  do {
   if ($39) {
    $68 = 1;
   } else {
    $40 = (($38) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($38) + 16|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($41|0)==($43|0);
    if ($44) {
     $45 = HEAP32[$38>>2]|0;
     $46 = (($45) + 36|0);
     $47 = HEAP32[$46>>2]|0;
     __THREW__ = 0;
     $48 = (invoke_ii($47|0,($38|0))|0);
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     if ($50) {
      label = 6;
      break L19;
     } else {
      $$0$i$i$i$i = $48;
     }
    } else {
     $51 = HEAP32[$41>>2]|0;
     $$0$i$i$i$i = $51;
    }
    $52 = ($$0$i$i$i$i|0)==(-1);
    if ($52) {
     HEAP32[$__b>>2] = 0;
     $68 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $68 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $53 = HEAP32[$__e>>2]|0;
  $54 = ($53|0)==(0|0);
  if ($54) {
   $$pre$i3$i$i19 = 0;$69 = 1;
  } else {
   $55 = (($53) + 12|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($53) + 16|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($56|0)==($58|0);
   if ($59) {
    $60 = HEAP32[$53>>2]|0;
    $61 = (($60) + 36|0);
    $62 = HEAP32[$61>>2]|0;
    __THREW__ = 0;
    $63 = (invoke_ii($62|0,($53|0))|0);
    $64 = __THREW__; __THREW__ = 0;
    $65 = $64&1;
    if ($65) {
     label = 6;
     break;
    } else {
     $$0$i$i1$i$i = $63;
    }
   } else {
    $66 = HEAP32[$56>>2]|0;
    $$0$i$i1$i$i = $66;
   }
   $67 = ($$0$i$i1$i$i|0)==(-1);
   if ($67) {
    HEAP32[$__e>>2] = 0;
    $$pre$i3$i$i19 = 0;$69 = 1;
   } else {
    $$pre$i3$i$i19 = $53;$69 = 0;
   }
  }
  $tmp$i$i = $68 ^ $69;
  $70 = ($__n_might_match$2|0)!=(0);
  $$ = $tmp$i$i & $70;
  $71 = HEAP32[$__b>>2]|0;
  if (!($$)) {
   label = 81;
   break;
  }
  $72 = (($71) + 12|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($71) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($73|0)==($75|0);
  if ($76) {
   $77 = HEAP32[$71>>2]|0;
   $78 = (($77) + 36|0);
   $79 = HEAP32[$78>>2]|0;
   __THREW__ = 0;
   $80 = (invoke_ii($79|0,($71|0))|0);
   $81 = __THREW__; __THREW__ = 0;
   $82 = $81&1;
   if ($82) {
    label = 6;
    break;
   } else {
    $$0$i$i = $80;
   }
  } else {
   $83 = HEAP32[$73>>2]|0;
   $$0$i$i = $83;
  }
  if ($__case_sensitive) {
   $__c$0 = $$0$i$i;
  } else {
   $84 = HEAP32[$__ct>>2]|0;
   $85 = (($84) + 28|0);
   $86 = HEAP32[$85>>2]|0;
   __THREW__ = 0;
   $87 = (invoke_iii($86|0,($__ct|0),($$0$i$i|0))|0);
   $88 = __THREW__; __THREW__ = 0;
   $89 = $88&1;
   if ($89) {
    label = 6;
    break;
   } else {
    $__c$0 = $87;
   }
  }
  $$pre = (($__indx$0) + 1)|0;
  if ($23) {
   $__n_might_match$2$phi = $__n_might_match$2;$__n_does_match$2$phi = $__n_does_match$2;$__indx$0 = $$pre;$__n_might_match$2 = $__n_might_match$2$phi;$__n_does_match$2 = $__n_does_match$2$phi;
   continue;
  }
  L48: do {
   if ($__case_sensitive) {
    $__consume$0$off039$us = 0;$__ky1$040$us = $__kb;$__n_does_match$336$us = $__n_does_match$2;$__n_might_match$335$us = $__n_might_match$2;$__st$137$us = $__status$0;
    while(1) {
     $90 = HEAP8[$__st$137$us]|0;
     $91 = ($90<<24>>24)==(1);
     do {
      if ($91) {
       $92 = HEAP8[$__ky1$040$us]|0;
       $93 = $92 & 1;
       $94 = ($93<<24>>24)==(0);
       if ($94) {
        $97 = (($__ky1$040$us) + 4|0);
        $99 = $97;
       } else {
        $95 = (($__ky1$040$us) + 8|0);
        $96 = HEAP32[$95>>2]|0;
        $99 = $96;
       }
       $98 = (($99) + ($__indx$0<<2)|0);
       $100 = HEAP32[$98>>2]|0;
       $101 = ($__c$0|0)==($100|0);
       if (!($101)) {
        HEAP8[$__st$137$us] = 0;
        $102 = (($__n_might_match$335$us) + -1)|0;
        $__consume$1$off0$us = $__consume$0$off039$us;$__n_does_match$4$us = $__n_does_match$336$us;$__n_might_match$4$us = $102;
        break;
       }
       if ($94) {
        $105 = $92&255;
        $106 = $105 >>> 1;
        $108 = $106;
       } else {
        $103 = (($__ky1$040$us) + 4|0);
        $104 = HEAP32[$103>>2]|0;
        $108 = $104;
       }
       $107 = ($108|0)==($$pre|0);
       if ($107) {
        HEAP8[$__st$137$us] = 2;
        $109 = (($__n_might_match$335$us) + -1)|0;
        $110 = (($__n_does_match$336$us) + 1)|0;
        $__consume$1$off0$us = 1;$__n_does_match$4$us = $110;$__n_might_match$4$us = $109;
       } else {
        $__consume$1$off0$us = 1;$__n_does_match$4$us = $__n_does_match$336$us;$__n_might_match$4$us = $__n_might_match$335$us;
       }
      } else {
       $__consume$1$off0$us = $__consume$0$off039$us;$__n_does_match$4$us = $__n_does_match$336$us;$__n_might_match$4$us = $__n_might_match$335$us;
      }
     } while(0);
     $111 = (($__ky1$040$us) + 12|0);
     $112 = ($111|0)==($__ke|0);
     if ($112) {
      $__consume$0$off0$lcssa = $__consume$1$off0$us;$__n_does_match$3$lcssa = $__n_does_match$4$us;$__n_might_match$3$lcssa = $__n_might_match$4$us;
      break L48;
     }
     $113 = (($__st$137$us) + 1|0);
     $__consume$0$off039$us = $__consume$1$off0$us;$__ky1$040$us = $111;$__n_does_match$336$us = $__n_does_match$4$us;$__n_might_match$335$us = $__n_might_match$4$us;$__st$137$us = $113;
    }
   } else {
    $__consume$0$off039 = 0;$__ky1$040 = $__kb;$__n_does_match$336 = $__n_does_match$2;$__n_might_match$335 = $__n_might_match$2;$__st$137 = $__status$0;
    while(1) {
     $114 = HEAP8[$__st$137]|0;
     $115 = ($114<<24>>24)==(1);
     do {
      if ($115) {
       $116 = HEAP8[$__ky1$040]|0;
       $117 = $116 & 1;
       $118 = ($117<<24>>24)==(0);
       if ($118) {
        $121 = (($__ky1$040) + 4|0);
        $123 = $121;
       } else {
        $119 = (($__ky1$040) + 8|0);
        $120 = HEAP32[$119>>2]|0;
        $123 = $120;
       }
       $122 = (($123) + ($__indx$0<<2)|0);
       $124 = HEAP32[$122>>2]|0;
       $125 = HEAP32[$__ct>>2]|0;
       $126 = (($125) + 28|0);
       $127 = HEAP32[$126>>2]|0;
       __THREW__ = 0;
       $128 = (invoke_iii($127|0,($__ct|0),($124|0))|0);
       $129 = __THREW__; __THREW__ = 0;
       $130 = $129&1;
       if ($130) {
        label = 5;
        break L19;
       }
       $131 = ($__c$0|0)==($128|0);
       if (!($131)) {
        HEAP8[$__st$137] = 0;
        $143 = (($__n_might_match$335) + -1)|0;
        $__consume$1$off0 = $__consume$0$off039;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $143;
        break;
       }
       $132 = HEAP8[$__ky1$040]|0;
       $133 = $132 & 1;
       $134 = ($133<<24>>24)==(0);
       if ($134) {
        $137 = $132&255;
        $138 = $137 >>> 1;
        $140 = $138;
       } else {
        $135 = (($__ky1$040) + 4|0);
        $136 = HEAP32[$135>>2]|0;
        $140 = $136;
       }
       $139 = ($140|0)==($$pre|0);
       if ($139) {
        HEAP8[$__st$137] = 2;
        $141 = (($__n_might_match$335) + -1)|0;
        $142 = (($__n_does_match$336) + 1)|0;
        $__consume$1$off0 = 1;$__n_does_match$4 = $142;$__n_might_match$4 = $141;
       } else {
        $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $__n_might_match$335;
       }
      } else {
       $__consume$1$off0 = $__consume$0$off039;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $__n_might_match$335;
      }
     } while(0);
     $144 = (($__ky1$040) + 12|0);
     $145 = ($144|0)==($__ke|0);
     if ($145) {
      $__consume$0$off0$lcssa = $__consume$1$off0;$__n_does_match$3$lcssa = $__n_does_match$4;$__n_might_match$3$lcssa = $__n_might_match$4;
      break L48;
     }
     $146 = (($__st$137) + 1|0);
     $__consume$0$off039 = $__consume$1$off0;$__ky1$040 = $144;$__n_does_match$336 = $__n_does_match$4;$__n_might_match$335 = $__n_might_match$4;$__st$137 = $146;
    }
   }
  } while(0);
  if (!($__consume$0$off0$lcssa)) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  }
  $147 = HEAP32[$__b>>2]|0;
  $148 = (($147) + 12|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (($147) + 16|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = ($149|0)==($151|0);
  if ($152) {
   $153 = HEAP32[$147>>2]|0;
   $154 = (($153) + 40|0);
   $155 = HEAP32[$154>>2]|0;
   __THREW__ = 0;
   (invoke_ii($155|0,($147|0))|0);
   $156 = __THREW__; __THREW__ = 0;
   $157 = $156&1;
   if ($157) {
    label = 6;
    break;
   }
  } else {
   $158 = (($149) + 4|0);
   HEAP32[$148>>2] = $158;
  }
  $159 = (($__n_might_match$3$lcssa) + ($__n_does_match$3$lcssa))|0;
  $$not = ($159>>>0)<(2);
  if ($$not) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  } else {
   $__ky2$051 = $__kb;$__n_does_match$549 = $__n_does_match$3$lcssa;$__st$250 = $__status$0;
  }
  while(1) {
   $160 = HEAP8[$__st$250]|0;
   $161 = ($160<<24>>24)==(2);
   if ($161) {
    $162 = HEAP8[$__ky2$051]|0;
    $163 = $162 & 1;
    $164 = ($163<<24>>24)==(0);
    if ($164) {
     $167 = $162&255;
     $168 = $167 >>> 1;
     $170 = $168;
    } else {
     $165 = (($__ky2$051) + 4|0);
     $166 = HEAP32[$165>>2]|0;
     $170 = $166;
    }
    $169 = ($170|0)==($$pre|0);
    if ($169) {
     $__n_does_match$6 = $__n_does_match$549;
    } else {
     HEAP8[$__st$250] = 0;
     $171 = (($__n_does_match$549) + -1)|0;
     $__n_does_match$6 = $171;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$549;
   }
   $172 = (($__ky2$051) + 12|0);
   $173 = (($__st$250) + 1|0);
   $174 = ($172|0)==($__ke|0);
   if ($174) {
    $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3$lcssa;
    continue L19;
   } else {
    $__ky2$051 = $172;$__n_does_match$549 = $__n_does_match$6;$__st$250 = $173;
   }
  }
 }
 if ((label|0) == 5) {
  $11 = ___cxa_find_matching_catch(-1,-1)|0;
  $12 = tempRet0;
  $lpad$phi$index = $11;$lpad$phi$index3 = $12;
 }
 else if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  $lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 else if ((label|0) == 81) {
  $175 = ($71|0)==(0|0);
  do {
   if ($175) {
    $219 = 1;
    label = 88;
   } else {
    $176 = (($71) + 12|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = (($71) + 16|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = ($177|0)==($179|0);
    if ($180) {
     $181 = HEAP32[$71>>2]|0;
     $182 = (($181) + 36|0);
     $183 = HEAP32[$182>>2]|0;
     __THREW__ = 0;
     $184 = (invoke_ii($183|0,($71|0))|0);
     $185 = __THREW__; __THREW__ = 0;
     $186 = $185&1;
     if ($186) {
      break;
     } else {
      $$0$i$i$i$i11 = $184;
     }
    } else {
     $187 = HEAP32[$177>>2]|0;
     $$0$i$i$i$i11 = $187;
    }
    $188 = ($$0$i$i$i$i11|0)==(-1);
    if ($188) {
     HEAP32[$__b>>2] = 0;
     $219 = 1;
     label = 88;
     break;
    } else {
     $$pre$i$i$i13 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i14 = ($$pre$i$i$i13|0)==(0|0);
     $219 = $phitmp$i$i$i14;
     label = 88;
     break;
    }
   }
  } while(0);
  L115: do {
   if ((label|0) == 88) {
    $189 = ($$pre$i3$i$i19|0)==(0|0);
    do {
     if ($189) {
      label = 94;
     } else {
      $190 = (($$pre$i3$i$i19) + 12|0);
      $191 = HEAP32[$190>>2]|0;
      $192 = (($$pre$i3$i$i19) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($191|0)==($193|0);
      if ($194) {
       $195 = HEAP32[$$pre$i3$i$i19>>2]|0;
       $196 = (($195) + 36|0);
       $197 = HEAP32[$196>>2]|0;
       __THREW__ = 0;
       $198 = (invoke_ii($197|0,($$pre$i3$i$i19|0))|0);
       $199 = __THREW__; __THREW__ = 0;
       $200 = $199&1;
       if ($200) {
        break L115;
       } else {
        $$0$i$i1$i$i17 = $198;
       }
      } else {
       $201 = HEAP32[$191>>2]|0;
       $$0$i$i1$i$i17 = $201;
      }
      $202 = ($$0$i$i1$i$i17|0)==(-1);
      if ($202) {
       HEAP32[$__e>>2] = 0;
       label = 94;
       break;
      } else {
       if ($219) {
        break;
       } else {
        label = 96;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 94) {
     if ($219) {
      label = 96;
     }
    }
    if ((label|0) == 96) {
     $203 = HEAP32[$__err>>2]|0;
     $204 = $203 | 2;
     HEAP32[$__err>>2] = $204;
    }
    L131: do {
     if ($23) {
      label = 101;
     } else {
      $205 = HEAP8[$__status$0]|0;
      $206 = ($205<<24>>24)==(2);
      if ($206) {
       $$028 = $__kb;
      } else {
       $$03082 = $__kb;$__st$32983 = $__status$0;
       while(1) {
        $210 = (($$03082) + 12|0);
        $211 = ($210|0)==($__ke|0);
        $208 = (($__st$32983) + 1|0);
        if ($211) {
         label = 101;
         break L131;
        }
        $207 = HEAP8[$208]|0;
        $209 = ($207<<24>>24)==(2);
        if ($209) {
         $$028 = $210;
         break;
        } else {
         $$03082 = $210;$__st$32983 = $208;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 101) {
     $212 = HEAP32[$__err>>2]|0;
     $213 = $212 | 4;
     HEAP32[$__err>>2] = $213;
     $$028 = $__ke;
    }
    $214 = ($18|0)==(0|0);
    if ($214) {
     STACKTOP = sp;return ($$028|0);
    }
    __THREW__ = 0;
    invoke_vi(112,($18|0));
    $215 = __THREW__; __THREW__ = 0;
    $216 = $215&1;
    if ($216) {
     $217 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $218 = tempRet0;
     ___clang_call_terminate($217);
     // unreachable;
    } else {
     STACKTOP = sp;return ($$028|0);
    }
   }
  } while(0);
  $15 = ___cxa_find_matching_catch(-1,-1)|0;
  $16 = tempRet0;
  $lpad$phi$index = $15;$lpad$phi$index3 = $16;
 }
 $17 = ($18|0)==(0|0);
 if ($17) {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(112,($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 200|0;
 $__thousands_sep = sp;
 $__grouping = sp + 4|0;
 $__buf = sp + 16|0;
 $__a_end = sp + 28|0;
 $__g = sp + 32|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 196|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(8,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $10;$$pre$phi36Z2D = $$pre35;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i5|0)==(0|0);
    if ($14) {
     $159 = 1;$84 = 0;
    } else {
     $15 = (($$pre$i$i$i5) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 38;
       break;
      } else {
       $$0$i$i$i$i3 = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i3 = $26;
     }
     $27 = ($$0$i$i$i$i3|0)==(-1);
     if ($27) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;$84 = 0;
     } else {
      $159 = 0;$84 = $$pre$i$i$i5;
     }
    }
    $28 = HEAP32[$__e>>2]|0;
    $29 = ($28|0)==(0|0);
    do {
     if ($29) {
      label = 22;
     } else {
      $30 = (($28) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($28) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if ($34) {
       $35 = HEAP32[$28>>2]|0;
       $36 = (($35) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       __THREW__ = 0;
       $38 = (invoke_ii($37|0,($28|0))|0);
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $38;
       }
      } else {
       $41 = HEAP32[$31>>2]|0;
       $$0$i$i1$i$i9 = $41;
      }
      $42 = ($$0$i$i1$i$i9|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 22;
       break;
      } else {
       if ($159) {
        $160 = $28;
        break;
       } else {
        $$pre$i3$i$i = $28;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     if ($159) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 38;
      break;
     }
     $64 = HEAP8[$__buf]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 38;
      break;
     }
     $72 = HEAP8[$__buf]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi34Z2D;
     } else {
      $75 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($84) + 12|0);
    $85 = HEAP32[$83>>2]|0;
    $86 = (($84) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($85|0)==($87|0);
    if ($88) {
     $89 = HEAP32[$84>>2]|0;
     $90 = (($89) + 36|0);
     $91 = HEAP32[$90>>2]|0;
     __THREW__ = 0;
     $92 = (invoke_ii($91|0,($84|0))|0);
     $93 = __THREW__; __THREW__ = 0;
     $94 = $93&1;
     if ($94) {
      label = 38;
      break;
     } else {
      $$0$i$i = $92;
     }
    } else {
     $95 = HEAP32[$85>>2]|0;
     $$0$i$i = $95;
    }
    $96 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $97 = ($96|0)==(0);
    if (!($97)) {
     $$pre$i3$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $98 = HEAP32[$83>>2]|0;
    $99 = HEAP32[$86>>2]|0;
    $100 = ($98|0)==($99|0);
    if ($100) {
     $101 = HEAP32[$84>>2]|0;
     $102 = (($101) + 40|0);
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     (invoke_ii($103|0,($84|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $106 = (($98) + 4|0);
     HEAP32[$83>>2] = $106;
     $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $107 = HEAP8[$__grouping]|0;
   $108 = $107 & 1;
   $109 = ($108<<24>>24)==(0);
   if ($109) {
    $112 = $107&255;
    $113 = $112 >>> 1;
    $115 = $113;
   } else {
    $110 = (($__grouping) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    $115 = $111;
   }
   $114 = ($115|0)==(0);
   if (!($114)) {
    $116 = HEAP32[$__g_end>>2]|0;
    $117 = $116;
    $118 = $__g;
    $119 = (($117) - ($118))|0;
    $120 = ($119|0)<(160);
    if ($120) {
     $121 = HEAP32[$__dc>>2]|0;
     $122 = (($116) + 4|0);
     HEAP32[$__g_end>>2] = $122;
     HEAP32[$116>>2] = $121;
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (invoke_iiiii(6,($__a$2|0),($123|0),($__err|0),($$0$i|0))|0);
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if (!($126)) {
    HEAP32[$__v>>2] = $124;
    $127 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$127,$__err);
    $128 = ($84|0)==(0|0);
    if ($128) {
     $158 = 0;$161 = 1;
    } else {
     $129 = (($84) + 12|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($84) + 16|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($130|0)==($132|0);
     if ($133) {
      $134 = HEAP32[$84>>2]|0;
      $135 = (($134) + 36|0);
      $136 = HEAP32[$135>>2]|0;
      __THREW__ = 0;
      $137 = (invoke_ii($136|0,($84|0))|0);
      $138 = __THREW__; __THREW__ = 0;
      $139 = $138&1;
      if ($139) {
       break;
      } else {
       $$0$i$i$i$i = $137;
      }
     } else {
      $140 = HEAP32[$130>>2]|0;
      $$0$i$i$i$i = $140;
     }
     $141 = ($$0$i$i$i$i|0)==(-1);
     if ($141) {
      HEAP32[$__b>>2] = 0;
      $158 = 0;$161 = 1;
     } else {
      $158 = $84;$161 = 0;
     }
    }
    $142 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 67;
     } else {
      $143 = (($$pre$i3$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i3$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i3$i$i>>2]|0;
       $149 = (($148) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i3$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break L6;
       } else {
        $$0$i$i1$i$i = $151;
       }
      } else {
       $154 = HEAP32[$144>>2]|0;
       $$0$i$i1$i$i = $154;
      }
      $155 = ($$0$i$i1$i$i|0)==(-1);
      if ($155) {
       HEAP32[$__e>>2] = 0;
       label = 67;
       break;
      }
      if ($161) {
       HEAP32[$agg$result>>2] = $158;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 67) {
     if (!($161)) {
      HEAP32[$agg$result>>2] = $158;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $158;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 200|0;
 $__thousands_sep = sp;
 $__grouping = sp + 4|0;
 $__buf = sp + 16|0;
 $__a_end = sp + 28|0;
 $__g = sp + 32|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 196|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(8,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $10;$$pre$phi36Z2D = $$pre35;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i5|0)==(0|0);
    if ($14) {
     $164 = 1;$84 = 0;
    } else {
     $15 = (($$pre$i$i$i5) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 38;
       break;
      } else {
       $$0$i$i$i$i3 = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i3 = $26;
     }
     $27 = ($$0$i$i$i$i3|0)==(-1);
     if ($27) {
      HEAP32[$__b>>2] = 0;
      $164 = 1;$84 = 0;
     } else {
      $164 = 0;$84 = $$pre$i$i$i5;
     }
    }
    $28 = HEAP32[$__e>>2]|0;
    $29 = ($28|0)==(0|0);
    do {
     if ($29) {
      label = 22;
     } else {
      $30 = (($28) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($28) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if ($34) {
       $35 = HEAP32[$28>>2]|0;
       $36 = (($35) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       __THREW__ = 0;
       $38 = (invoke_ii($37|0,($28|0))|0);
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $38;
       }
      } else {
       $41 = HEAP32[$31>>2]|0;
       $$0$i$i1$i$i9 = $41;
      }
      $42 = ($$0$i$i1$i$i9|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 22;
       break;
      } else {
       if ($164) {
        $165 = $28;
        break;
       } else {
        $$pre$i3$i$i = $28;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     if ($164) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $165 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 38;
      break;
     }
     $64 = HEAP8[$__buf]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 38;
      break;
     }
     $72 = HEAP8[$__buf]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi34Z2D;
     } else {
      $75 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($84) + 12|0);
    $85 = HEAP32[$83>>2]|0;
    $86 = (($84) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($85|0)==($87|0);
    if ($88) {
     $89 = HEAP32[$84>>2]|0;
     $90 = (($89) + 36|0);
     $91 = HEAP32[$90>>2]|0;
     __THREW__ = 0;
     $92 = (invoke_ii($91|0,($84|0))|0);
     $93 = __THREW__; __THREW__ = 0;
     $94 = $93&1;
     if ($94) {
      label = 38;
      break;
     } else {
      $$0$i$i = $92;
     }
    } else {
     $95 = HEAP32[$85>>2]|0;
     $$0$i$i = $95;
    }
    $96 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $97 = ($96|0)==(0);
    if (!($97)) {
     $$pre$i3$i$i = $165;$__a$2 = $__a$1;
     break;
    }
    $98 = HEAP32[$83>>2]|0;
    $99 = HEAP32[$86>>2]|0;
    $100 = ($98|0)==($99|0);
    if ($100) {
     $101 = HEAP32[$84>>2]|0;
     $102 = (($101) + 40|0);
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     (invoke_ii($103|0,($84|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $106 = (($98) + 4|0);
     HEAP32[$83>>2] = $106;
     $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $107 = HEAP8[$__grouping]|0;
   $108 = $107 & 1;
   $109 = ($108<<24>>24)==(0);
   if ($109) {
    $112 = $107&255;
    $113 = $112 >>> 1;
    $115 = $113;
   } else {
    $110 = (($__grouping) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    $115 = $111;
   }
   $114 = ($115|0)==(0);
   if (!($114)) {
    $116 = HEAP32[$__g_end>>2]|0;
    $117 = $116;
    $118 = $__g;
    $119 = (($117) - ($118))|0;
    $120 = ($119|0)<(160);
    if ($120) {
     $121 = HEAP32[$__dc>>2]|0;
     $122 = (($116) + 4|0);
     HEAP32[$__g_end>>2] = $122;
     HEAP32[$116>>2] = $121;
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (invoke_iiiii(7,($__a$2|0),($123|0),($__err|0),($$0$i|0))|0);
   $125 = tempRet0;
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    $128 = $__v;
    $129 = $128;
    HEAP32[$129>>2] = $124;
    $130 = (($128) + 4)|0;
    $131 = $130;
    HEAP32[$131>>2] = $125;
    $132 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$132,$__err);
    $133 = ($84|0)==(0|0);
    if ($133) {
     $163 = 0;$166 = 1;
    } else {
     $134 = (($84) + 12|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = (($84) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($135|0)==($137|0);
     if ($138) {
      $139 = HEAP32[$84>>2]|0;
      $140 = (($139) + 36|0);
      $141 = HEAP32[$140>>2]|0;
      __THREW__ = 0;
      $142 = (invoke_ii($141|0,($84|0))|0);
      $143 = __THREW__; __THREW__ = 0;
      $144 = $143&1;
      if ($144) {
       break;
      } else {
       $$0$i$i$i$i = $142;
      }
     } else {
      $145 = HEAP32[$135>>2]|0;
      $$0$i$i$i$i = $145;
     }
     $146 = ($$0$i$i$i$i|0)==(-1);
     if ($146) {
      HEAP32[$__b>>2] = 0;
      $163 = 0;$166 = 1;
     } else {
      $163 = $84;$166 = 0;
     }
    }
    $147 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($147) {
      label = 67;
     } else {
      $148 = (($$pre$i3$i$i) + 12|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = (($$pre$i3$i$i) + 16|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = ($149|0)==($151|0);
      if ($152) {
       $153 = HEAP32[$$pre$i3$i$i>>2]|0;
       $154 = (($153) + 36|0);
       $155 = HEAP32[$154>>2]|0;
       __THREW__ = 0;
       $156 = (invoke_ii($155|0,($$pre$i3$i$i|0))|0);
       $157 = __THREW__; __THREW__ = 0;
       $158 = $157&1;
       if ($158) {
        break L6;
       } else {
        $$0$i$i1$i$i = $156;
       }
      } else {
       $159 = HEAP32[$149>>2]|0;
       $$0$i$i1$i$i = $159;
      }
      $160 = ($$0$i$i1$i$i|0)==(-1);
      if ($160) {
       HEAP32[$__e>>2] = 0;
       label = 67;
       break;
      }
      if ($166) {
       HEAP32[$agg$result>>2] = $163;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 67) {
     if (!($166)) {
      HEAP32[$agg$result>>2] = $163;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $161 = HEAP32[$__err>>2]|0;
    $162 = $161 | 2;
    HEAP32[$__err>>2] = $162;
    HEAP32[$agg$result>>2] = $163;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 200|0;
 $__thousands_sep = sp;
 $__grouping = sp + 4|0;
 $__buf = sp + 16|0;
 $__a_end = sp + 28|0;
 $__g = sp + 32|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 196|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(8,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $10;$$pre$phi36Z2D = $$pre35;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i5|0)==(0|0);
    if ($14) {
     $159 = 1;$84 = 0;
    } else {
     $15 = (($$pre$i$i$i5) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 38;
       break;
      } else {
       $$0$i$i$i$i3 = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i3 = $26;
     }
     $27 = ($$0$i$i$i$i3|0)==(-1);
     if ($27) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;$84 = 0;
     } else {
      $159 = 0;$84 = $$pre$i$i$i5;
     }
    }
    $28 = HEAP32[$__e>>2]|0;
    $29 = ($28|0)==(0|0);
    do {
     if ($29) {
      label = 22;
     } else {
      $30 = (($28) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($28) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if ($34) {
       $35 = HEAP32[$28>>2]|0;
       $36 = (($35) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       __THREW__ = 0;
       $38 = (invoke_ii($37|0,($28|0))|0);
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $38;
       }
      } else {
       $41 = HEAP32[$31>>2]|0;
       $$0$i$i1$i$i9 = $41;
      }
      $42 = ($$0$i$i1$i$i9|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 22;
       break;
      } else {
       if ($159) {
        $160 = $28;
        break;
       } else {
        $$pre$i3$i$i = $28;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     if ($159) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 38;
      break;
     }
     $64 = HEAP8[$__buf]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 38;
      break;
     }
     $72 = HEAP8[$__buf]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi34Z2D;
     } else {
      $75 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($84) + 12|0);
    $85 = HEAP32[$83>>2]|0;
    $86 = (($84) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($85|0)==($87|0);
    if ($88) {
     $89 = HEAP32[$84>>2]|0;
     $90 = (($89) + 36|0);
     $91 = HEAP32[$90>>2]|0;
     __THREW__ = 0;
     $92 = (invoke_ii($91|0,($84|0))|0);
     $93 = __THREW__; __THREW__ = 0;
     $94 = $93&1;
     if ($94) {
      label = 38;
      break;
     } else {
      $$0$i$i = $92;
     }
    } else {
     $95 = HEAP32[$85>>2]|0;
     $$0$i$i = $95;
    }
    $96 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $97 = ($96|0)==(0);
    if (!($97)) {
     $$pre$i3$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $98 = HEAP32[$83>>2]|0;
    $99 = HEAP32[$86>>2]|0;
    $100 = ($98|0)==($99|0);
    if ($100) {
     $101 = HEAP32[$84>>2]|0;
     $102 = (($101) + 40|0);
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     (invoke_ii($103|0,($84|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $106 = (($98) + 4|0);
     HEAP32[$83>>2] = $106;
     $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $107 = HEAP8[$__grouping]|0;
   $108 = $107 & 1;
   $109 = ($108<<24>>24)==(0);
   if ($109) {
    $112 = $107&255;
    $113 = $112 >>> 1;
    $115 = $113;
   } else {
    $110 = (($__grouping) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    $115 = $111;
   }
   $114 = ($115|0)==(0);
   if (!($114)) {
    $116 = HEAP32[$__g_end>>2]|0;
    $117 = $116;
    $118 = $__g;
    $119 = (($117) - ($118))|0;
    $120 = ($119|0)<(160);
    if ($120) {
     $121 = HEAP32[$__dc>>2]|0;
     $122 = (($116) + 4|0);
     HEAP32[$__g_end>>2] = $122;
     HEAP32[$116>>2] = $121;
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (invoke_iiiii(8,($__a$2|0),($123|0),($__err|0),($$0$i|0))|0);
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if (!($126)) {
    HEAP16[$__v>>1] = $124;
    $127 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$127,$__err);
    $128 = ($84|0)==(0|0);
    if ($128) {
     $158 = 0;$161 = 1;
    } else {
     $129 = (($84) + 12|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($84) + 16|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($130|0)==($132|0);
     if ($133) {
      $134 = HEAP32[$84>>2]|0;
      $135 = (($134) + 36|0);
      $136 = HEAP32[$135>>2]|0;
      __THREW__ = 0;
      $137 = (invoke_ii($136|0,($84|0))|0);
      $138 = __THREW__; __THREW__ = 0;
      $139 = $138&1;
      if ($139) {
       break;
      } else {
       $$0$i$i$i$i = $137;
      }
     } else {
      $140 = HEAP32[$130>>2]|0;
      $$0$i$i$i$i = $140;
     }
     $141 = ($$0$i$i$i$i|0)==(-1);
     if ($141) {
      HEAP32[$__b>>2] = 0;
      $158 = 0;$161 = 1;
     } else {
      $158 = $84;$161 = 0;
     }
    }
    $142 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 67;
     } else {
      $143 = (($$pre$i3$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i3$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i3$i$i>>2]|0;
       $149 = (($148) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i3$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break L6;
       } else {
        $$0$i$i1$i$i = $151;
       }
      } else {
       $154 = HEAP32[$144>>2]|0;
       $$0$i$i1$i$i = $154;
      }
      $155 = ($$0$i$i1$i$i|0)==(-1);
      if ($155) {
       HEAP32[$__e>>2] = 0;
       label = 67;
       break;
      }
      if ($161) {
       HEAP32[$agg$result>>2] = $158;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 67) {
     if (!($161)) {
      HEAP32[$agg$result>>2] = $158;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $158;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 200|0;
 $__thousands_sep = sp;
 $__grouping = sp + 4|0;
 $__buf = sp + 16|0;
 $__a_end = sp + 28|0;
 $__g = sp + 32|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 196|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(8,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $10;$$pre$phi36Z2D = $$pre35;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i5|0)==(0|0);
    if ($14) {
     $159 = 1;$84 = 0;
    } else {
     $15 = (($$pre$i$i$i5) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 38;
       break;
      } else {
       $$0$i$i$i$i3 = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i3 = $26;
     }
     $27 = ($$0$i$i$i$i3|0)==(-1);
     if ($27) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;$84 = 0;
     } else {
      $159 = 0;$84 = $$pre$i$i$i5;
     }
    }
    $28 = HEAP32[$__e>>2]|0;
    $29 = ($28|0)==(0|0);
    do {
     if ($29) {
      label = 22;
     } else {
      $30 = (($28) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($28) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if ($34) {
       $35 = HEAP32[$28>>2]|0;
       $36 = (($35) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       __THREW__ = 0;
       $38 = (invoke_ii($37|0,($28|0))|0);
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $38;
       }
      } else {
       $41 = HEAP32[$31>>2]|0;
       $$0$i$i1$i$i9 = $41;
      }
      $42 = ($$0$i$i1$i$i9|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 22;
       break;
      } else {
       if ($159) {
        $160 = $28;
        break;
       } else {
        $$pre$i3$i$i = $28;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     if ($159) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 38;
      break;
     }
     $64 = HEAP8[$__buf]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 38;
      break;
     }
     $72 = HEAP8[$__buf]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi34Z2D;
     } else {
      $75 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($84) + 12|0);
    $85 = HEAP32[$83>>2]|0;
    $86 = (($84) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($85|0)==($87|0);
    if ($88) {
     $89 = HEAP32[$84>>2]|0;
     $90 = (($89) + 36|0);
     $91 = HEAP32[$90>>2]|0;
     __THREW__ = 0;
     $92 = (invoke_ii($91|0,($84|0))|0);
     $93 = __THREW__; __THREW__ = 0;
     $94 = $93&1;
     if ($94) {
      label = 38;
      break;
     } else {
      $$0$i$i = $92;
     }
    } else {
     $95 = HEAP32[$85>>2]|0;
     $$0$i$i = $95;
    }
    $96 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $97 = ($96|0)==(0);
    if (!($97)) {
     $$pre$i3$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $98 = HEAP32[$83>>2]|0;
    $99 = HEAP32[$86>>2]|0;
    $100 = ($98|0)==($99|0);
    if ($100) {
     $101 = HEAP32[$84>>2]|0;
     $102 = (($101) + 40|0);
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     (invoke_ii($103|0,($84|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $106 = (($98) + 4|0);
     HEAP32[$83>>2] = $106;
     $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $107 = HEAP8[$__grouping]|0;
   $108 = $107 & 1;
   $109 = ($108<<24>>24)==(0);
   if ($109) {
    $112 = $107&255;
    $113 = $112 >>> 1;
    $115 = $113;
   } else {
    $110 = (($__grouping) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    $115 = $111;
   }
   $114 = ($115|0)==(0);
   if (!($114)) {
    $116 = HEAP32[$__g_end>>2]|0;
    $117 = $116;
    $118 = $__g;
    $119 = (($117) - ($118))|0;
    $120 = ($119|0)<(160);
    if ($120) {
     $121 = HEAP32[$__dc>>2]|0;
     $122 = (($116) + 4|0);
     HEAP32[$__g_end>>2] = $122;
     HEAP32[$116>>2] = $121;
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (invoke_iiiii(9,($__a$2|0),($123|0),($__err|0),($$0$i|0))|0);
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if (!($126)) {
    HEAP32[$__v>>2] = $124;
    $127 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$127,$__err);
    $128 = ($84|0)==(0|0);
    if ($128) {
     $158 = 0;$161 = 1;
    } else {
     $129 = (($84) + 12|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($84) + 16|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($130|0)==($132|0);
     if ($133) {
      $134 = HEAP32[$84>>2]|0;
      $135 = (($134) + 36|0);
      $136 = HEAP32[$135>>2]|0;
      __THREW__ = 0;
      $137 = (invoke_ii($136|0,($84|0))|0);
      $138 = __THREW__; __THREW__ = 0;
      $139 = $138&1;
      if ($139) {
       break;
      } else {
       $$0$i$i$i$i = $137;
      }
     } else {
      $140 = HEAP32[$130>>2]|0;
      $$0$i$i$i$i = $140;
     }
     $141 = ($$0$i$i$i$i|0)==(-1);
     if ($141) {
      HEAP32[$__b>>2] = 0;
      $158 = 0;$161 = 1;
     } else {
      $158 = $84;$161 = 0;
     }
    }
    $142 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 67;
     } else {
      $143 = (($$pre$i3$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i3$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i3$i$i>>2]|0;
       $149 = (($148) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i3$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break L6;
       } else {
        $$0$i$i1$i$i = $151;
       }
      } else {
       $154 = HEAP32[$144>>2]|0;
       $$0$i$i1$i$i = $154;
      }
      $155 = ($$0$i$i1$i$i|0)==(-1);
      if ($155) {
       HEAP32[$__e>>2] = 0;
       label = 67;
       break;
      }
      if ($161) {
       HEAP32[$agg$result>>2] = $158;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 67) {
     if (!($161)) {
      HEAP32[$agg$result>>2] = $158;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $158;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 200|0;
 $__thousands_sep = sp;
 $__grouping = sp + 4|0;
 $__buf = sp + 16|0;
 $__a_end = sp + 28|0;
 $__g = sp + 32|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 196|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(8,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $10;$$pre$phi36Z2D = $$pre35;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i5|0)==(0|0);
    if ($14) {
     $159 = 1;$84 = 0;
    } else {
     $15 = (($$pre$i$i$i5) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 38;
       break;
      } else {
       $$0$i$i$i$i3 = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i3 = $26;
     }
     $27 = ($$0$i$i$i$i3|0)==(-1);
     if ($27) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;$84 = 0;
     } else {
      $159 = 0;$84 = $$pre$i$i$i5;
     }
    }
    $28 = HEAP32[$__e>>2]|0;
    $29 = ($28|0)==(0|0);
    do {
     if ($29) {
      label = 22;
     } else {
      $30 = (($28) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($28) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if ($34) {
       $35 = HEAP32[$28>>2]|0;
       $36 = (($35) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       __THREW__ = 0;
       $38 = (invoke_ii($37|0,($28|0))|0);
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $38;
       }
      } else {
       $41 = HEAP32[$31>>2]|0;
       $$0$i$i1$i$i9 = $41;
      }
      $42 = ($$0$i$i1$i$i9|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 22;
       break;
      } else {
       if ($159) {
        $160 = $28;
        break;
       } else {
        $$pre$i3$i$i = $28;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     if ($159) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 38;
      break;
     }
     $64 = HEAP8[$__buf]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 38;
      break;
     }
     $72 = HEAP8[$__buf]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi34Z2D;
     } else {
      $75 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($84) + 12|0);
    $85 = HEAP32[$83>>2]|0;
    $86 = (($84) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($85|0)==($87|0);
    if ($88) {
     $89 = HEAP32[$84>>2]|0;
     $90 = (($89) + 36|0);
     $91 = HEAP32[$90>>2]|0;
     __THREW__ = 0;
     $92 = (invoke_ii($91|0,($84|0))|0);
     $93 = __THREW__; __THREW__ = 0;
     $94 = $93&1;
     if ($94) {
      label = 38;
      break;
     } else {
      $$0$i$i = $92;
     }
    } else {
     $95 = HEAP32[$85>>2]|0;
     $$0$i$i = $95;
    }
    $96 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $97 = ($96|0)==(0);
    if (!($97)) {
     $$pre$i3$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $98 = HEAP32[$83>>2]|0;
    $99 = HEAP32[$86>>2]|0;
    $100 = ($98|0)==($99|0);
    if ($100) {
     $101 = HEAP32[$84>>2]|0;
     $102 = (($101) + 40|0);
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     (invoke_ii($103|0,($84|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $106 = (($98) + 4|0);
     HEAP32[$83>>2] = $106;
     $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $107 = HEAP8[$__grouping]|0;
   $108 = $107 & 1;
   $109 = ($108<<24>>24)==(0);
   if ($109) {
    $112 = $107&255;
    $113 = $112 >>> 1;
    $115 = $113;
   } else {
    $110 = (($__grouping) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    $115 = $111;
   }
   $114 = ($115|0)==(0);
   if (!($114)) {
    $116 = HEAP32[$__g_end>>2]|0;
    $117 = $116;
    $118 = $__g;
    $119 = (($117) - ($118))|0;
    $120 = ($119|0)<(160);
    if ($120) {
     $121 = HEAP32[$__dc>>2]|0;
     $122 = (($116) + 4|0);
     HEAP32[$__g_end>>2] = $122;
     HEAP32[$116>>2] = $121;
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (invoke_iiiii(10,($__a$2|0),($123|0),($__err|0),($$0$i|0))|0);
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if (!($126)) {
    HEAP32[$__v>>2] = $124;
    $127 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$127,$__err);
    $128 = ($84|0)==(0|0);
    if ($128) {
     $158 = 0;$161 = 1;
    } else {
     $129 = (($84) + 12|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($84) + 16|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($130|0)==($132|0);
     if ($133) {
      $134 = HEAP32[$84>>2]|0;
      $135 = (($134) + 36|0);
      $136 = HEAP32[$135>>2]|0;
      __THREW__ = 0;
      $137 = (invoke_ii($136|0,($84|0))|0);
      $138 = __THREW__; __THREW__ = 0;
      $139 = $138&1;
      if ($139) {
       break;
      } else {
       $$0$i$i$i$i = $137;
      }
     } else {
      $140 = HEAP32[$130>>2]|0;
      $$0$i$i$i$i = $140;
     }
     $141 = ($$0$i$i$i$i|0)==(-1);
     if ($141) {
      HEAP32[$__b>>2] = 0;
      $158 = 0;$161 = 1;
     } else {
      $158 = $84;$161 = 0;
     }
    }
    $142 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 67;
     } else {
      $143 = (($$pre$i3$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i3$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i3$i$i>>2]|0;
       $149 = (($148) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i3$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break L6;
       } else {
        $$0$i$i1$i$i = $151;
       }
      } else {
       $154 = HEAP32[$144>>2]|0;
       $$0$i$i1$i$i = $154;
      }
      $155 = ($$0$i$i1$i$i|0)==(-1);
      if ($155) {
       HEAP32[$__e>>2] = 0;
       label = 67;
       break;
      }
      if ($161) {
       HEAP32[$agg$result>>2] = $158;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 67) {
     if (!($161)) {
      HEAP32[$agg$result>>2] = $158;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $158;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 200|0;
 $__thousands_sep = sp;
 $__grouping = sp + 4|0;
 $__buf = sp + 16|0;
 $__a_end = sp + 28|0;
 $__g = sp + 32|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 196|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(8,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $10;$$pre$phi36Z2D = $$pre35;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i5|0)==(0|0);
    if ($14) {
     $164 = 1;$84 = 0;
    } else {
     $15 = (($$pre$i$i$i5) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 38;
       break;
      } else {
       $$0$i$i$i$i3 = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i3 = $26;
     }
     $27 = ($$0$i$i$i$i3|0)==(-1);
     if ($27) {
      HEAP32[$__b>>2] = 0;
      $164 = 1;$84 = 0;
     } else {
      $164 = 0;$84 = $$pre$i$i$i5;
     }
    }
    $28 = HEAP32[$__e>>2]|0;
    $29 = ($28|0)==(0|0);
    do {
     if ($29) {
      label = 22;
     } else {
      $30 = (($28) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($28) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if ($34) {
       $35 = HEAP32[$28>>2]|0;
       $36 = (($35) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       __THREW__ = 0;
       $38 = (invoke_ii($37|0,($28|0))|0);
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $38;
       }
      } else {
       $41 = HEAP32[$31>>2]|0;
       $$0$i$i1$i$i9 = $41;
      }
      $42 = ($$0$i$i1$i$i9|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 22;
       break;
      } else {
       if ($164) {
        $165 = $28;
        break;
       } else {
        $$pre$i3$i$i = $28;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     if ($164) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $165 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 38;
      break;
     }
     $64 = HEAP8[$__buf]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 38;
      break;
     }
     $72 = HEAP8[$__buf]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi34Z2D;
     } else {
      $75 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($84) + 12|0);
    $85 = HEAP32[$83>>2]|0;
    $86 = (($84) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($85|0)==($87|0);
    if ($88) {
     $89 = HEAP32[$84>>2]|0;
     $90 = (($89) + 36|0);
     $91 = HEAP32[$90>>2]|0;
     __THREW__ = 0;
     $92 = (invoke_ii($91|0,($84|0))|0);
     $93 = __THREW__; __THREW__ = 0;
     $94 = $93&1;
     if ($94) {
      label = 38;
      break;
     } else {
      $$0$i$i = $92;
     }
    } else {
     $95 = HEAP32[$85>>2]|0;
     $$0$i$i = $95;
    }
    $96 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $97 = ($96|0)==(0);
    if (!($97)) {
     $$pre$i3$i$i = $165;$__a$2 = $__a$1;
     break;
    }
    $98 = HEAP32[$83>>2]|0;
    $99 = HEAP32[$86>>2]|0;
    $100 = ($98|0)==($99|0);
    if ($100) {
     $101 = HEAP32[$84>>2]|0;
     $102 = (($101) + 40|0);
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     (invoke_ii($103|0,($84|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $106 = (($98) + 4|0);
     HEAP32[$83>>2] = $106;
     $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $107 = HEAP8[$__grouping]|0;
   $108 = $107 & 1;
   $109 = ($108<<24>>24)==(0);
   if ($109) {
    $112 = $107&255;
    $113 = $112 >>> 1;
    $115 = $113;
   } else {
    $110 = (($__grouping) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    $115 = $111;
   }
   $114 = ($115|0)==(0);
   if (!($114)) {
    $116 = HEAP32[$__g_end>>2]|0;
    $117 = $116;
    $118 = $__g;
    $119 = (($117) - ($118))|0;
    $120 = ($119|0)<(160);
    if ($120) {
     $121 = HEAP32[$__dc>>2]|0;
     $122 = (($116) + 4|0);
     HEAP32[$__g_end>>2] = $122;
     HEAP32[$116>>2] = $121;
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (invoke_iiiii(11,($__a$2|0),($123|0),($__err|0),($$0$i|0))|0);
   $125 = tempRet0;
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    $128 = $__v;
    $129 = $128;
    HEAP32[$129>>2] = $124;
    $130 = (($128) + 4)|0;
    $131 = $130;
    HEAP32[$131>>2] = $125;
    $132 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$132,$__err);
    $133 = ($84|0)==(0|0);
    if ($133) {
     $163 = 0;$166 = 1;
    } else {
     $134 = (($84) + 12|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = (($84) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($135|0)==($137|0);
     if ($138) {
      $139 = HEAP32[$84>>2]|0;
      $140 = (($139) + 36|0);
      $141 = HEAP32[$140>>2]|0;
      __THREW__ = 0;
      $142 = (invoke_ii($141|0,($84|0))|0);
      $143 = __THREW__; __THREW__ = 0;
      $144 = $143&1;
      if ($144) {
       break;
      } else {
       $$0$i$i$i$i = $142;
      }
     } else {
      $145 = HEAP32[$135>>2]|0;
      $$0$i$i$i$i = $145;
     }
     $146 = ($$0$i$i$i$i|0)==(-1);
     if ($146) {
      HEAP32[$__b>>2] = 0;
      $163 = 0;$166 = 1;
     } else {
      $163 = $84;$166 = 0;
     }
    }
    $147 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($147) {
      label = 67;
     } else {
      $148 = (($$pre$i3$i$i) + 12|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = (($$pre$i3$i$i) + 16|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = ($149|0)==($151|0);
      if ($152) {
       $153 = HEAP32[$$pre$i3$i$i>>2]|0;
       $154 = (($153) + 36|0);
       $155 = HEAP32[$154>>2]|0;
       __THREW__ = 0;
       $156 = (invoke_ii($155|0,($$pre$i3$i$i|0))|0);
       $157 = __THREW__; __THREW__ = 0;
       $158 = $157&1;
       if ($158) {
        break L6;
       } else {
        $$0$i$i1$i$i = $156;
       }
      } else {
       $159 = HEAP32[$149>>2]|0;
       $$0$i$i1$i$i = $159;
      }
      $160 = ($$0$i$i1$i$i|0)==(-1);
      if ($160) {
       HEAP32[$__e>>2] = 0;
       label = 67;
       break;
      }
      if ($166) {
       HEAP32[$agg$result>>2] = $163;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 67) {
     if (!($166)) {
      HEAP32[$agg$result>>2] = $163;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $161 = HEAP32[$__err>>2]|0;
    $162 = $161 | 2;
    HEAP32[$__err>>2] = $162;
    HEAP32[$agg$result>>2] = $163;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre34 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0;
 var $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $__atoms = sp + 176|0;
 $__decimal_point = sp + 332|0;
 $__thousands_sep = sp + 328|0;
 $__grouping = sp + 316|0;
 $__buf = sp + 304|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(8,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre36 = (($__buf) + 8|0);
    $$pre$phi35Z2D = $7;$$pre$phi37Z2D = $$pre36;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre34 = (($__buf) + 1|0);
    $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units] = 1;
   HEAP8[$__exp] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $159 = 1;$82 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;$82 = 0;
     } else {
      $159 = 0;$82 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($159) {
        $160 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($159) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = $41;
    $43 = $__a$0;
    $44 = (($42) - ($43))|0;
    $45 = HEAP8[$__buf]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$9>>2]|0;
     $52 = $48;
    }
    $51 = ($44|0)==($52|0);
    if ($51) {
     if ($47) {
      $54 = $45&255;
      $55 = $54 >>> 1;
      $56 = $45&255;
      $57 = $56 >>> 1;
      $59 = $57;$76 = $55;
     } else {
      $53 = HEAP32[$9>>2]|0;
      $59 = $53;$76 = $53;
     }
     $58 = $59 << 1;
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($58|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 34;
      break;
     }
     $62 = HEAP8[$__buf]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 34;
      break;
     }
     $70 = HEAP8[$__buf]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     if ($72) {
      $75 = $$pre$phi35Z2D;
     } else {
      $73 = HEAP32[$$pre$phi37Z2D>>2]|0;
      $75 = $73;
     }
     $74 = (($75) + ($76)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = (($82) + 12|0);
    $83 = HEAP32[$81>>2]|0;
    $84 = (($82) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($83|0)==($85|0);
    if ($86) {
     $87 = HEAP32[$82>>2]|0;
     $88 = (($87) + 36|0);
     $89 = HEAP32[$88>>2]|0;
     __THREW__ = 0;
     $90 = (invoke_ii($89|0,($82|0))|0);
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      label = 34;
      break;
     } else {
      $$0$i$i = $90;
     }
    } else {
     $93 = HEAP32[$83>>2]|0;
     $$0$i$i = $93;
    }
    $94 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $95 = ($94|0)==(0);
    if (!($95)) {
     $$pre$i3$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $96 = HEAP32[$81>>2]|0;
    $97 = HEAP32[$84>>2]|0;
    $98 = ($96|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$82>>2]|0;
     $100 = (($99) + 40|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     (invoke_ii($101|0,($82|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $82;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $104 = (($96) + 4|0);
     HEAP32[$81>>2] = $104;
     $$pre$i$i$i5 = $82;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $105 = HEAP8[$__grouping]|0;
   $106 = $105 & 1;
   $107 = ($106<<24>>24)==(0);
   if ($107) {
    $110 = $105&255;
    $111 = $110 >>> 1;
    $113 = $111;
   } else {
    $108 = (($__grouping) + 4|0);
    $109 = HEAP32[$108>>2]|0;
    $113 = $109;
   }
   $112 = ($113|0)==(0);
   if (!($112)) {
    $114 = HEAP8[$__in_units]|0;
    $115 = ($114<<24>>24)==(0);
    if (!($115)) {
     $116 = HEAP32[$__g_end>>2]|0;
     $117 = $116;
     $118 = $__g;
     $119 = (($117) - ($118))|0;
     $120 = ($119|0)<(160);
     if ($120) {
      $121 = HEAP32[$__dc>>2]|0;
      $122 = (($116) + 4|0);
      HEAP32[$__g_end>>2] = $122;
      HEAP32[$116>>2] = $121;
     }
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (+invoke_diii(1,($__a$2|0),($123|0),($__err|0)));
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if (!($126)) {
    HEAPF32[$__v>>2] = $124;
    $127 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$127,$__err);
    $128 = ($82|0)==(0|0);
    if ($128) {
     $158 = 0;$161 = 1;
    } else {
     $129 = (($82) + 12|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($82) + 16|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($130|0)==($132|0);
     if ($133) {
      $134 = HEAP32[$82>>2]|0;
      $135 = (($134) + 36|0);
      $136 = HEAP32[$135>>2]|0;
      __THREW__ = 0;
      $137 = (invoke_ii($136|0,($82|0))|0);
      $138 = __THREW__; __THREW__ = 0;
      $139 = $138&1;
      if ($139) {
       break;
      } else {
       $$0$i$i$i$i = $137;
      }
     } else {
      $140 = HEAP32[$130>>2]|0;
      $$0$i$i$i$i = $140;
     }
     $141 = ($$0$i$i$i$i|0)==(-1);
     if ($141) {
      HEAP32[$__b>>2] = 0;
      $158 = 0;$161 = 1;
     } else {
      $158 = $82;$161 = 0;
     }
    }
    $142 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 64;
     } else {
      $143 = (($$pre$i3$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i3$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i3$i$i>>2]|0;
       $149 = (($148) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i3$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break L1;
       } else {
        $$0$i$i1$i$i = $151;
       }
      } else {
       $154 = HEAP32[$144>>2]|0;
       $$0$i$i1$i$i = $154;
      }
      $155 = ($$0$i$i1$i$i|0)==(-1);
      if ($155) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      }
      if ($161) {
       HEAP32[$agg$result>>2] = $158;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if (!($161)) {
      HEAP32[$agg$result>>2] = $158;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $158;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $79 = ___cxa_find_matching_catch(-1,-1)|0;
 $80 = tempRet0;
 $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre34 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0;
 var $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $__atoms = sp + 176|0;
 $__decimal_point = sp + 332|0;
 $__thousands_sep = sp + 328|0;
 $__grouping = sp + 316|0;
 $__buf = sp + 304|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(8,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre36 = (($__buf) + 8|0);
    $$pre$phi35Z2D = $7;$$pre$phi37Z2D = $$pre36;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre34 = (($__buf) + 1|0);
    $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units] = 1;
   HEAP8[$__exp] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $159 = 1;$82 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;$82 = 0;
     } else {
      $159 = 0;$82 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($159) {
        $160 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($159) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = $41;
    $43 = $__a$0;
    $44 = (($42) - ($43))|0;
    $45 = HEAP8[$__buf]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$9>>2]|0;
     $52 = $48;
    }
    $51 = ($44|0)==($52|0);
    if ($51) {
     if ($47) {
      $54 = $45&255;
      $55 = $54 >>> 1;
      $56 = $45&255;
      $57 = $56 >>> 1;
      $59 = $57;$76 = $55;
     } else {
      $53 = HEAP32[$9>>2]|0;
      $59 = $53;$76 = $53;
     }
     $58 = $59 << 1;
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($58|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 34;
      break;
     }
     $62 = HEAP8[$__buf]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 34;
      break;
     }
     $70 = HEAP8[$__buf]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     if ($72) {
      $75 = $$pre$phi35Z2D;
     } else {
      $73 = HEAP32[$$pre$phi37Z2D>>2]|0;
      $75 = $73;
     }
     $74 = (($75) + ($76)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = (($82) + 12|0);
    $83 = HEAP32[$81>>2]|0;
    $84 = (($82) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($83|0)==($85|0);
    if ($86) {
     $87 = HEAP32[$82>>2]|0;
     $88 = (($87) + 36|0);
     $89 = HEAP32[$88>>2]|0;
     __THREW__ = 0;
     $90 = (invoke_ii($89|0,($82|0))|0);
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      label = 34;
      break;
     } else {
      $$0$i$i = $90;
     }
    } else {
     $93 = HEAP32[$83>>2]|0;
     $$0$i$i = $93;
    }
    $94 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $95 = ($94|0)==(0);
    if (!($95)) {
     $$pre$i3$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $96 = HEAP32[$81>>2]|0;
    $97 = HEAP32[$84>>2]|0;
    $98 = ($96|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$82>>2]|0;
     $100 = (($99) + 40|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     (invoke_ii($101|0,($82|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $82;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $104 = (($96) + 4|0);
     HEAP32[$81>>2] = $104;
     $$pre$i$i$i5 = $82;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $105 = HEAP8[$__grouping]|0;
   $106 = $105 & 1;
   $107 = ($106<<24>>24)==(0);
   if ($107) {
    $110 = $105&255;
    $111 = $110 >>> 1;
    $113 = $111;
   } else {
    $108 = (($__grouping) + 4|0);
    $109 = HEAP32[$108>>2]|0;
    $113 = $109;
   }
   $112 = ($113|0)==(0);
   if (!($112)) {
    $114 = HEAP8[$__in_units]|0;
    $115 = ($114<<24>>24)==(0);
    if (!($115)) {
     $116 = HEAP32[$__g_end>>2]|0;
     $117 = $116;
     $118 = $__g;
     $119 = (($117) - ($118))|0;
     $120 = ($119|0)<(160);
     if ($120) {
      $121 = HEAP32[$__dc>>2]|0;
      $122 = (($116) + 4|0);
      HEAP32[$__g_end>>2] = $122;
      HEAP32[$116>>2] = $121;
     }
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (+invoke_diii(2,($__a$2|0),($123|0),($__err|0)));
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if (!($126)) {
    HEAPF64[$__v>>3] = $124;
    $127 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$127,$__err);
    $128 = ($82|0)==(0|0);
    if ($128) {
     $158 = 0;$161 = 1;
    } else {
     $129 = (($82) + 12|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($82) + 16|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($130|0)==($132|0);
     if ($133) {
      $134 = HEAP32[$82>>2]|0;
      $135 = (($134) + 36|0);
      $136 = HEAP32[$135>>2]|0;
      __THREW__ = 0;
      $137 = (invoke_ii($136|0,($82|0))|0);
      $138 = __THREW__; __THREW__ = 0;
      $139 = $138&1;
      if ($139) {
       break;
      } else {
       $$0$i$i$i$i = $137;
      }
     } else {
      $140 = HEAP32[$130>>2]|0;
      $$0$i$i$i$i = $140;
     }
     $141 = ($$0$i$i$i$i|0)==(-1);
     if ($141) {
      HEAP32[$__b>>2] = 0;
      $158 = 0;$161 = 1;
     } else {
      $158 = $82;$161 = 0;
     }
    }
    $142 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 64;
     } else {
      $143 = (($$pre$i3$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i3$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i3$i$i>>2]|0;
       $149 = (($148) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i3$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break L1;
       } else {
        $$0$i$i1$i$i = $151;
       }
      } else {
       $154 = HEAP32[$144>>2]|0;
       $$0$i$i1$i$i = $154;
      }
      $155 = ($$0$i$i1$i$i|0)==(-1);
      if ($155) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      }
      if ($161) {
       HEAP32[$agg$result>>2] = $158;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if (!($161)) {
      HEAP32[$agg$result>>2] = $158;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $158;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $79 = ___cxa_find_matching_catch(-1,-1)|0;
 $80 = tempRet0;
 $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre34 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0;
 var $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $__atoms = sp + 176|0;
 $__decimal_point = sp + 332|0;
 $__thousands_sep = sp + 328|0;
 $__grouping = sp + 316|0;
 $__buf = sp + 304|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(8,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre36 = (($__buf) + 8|0);
    $$pre$phi35Z2D = $7;$$pre$phi37Z2D = $$pre36;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre34 = (($__buf) + 1|0);
    $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units] = 1;
   HEAP8[$__exp] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $159 = 1;$82 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;$82 = 0;
     } else {
      $159 = 0;$82 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($159) {
        $160 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($159) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = $41;
    $43 = $__a$0;
    $44 = (($42) - ($43))|0;
    $45 = HEAP8[$__buf]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$9>>2]|0;
     $52 = $48;
    }
    $51 = ($44|0)==($52|0);
    if ($51) {
     if ($47) {
      $54 = $45&255;
      $55 = $54 >>> 1;
      $56 = $45&255;
      $57 = $56 >>> 1;
      $59 = $57;$76 = $55;
     } else {
      $53 = HEAP32[$9>>2]|0;
      $59 = $53;$76 = $53;
     }
     $58 = $59 << 1;
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($58|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 34;
      break;
     }
     $62 = HEAP8[$__buf]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 34;
      break;
     }
     $70 = HEAP8[$__buf]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     if ($72) {
      $75 = $$pre$phi35Z2D;
     } else {
      $73 = HEAP32[$$pre$phi37Z2D>>2]|0;
      $75 = $73;
     }
     $74 = (($75) + ($76)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = (($82) + 12|0);
    $83 = HEAP32[$81>>2]|0;
    $84 = (($82) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($83|0)==($85|0);
    if ($86) {
     $87 = HEAP32[$82>>2]|0;
     $88 = (($87) + 36|0);
     $89 = HEAP32[$88>>2]|0;
     __THREW__ = 0;
     $90 = (invoke_ii($89|0,($82|0))|0);
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      label = 34;
      break;
     } else {
      $$0$i$i = $90;
     }
    } else {
     $93 = HEAP32[$83>>2]|0;
     $$0$i$i = $93;
    }
    $94 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $95 = ($94|0)==(0);
    if (!($95)) {
     $$pre$i3$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $96 = HEAP32[$81>>2]|0;
    $97 = HEAP32[$84>>2]|0;
    $98 = ($96|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$82>>2]|0;
     $100 = (($99) + 40|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     (invoke_ii($101|0,($82|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $82;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $104 = (($96) + 4|0);
     HEAP32[$81>>2] = $104;
     $$pre$i$i$i5 = $82;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $105 = HEAP8[$__grouping]|0;
   $106 = $105 & 1;
   $107 = ($106<<24>>24)==(0);
   if ($107) {
    $110 = $105&255;
    $111 = $110 >>> 1;
    $113 = $111;
   } else {
    $108 = (($__grouping) + 4|0);
    $109 = HEAP32[$108>>2]|0;
    $113 = $109;
   }
   $112 = ($113|0)==(0);
   if (!($112)) {
    $114 = HEAP8[$__in_units]|0;
    $115 = ($114<<24>>24)==(0);
    if (!($115)) {
     $116 = HEAP32[$__g_end>>2]|0;
     $117 = $116;
     $118 = $__g;
     $119 = (($117) - ($118))|0;
     $120 = ($119|0)<(160);
     if ($120) {
      $121 = HEAP32[$__dc>>2]|0;
      $122 = (($116) + 4|0);
      HEAP32[$__g_end>>2] = $122;
      HEAP32[$116>>2] = $121;
     }
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (+invoke_diii(3,($__a$2|0),($123|0),($__err|0)));
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if (!($126)) {
    HEAPF64[$__v>>3] = $124;
    $127 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$127,$__err);
    $128 = ($82|0)==(0|0);
    if ($128) {
     $158 = 0;$161 = 1;
    } else {
     $129 = (($82) + 12|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($82) + 16|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($130|0)==($132|0);
     if ($133) {
      $134 = HEAP32[$82>>2]|0;
      $135 = (($134) + 36|0);
      $136 = HEAP32[$135>>2]|0;
      __THREW__ = 0;
      $137 = (invoke_ii($136|0,($82|0))|0);
      $138 = __THREW__; __THREW__ = 0;
      $139 = $138&1;
      if ($139) {
       break;
      } else {
       $$0$i$i$i$i = $137;
      }
     } else {
      $140 = HEAP32[$130>>2]|0;
      $$0$i$i$i$i = $140;
     }
     $141 = ($$0$i$i$i$i|0)==(-1);
     if ($141) {
      HEAP32[$__b>>2] = 0;
      $158 = 0;$161 = 1;
     } else {
      $158 = $82;$161 = 0;
     }
    }
    $142 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 64;
     } else {
      $143 = (($$pre$i3$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i3$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i3$i$i>>2]|0;
       $149 = (($148) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i3$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break L1;
       } else {
        $$0$i$i1$i$i = $151;
       }
      } else {
       $154 = HEAP32[$144>>2]|0;
       $$0$i$i1$i$i = $154;
      }
      $155 = ($$0$i$i1$i$i|0)==(-1);
      if ($155) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      }
      if ($161) {
       HEAP32[$agg$result>>2] = $158;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if (!($161)) {
      HEAP32[$agg$result>>2] = $158;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $158;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $79 = ___cxa_find_matching_catch(-1,-1)|0;
 $80 = tempRet0;
 $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i8 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i14 = 0, $$0$lcssa$i$i = 0, $$01 = 0, $$01$i$i = 0, $$ph = 0, $$ph34 = 0, $$ph35 = 0, $$pre = 0, $$pre$i$i$i10 = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre40 = 0, $$pre42 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__atoms = 0, $__buf = 0, $__g = 0, $__grouping = 0, $__p$i$i$i$i = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0, $phitmp$i26 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $vararg_buffer = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 20|0;
 $0 = sp + 32|0;
 $__buf = sp + 36|0;
 $__g = sp + 48|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(48,($0|0),($__iob|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $113 = ___cxa_find_matching_catch(-1,-1)|0;
  $114 = tempRet0;
  $$0 = $113;$$01 = $114;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($$0|0);
  // unreachable;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[18784>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  label = 4;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 18784;
  $6 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$6>>2] = (121);
  $7 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$7>>2] = 0;
  __THREW__ = 0;
  invoke_viii(6,(18784|0),($__p$i$i$i$i|0),(122|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   label = 4;
  }
 }
 do {
  if ((label|0) == 4) {
   $10 = HEAP32[((18784 + 4|0))>>2]|0;
   $11 = (($10) + -1)|0;
   $12 = (($3) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($3) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $13;
   $17 = $15;
   $18 = (($16) - ($17))|0;
   $19 = $18 >> 2;
   $20 = ($19>>>0)>($11>>>0);
   if ($20) {
    $21 = (($15) + ($11<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if (!($23)) {
     $27 = HEAP32[$22>>2]|0;
     $28 = (($27) + 48|0);
     $29 = HEAP32[$28>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($29|0,($22|0),(17336|0),(((17336 + 26|0))|0),($__atoms|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      break;
     }
     $32 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($32)|0);
     ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viii(8,($__buf|0),10,0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     L13: do {
      if ($34) {
       label = 45;
      } else {
       $35 = HEAP8[$__buf]|0;
       $36 = $35 & 1;
       $37 = ($36<<24>>24)==(0);
       if ($37) {
        $40 = (($__buf) + 1|0);
        $$pre42 = (($__buf) + 8|0);
        $$pre$phi41Z2D = $40;$$pre$phi43Z2D = $$pre42;$241 = $40;
       } else {
        $38 = (($__buf) + 8|0);
        $39 = HEAP32[$38>>2]|0;
        $$pre40 = (($__buf) + 1|0);
        $$pre$phi41Z2D = $$pre40;$$pre$phi43Z2D = $38;$241 = $39;
       }
       $41 = (($__buf) + 4|0);
       $42 = (($__atoms) + 96|0);
       $43 = (($__atoms) + 100|0);
       $44 = $__g;
       $45 = (($__atoms) + 104|0);
       $46 = $__atoms;
       $47 = (($__grouping) + 4|0);
       $$pre = HEAP32[$__b>>2]|0;
       $$pre$i$i$i10 = $$pre;$153 = $__g;$157 = 0;$78 = $241;$__a$0 = $241;
       L19: while(1) {
        $48 = ($$pre$i$i$i10|0)==(0|0);
        if ($48) {
         $123 = 0;$242 = 1;
        } else {
         $49 = (($$pre$i$i$i10) + 12|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = (($$pre$i$i$i10) + 16|0);
         $52 = HEAP32[$51>>2]|0;
         $53 = ($50|0)==($52|0);
         if ($53) {
          $54 = HEAP32[$$pre$i$i$i10>>2]|0;
          $55 = (($54) + 36|0);
          $56 = HEAP32[$55>>2]|0;
          __THREW__ = 0;
          $57 = (invoke_ii($56|0,($$pre$i$i$i10|0))|0);
          $58 = __THREW__; __THREW__ = 0;
          $59 = $58&1;
          if ($59) {
           label = 44;
           break;
          } else {
           $$0$i$i$i$i8 = $57;
          }
         } else {
          $60 = HEAP32[$50>>2]|0;
          $$0$i$i$i$i8 = $60;
         }
         $61 = ($$0$i$i$i$i8|0)==(-1);
         if ($61) {
          HEAP32[$__b>>2] = 0;
          $123 = 0;$242 = 1;
         } else {
          $123 = $$pre$i$i$i10;$242 = 0;
         }
        }
        $62 = HEAP32[$__e>>2]|0;
        $63 = ($62|0)==(0|0);
        do {
         if ($63) {
          label = 26;
         } else {
          $64 = (($62) + 12|0);
          $65 = HEAP32[$64>>2]|0;
          $66 = (($62) + 16|0);
          $67 = HEAP32[$66>>2]|0;
          $68 = ($65|0)==($67|0);
          if ($68) {
           $69 = HEAP32[$62>>2]|0;
           $70 = (($69) + 36|0);
           $71 = HEAP32[$70>>2]|0;
           __THREW__ = 0;
           $72 = (invoke_ii($71|0,($62|0))|0);
           $73 = __THREW__; __THREW__ = 0;
           $74 = $73&1;
           if ($74) {
            label = 44;
            break L19;
           } else {
            $$0$i$i1$i$i14 = $72;
           }
          } else {
           $75 = HEAP32[$65>>2]|0;
           $$0$i$i1$i$i14 = $75;
          }
          $76 = ($$0$i$i1$i$i14|0)==(-1);
          if ($76) {
           HEAP32[$__e>>2] = 0;
           label = 26;
           break;
          } else {
           if ($242) {
            break;
           } else {
            $__a$2 = $__a$0;
            break L19;
           }
          }
         }
        } while(0);
        if ((label|0) == 26) {
         label = 0;
         if ($242) {
          $__a$2 = $__a$0;
          break;
         }
        }
        $77 = $78;
        $79 = $__a$0;
        $80 = (($77) - ($79))|0;
        $81 = HEAP8[$__buf]|0;
        $82 = $81 & 1;
        $83 = ($82<<24>>24)==(0);
        if ($83) {
         $85 = $81&255;
         $86 = $85 >>> 1;
         $88 = $86;
        } else {
         $84 = HEAP32[$41>>2]|0;
         $88 = $84;
        }
        $87 = ($80|0)==($88|0);
        if ($87) {
         if ($83) {
          $90 = $81&255;
          $91 = $90 >>> 1;
          $92 = $81&255;
          $93 = $92 >>> 1;
          $112 = $91;$95 = $93;
         } else {
          $89 = HEAP32[$41>>2]|0;
          $112 = $89;$95 = $89;
         }
         $94 = $95 << 1;
         __THREW__ = 0;
         invoke_viii(8,($__buf|0),($94|0),0);
         $96 = __THREW__; __THREW__ = 0;
         $97 = $96&1;
         if ($97) {
          label = 44;
          break;
         }
         $98 = HEAP8[$__buf]|0;
         $99 = $98 & 1;
         $100 = ($99<<24>>24)==(0);
         if ($100) {
          $103 = 10;
         } else {
          $101 = HEAP32[$__buf>>2]|0;
          $102 = $101 & -2;
          $phitmp$i26 = (($102) + -1)|0;
          $103 = $phitmp$i26;
         }
         __THREW__ = 0;
         invoke_viii(8,($__buf|0),($103|0),0);
         $104 = __THREW__; __THREW__ = 0;
         $105 = $104&1;
         if ($105) {
          label = 44;
          break;
         }
         $106 = HEAP8[$__buf]|0;
         $107 = $106 & 1;
         $108 = ($107<<24>>24)==(0);
         if ($108) {
          $111 = $$pre$phi41Z2D;
         } else {
          $109 = HEAP32[$$pre$phi43Z2D>>2]|0;
          $111 = $109;
         }
         $110 = (($111) + ($112)|0);
         $136 = $110;$__a$1 = $111;
        } else {
         $136 = $78;$__a$1 = $__a$0;
        }
        $122 = (($123) + 12|0);
        $124 = HEAP32[$122>>2]|0;
        $125 = (($123) + 16|0);
        $126 = HEAP32[$125>>2]|0;
        $127 = ($124|0)==($126|0);
        if ($127) {
         $128 = HEAP32[$123>>2]|0;
         $129 = (($128) + 36|0);
         $130 = HEAP32[$129>>2]|0;
         __THREW__ = 0;
         $131 = (invoke_ii($130|0,($123|0))|0);
         $132 = __THREW__; __THREW__ = 0;
         $133 = $132&1;
         if ($133) {
          label = 44;
          break;
         } else {
          $$0$i$i = $131;
         }
        } else {
         $134 = HEAP32[$124>>2]|0;
         $$0$i$i = $134;
        }
        $135 = ($136|0)==($__a$1|0);
        do {
         if ($135) {
          $137 = HEAP32[$42>>2]|0;
          $138 = ($137|0)==($$0$i$i|0);
          if (!($138)) {
           $139 = HEAP32[$43>>2]|0;
           $140 = ($139|0)==($$0$i$i|0);
           if (!($140)) {
            label = 54;
            break;
           }
          }
          $141 = $138 ? 43 : 45;
          $142 = (($136) + 1|0);
          HEAP8[$136] = $141;
          $$ph = $142;$$ph34 = $153;$$ph35 = 0;
         } else {
          label = 54;
         }
        } while(0);
        do {
         if ((label|0) == 54) {
          label = 0;
          $143 = HEAP8[$__grouping]|0;
          $144 = $143 & 1;
          $145 = ($144<<24>>24)==(0);
          if ($145) {
           $147 = $143&255;
           $148 = $147 >>> 1;
           $150 = $148;
          } else {
           $146 = HEAP32[$47>>2]|0;
           $150 = $146;
          }
          $149 = ($150|0)!=(0);
          $151 = ($$0$i$i|0)==(0);
          $or$cond$i = $149 & $151;
          if ($or$cond$i) {
           $152 = $153;
           $154 = (($152) - ($44))|0;
           $155 = ($154|0)<(160);
           if (!($155)) {
            $$ph = $136;$$ph34 = $153;$$ph35 = $157;
            break;
           }
           $156 = (($153) + 4|0);
           HEAP32[$153>>2] = $157;
           $$ph = $136;$$ph34 = $156;$$ph35 = 0;
           break;
          } else {
           $$01$i$i = $__atoms;
          }
          while(1) {
           $160 = HEAP32[$$01$i$i>>2]|0;
           $161 = ($160|0)==($$0$i$i|0);
           $159 = (($$01$i$i) + 4|0);
           if ($161) {
            $$0$lcssa$i$i = $$01$i$i;
            break;
           }
           $158 = ($159|0)==($45|0);
           if ($158) {
            $$0$lcssa$i$i = $45;
            break;
           } else {
            $$01$i$i = $159;
           }
          }
          $162 = $$0$lcssa$i$i;
          $163 = (($162) - ($46))|0;
          $164 = $163 >> 2;
          $165 = ($163|0)>(92);
          if ($165) {
           $__a$2 = $__a$1;
           break L19;
          }
          $166 = ($163|0)<(88);
          if ($166) {
           $177 = (17336 + ($164)|0);
           $178 = HEAP8[$177]|0;
           $179 = (($136) + 1|0);
           HEAP8[$136] = $178;
           $180 = (($157) + 1)|0;
           $$ph = $179;$$ph34 = $153;$$ph35 = $180;
           break;
          }
          if ($135) {
           $__a$2 = $136;
           break L19;
          }
          $167 = $136;
          $168 = $__a$1;
          $169 = (($167) - ($168))|0;
          $170 = ($169|0)<(3);
          if (!($170)) {
           $__a$2 = $__a$1;
           break L19;
          }
          $171 = (($136) + -1|0);
          $172 = HEAP8[$171]|0;
          $173 = ($172<<24>>24)==(48);
          if (!($173)) {
           $__a$2 = $__a$1;
           break L19;
          }
          $174 = (17336 + ($164)|0);
          $175 = HEAP8[$174]|0;
          $176 = (($136) + 1|0);
          HEAP8[$136] = $175;
          $$ph = $176;$$ph34 = $153;$$ph35 = 0;
         }
        } while(0);
        $181 = HEAP32[$__b>>2]|0;
        $182 = (($181) + 12|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = (($181) + 16|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($183|0)==($185|0);
        if ($186) {
         $187 = HEAP32[$181>>2]|0;
         $188 = (($187) + 40|0);
         $189 = HEAP32[$188>>2]|0;
         __THREW__ = 0;
         (invoke_ii($189|0,($181|0))|0);
         $190 = __THREW__; __THREW__ = 0;
         $191 = $190&1;
         if ($191) {
          label = 44;
          break;
         } else {
          $$pre$i$i$i10 = $181;$153 = $$ph34;$157 = $$ph35;$78 = $$ph;$__a$0 = $__a$1;
          continue;
         }
        } else {
         $192 = (($183) + 4|0);
         HEAP32[$182>>2] = $192;
         $$pre$i$i$i10 = $181;$153 = $$ph34;$157 = $$ph35;$78 = $$ph;$__a$0 = $__a$1;
         continue;
        }
       }
       if ((label|0) == 44) {
        $118 = ___cxa_find_matching_catch(-1,-1)|0;
        $119 = tempRet0;
        $eh$lpad$body$index3Z2D = $119;$eh$lpad$body$indexZ2D = $118;
        break;
       }
       $193 = (($__a$2) + 3|0);
       HEAP8[$193] = 0;
       $194 = HEAP8[18688]|0;
       $195 = ($194<<24>>24)==(0);
       do {
        if ($195) {
         $196 = (___cxa_guard_acquire((18688|0))|0);
         $197 = ($196|0)==(0);
         if (!($197)) {
          __THREW__ = 0;
          $198 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
          $199 = __THREW__; __THREW__ = 0;
          $200 = $199&1;
          if ($200) {
           $201 = ___cxa_find_matching_catch(-1,-1)|0;
           $202 = tempRet0;
           ___cxa_guard_abort((18688|0));
           $eh$lpad$body$index3Z2D = $202;$eh$lpad$body$indexZ2D = $201;
           break L13;
          } else {
           HEAP32[18680>>2] = $198;
           ___cxa_guard_release((18688|0));
           break;
          }
         }
        }
       } while(0);
       $203 = HEAP32[18680>>2]|0;
       __THREW__ = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $204 = (invoke_iiiii(12,($__a$2|0),($203|0),(17376|0),($vararg_buffer|0))|0);
       $205 = __THREW__; __THREW__ = 0;
       $206 = $205&1;
       if ($206) {
        label = 45;
       } else {
        $207 = ($204|0)==(1);
        if (!($207)) {
         HEAP32[$__err>>2] = 4;
        }
        $208 = HEAP32[$__b>>2]|0;
        $209 = ($208|0)==(0|0);
        if ($209) {
         $240 = 0;$243 = 1;
        } else {
         $210 = (($208) + 12|0);
         $211 = HEAP32[$210>>2]|0;
         $212 = (($208) + 16|0);
         $213 = HEAP32[$212>>2]|0;
         $214 = ($211|0)==($213|0);
         if ($214) {
          $215 = HEAP32[$208>>2]|0;
          $216 = (($215) + 36|0);
          $217 = HEAP32[$216>>2]|0;
          __THREW__ = 0;
          $218 = (invoke_ii($217|0,($208|0))|0);
          $219 = __THREW__; __THREW__ = 0;
          $220 = $219&1;
          if ($220) {
           label = 45;
           break;
          } else {
           $$0$i$i$i$i = $218;
          }
         } else {
          $221 = HEAP32[$211>>2]|0;
          $$0$i$i$i$i = $221;
         }
         $222 = ($$0$i$i$i$i|0)==(-1);
         if ($222) {
          HEAP32[$__b>>2] = 0;
          $240 = 0;$243 = 1;
         } else {
          $240 = $208;$243 = 0;
         }
        }
        $223 = HEAP32[$__e>>2]|0;
        $224 = ($223|0)==(0|0);
        do {
         if ($224) {
          label = 92;
         } else {
          $225 = (($223) + 12|0);
          $226 = HEAP32[$225>>2]|0;
          $227 = (($223) + 16|0);
          $228 = HEAP32[$227>>2]|0;
          $229 = ($226|0)==($228|0);
          if ($229) {
           $230 = HEAP32[$223>>2]|0;
           $231 = (($230) + 36|0);
           $232 = HEAP32[$231>>2]|0;
           __THREW__ = 0;
           $233 = (invoke_ii($232|0,($223|0))|0);
           $234 = __THREW__; __THREW__ = 0;
           $235 = $234&1;
           if ($235) {
            label = 45;
            break L13;
           } else {
            $$0$i$i1$i$i = $233;
           }
          } else {
           $236 = HEAP32[$226>>2]|0;
           $$0$i$i1$i$i = $236;
          }
          $237 = ($$0$i$i1$i$i|0)==(-1);
          if ($237) {
           HEAP32[$__e>>2] = 0;
           label = 92;
           break;
          }
          if ($243) {
           HEAP32[$agg$result>>2] = $240;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
           STACKTOP = sp;return;
          }
         }
        } while(0);
        if ((label|0) == 92) {
         if (!($243)) {
          HEAP32[$agg$result>>2] = $240;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
          STACKTOP = sp;return;
         }
        }
        $238 = HEAP32[$__err>>2]|0;
        $239 = $238 | 2;
        HEAP32[$__err>>2] = $239;
        HEAP32[$agg$result>>2] = $240;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
        STACKTOP = sp;return;
       }
      }
     } while(0);
     if ((label|0) == 45) {
      $120 = ___cxa_find_matching_catch(-1,-1)|0;
      $121 = tempRet0;
      $eh$lpad$body$index3Z2D = $121;$eh$lpad$body$indexZ2D = $120;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index3Z2D;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     ___resumeException($$0|0);
     // unreachable;
    }
   }
   $24 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($24);
   __THREW__ = 0;
   invoke_viii(7,($24|0),(26752|0),(102|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if (!($26)) {
    // unreachable;
   }
  }
 } while(0);
 $115 = ___cxa_find_matching_catch(-1,-1)|0;
 $116 = tempRet0;
 $117 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($117)|0);
 $$0 = $115;$$01 = $116;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 96|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($__ct|0);
   if (!($4)) {
    $5 = (($__atoms) + 100|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($__ct|0);
    if (!($7)) {
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $10 = HEAP8[$__grouping]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $18 = $16;
 } else {
  $13 = (($__grouping) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $18 = $14;
 }
 $17 = ($18|0)!=(0);
 $19 = ($__ct|0)==($__thousands_sep|0);
 $or$cond = $17 & $19;
 if ($or$cond) {
  $20 = HEAP32[$__g_end>>2]|0;
  $21 = $20;
  $22 = $__g;
  $23 = (($21) - ($22))|0;
  $24 = ($23|0)<(160);
  if (!($24)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = HEAP32[$__dc>>2]|0;
  $26 = (($20) + 4|0);
  HEAP32[$__g_end>>2] = $26;
  HEAP32[$20>>2] = $25;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($__atoms) + 104|0);
 $$01$i = $__atoms;
 while(1) {
  $30 = HEAP32[$$01$i>>2]|0;
  $31 = ($30|0)==($__ct|0);
  $29 = (($$01$i) + 4|0);
  if ($31) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $28 = ($29|0)==($27|0);
  if ($28) {
   $$0$lcssa$i = $27;
   break;
  } else {
   $$01$i = $29;
  }
 }
 $32 = $$0$lcssa$i;
 $33 = $__atoms;
 $34 = (($32) - ($33))|0;
 $35 = $34 >> 2;
 $36 = ($34|0)>(92);
 if ($36) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($__base|0) == 16)) {
  $38 = ($34|0)<(88);
  if (!($38)) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $39 = $0;
   $40 = $__a;
   $41 = (($39) - ($40))|0;
   $42 = ($41|0)<(3);
   if (!($42)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $43 = (($0) + -1|0);
   $44 = HEAP8[$43]|0;
   $45 = ($44<<24>>24)==(48);
   if (!($45)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $46 = (17336 + ($35)|0);
   $47 = HEAP8[$46]|0;
   $48 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $48;
   HEAP8[$0] = $47;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $37 = ($35|0)<($__base|0);
  if (!($37)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $49 = (17336 + ($35)|0);
 $50 = HEAP8[$49]|0;
 $51 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $51;
 HEAP8[$0] = $50;
 $52 = HEAP32[$__dc>>2]|0;
 $53 = (($52) + 1)|0;
 HEAP32[$__dc>>2] = $53;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__p$i$i$i$i3 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__loc = sp + 28|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[18792>>2]|0;
 $2 = ($1|0)==(-1);
 if ($2) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 18792;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (121);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __THREW__ = 0;
  invoke_viii(6,(18792|0),($__p$i$i$i$i|0),(122|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = HEAP32[((18792 + 4|0))>>2]|0;
   $8 = (($7) + -1)|0;
   $9 = (($0) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($0) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $10;
   $14 = $12;
   $15 = (($13) - ($14))|0;
   $16 = $15 >> 2;
   $17 = ($16>>>0)>($8>>>0);
   if ($17) {
    $18 = (($12) + ($8<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0|0);
    if (!($20)) {
     $24 = HEAP32[$19>>2]|0;
     $25 = (($24) + 32|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($26|0,($19|0),(17336|0),(((17336 + 26|0))|0),($__atoms|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      break;
     }
     $29 = HEAP32[$__loc>>2]|0;
     $30 = HEAP32[18936>>2]|0;
     $31 = ($30|0)==(-1);
     if (!($31)) {
      HEAP32[$__p$i$i$i$i3>>2] = 18936;
      $32 = (($__p$i$i$i$i3) + 4|0);
      HEAP32[$32>>2] = (121);
      $33 = (($__p$i$i$i$i3) + 8|0);
      HEAP32[$33>>2] = 0;
      __THREW__ = 0;
      invoke_viii(6,(18936|0),($__p$i$i$i$i3|0),(122|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       break;
      }
     }
     $36 = HEAP32[((18936 + 4|0))>>2]|0;
     $37 = (($36) + -1)|0;
     $38 = (($29) + 12|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (($29) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $39;
     $43 = $41;
     $44 = (($42) - ($43))|0;
     $45 = $44 >> 2;
     $46 = ($45>>>0)>($37>>>0);
     if ($46) {
      $47 = (($41) + ($37<<2)|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $53 = HEAP32[$48>>2]|0;
       $54 = (($53) + 16|0);
       $55 = HEAP32[$54>>2]|0;
       __THREW__ = 0;
       $56 = (invoke_ii($55|0,($48|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        break;
       }
       HEAP8[$__thousands_sep] = $56;
       $59 = HEAP32[$48>>2]|0;
       $60 = (($59) + 20|0);
       $61 = HEAP32[$60>>2]|0;
       __THREW__ = 0;
       invoke_vii($61|0,($agg$result|0),($48|0));
       $62 = __THREW__; __THREW__ = 0;
       $63 = $62&1;
       if ($63) {
        break;
       }
       $64 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($64)|0);
       STACKTOP = sp;return;
      }
     }
     $50 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($50);
     __THREW__ = 0;
     invoke_viii(7,($50|0),(26752|0),(102|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      break;
     }
     // unreachable;
    }
   }
   $21 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($21);
   __THREW__ = 0;
   invoke_viii(7,($21|0),(26752|0),(102|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    // unreachable;
   }
  }
 } while(0);
 $65 = ___cxa_find_matching_catch(-1,-1)|0;
 $66 = tempRet0;
 $67 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($67)|0);
 ___resumeException($65|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $__loc = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__p$i$i$i$i3 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__loc = sp + 28|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[18792>>2]|0;
 $2 = ($1|0)==(-1);
 if ($2) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 18792;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (121);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __THREW__ = 0;
  invoke_viii(6,(18792|0),($__p$i$i$i$i|0),(122|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = HEAP32[((18792 + 4|0))>>2]|0;
   $8 = (($7) + -1)|0;
   $9 = (($0) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($0) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $10;
   $14 = $12;
   $15 = (($13) - ($14))|0;
   $16 = $15 >> 2;
   $17 = ($16>>>0)>($8>>>0);
   if ($17) {
    $18 = (($12) + ($8<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0|0);
    if (!($20)) {
     $24 = HEAP32[$19>>2]|0;
     $25 = (($24) + 32|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($26|0,($19|0),(17336|0),(((17336 + 32|0))|0),($__atoms|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      break;
     }
     $29 = HEAP32[$__loc>>2]|0;
     $30 = HEAP32[18936>>2]|0;
     $31 = ($30|0)==(-1);
     if (!($31)) {
      HEAP32[$__p$i$i$i$i3>>2] = 18936;
      $32 = (($__p$i$i$i$i3) + 4|0);
      HEAP32[$32>>2] = (121);
      $33 = (($__p$i$i$i$i3) + 8|0);
      HEAP32[$33>>2] = 0;
      __THREW__ = 0;
      invoke_viii(6,(18936|0),($__p$i$i$i$i3|0),(122|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       break;
      }
     }
     $36 = HEAP32[((18936 + 4|0))>>2]|0;
     $37 = (($36) + -1)|0;
     $38 = (($29) + 12|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (($29) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $39;
     $43 = $41;
     $44 = (($42) - ($43))|0;
     $45 = $44 >> 2;
     $46 = ($45>>>0)>($37>>>0);
     if ($46) {
      $47 = (($41) + ($37<<2)|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $53 = HEAP32[$48>>2]|0;
       $54 = (($53) + 12|0);
       $55 = HEAP32[$54>>2]|0;
       __THREW__ = 0;
       $56 = (invoke_ii($55|0,($48|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        break;
       }
       HEAP8[$__decimal_point] = $56;
       $59 = HEAP32[$48>>2]|0;
       $60 = (($59) + 16|0);
       $61 = HEAP32[$60>>2]|0;
       __THREW__ = 0;
       $62 = (invoke_ii($61|0,($48|0))|0);
       $63 = __THREW__; __THREW__ = 0;
       $64 = $63&1;
       if ($64) {
        break;
       }
       HEAP8[$__thousands_sep] = $62;
       $65 = HEAP32[$48>>2]|0;
       $66 = (($65) + 20|0);
       $67 = HEAP32[$66>>2]|0;
       __THREW__ = 0;
       invoke_vii($67|0,($agg$result|0),($48|0));
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        break;
       }
       $70 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($70)|0);
       STACKTOP = sp;return;
      }
     }
     $50 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($50);
     __THREW__ = 0;
     invoke_viii(7,($50|0),(26752|0),(102|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      break;
     }
     // unreachable;
    }
   }
   $21 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($21);
   __THREW__ = 0;
   invoke_viii(7,($21|0),(26752|0),(102|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    // unreachable;
   }
  }
 } while(0);
 $71 = ___cxa_find_matching_catch(-1,-1)|0;
 $72 = tempRet0;
 $73 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($73)|0);
 ___resumeException($71|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 if ($0) {
  $1 = HEAP8[$__in_units]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units] = 0;
  $3 = HEAP32[$__a_end>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$__a_end>>2] = $4;
  HEAP8[$3] = 46;
  $5 = HEAP8[$__grouping]|0;
  $6 = $5 & 1;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $10 = $5&255;
   $11 = $10 >>> 1;
   $13 = $11;
  } else {
   $8 = (($__grouping) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $13 = $9;
  }
  $12 = ($13|0)==(0);
  if ($12) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = HEAP32[$__g_end>>2]|0;
  $15 = $14;
  $16 = $__g;
  $17 = (($15) - ($16))|0;
  $18 = ($17|0)<(160);
  if (!($18)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = HEAP32[$__dc>>2]|0;
  $20 = (($14) + 4|0);
  HEAP32[$__g_end>>2] = $20;
  HEAP32[$14>>2] = $19;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 if ($21) {
  $22 = HEAP8[$__grouping]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = $22&255;
   $28 = $27 >>> 1;
   $30 = $28;
  } else {
   $25 = (($__grouping) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $30 = $26;
  }
  $29 = ($30|0)==(0);
  if (!($29)) {
   $31 = HEAP8[$__in_units]|0;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[$__g_end>>2]|0;
   $34 = $33;
   $35 = $__g;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(160);
   if (!($37)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$__dc>>2]|0;
   $39 = (($33) + 4|0);
   HEAP32[$__g_end>>2] = $39;
   HEAP32[$33>>2] = $38;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($__atoms) + 32|0);
 $$01$i = $__atoms;
 while(1) {
  $43 = HEAP8[$$01$i]|0;
  $44 = ($43<<24>>24)==($__ct<<24>>24);
  $42 = (($$01$i) + 1|0);
  if ($44) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $41 = ($42|0)==($40|0);
  if ($41) {
   $$0$lcssa$i = $40;
   break;
  } else {
   $$01$i = $42;
  }
 }
 $45 = $$0$lcssa$i;
 $46 = $__atoms;
 $47 = (($45) - ($46))|0;
 $48 = ($47|0)>(31);
 if ($48) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $49 = (17336 + ($47)|0);
 $50 = HEAP8[$49]|0;
 if ((($47|0) == 24) | (($47|0) == 25)) {
  $51 = HEAP32[$__a_end>>2]|0;
  $52 = ($51|0)==($__a|0);
  if (!($52)) {
   $53 = (($51) + -1|0);
   $54 = HEAP8[$53]|0;
   $55 = $54&255;
   $56 = $55 & 95;
   $57 = HEAP8[$__exp]|0;
   $58 = $57&255;
   $59 = $58 & 127;
   $60 = ($56|0)==($59|0);
   if (!($60)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $61 = (($51) + 1|0);
  HEAP32[$__a_end>>2] = $61;
  HEAP8[$51] = $50;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else if ((($47|0) == 23) | (($47|0) == 22)) {
  HEAP8[$__exp] = 80;
  $62 = HEAP32[$__a_end>>2]|0;
  $63 = (($62) + 1|0);
  HEAP32[$__a_end>>2] = $63;
  HEAP8[$62] = $50;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $64 = $50&255;
  $65 = $64 & 95;
  $66 = HEAP8[$__exp]|0;
  $67 = $66 << 24 >> 24;
  $68 = ($65|0)==($67|0);
  if ($68) {
   $69 = $65 | 128;
   $70 = $69&255;
   HEAP8[$__exp] = $70;
   $71 = HEAP8[$__in_units]|0;
   $72 = ($71<<24>>24)==(0);
   if (!($72)) {
    HEAP8[$__in_units] = 0;
    $73 = HEAP8[$__grouping]|0;
    $74 = $73 & 1;
    $75 = ($74<<24>>24)==(0);
    if ($75) {
     $78 = $73&255;
     $79 = $78 >>> 1;
     $81 = $79;
    } else {
     $76 = (($__grouping) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $81 = $77;
    }
    $80 = ($81|0)==(0);
    if (!($80)) {
     $82 = HEAP32[$__g_end>>2]|0;
     $83 = $82;
     $84 = $__g;
     $85 = (($83) - ($84))|0;
     $86 = ($85|0)<(160);
     if ($86) {
      $87 = HEAP32[$__dc>>2]|0;
      $88 = (($82) + 4|0);
      HEAP32[$__g_end>>2] = $88;
      HEAP32[$82>>2] = $87;
     }
    }
   }
  }
  $89 = HEAP32[$__a_end>>2]|0;
  $90 = (($89) + 1|0);
  HEAP32[$__a_end>>2] = $90;
  HEAP8[$89] = $50;
  $91 = ($47|0)>(21);
  if ($91) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $92 = HEAP32[$__dc>>2]|0;
  $93 = (($92) + 1)|0;
  HEAP32[$__dc>>2] = $93;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__p$i$i$i$i3 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__loc = sp + 28|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[18784>>2]|0;
 $2 = ($1|0)==(-1);
 if ($2) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 18784;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (121);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __THREW__ = 0;
  invoke_viii(6,(18784|0),($__p$i$i$i$i|0),(122|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = HEAP32[((18784 + 4|0))>>2]|0;
   $8 = (($7) + -1)|0;
   $9 = (($0) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($0) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $10;
   $14 = $12;
   $15 = (($13) - ($14))|0;
   $16 = $15 >> 2;
   $17 = ($16>>>0)>($8>>>0);
   if ($17) {
    $18 = (($12) + ($8<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0|0);
    if (!($20)) {
     $24 = HEAP32[$19>>2]|0;
     $25 = (($24) + 48|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($26|0,($19|0),(17336|0),(((17336 + 26|0))|0),($__atoms|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      break;
     }
     $29 = HEAP32[$__loc>>2]|0;
     $30 = HEAP32[18944>>2]|0;
     $31 = ($30|0)==(-1);
     if (!($31)) {
      HEAP32[$__p$i$i$i$i3>>2] = 18944;
      $32 = (($__p$i$i$i$i3) + 4|0);
      HEAP32[$32>>2] = (121);
      $33 = (($__p$i$i$i$i3) + 8|0);
      HEAP32[$33>>2] = 0;
      __THREW__ = 0;
      invoke_viii(6,(18944|0),($__p$i$i$i$i3|0),(122|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       break;
      }
     }
     $36 = HEAP32[((18944 + 4|0))>>2]|0;
     $37 = (($36) + -1)|0;
     $38 = (($29) + 12|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (($29) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $39;
     $43 = $41;
     $44 = (($42) - ($43))|0;
     $45 = $44 >> 2;
     $46 = ($45>>>0)>($37>>>0);
     if ($46) {
      $47 = (($41) + ($37<<2)|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $53 = HEAP32[$48>>2]|0;
       $54 = (($53) + 16|0);
       $55 = HEAP32[$54>>2]|0;
       __THREW__ = 0;
       $56 = (invoke_ii($55|0,($48|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        break;
       }
       HEAP32[$__thousands_sep>>2] = $56;
       $59 = HEAP32[$48>>2]|0;
       $60 = (($59) + 20|0);
       $61 = HEAP32[$60>>2]|0;
       __THREW__ = 0;
       invoke_vii($61|0,($agg$result|0),($48|0));
       $62 = __THREW__; __THREW__ = 0;
       $63 = $62&1;
       if ($63) {
        break;
       }
       $64 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($64)|0);
       STACKTOP = sp;return;
      }
     }
     $50 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($50);
     __THREW__ = 0;
     invoke_viii(7,($50|0),(26752|0),(102|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      break;
     }
     // unreachable;
    }
   }
   $21 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($21);
   __THREW__ = 0;
   invoke_viii(7,($21|0),(26752|0),(102|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    // unreachable;
   }
  }
 } while(0);
 $65 = ___cxa_find_matching_catch(-1,-1)|0;
 $66 = tempRet0;
 $67 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($67)|0);
 ___resumeException($65|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $__loc = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__p$i$i$i$i3 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__loc = sp + 28|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[18784>>2]|0;
 $2 = ($1|0)==(-1);
 if ($2) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 18784;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (121);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __THREW__ = 0;
  invoke_viii(6,(18784|0),($__p$i$i$i$i|0),(122|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = HEAP32[((18784 + 4|0))>>2]|0;
   $8 = (($7) + -1)|0;
   $9 = (($0) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($0) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $10;
   $14 = $12;
   $15 = (($13) - ($14))|0;
   $16 = $15 >> 2;
   $17 = ($16>>>0)>($8>>>0);
   if ($17) {
    $18 = (($12) + ($8<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0|0);
    if (!($20)) {
     $24 = HEAP32[$19>>2]|0;
     $25 = (($24) + 48|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($26|0,($19|0),(17336|0),(((17336 + 32|0))|0),($__atoms|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      break;
     }
     $29 = HEAP32[$__loc>>2]|0;
     $30 = HEAP32[18944>>2]|0;
     $31 = ($30|0)==(-1);
     if (!($31)) {
      HEAP32[$__p$i$i$i$i3>>2] = 18944;
      $32 = (($__p$i$i$i$i3) + 4|0);
      HEAP32[$32>>2] = (121);
      $33 = (($__p$i$i$i$i3) + 8|0);
      HEAP32[$33>>2] = 0;
      __THREW__ = 0;
      invoke_viii(6,(18944|0),($__p$i$i$i$i3|0),(122|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       break;
      }
     }
     $36 = HEAP32[((18944 + 4|0))>>2]|0;
     $37 = (($36) + -1)|0;
     $38 = (($29) + 12|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (($29) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $39;
     $43 = $41;
     $44 = (($42) - ($43))|0;
     $45 = $44 >> 2;
     $46 = ($45>>>0)>($37>>>0);
     if ($46) {
      $47 = (($41) + ($37<<2)|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $53 = HEAP32[$48>>2]|0;
       $54 = (($53) + 12|0);
       $55 = HEAP32[$54>>2]|0;
       __THREW__ = 0;
       $56 = (invoke_ii($55|0,($48|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        break;
       }
       HEAP32[$__decimal_point>>2] = $56;
       $59 = HEAP32[$48>>2]|0;
       $60 = (($59) + 16|0);
       $61 = HEAP32[$60>>2]|0;
       __THREW__ = 0;
       $62 = (invoke_ii($61|0,($48|0))|0);
       $63 = __THREW__; __THREW__ = 0;
       $64 = $63&1;
       if ($64) {
        break;
       }
       HEAP32[$__thousands_sep>>2] = $62;
       $65 = HEAP32[$48>>2]|0;
       $66 = (($65) + 20|0);
       $67 = HEAP32[$66>>2]|0;
       __THREW__ = 0;
       invoke_vii($67|0,($agg$result|0),($48|0));
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        break;
       }
       $70 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($70)|0);
       STACKTOP = sp;return;
      }
     }
     $50 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($50);
     __THREW__ = 0;
     invoke_viii(7,($50|0),(26752|0),(102|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      break;
     }
     // unreachable;
    }
   }
   $21 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($21);
   __THREW__ = 0;
   invoke_viii(7,($21|0),(26752|0),(102|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    // unreachable;
   }
  }
 } while(0);
 $71 = ___cxa_find_matching_catch(-1,-1)|0;
 $72 = tempRet0;
 $73 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($73)|0);
 ___resumeException($71|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct|0)==($__decimal_point|0);
 if ($0) {
  $1 = HEAP8[$__in_units]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units] = 0;
  $3 = HEAP32[$__a_end>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$__a_end>>2] = $4;
  HEAP8[$3] = 46;
  $5 = HEAP8[$__grouping]|0;
  $6 = $5 & 1;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $10 = $5&255;
   $11 = $10 >>> 1;
   $13 = $11;
  } else {
   $8 = (($__grouping) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $13 = $9;
  }
  $12 = ($13|0)==(0);
  if ($12) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = HEAP32[$__g_end>>2]|0;
  $15 = $14;
  $16 = $__g;
  $17 = (($15) - ($16))|0;
  $18 = ($17|0)<(160);
  if (!($18)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = HEAP32[$__dc>>2]|0;
  $20 = (($14) + 4|0);
  HEAP32[$__g_end>>2] = $20;
  HEAP32[$14>>2] = $19;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($__ct|0)==($__thousands_sep|0);
 if ($21) {
  $22 = HEAP8[$__grouping]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = $22&255;
   $28 = $27 >>> 1;
   $30 = $28;
  } else {
   $25 = (($__grouping) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $30 = $26;
  }
  $29 = ($30|0)==(0);
  if (!($29)) {
   $31 = HEAP8[$__in_units]|0;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[$__g_end>>2]|0;
   $34 = $33;
   $35 = $__g;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(160);
   if (!($37)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$__dc>>2]|0;
   $39 = (($33) + 4|0);
   HEAP32[$__g_end>>2] = $39;
   HEAP32[$33>>2] = $38;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($__atoms) + 128|0);
 $$01$i = $__atoms;
 while(1) {
  $43 = HEAP32[$$01$i>>2]|0;
  $44 = ($43|0)==($__ct|0);
  $42 = (($$01$i) + 4|0);
  if ($44) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $41 = ($42|0)==($40|0);
  if ($41) {
   $$0$lcssa$i = $40;
   break;
  } else {
   $$01$i = $42;
  }
 }
 $45 = $$0$lcssa$i;
 $46 = $__atoms;
 $47 = (($45) - ($46))|0;
 $48 = $47 >> 2;
 $49 = ($47|0)>(124);
 if ($49) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $50 = (17336 + ($48)|0);
 $51 = HEAP8[$50]|0;
 if ((($48|0) == 24) | (($48|0) == 25)) {
  $52 = HEAP32[$__a_end>>2]|0;
  $53 = ($52|0)==($__a|0);
  if (!($53)) {
   $54 = (($52) + -1|0);
   $55 = HEAP8[$54]|0;
   $56 = $55&255;
   $57 = $56 & 95;
   $58 = HEAP8[$__exp]|0;
   $59 = $58&255;
   $60 = $59 & 127;
   $61 = ($57|0)==($60|0);
   if (!($61)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $62 = (($52) + 1|0);
  HEAP32[$__a_end>>2] = $62;
  HEAP8[$52] = $51;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else if ((($48|0) == 23) | (($48|0) == 22)) {
  HEAP8[$__exp] = 80;
 } else {
  $63 = $51&255;
  $64 = $63 & 95;
  $65 = HEAP8[$__exp]|0;
  $66 = $65 << 24 >> 24;
  $67 = ($64|0)==($66|0);
  if ($67) {
   $68 = $64 | 128;
   $69 = $68&255;
   HEAP8[$__exp] = $69;
   $70 = HEAP8[$__in_units]|0;
   $71 = ($70<<24>>24)==(0);
   if (!($71)) {
    HEAP8[$__in_units] = 0;
    $72 = HEAP8[$__grouping]|0;
    $73 = $72 & 1;
    $74 = ($73<<24>>24)==(0);
    if ($74) {
     $77 = $72&255;
     $78 = $77 >>> 1;
     $80 = $78;
    } else {
     $75 = (($__grouping) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $80 = $76;
    }
    $79 = ($80|0)==(0);
    if (!($79)) {
     $81 = HEAP32[$__g_end>>2]|0;
     $82 = $81;
     $83 = $__g;
     $84 = (($82) - ($83))|0;
     $85 = ($84|0)<(160);
     if ($85) {
      $86 = HEAP32[$__dc>>2]|0;
      $87 = (($81) + 4|0);
      HEAP32[$__g_end>>2] = $87;
      HEAP32[$81>>2] = $86;
     }
    }
   }
  }
 }
 $88 = HEAP32[$__a_end>>2]|0;
 $89 = (($88) + 1|0);
 HEAP32[$__a_end>>2] = $89;
 HEAP8[$88] = $51;
 $90 = ($47|0)>(84);
 if ($90) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $91 = HEAP32[$__dc>>2]|0;
 $92 = (($91) + 1)|0;
 HEAP32[$__dc>>2] = $92;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre$phi8Z2D = 0, $$pre5 = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $__nm = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $$byval_copy = sp + 32|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 12|0;
 $1 = sp + 16|0;
 $__nm = sp + 20|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$this>>2]|0;
  $7 = (($6) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $9;
  $10 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$8 & 15]($agg$result,$this,$$byval_copy,$__iob,$__fl,$10);
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $11 = HEAP32[$1>>2]|0;
 $12 = HEAP32[18936>>2]|0;
 $13 = ($12|0)==(-1);
 if ($13) {
  label = 5;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 18936;
  $14 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$14>>2] = (121);
  $15 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$15>>2] = 0;
  __THREW__ = 0;
  invoke_viii(6,(18936|0),($__p$i$i$i$i|0),(122|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $18 = HEAP32[((18936 + 4|0))>>2]|0;
  $19 = (($18) + -1)|0;
  $20 = (($11) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($11) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $21;
  $25 = $23;
  $26 = (($24) - ($25))|0;
  $27 = $26 >> 2;
  $28 = ($27>>>0)>($19>>>0);
  if ($28) {
   $29 = (($23) + ($19<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(0|0);
   if (!($31)) {
    $35 = HEAP32[$1>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($35)|0);
    $36 = HEAP32[$30>>2]|0;
    if ($__v) {
     $37 = (($36) + 24|0);
     $38 = HEAP32[$37>>2]|0;
     FUNCTION_TABLE_vii[$38 & 63]($__nm,$30);
    } else {
     $39 = (($36) + 28|0);
     $40 = HEAP32[$39>>2]|0;
     FUNCTION_TABLE_vii[$40 & 63]($__nm,$30);
    }
    $41 = HEAP8[$__nm]|0;
    $42 = $41 & 1;
    $43 = ($42<<24>>24)==(0);
    if ($43) {
     $46 = (($__nm) + 1|0);
     $$pre7 = (($__nm) + 8|0);
     $$ph = $46;$$pre$phi6Z2D = $46;$$pre$phi8Z2D = $$pre7;
    } else {
     $44 = (($__nm) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $$pre5 = (($__nm) + 1|0);
     $$ph = $45;$$pre$phi6Z2D = $$pre5;$$pre$phi8Z2D = $44;
    }
    $47 = (($__nm) + 4|0);
    $49 = $41;$59 = $$ph;
    L20: while(1) {
     $48 = $49 & 1;
     $50 = ($48<<24>>24)==(0);
     if ($50) {
      $53 = $49&255;
      $54 = $53 >>> 1;
      $56 = $$pre$phi6Z2D;$57 = $54;
     } else {
      $51 = HEAP32[$$pre$phi8Z2D>>2]|0;
      $52 = HEAP32[$47>>2]|0;
      $56 = $51;$57 = $52;
     }
     $55 = (($56) + ($57)|0);
     $58 = ($59|0)==($55|0);
     if ($58) {
      label = 29;
      break;
     }
     $60 = HEAP8[$59]|0;
     $61 = HEAP32[$__s>>2]|0;
     $62 = ($61|0)==(0|0);
     do {
      if (!($62)) {
       $63 = (($61) + 24|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = (($61) + 28|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = ($64|0)==($66|0);
       if (!($67)) {
        $68 = (($64) + 1|0);
        HEAP32[$63>>2] = $68;
        HEAP8[$64] = $60;
        break;
       }
       $69 = HEAP32[$61>>2]|0;
       $70 = (($69) + 52|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = $60&255;
       __THREW__ = 0;
       $73 = (invoke_iii($71|0,($61|0),($72|0))|0);
       $74 = __THREW__; __THREW__ = 0;
       $75 = $74&1;
       if ($75) {
        label = 28;
        break L20;
       }
       $76 = ($73|0)==(-1);
       if ($76) {
        HEAP32[$__s>>2] = 0;
       }
      }
     } while(0);
     $77 = (($59) + 1|0);
     $$pre = HEAP8[$__nm]|0;
     $49 = $$pre;$59 = $77;
    }
    if ((label|0) == 28) {
     $81 = ___cxa_find_matching_catch(-1,-1)|0;
     $82 = tempRet0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
     $$0 = $81;$$01 = $82;
     ___resumeException($$0|0);
     // unreachable;
    }
    else if ((label|0) == 29) {
     $83 = HEAP32[$__s>>2]|0;
     HEAP32[$agg$result>>2] = $83;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
     STACKTOP = sp;return;
    }
   }
  }
  $32 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($32);
  __THREW__ = 0;
  invoke_viii(7,($32|0),(26752|0),(102|0));
  $33 = __THREW__; __THREW__ = 0;
  $34 = $33&1;
  if (!($34)) {
   // unreachable;
  }
 }
 $78 = ___cxa_find_matching_catch(-1,-1)|0;
 $79 = tempRet0;
 $80 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($80)|0);
 $$0 = $78;$$01 = $79;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $$byval_copy = sp + 12|0;
 $vararg_buffer = sp;
 $__fmt = sp + 24|0;
 $__nar = sp + 52|0;
 $__o = sp + 30|0;
 $__op = sp + 16|0;
 $__oe = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp + 20|0;
 ;HEAP8[$__fmt+0|0]=HEAP8[17584+0|0]|0;HEAP8[$__fmt+1|0]=HEAP8[17584+1|0]|0;HEAP8[$__fmt+2|0]=HEAP8[17584+2|0]|0;HEAP8[$__fmt+3|0]=HEAP8[17584+3|0]|0;HEAP8[$__fmt+4|0]=HEAP8[17584+4|0]|0;HEAP8[$__fmt+5|0]=HEAP8[17584+5|0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 2048;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0$i = $2;
 } else {
  $7 = (($__fmt) + 2|0);
  HEAP8[$2] = 43;
  $$0$i = $7;
 }
 $8 = $4 & 512;
 $9 = ($8|0)==(0);
 if ($9) {
  $$13$i$ph = $$0$i;
 } else {
  $10 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $10;
 }
 HEAP8[$$13$i$ph] = 108;
 $scevgep = (($$13$i$ph) + 1|0);
 $11 = $4 & 74;
 do {
  if ((($11|0) == 64)) {
   HEAP8[$scevgep] = 111;
  } else if ((($11|0) == 8)) {
   $12 = $4 & 16384;
   $13 = ($12|0)==(0);
   if ($13) {
    HEAP8[$scevgep] = 120;
    break;
   } else {
    HEAP8[$scevgep] = 88;
    break;
   }
  } else {
   HEAP8[$scevgep] = 100;
  }
 } while(0);
 $14 = HEAP8[18688]|0;
 $15 = ($14<<24>>24)==(0);
 do {
  if ($15) {
   $16 = (___cxa_guard_acquire((18688|0))|0);
   $17 = ($16|0)==(0);
   if (!($17)) {
    __THREW__ = 0;
    $18 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(-1,-1)|0;
     $22 = tempRet0;
     ___cxa_guard_abort((18688|0));
     ___resumeException($21|0);
     // unreachable;
    } else {
     HEAP32[18680>>2] = $18;
     ___cxa_guard_release((18688|0));
     break;
    }
   }
  }
 } while(0);
 $23 = HEAP32[18680>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $24 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$23,$__fmt,$vararg_buffer)|0);
 $25 = (($__nar) + ($24)|0);
 $26 = HEAP32[$3>>2]|0;
 $27 = $26 & 176;
 do {
  if ((($27|0) == 32)) {
   $$0$i1 = $25;
  } else if ((($27|0) == 16)) {
   $28 = HEAP8[$__nar]|0;
   if ((($28<<24>>24) == 43) | (($28<<24>>24) == 45)) {
    $29 = (($__nar) + 1|0);
    $$0$i1 = $29;
    break;
   }
   $30 = ($24|0)>(1);
   $31 = ($28<<24>>24)==(48);
   $or$cond$i = $30 & $31;
   if ($or$cond$i) {
    $32 = (($__nar) + 1|0);
    $33 = HEAP8[$32]|0;
    if ((($33<<24>>24) == 88) | (($33<<24>>24) == 120)) {
     $34 = (($__nar) + 2|0);
     $$0$i1 = $34;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(40,($__nar|0),($$0$i1|0),($25|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $41 = ___cxa_find_matching_catch(-1,-1)|0;
  $42 = tempRet0;
  $43 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
  ___resumeException($41|0);
  // unreachable;
 } else {
  $37 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($37)|0);
  $38 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $38;
  $39 = HEAP32[$__op>>2]|0;
  $40 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$39,$40,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsnprintf(($__s|0),($__n|0),($__format|0),($__va|0))|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 __THREW__ = 0;
 (invoke_ii(73,($0|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  STACKTOP = sp;return ($1|0);
 }
 return 0|0;
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i10 = 0, $$16 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__dc$013 = 0, $__dc$1 = 0, $__dg$014 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$015 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $__p$i$i$i$i1 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__grouping = sp + 28|0;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[18792>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i$i$i>>2] = 18792;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (121);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(18792,$__p$i$i$i$i,122);
 }
 $5 = HEAP32[((18792 + 4|0))>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)>($6>>>0);
 if (!($15)) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(26752|0),(102|0));
  // unreachable;
 }
 $16 = (($10) + ($6<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(26752|0),(102|0));
  // unreachable;
 }
 $20 = HEAP32[$__loc>>2]|0;
 $21 = HEAP32[18936>>2]|0;
 $22 = ($21|0)==(-1);
 if (!($22)) {
  HEAP32[$__p$i$i$i$i1>>2] = 18936;
  $23 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$23>>2] = (121);
  $24 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$24>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(18936,$__p$i$i$i$i1,122);
 }
 $25 = HEAP32[((18936 + 4|0))>>2]|0;
 $26 = (($25) + -1)|0;
 $27 = (($20) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($20) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $28;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = $33 >> 2;
 $35 = ($34>>>0)>($26>>>0);
 if (!($35)) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(26752|0),(102|0));
  // unreachable;
 }
 $36 = (($30) + ($26<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(26752|0),(102|0));
  // unreachable;
 }
 $40 = HEAP32[$37>>2]|0;
 $41 = (($40) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 FUNCTION_TABLE_vii[$42 & 63]($__grouping,$37);
 $43 = HEAP8[$__grouping]|0;
 $44 = $43 & 1;
 $45 = ($44<<24>>24)==(0);
 if ($45) {
  $48 = $43&255;
  $49 = $48 >>> 1;
  $51 = $49;
 } else {
  $46 = (($__grouping) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $51 = $47;
 }
 $50 = ($51|0)==(0);
 do {
  if ($50) {
   $52 = HEAP32[$17>>2]|0;
   $53 = (($52) + 32|0);
   $54 = HEAP32[$53>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($54|0,($17|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   if ($56) {
    label = 18;
   } else {
    $57 = $__ne;
    $58 = $__nb;
    $59 = (($57) - ($58))|0;
    $60 = (($__ob) + ($59)|0);
    HEAP32[$__oe>>2] = $60;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $65 = HEAP8[$__nb]|0;
   if ((($65<<24>>24) == 43) | (($65<<24>>24) == 45)) {
    $66 = HEAP32[$17>>2]|0;
    $67 = (($66) + 28|0);
    $68 = HEAP32[$67>>2]|0;
    __THREW__ = 0;
    $69 = (invoke_iii($68|0,($17|0),($65|0))|0);
    $70 = __THREW__; __THREW__ = 0;
    $71 = $70&1;
    if ($71) {
     label = 18;
     break;
    }
    $72 = (($__nb) + 1|0);
    $73 = HEAP32[$__oe>>2]|0;
    $74 = (($73) + 1|0);
    HEAP32[$__oe>>2] = $74;
    HEAP8[$73] = $69;
    $__nf$0 = $72;
   } else {
    $__nf$0 = $__nb;
   }
   $75 = $__ne;
   $76 = $__nf$0;
   $77 = (($75) - ($76))|0;
   $78 = ($77|0)>(1);
   if ($78) {
    $79 = HEAP8[$__nf$0]|0;
    $80 = ($79<<24>>24)==(48);
    if ($80) {
     $81 = (($__nf$0) + 1|0);
     $82 = HEAP8[$81]|0;
     if ((($82<<24>>24) == 88) | (($82<<24>>24) == 120)) {
      $83 = HEAP32[$17>>2]|0;
      $84 = (($83) + 28|0);
      $85 = HEAP32[$84>>2]|0;
      __THREW__ = 0;
      $86 = (invoke_iii($85|0,($17|0),48)|0);
      $87 = __THREW__; __THREW__ = 0;
      $88 = $87&1;
      if ($88) {
       label = 18;
       break;
      }
      $89 = HEAP32[$__oe>>2]|0;
      $90 = (($89) + 1|0);
      HEAP32[$__oe>>2] = $90;
      HEAP8[$89] = $86;
      $91 = HEAP8[$81]|0;
      $92 = HEAP32[$17>>2]|0;
      $93 = (($92) + 28|0);
      $94 = HEAP32[$93>>2]|0;
      __THREW__ = 0;
      $95 = (invoke_iii($94|0,($17|0),($91|0))|0);
      $96 = __THREW__; __THREW__ = 0;
      $97 = $96&1;
      if ($97) {
       label = 18;
       break;
      }
      $98 = (($__nf$0) + 2|0);
      $99 = HEAP32[$__oe>>2]|0;
      $100 = (($99) + 1|0);
      HEAP32[$__oe>>2] = $100;
      HEAP8[$99] = $95;
      $__nf$1 = $98;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $101 = ($__nf$1|0)==($__ne|0);
   if (!($101)) {
    $102 = (($__ne) + -1|0);
    $103 = ($102>>>0)>($__nf$1>>>0);
    if ($103) {
     $$012$i$i = $__nf$1;$106 = $102;
     while(1) {
      $104 = HEAP8[$$012$i$i]|0;
      $105 = HEAP8[$106]|0;
      HEAP8[$$012$i$i] = $105;
      HEAP8[$106] = $104;
      $107 = (($$012$i$i) + 1|0);
      $108 = (($106) + -1|0);
      $109 = ($107>>>0)<($108>>>0);
      if ($109) {
       $$012$i$i = $107;$106 = $108;
      } else {
       break;
      }
     }
    }
   }
   $110 = HEAP32[$37>>2]|0;
   $111 = (($110) + 16|0);
   $112 = HEAP32[$111>>2]|0;
   __THREW__ = 0;
   $113 = (invoke_ii($112|0,($37|0))|0);
   $114 = __THREW__; __THREW__ = 0;
   $115 = $114&1;
   if ($115) {
    label = 18;
   } else {
    $116 = ($__nf$1>>>0)<($__ne>>>0);
    L44: do {
     if ($116) {
      $117 = (($__grouping) + 1|0);
      $118 = (($__grouping) + 4|0);
      $119 = (($__grouping) + 8|0);
      $__dc$013 = 0;$__dg$014 = 0;$__p$015 = $__nf$1;
      while(1) {
       $120 = HEAP8[$__grouping]|0;
       $121 = $120 & 1;
       $122 = ($121<<24>>24)==(0);
       $123 = HEAP32[$119>>2]|0;
       $$ = $122 ? $117 : $123;
       $124 = (($$) + ($__dg$014)|0);
       $125 = HEAP8[$124]|0;
       $126 = ($125<<24>>24)==(0);
       if ($126) {
        $__dc$1 = $__dc$013;$__dg$1 = $__dg$014;
       } else {
        $127 = HEAP32[$119>>2]|0;
        $$16 = $122 ? $117 : $127;
        $128 = (($$16) + ($__dg$014)|0);
        $129 = HEAP8[$128]|0;
        $130 = $129 << 24 >> 24;
        $131 = ($__dc$013|0)==($130|0);
        if ($131) {
         $132 = HEAP32[$__oe>>2]|0;
         $133 = (($132) + 1|0);
         HEAP32[$__oe>>2] = $133;
         HEAP8[$132] = $113;
         $134 = HEAP8[$__grouping]|0;
         $135 = $134 & 1;
         $136 = ($135<<24>>24)==(0);
         if ($136) {
          $138 = $134&255;
          $139 = $138 >>> 1;
          $141 = $139;
         } else {
          $137 = HEAP32[$118>>2]|0;
          $141 = $137;
         }
         $140 = (($141) + -1)|0;
         $142 = ($__dg$014>>>0)<($140>>>0);
         $143 = $142&1;
         $$__dg$0 = (($143) + ($__dg$014))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$013;$__dg$1 = $__dg$014;
        }
       }
       $144 = HEAP8[$__p$015]|0;
       $145 = HEAP32[$17>>2]|0;
       $146 = (($145) + 28|0);
       $147 = HEAP32[$146>>2]|0;
       __THREW__ = 0;
       $148 = (invoke_iii($147|0,($17|0),($144|0))|0);
       $149 = __THREW__; __THREW__ = 0;
       $150 = $149&1;
       if ($150) {
        break;
       }
       $151 = HEAP32[$__oe>>2]|0;
       $152 = (($151) + 1|0);
       HEAP32[$__oe>>2] = $152;
       HEAP8[$151] = $148;
       $153 = (($__dc$1) + 1)|0;
       $154 = (($__p$015) + 1|0);
       $155 = ($154>>>0)<($__ne>>>0);
       if ($155) {
        $__dc$013 = $153;$__dg$014 = $__dg$1;$__p$015 = $154;
       } else {
        break L44;
       }
      }
      $61 = ___cxa_find_matching_catch(-1,-1)|0;
      $62 = tempRet0;
      $lpad$phi$index = $61;$lpad$phi$index2 = $62;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
    } while(0);
    $156 = $__nf$1;
    $157 = $__nb;
    $158 = (($156) - ($157))|0;
    $159 = (($__ob) + ($158)|0);
    $160 = HEAP32[$__oe>>2]|0;
    $161 = ($159|0)==($160|0);
    if (!($161)) {
     $162 = (($160) + -1|0);
     $163 = ($162>>>0)>($159>>>0);
     if ($163) {
      $$012$i$i10 = $159;$166 = $162;
      while(1) {
       $164 = HEAP8[$$012$i$i10]|0;
       $165 = HEAP8[$166]|0;
       HEAP8[$$012$i$i10] = $165;
       HEAP8[$166] = $164;
       $167 = (($$012$i$i10) + 1|0);
       $168 = (($166) + -1|0);
       $169 = ($167>>>0)<($168>>>0);
       if ($169) {
        $$012$i$i10 = $167;$166 = $168;
       } else {
        break;
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 18) {
  $63 = ___cxa_find_matching_catch(-1,-1)|0;
  $64 = tempRet0;
  $lpad$phi$index = $63;$lpad$phi$index2 = $64;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $170 = ($__np|0)==($__ne|0);
 if ($170) {
  $171 = HEAP32[$__oe>>2]|0;
  $storemerge = $171;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 } else {
  $172 = $__np;
  $173 = $__nb;
  $174 = (($172) - ($173))|0;
  $175 = (($__ob) + ($174)|0);
  $storemerge = $175;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$agg$result>>2] = 0;
  STACKTOP = sp;return;
 }
 $2 = $__oe;
 $3 = $__ob;
 $4 = (($2) - ($3))|0;
 $5 = (($__iob) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>($4|0);
 $8 = (($6) - ($4))|0;
 $__ns$0 = $7 ? $8 : 0;
 $9 = $__op;
 $10 = (($9) - ($3))|0;
 $11 = ($10|0)>(0);
 if ($11) {
  $12 = HEAP32[$0>>2]|0;
  $13 = (($12) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (FUNCTION_TABLE_iiii[$14 & 31]($0,$__ob,$10)|0);
  $16 = ($15|0)==($10|0);
  if (!($16)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $17 = ($__ns$0|0)>(0);
 do {
  if ($17) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($__sp,$__ns$0,$__fl);
   $18 = HEAP8[$__sp]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   if ($20) {
    $23 = (($__sp) + 1|0);
    $27 = $23;
   } else {
    $21 = (($__sp) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $27 = $22;
   }
   $24 = HEAP32[$0>>2]|0;
   $25 = (($24) + 48|0);
   $26 = HEAP32[$25>>2]|0;
   __THREW__ = 0;
   $28 = (invoke_iiii($26|0,($0|0),($27|0),($__ns$0|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if ($30) {
    $32 = ___cxa_find_matching_catch(-1,-1)|0;
    $33 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
    ___resumeException($32|0);
    // unreachable;
   }
   $31 = ($28|0)==($__ns$0|0);
   if ($31) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
    break;
   }
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
   STACKTOP = sp;return;
  }
 } while(0);
 $34 = (($2) - ($9))|0;
 $35 = ($34|0)>(0);
 if ($35) {
  $36 = HEAP32[$0>>2]|0;
  $37 = (($36) + 48|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (FUNCTION_TABLE_iiii[$38 & 31]($0,$__op,$34)|0);
  $40 = ($39|0)==($34|0);
  if (!($40)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$5>>2] = 0;
 HEAP32[$agg$result>>2] = $0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0;
 var $__oe = 0, $__op = 0, $lftr$limit = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 78|0;
 $__o = sp + 36|0;
 $__op = sp + 24|0;
 $__oe = sp + 28|0;
 $2 = sp + 16|0;
 $3 = sp + 32|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 2048;
 $12 = ($11|0)==(0);
 if ($12) {
  $$0$i = $8;
 } else {
  $13 = (($__fmt) + 2|0);
  HEAP8[$8] = 43;
  $$0$i = $13;
 }
 $14 = $10 & 512;
 $15 = ($14|0)==(0);
 if ($15) {
  $$13$i$ph = $$0$i;
 } else {
  $16 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $16;
 }
 $lftr$limit = (($$13$i$ph) + 2|0);
 $17 = (($$13$i$ph) + 1|0);
 HEAP8[$$13$i$ph] = 108;
 HEAP8[$17] = 108;
 $18 = $10 & 74;
 do {
  if ((($18|0) == 8)) {
   $19 = $10 & 16384;
   $20 = ($19|0)==(0);
   if ($20) {
    HEAP8[$lftr$limit] = 120;
    break;
   } else {
    HEAP8[$lftr$limit] = 88;
    break;
   }
  } else if ((($18|0) == 64)) {
   HEAP8[$lftr$limit] = 111;
  } else {
   HEAP8[$lftr$limit] = 100;
  }
 } while(0);
 $21 = HEAP8[18688]|0;
 $22 = ($21<<24>>24)==(0);
 do {
  if ($22) {
   $23 = (___cxa_guard_acquire((18688|0))|0);
   $24 = ($23|0)==(0);
   if (!($24)) {
    __THREW__ = 0;
    $25 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     $28 = ___cxa_find_matching_catch(-1,-1)|0;
     $29 = tempRet0;
     ___cxa_guard_abort((18688|0));
     ___resumeException($28|0);
     // unreachable;
    } else {
     HEAP32[18680>>2] = $25;
     ___cxa_guard_release((18688|0));
     break;
    }
   }
  }
 } while(0);
 $30 = HEAP32[18680>>2]|0;
 $31 = $vararg_buffer;
 $32 = $31;
 HEAP32[$32>>2] = $0;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = $1;
 $35 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$30,$__fmt,$vararg_buffer)|0);
 $36 = (($__nar) + ($35)|0);
 $37 = HEAP32[$9>>2]|0;
 $38 = $37 & 176;
 do {
  if ((($38|0) == 16)) {
   $39 = HEAP8[$__nar]|0;
   if ((($39<<24>>24) == 43) | (($39<<24>>24) == 45)) {
    $40 = (($__nar) + 1|0);
    $$0$i1 = $40;
    break;
   }
   $41 = ($35|0)>(1);
   $42 = ($39<<24>>24)==(48);
   $or$cond$i = $41 & $42;
   if ($or$cond$i) {
    $43 = (($__nar) + 1|0);
    $44 = HEAP8[$43]|0;
    if ((($44<<24>>24) == 88) | (($44<<24>>24) == 120)) {
     $45 = (($__nar) + 2|0);
     $$0$i1 = $45;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else if ((($38|0) == 32)) {
   $$0$i1 = $36;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(40,($__nar|0),($$0$i1|0),($36|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $52 = ___cxa_find_matching_catch(-1,-1)|0;
  $53 = tempRet0;
  $54 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($54)|0);
  ___resumeException($52|0);
  // unreachable;
 } else {
  $48 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
  $49 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $49;
  $50 = HEAP32[$__op>>2]|0;
  $51 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$50,$51,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $$byval_copy = sp + 12|0;
 $vararg_buffer = sp;
 $__fmt = sp + 24|0;
 $__nar = sp + 52|0;
 $__o = sp + 30|0;
 $__op = sp + 16|0;
 $__oe = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp + 20|0;
 ;HEAP8[$__fmt+0|0]=HEAP8[17584+0|0]|0;HEAP8[$__fmt+1|0]=HEAP8[17584+1|0]|0;HEAP8[$__fmt+2|0]=HEAP8[17584+2|0]|0;HEAP8[$__fmt+3|0]=HEAP8[17584+3|0]|0;HEAP8[$__fmt+4|0]=HEAP8[17584+4|0]|0;HEAP8[$__fmt+5|0]=HEAP8[17584+5|0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 2048;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0$i = $2;
 } else {
  $7 = (($__fmt) + 2|0);
  HEAP8[$2] = 43;
  $$0$i = $7;
 }
 $8 = $4 & 512;
 $9 = ($8|0)==(0);
 if ($9) {
  $$13$i$ph = $$0$i;
 } else {
  $10 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $10;
 }
 HEAP8[$$13$i$ph] = 108;
 $scevgep = (($$13$i$ph) + 1|0);
 $11 = $4 & 74;
 do {
  if ((($11|0) == 8)) {
   $12 = $4 & 16384;
   $13 = ($12|0)==(0);
   if ($13) {
    HEAP8[$scevgep] = 120;
    break;
   } else {
    HEAP8[$scevgep] = 88;
    break;
   }
  } else if ((($11|0) == 64)) {
   HEAP8[$scevgep] = 111;
  } else {
   HEAP8[$scevgep] = 117;
  }
 } while(0);
 $14 = HEAP8[18688]|0;
 $15 = ($14<<24>>24)==(0);
 do {
  if ($15) {
   $16 = (___cxa_guard_acquire((18688|0))|0);
   $17 = ($16|0)==(0);
   if (!($17)) {
    __THREW__ = 0;
    $18 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(-1,-1)|0;
     $22 = tempRet0;
     ___cxa_guard_abort((18688|0));
     ___resumeException($21|0);
     // unreachable;
    } else {
     HEAP32[18680>>2] = $18;
     ___cxa_guard_release((18688|0));
     break;
    }
   }
  }
 } while(0);
 $23 = HEAP32[18680>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $24 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$23,$__fmt,$vararg_buffer)|0);
 $25 = (($__nar) + ($24)|0);
 $26 = HEAP32[$3>>2]|0;
 $27 = $26 & 176;
 do {
  if ((($27|0) == 32)) {
   $$0$i1 = $25;
  } else if ((($27|0) == 16)) {
   $28 = HEAP8[$__nar]|0;
   if ((($28<<24>>24) == 43) | (($28<<24>>24) == 45)) {
    $29 = (($__nar) + 1|0);
    $$0$i1 = $29;
    break;
   }
   $30 = ($24|0)>(1);
   $31 = ($28<<24>>24)==(48);
   $or$cond$i = $30 & $31;
   if ($or$cond$i) {
    $32 = (($__nar) + 1|0);
    $33 = HEAP8[$32]|0;
    if ((($33<<24>>24) == 88) | (($33<<24>>24) == 120)) {
     $34 = (($__nar) + 2|0);
     $$0$i1 = $34;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(40,($__nar|0),($$0$i1|0),($25|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $41 = ___cxa_find_matching_catch(-1,-1)|0;
  $42 = tempRet0;
  $43 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
  ___resumeException($41|0);
  // unreachable;
 } else {
  $37 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($37)|0);
  $38 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $38;
  $39 = HEAP32[$__op>>2]|0;
  $40 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$39,$40,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0;
 var $__oe = 0, $__op = 0, $lftr$limit = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 79|0;
 $__o = sp + 36|0;
 $__op = sp + 24|0;
 $__oe = sp + 28|0;
 $2 = sp + 16|0;
 $3 = sp + 32|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 2048;
 $12 = ($11|0)==(0);
 if ($12) {
  $$0$i = $8;
 } else {
  $13 = (($__fmt) + 2|0);
  HEAP8[$8] = 43;
  $$0$i = $13;
 }
 $14 = $10 & 512;
 $15 = ($14|0)==(0);
 if ($15) {
  $$13$i$ph = $$0$i;
 } else {
  $16 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $16;
 }
 $lftr$limit = (($$13$i$ph) + 2|0);
 $17 = (($$13$i$ph) + 1|0);
 HEAP8[$$13$i$ph] = 108;
 HEAP8[$17] = 108;
 $18 = $10 & 74;
 do {
  if ((($18|0) == 64)) {
   HEAP8[$lftr$limit] = 111;
  } else if ((($18|0) == 8)) {
   $19 = $10 & 16384;
   $20 = ($19|0)==(0);
   if ($20) {
    HEAP8[$lftr$limit] = 120;
    break;
   } else {
    HEAP8[$lftr$limit] = 88;
    break;
   }
  } else {
   HEAP8[$lftr$limit] = 117;
  }
 } while(0);
 $21 = HEAP8[18688]|0;
 $22 = ($21<<24>>24)==(0);
 do {
  if ($22) {
   $23 = (___cxa_guard_acquire((18688|0))|0);
   $24 = ($23|0)==(0);
   if (!($24)) {
    __THREW__ = 0;
    $25 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     $28 = ___cxa_find_matching_catch(-1,-1)|0;
     $29 = tempRet0;
     ___cxa_guard_abort((18688|0));
     ___resumeException($28|0);
     // unreachable;
    } else {
     HEAP32[18680>>2] = $25;
     ___cxa_guard_release((18688|0));
     break;
    }
   }
  }
 } while(0);
 $30 = HEAP32[18680>>2]|0;
 $31 = $vararg_buffer;
 $32 = $31;
 HEAP32[$32>>2] = $0;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = $1;
 $35 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$30,$__fmt,$vararg_buffer)|0);
 $36 = (($__nar) + ($35)|0);
 $37 = HEAP32[$9>>2]|0;
 $38 = $37 & 176;
 do {
  if ((($38|0) == 32)) {
   $$0$i1 = $36;
  } else if ((($38|0) == 16)) {
   $39 = HEAP8[$__nar]|0;
   if ((($39<<24>>24) == 43) | (($39<<24>>24) == 45)) {
    $40 = (($__nar) + 1|0);
    $$0$i1 = $40;
    break;
   }
   $41 = ($35|0)>(1);
   $42 = ($39<<24>>24)==(48);
   $or$cond$i = $41 & $42;
   if ($or$cond$i) {
    $43 = (($__nar) + 1|0);
    $44 = HEAP8[$43]|0;
    if ((($44<<24>>24) == 88) | (($44<<24>>24) == 120)) {
     $45 = (($__nar) + 2|0);
     $$0$i1 = $45;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(40,($__nar|0),($$0$i1|0),($36|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $52 = ___cxa_find_matching_catch(-1,-1)|0;
  $53 = tempRet0;
  $54 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($54)|0);
  ___resumeException($52|0);
  // unreachable;
 } else {
  $48 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
  $49 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $49;
  $50 = HEAP32[$__op>>2]|0;
  $51 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$50,$51,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$0$i7 = 0, $$01 = 0, $$1$i = 0, $$118 = 0, $$1217 = 0, $$byval_copy = 0, $$pre = 0, $$pre19 = 0, $$pre20 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0;
 var $specify_precision$0$off0$ph$i12 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer9 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $$byval_copy = sp + 84|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer12 = sp + 8|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer = sp + 32|0;
 $__fmt = sp;
 $__nar = sp + 88|0;
 $__nb = sp + 64|0;
 $__o = sp + 118|0;
 $__op = sp + 72|0;
 $__oe = sp + 76|0;
 $0 = sp + 68|0;
 $1 = sp + 60|0;
 $2 = sp + 80|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2048;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0$i = $7;
 } else {
  $12 = (($__fmt) + 2|0);
  HEAP8[$7] = 43;
  $$0$i = $12;
 }
 $13 = $9 & 1024;
 $14 = ($13|0)==(0);
 if ($14) {
  $$1$i = $$0$i;
 } else {
  $15 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$1$i = $15;
 }
 $16 = $9 & 260;
 $17 = $9 >>> 14;
 $18 = ($16|0)==(260);
 do {
  if ($18) {
   $25 = $17 & 1;
   $26 = ($25|0)==(0);
   if ($26) {
    HEAP8[$$1$i] = 97;
    $specify_precision$0$off0$ph$i12 = 0;
    break;
   } else {
    HEAP8[$$1$i] = 65;
    $specify_precision$0$off0$ph$i12 = 0;
    break;
   }
  } else {
   $19 = (($$1$i) + 1|0);
   HEAP8[$$1$i] = 46;
   $20 = (($$1$i) + 2|0);
   HEAP8[$19] = 42;
   if ((($16|0) == 256)) {
    $23 = $17 & 1;
    $24 = ($23|0)==(0);
    if ($24) {
     HEAP8[$20] = 101;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    } else {
     HEAP8[$20] = 69;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    }
   } else if ((($16|0) == 4)) {
    $21 = $17 & 1;
    $22 = ($21|0)==(0);
    if ($22) {
     HEAP8[$20] = 102;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    } else {
     HEAP8[$20] = 70;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    }
   } else {
    $27 = $17 & 1;
    $28 = ($27|0)==(0);
    if ($28) {
     HEAP8[$20] = 103;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    } else {
     HEAP8[$20] = 71;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__nb>>2] = $__nar;
 $29 = HEAP8[18688]|0;
 $30 = ($29<<24>>24)==(0);
 do {
  if ($30) {
   $31 = (___cxa_guard_acquire((18688|0))|0);
   $32 = ($31|0)==(0);
   if (!($32)) {
    __THREW__ = 0;
    $33 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     $36 = ___cxa_find_matching_catch(-1,-1)|0;
     $37 = tempRet0;
     ___cxa_guard_abort((18688|0));
     ___resumeException($36|0);
     // unreachable;
    } else {
     HEAP32[18680>>2] = $33;
     ___cxa_guard_release((18688|0));
     break;
    }
   }
  }
 } while(0);
 $38 = HEAP32[18680>>2]|0;
 if ($specify_precision$0$off0$ph$i12) {
  $39 = (($__iob) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  HEAP32[$vararg_buffer>>2] = $40;
  $vararg_ptr8 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $41 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$38,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $41;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $42 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$38,$__fmt,$vararg_buffer9)|0);
  $__nc$0 = $42;
 }
 $43 = ($__nc$0|0)>(29);
 do {
  if ($43) {
   $44 = HEAP8[18688]|0;
   $45 = ($44<<24>>24)==(0);
   L41: do {
    if ($specify_precision$0$off0$ph$i12) {
     do {
      if ($45) {
       $46 = (___cxa_guard_acquire((18688|0))|0);
       $47 = ($46|0)==(0);
       if (!($47)) {
        __THREW__ = 0;
        $48 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
        $49 = __THREW__; __THREW__ = 0;
        $50 = $49&1;
        if ($50) {
         $51 = ___cxa_find_matching_catch(-1,-1)|0;
         $52 = tempRet0;
         ___cxa_guard_abort((18688|0));
         $eh$lpad$body$index3Z2D = $52;$eh$lpad$body$indexZ2D = $51;
         break L41;
        } else {
         HEAP32[18680>>2] = $48;
         ___cxa_guard_release((18688|0));
         break;
        }
       }
      }
     } while(0);
     $53 = HEAP32[18680>>2]|0;
     $54 = (($__iob) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer12>>2] = $55;
     $vararg_ptr15 = (($vararg_buffer12) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr15>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr15+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $56 = (invoke_iiiii(13,($__nb|0),($53|0),($__fmt|0),($vararg_buffer12|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 36;
     } else {
      $__nc$1 = $56;
      label = 44;
     }
    } else {
     do {
      if ($45) {
       $61 = (___cxa_guard_acquire((18688|0))|0);
       $62 = ($61|0)==(0);
       if (!($62)) {
        __THREW__ = 0;
        $63 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
        $64 = __THREW__; __THREW__ = 0;
        $65 = $64&1;
        if ($65) {
         $66 = ___cxa_find_matching_catch(-1,-1)|0;
         $67 = tempRet0;
         ___cxa_guard_abort((18688|0));
         $eh$lpad$body$index3Z2D = $67;$eh$lpad$body$indexZ2D = $66;
         break L41;
        } else {
         HEAP32[18680>>2] = $63;
         ___cxa_guard_release((18688|0));
         break;
        }
       }
      }
     } while(0);
     $68 = HEAP32[18680>>2]|0;
     $69 = (($__iob) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer16>>2] = $70;
     $vararg_ptr19 = (($vararg_buffer16) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr19+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $71 = (invoke_iiiii(13,($__nb|0),($68|0),($__fmt|0),($vararg_buffer16|0))|0);
     $72 = __THREW__; __THREW__ = 0;
     $73 = $72&1;
     if ($73) {
      label = 36;
     } else {
      $__nc$1 = $71;
      label = 44;
     }
    }
   } while(0);
   if ((label|0) == 44) {
    $74 = HEAP32[$__nb>>2]|0;
    $75 = ($74|0)==(0|0);
    if (!($75)) {
     $116 = $74;$79 = $74;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(4);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 36;
    } else {
     $$pre = HEAP32[$__nb>>2]|0;
     $116 = $$pre;$79 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   if ((label|0) == 36) {
    $59 = ___cxa_find_matching_catch(-1,-1)|0;
    $60 = tempRet0;
    $eh$lpad$body$index3Z2D = $60;$eh$lpad$body$indexZ2D = $59;
   }
   $$118 = $eh$lpad$body$indexZ2D;$$1217 = $eh$lpad$body$index3Z2D;
   ___resumeException($$118|0);
   // unreachable;
  } else {
   $$pre19 = HEAP32[$__nb>>2]|0;
   $116 = 0;$79 = $$pre19;$__nc$2 = $__nc$0;
  }
 } while(0);
 $78 = (($79) + ($__nc$2)|0);
 $80 = HEAP32[$8>>2]|0;
 $81 = $80 & 176;
 do {
  if ((($81|0) == 32)) {
   $$0$i7 = $78;
  } else if ((($81|0) == 16)) {
   $82 = HEAP8[$79]|0;
   if ((($82<<24>>24) == 43) | (($82<<24>>24) == 45)) {
    $83 = (($79) + 1|0);
    $$0$i7 = $83;
    break;
   }
   $84 = ($__nc$2|0)>(1);
   $85 = ($82<<24>>24)==(48);
   $or$cond$i = $84 & $85;
   if ($or$cond$i) {
    $86 = (($79) + 1|0);
    $87 = HEAP8[$86]|0;
    if ((($87<<24>>24) == 88) | (($87<<24>>24) == 120)) {
     $88 = (($79) + 2|0);
     $$0$i7 = $88;
    } else {
     label = 53;
    }
   } else {
    label = 53;
   }
  } else {
   label = 53;
  }
 } while(0);
 if ((label|0) == 53) {
  $$0$i7 = $79;
 }
 $89 = ($79|0)==($__nar|0);
 if ($89) {
  $110 = 0;$99 = $__nar;$__ob$0 = $__o;
  label = 59;
 } else {
  $90 = $__nc$2 << 1;
  $91 = (_malloc($90)|0);
  $92 = ($91|0)==(0|0);
  if ($92) {
   __THREW__ = 0;
   invoke_v(4);
   $93 = __THREW__; __THREW__ = 0;
   $94 = $93&1;
   if ($94) {
    $135 = 0;
    label = 58;
   } else {
    $$pre20 = HEAP32[$__nb>>2]|0;
    $110 = 0;$99 = $$pre20;$__ob$0 = 0;
    label = 59;
   }
  } else {
   $110 = $91;$99 = $79;$__ob$0 = $91;
   label = 59;
  }
 }
 do {
  if ((label|0) == 59) {
   __THREW__ = 0;
   invoke_vii(48,($0|0),($__iob|0));
   $97 = __THREW__; __THREW__ = 0;
   $98 = $97&1;
   if ($98) {
    $135 = $110;
    label = 58;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(41,($99|0),($$0$i7|0),($78|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $100 = __THREW__; __THREW__ = 0;
    $101 = $100&1;
    if ($101) {
     $121 = ___cxa_find_matching_catch(-1,-1)|0;
     $122 = tempRet0;
     $123 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($123)|0);
     $$0 = $121;$$01 = $122;$125 = $110;
     break;
    }
    $102 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($102)|0);
    $103 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $103;
    $104 = HEAP32[$__op>>2]|0;
    $105 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(42,($1|0),($$byval_copy|0),($__ob$0|0),($104|0),($105|0),($__iob|0),($__fl|0));
    $106 = __THREW__; __THREW__ = 0;
    $107 = $106&1;
    if ($107) {
     $135 = $110;
     label = 58;
    } else {
     $108 = HEAP32[$1>>2]|0;
     HEAP32[$__s>>2] = $108;
     HEAP32[$agg$result>>2] = $108;
     $109 = ($110|0)==(0|0);
     if (!($109)) {
      __THREW__ = 0;
      invoke_vi(112,($110|0));
      $111 = __THREW__; __THREW__ = 0;
      $112 = $111&1;
      if ($112) {
       $113 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $114 = tempRet0;
       ___clang_call_terminate($113);
       // unreachable;
      }
     }
     $115 = ($116|0)==(0|0);
     if ($115) {
      STACKTOP = sp;return;
     }
     __THREW__ = 0;
     invoke_vi(112,($116|0));
     $117 = __THREW__; __THREW__ = 0;
     $118 = $117&1;
     if ($118) {
      $119 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $120 = tempRet0;
      ___clang_call_terminate($119);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 58) {
  $95 = ___cxa_find_matching_catch(-1,-1)|0;
  $96 = tempRet0;
  $$0 = $95;$$01 = $96;$125 = $135;
 }
 $124 = ($125|0)==(0|0);
 if (!($124)) {
  __THREW__ = 0;
  invoke_vi(112,($125|0));
  $126 = __THREW__; __THREW__ = 0;
  $127 = $126&1;
  if ($127) {
   $128 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $129 = tempRet0;
   ___clang_call_terminate($128);
   // unreachable;
  }
 }
 $130 = ($116|0)==(0|0);
 if ($130) {
  $$118 = $$0;$$1217 = $$01;
  ___resumeException($$118|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(112,($116|0));
 $131 = __THREW__; __THREW__ = 0;
 $132 = $131&1;
 if ($132) {
  $133 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $134 = tempRet0;
  ___clang_call_terminate($133);
  // unreachable;
 } else {
  $$118 = $$0;$$1217 = $$01;
  ___resumeException($$118|0);
  // unreachable;
 }
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 __THREW__ = 0;
 $1 = (invoke_iiii(26,($__s|0),($__format|0),($__va|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $9 = ___cxa_find_matching_catch(-1,-1)|0;
  $10 = tempRet0;
  $11 = ($0|0)==(0|0);
  if ($11) {
   ___resumeException($9|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(73,($0|0))|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $14 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   ___resumeException($9|0);
   // unreachable;
  }
 } else {
  $4 = ($0|0)==(0|0);
  if ($4) {
   STACKTOP = sp;return ($1|0);
  }
  __THREW__ = 0;
  (invoke_ii(73,($0|0))|0);
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   $7 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $8 = tempRet0;
   ___clang_call_terminate($7);
   // unreachable;
  } else {
   STACKTOP = sp;return ($1|0);
  }
 }
 return 0|0;
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i13 = 0, $$58 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$025 = 0, $__dc$1 = 0;
 var $__dg$026 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$221 = 0, $__nf$3 = 0, $__ns$043 = 0, $__ns$134 = 0, $__ns$2 = 0, $__p$027 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $eh$lpad$body$index7Z2D = 0, $eh$lpad$body$indexZ2D = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $__p$i$i$i$i1 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__grouping = sp + 28|0;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[18792>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i$i$i>>2] = 18792;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (121);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(18792,$__p$i$i$i$i,122);
 }
 $5 = HEAP32[((18792 + 4|0))>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)>($6>>>0);
 if (!($15)) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(26752|0),(102|0));
  // unreachable;
 }
 $16 = (($10) + ($6<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(26752|0),(102|0));
  // unreachable;
 }
 $20 = HEAP32[$__loc>>2]|0;
 $21 = HEAP32[18936>>2]|0;
 $22 = ($21|0)==(-1);
 if (!($22)) {
  HEAP32[$__p$i$i$i$i1>>2] = 18936;
  $23 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$23>>2] = (121);
  $24 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$24>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(18936,$__p$i$i$i$i1,122);
 }
 $25 = HEAP32[((18936 + 4|0))>>2]|0;
 $26 = (($25) + -1)|0;
 $27 = (($20) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($20) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $28;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = $33 >> 2;
 $35 = ($34>>>0)>($26>>>0);
 if (!($35)) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(26752|0),(102|0));
  // unreachable;
 }
 $36 = (($30) + ($26<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(26752|0),(102|0));
  // unreachable;
 }
 $40 = HEAP32[$37>>2]|0;
 $41 = (($40) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 FUNCTION_TABLE_vii[$42 & 63]($__grouping,$37);
 HEAP32[$__oe>>2] = $__ob;
 $43 = HEAP8[$__nb]|0;
 if ((($43<<24>>24) == 43) | (($43<<24>>24) == 45)) {
  $44 = HEAP32[$17>>2]|0;
  $45 = (($44) + 28|0);
  $46 = HEAP32[$45>>2]|0;
  __THREW__ = 0;
  $47 = (invoke_iii($46|0,($17|0),($43|0))|0);
  $48 = __THREW__; __THREW__ = 0;
  $49 = $48&1;
  if (!($49)) {
   $50 = (($__nb) + 1|0);
   $51 = HEAP32[$__oe>>2]|0;
   $52 = (($51) + 1|0);
   HEAP32[$__oe>>2] = $52;
   HEAP8[$51] = $47;
   $__nf$0 = $50;
   label = 20;
  }
 } else {
  $__nf$0 = $__nb;
  label = 20;
 }
 L22: do {
  if ((label|0) == 20) {
   $63 = $__ne;
   $64 = $__nf$0;
   $65 = (($63) - ($64))|0;
   $66 = ($65|0)>(1);
   L24: do {
    if ($66) {
     $68 = HEAP8[$__nf$0]|0;
     $69 = ($68<<24>>24)==(48);
     if ($69) {
      $70 = (($__nf$0) + 1|0);
      $71 = HEAP8[$70]|0;
      if ((($71<<24>>24) == 88) | (($71<<24>>24) == 120)) {
       $72 = HEAP32[$17>>2]|0;
       $73 = (($72) + 28|0);
       $74 = HEAP32[$73>>2]|0;
       __THREW__ = 0;
       $75 = (invoke_iii($74|0,($17|0),48)|0);
       $76 = __THREW__; __THREW__ = 0;
       $77 = $76&1;
       if ($77) {
        break L22;
       }
       $78 = HEAP32[$__oe>>2]|0;
       $79 = (($78) + 1|0);
       HEAP32[$__oe>>2] = $79;
       HEAP8[$78] = $75;
       $80 = (($__nf$0) + 2|0);
       $81 = HEAP8[$70]|0;
       $82 = HEAP32[$17>>2]|0;
       $83 = (($82) + 28|0);
       $84 = HEAP32[$83>>2]|0;
       __THREW__ = 0;
       $85 = (invoke_iii($84|0,($17|0),($81|0))|0);
       $86 = __THREW__; __THREW__ = 0;
       $87 = $86&1;
       if ($87) {
        break L22;
       }
       $88 = HEAP32[$__oe>>2]|0;
       $89 = (($88) + 1|0);
       HEAP32[$__oe>>2] = $89;
       HEAP8[$88] = $85;
       $90 = ($80>>>0)<($__ne>>>0);
       if ($90) {
        $__ns$043 = $80;
        while(1) {
         $93 = HEAP8[$__ns$043]|0;
         $94 = HEAP8[18688]|0;
         $95 = ($94<<24>>24)==(0);
         if ($95) {
          $96 = (___cxa_guard_acquire((18688|0))|0);
          $97 = ($96|0)==(0);
          if (!($97)) {
           __THREW__ = 0;
           $98 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
           $99 = __THREW__; __THREW__ = 0;
           $100 = $99&1;
           if ($100) {
            label = 32;
            break;
           }
           HEAP32[18680>>2] = $98;
           ___cxa_guard_release((18688|0));
          }
         }
         $103 = HEAP32[18680>>2]|0;
         $104 = $93 << 24 >> 24;
         __THREW__ = 0;
         $105 = (invoke_iii(18,($104|0),($103|0))|0);
         $106 = __THREW__; __THREW__ = 0;
         $107 = $106&1;
         if ($107) {
          label = 17;
          break;
         }
         $108 = ($105|0)==(0);
         $92 = (($__ns$043) + 1|0);
         if ($108) {
          $__nf$1 = $80;$__ns$2 = $__ns$043;
          break L24;
         }
         $91 = ($92>>>0)<($__ne>>>0);
         if ($91) {
          $__ns$043 = $92;
         } else {
          $__nf$1 = $80;$__ns$2 = $92;
          break L24;
         }
        }
        if ((label|0) == 17) {
         $59 = ___cxa_find_matching_catch(-1,-1)|0;
         $60 = tempRet0;
         $eh$lpad$body$index7Z2D = $60;$eh$lpad$body$indexZ2D = $59;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
         ___resumeException($eh$lpad$body$indexZ2D|0);
         // unreachable;
        }
        else if ((label|0) == 32) {
         $101 = ___cxa_find_matching_catch(-1,-1)|0;
         $102 = tempRet0;
         ___cxa_guard_abort((18688|0));
         $eh$lpad$body$index7Z2D = $102;$eh$lpad$body$indexZ2D = $101;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
         ___resumeException($eh$lpad$body$indexZ2D|0);
         // unreachable;
        }
       } else {
        $__nf$1 = $80;$__ns$2 = $80;
       }
      } else {
       label = 21;
      }
     } else {
      label = 21;
     }
    } else {
     label = 21;
    }
   } while(0);
   L44: do {
    if ((label|0) == 21) {
     $67 = ($__nf$0>>>0)<($__ne>>>0);
     if ($67) {
      $__ns$134 = $__nf$0;
      while(1) {
       $111 = HEAP8[$__ns$134]|0;
       $112 = HEAP8[18688]|0;
       $113 = ($112<<24>>24)==(0);
       if ($113) {
        $114 = (___cxa_guard_acquire((18688|0))|0);
        $115 = ($114|0)==(0);
        if (!($115)) {
         __THREW__ = 0;
         $116 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
         $117 = __THREW__; __THREW__ = 0;
         $118 = $117&1;
         if ($118) {
          label = 40;
          break;
         }
         HEAP32[18680>>2] = $116;
         ___cxa_guard_release((18688|0));
        }
       }
       $121 = HEAP32[18680>>2]|0;
       $122 = $111 << 24 >> 24;
       __THREW__ = 0;
       $123 = (invoke_iii(19,($122|0),($121|0))|0);
       $124 = __THREW__; __THREW__ = 0;
       $125 = $124&1;
       if ($125) {
        label = 16;
        break;
       }
       $126 = ($123|0)==(0);
       $110 = (($__ns$134) + 1|0);
       if ($126) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$134;
        break L44;
       }
       $109 = ($110>>>0)<($__ne>>>0);
       if ($109) {
        $__ns$134 = $110;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $110;
        break L44;
       }
      }
      if ((label|0) == 16) {
       $57 = ___cxa_find_matching_catch(-1,-1)|0;
       $58 = tempRet0;
       $eh$lpad$body$index7Z2D = $58;$eh$lpad$body$indexZ2D = $57;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       ___resumeException($eh$lpad$body$indexZ2D|0);
       // unreachable;
      }
      else if ((label|0) == 40) {
       $119 = ___cxa_find_matching_catch(-1,-1)|0;
       $120 = tempRet0;
       ___cxa_guard_abort((18688|0));
       $eh$lpad$body$index7Z2D = $120;$eh$lpad$body$indexZ2D = $119;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       ___resumeException($eh$lpad$body$indexZ2D|0);
       // unreachable;
      }
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $127 = HEAP8[$__grouping]|0;
   $128 = $127 & 1;
   $129 = ($128<<24>>24)==(0);
   if ($129) {
    $132 = $127&255;
    $133 = $132 >>> 1;
    $135 = $133;
   } else {
    $130 = (($__grouping) + 4|0);
    $131 = HEAP32[$130>>2]|0;
    $135 = $131;
   }
   $134 = ($135|0)==(0);
   if ($134) {
    $136 = HEAP32[$__oe>>2]|0;
    $137 = HEAP32[$17>>2]|0;
    $138 = (($137) + 32|0);
    $139 = HEAP32[$138>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($139|0,($17|0),($__nf$1|0),($__ns$2|0),($136|0))|0);
    $140 = __THREW__; __THREW__ = 0;
    $141 = $140&1;
    if ($141) {
     break;
    }
    $142 = $__ns$2;
    $143 = $__nf$1;
    $144 = (($142) - ($143))|0;
    $145 = HEAP32[$__oe>>2]|0;
    $146 = (($145) + ($144)|0);
    HEAP32[$__oe>>2] = $146;
   } else {
    $147 = ($__nf$1|0)==($__ns$2|0);
    if (!($147)) {
     $148 = (($__ns$2) + -1|0);
     $149 = ($148>>>0)>($__nf$1>>>0);
     if ($149) {
      $$012$i$i = $__nf$1;$152 = $148;
      while(1) {
       $150 = HEAP8[$$012$i$i]|0;
       $151 = HEAP8[$152]|0;
       HEAP8[$$012$i$i] = $151;
       HEAP8[$152] = $150;
       $153 = (($$012$i$i) + 1|0);
       $154 = (($152) + -1|0);
       $155 = ($153>>>0)<($154>>>0);
       if ($155) {
        $$012$i$i = $153;$152 = $154;
       } else {
        break;
       }
      }
     }
    }
    $156 = HEAP32[$37>>2]|0;
    $157 = (($156) + 16|0);
    $158 = HEAP32[$157>>2]|0;
    __THREW__ = 0;
    $159 = (invoke_ii($158|0,($37|0))|0);
    $160 = __THREW__; __THREW__ = 0;
    $161 = $160&1;
    if ($161) {
     break;
    }
    $162 = ($__nf$1>>>0)<($__ns$2>>>0);
    L73: do {
     if ($162) {
      $163 = (($__grouping) + 1|0);
      $164 = (($__grouping) + 4|0);
      $165 = (($__grouping) + 8|0);
      $__dc$025 = 0;$__dg$026 = 0;$__p$027 = $__nf$1;
      while(1) {
       $166 = HEAP8[$__grouping]|0;
       $167 = $166 & 1;
       $168 = ($167<<24>>24)==(0);
       $169 = HEAP32[$165>>2]|0;
       $$ = $168 ? $163 : $169;
       $170 = (($$) + ($__dg$026)|0);
       $171 = HEAP8[$170]|0;
       $172 = ($171<<24>>24)>(0);
       if ($172) {
        $173 = HEAP32[$165>>2]|0;
        $$58 = $168 ? $163 : $173;
        $174 = (($$58) + ($__dg$026)|0);
        $175 = HEAP8[$174]|0;
        $176 = $175 << 24 >> 24;
        $177 = ($__dc$025|0)==($176|0);
        if ($177) {
         $178 = HEAP32[$__oe>>2]|0;
         $179 = (($178) + 1|0);
         HEAP32[$__oe>>2] = $179;
         HEAP8[$178] = $159;
         $180 = HEAP8[$__grouping]|0;
         $181 = $180 & 1;
         $182 = ($181<<24>>24)==(0);
         if ($182) {
          $184 = $180&255;
          $185 = $184 >>> 1;
          $187 = $185;
         } else {
          $183 = HEAP32[$164>>2]|0;
          $187 = $183;
         }
         $186 = (($187) + -1)|0;
         $188 = ($__dg$026>>>0)<($186>>>0);
         $189 = $188&1;
         $$__dg$0 = (($189) + ($__dg$026))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$025;$__dg$1 = $__dg$026;
        }
       } else {
        $__dc$1 = $__dc$025;$__dg$1 = $__dg$026;
       }
       $190 = HEAP8[$__p$027]|0;
       $191 = HEAP32[$17>>2]|0;
       $192 = (($191) + 28|0);
       $193 = HEAP32[$192>>2]|0;
       __THREW__ = 0;
       $194 = (invoke_iii($193|0,($17|0),($190|0))|0);
       $195 = __THREW__; __THREW__ = 0;
       $196 = $195&1;
       if ($196) {
        break;
       }
       $197 = HEAP32[$__oe>>2]|0;
       $198 = (($197) + 1|0);
       HEAP32[$__oe>>2] = $198;
       HEAP8[$197] = $194;
       $199 = (($__dc$1) + 1)|0;
       $200 = (($__p$027) + 1|0);
       $201 = ($200>>>0)<($__ns$2>>>0);
       if ($201) {
        $__dc$025 = $199;$__dg$026 = $__dg$1;$__p$027 = $200;
       } else {
        break L73;
       }
      }
      $55 = ___cxa_find_matching_catch(-1,-1)|0;
      $56 = tempRet0;
      $eh$lpad$body$index7Z2D = $56;$eh$lpad$body$indexZ2D = $55;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
    } while(0);
    $202 = $__nf$1;
    $203 = $__nb;
    $204 = (($202) - ($203))|0;
    $205 = (($__ob) + ($204)|0);
    $206 = HEAP32[$__oe>>2]|0;
    $207 = ($205|0)==($206|0);
    if (!($207)) {
     $208 = (($206) + -1|0);
     $209 = ($208>>>0)>($205>>>0);
     if ($209) {
      $$012$i$i13 = $205;$212 = $208;
      while(1) {
       $210 = HEAP8[$$012$i$i13]|0;
       $211 = HEAP8[$212]|0;
       HEAP8[$$012$i$i13] = $211;
       HEAP8[$212] = $210;
       $213 = (($$012$i$i13) + 1|0);
       $214 = (($212) + -1|0);
       $215 = ($213>>>0)<($214>>>0);
       if ($215) {
        $$012$i$i13 = $213;$212 = $214;
       } else {
        break;
       }
      }
     }
    }
   }
   $216 = ($__ns$2>>>0)<($__ne>>>0);
   L95: do {
    if ($216) {
     $__nf$221 = $__ns$2;
     while(1) {
      $217 = HEAP8[$__nf$221]|0;
      $218 = ($217<<24>>24)==(46);
      if ($218) {
       label = 69;
       break;
      }
      $228 = HEAP32[$17>>2]|0;
      $229 = (($228) + 28|0);
      $230 = HEAP32[$229>>2]|0;
      __THREW__ = 0;
      $231 = (invoke_iii($230|0,($17|0),($217|0))|0);
      $232 = __THREW__; __THREW__ = 0;
      $233 = $232&1;
      if ($233) {
       label = 14;
       break;
      }
      $234 = HEAP32[$__oe>>2]|0;
      $235 = (($234) + 1|0);
      HEAP32[$__oe>>2] = $235;
      HEAP8[$234] = $231;
      $236 = (($__nf$221) + 1|0);
      $237 = ($236>>>0)<($__ne>>>0);
      if ($237) {
       $__nf$221 = $236;
      } else {
       $__nf$3 = $236;
       break L95;
      }
     }
     if ((label|0) == 14) {
      $53 = ___cxa_find_matching_catch(-1,-1)|0;
      $54 = tempRet0;
      $eh$lpad$body$index7Z2D = $54;$eh$lpad$body$indexZ2D = $53;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
     else if ((label|0) == 69) {
      $219 = HEAP32[$37>>2]|0;
      $220 = (($219) + 12|0);
      $221 = HEAP32[$220>>2]|0;
      __THREW__ = 0;
      $222 = (invoke_ii($221|0,($37|0))|0);
      $223 = __THREW__; __THREW__ = 0;
      $224 = $223&1;
      if ($224) {
       break L22;
      }
      $225 = HEAP32[$__oe>>2]|0;
      $226 = (($225) + 1|0);
      HEAP32[$__oe>>2] = $226;
      HEAP8[$225] = $222;
      $227 = (($__nf$221) + 1|0);
      $__nf$3 = $227;
      break;
     }
    } else {
     $__nf$3 = $__ns$2;
    }
   } while(0);
   $238 = HEAP32[$__oe>>2]|0;
   $239 = HEAP32[$17>>2]|0;
   $240 = (($239) + 32|0);
   $241 = HEAP32[$240>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($241|0,($17|0),($__nf$3|0),($__ne|0),($238|0))|0);
   $242 = __THREW__; __THREW__ = 0;
   $243 = $242&1;
   if (!($243)) {
    $244 = $__nf$3;
    $245 = (($63) - ($244))|0;
    $246 = HEAP32[$__oe>>2]|0;
    $247 = (($246) + ($245)|0);
    HEAP32[$__oe>>2] = $247;
    $248 = ($__np|0)==($__ne|0);
    if ($248) {
     $storemerge = $247;
     HEAP32[$__op>>2] = $storemerge;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
    $249 = $__np;
    $250 = $__nb;
    $251 = (($249) - ($250))|0;
    $252 = (($__ob) + ($251)|0);
    $storemerge = $252;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $61 = ___cxa_find_matching_catch(-1,-1)|0;
 $62 = tempRet0;
 $eh$lpad$body$index7Z2D = $62;$eh$lpad$body$indexZ2D = $61;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$0$i7 = 0, $$01 = 0, $$1$i = 0, $$113 = 0, $$1212 = 0, $$byval_copy = 0, $$pre = 0, $$pre14 = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $eh$lpad$body$index3Z2D = 0;
 var $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0, $scevgep = 0, $scevgep16 = 0, $specify_precision$0$off0$ph$i17 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer9 = 0, $vararg_ptr15 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $$byval_copy = sp + 80|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer12 = sp + 8|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer = sp + 32|0;
 $__fmt = sp;
 $__nar = sp + 84|0;
 $__nb = sp + 60|0;
 $__o = sp + 114|0;
 $__op = sp + 68|0;
 $__oe = sp + 72|0;
 $0 = sp + 64|0;
 $1 = sp + 56|0;
 $2 = sp + 76|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2048;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0$i = $7;
 } else {
  $12 = (($__fmt) + 2|0);
  HEAP8[$7] = 43;
  $$0$i = $12;
 }
 $13 = $9 & 1024;
 $14 = ($13|0)==(0);
 if ($14) {
  $$1$i = $$0$i;
 } else {
  $15 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$1$i = $15;
 }
 $16 = $9 & 260;
 $17 = $9 >>> 14;
 $18 = ($16|0)==(260);
 do {
  if ($18) {
   HEAP8[$$1$i] = 76;
   $scevgep16 = (($$1$i) + 1|0);
   $25 = $17 & 1;
   $26 = ($25|0)==(0);
   if ($26) {
    HEAP8[$scevgep16] = 97;
    $specify_precision$0$off0$ph$i17 = 0;
    break;
   } else {
    HEAP8[$scevgep16] = 65;
    $specify_precision$0$off0$ph$i17 = 0;
    break;
   }
  } else {
   $19 = (($$1$i) + 1|0);
   HEAP8[$$1$i] = 46;
   $20 = (($$1$i) + 2|0);
   HEAP8[$19] = 42;
   HEAP8[$20] = 76;
   $scevgep = (($$1$i) + 3|0);
   if ((($16|0) == 4)) {
    $21 = $17 & 1;
    $22 = ($21|0)==(0);
    if ($22) {
     HEAP8[$scevgep] = 102;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 70;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    }
   } else if ((($16|0) == 256)) {
    $23 = $17 & 1;
    $24 = ($23|0)==(0);
    if ($24) {
     HEAP8[$scevgep] = 101;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 69;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    }
   } else {
    $27 = $17 & 1;
    $28 = ($27|0)==(0);
    if ($28) {
     HEAP8[$scevgep] = 103;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 71;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__nb>>2] = $__nar;
 $29 = HEAP8[18688]|0;
 $30 = ($29<<24>>24)==(0);
 do {
  if ($30) {
   $31 = (___cxa_guard_acquire((18688|0))|0);
   $32 = ($31|0)==(0);
   if (!($32)) {
    __THREW__ = 0;
    $33 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     $36 = ___cxa_find_matching_catch(-1,-1)|0;
     $37 = tempRet0;
     ___cxa_guard_abort((18688|0));
     ___resumeException($36|0);
     // unreachable;
    } else {
     HEAP32[18680>>2] = $33;
     ___cxa_guard_release((18688|0));
     break;
    }
   }
  }
 } while(0);
 $38 = HEAP32[18680>>2]|0;
 if ($specify_precision$0$off0$ph$i17) {
  $39 = (($__iob) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  HEAP32[$vararg_buffer>>2] = $40;
  $vararg_ptr8 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $41 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$38,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $41;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $42 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$38,$__fmt,$vararg_buffer9)|0);
  $__nc$0 = $42;
 }
 $43 = ($__nc$0|0)>(29);
 do {
  if ($43) {
   $44 = HEAP8[18688]|0;
   $45 = ($44<<24>>24)==(0);
   L40: do {
    if ($specify_precision$0$off0$ph$i17) {
     do {
      if ($45) {
       $46 = (___cxa_guard_acquire((18688|0))|0);
       $47 = ($46|0)==(0);
       if (!($47)) {
        __THREW__ = 0;
        $48 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
        $49 = __THREW__; __THREW__ = 0;
        $50 = $49&1;
        if ($50) {
         $51 = ___cxa_find_matching_catch(-1,-1)|0;
         $52 = tempRet0;
         ___cxa_guard_abort((18688|0));
         $eh$lpad$body$index3Z2D = $52;$eh$lpad$body$indexZ2D = $51;
         break L40;
        } else {
         HEAP32[18680>>2] = $48;
         ___cxa_guard_release((18688|0));
         break;
        }
       }
      }
     } while(0);
     $53 = HEAP32[18680>>2]|0;
     $54 = (($__iob) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer12>>2] = $55;
     $vararg_ptr15 = (($vararg_buffer12) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr15>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr15+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $56 = (invoke_iiiii(13,($__nb|0),($53|0),($__fmt|0),($vararg_buffer12|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 36;
     } else {
      $__nc$1 = $56;
      label = 44;
     }
    } else {
     do {
      if ($45) {
       $61 = (___cxa_guard_acquire((18688|0))|0);
       $62 = ($61|0)==(0);
       if (!($62)) {
        __THREW__ = 0;
        $63 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
        $64 = __THREW__; __THREW__ = 0;
        $65 = $64&1;
        if ($65) {
         $66 = ___cxa_find_matching_catch(-1,-1)|0;
         $67 = tempRet0;
         ___cxa_guard_abort((18688|0));
         $eh$lpad$body$index3Z2D = $67;$eh$lpad$body$indexZ2D = $66;
         break L40;
        } else {
         HEAP32[18680>>2] = $63;
         ___cxa_guard_release((18688|0));
         break;
        }
       }
      }
     } while(0);
     $68 = HEAP32[18680>>2]|0;
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer16>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer16+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $69 = (invoke_iiiii(13,($__nb|0),($68|0),($__fmt|0),($vararg_buffer16|0))|0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 36;
     } else {
      $__nc$1 = $69;
      label = 44;
     }
    }
   } while(0);
   if ((label|0) == 44) {
    $72 = HEAP32[$__nb>>2]|0;
    $73 = ($72|0)==(0|0);
    if (!($73)) {
     $110 = $72;$77 = $72;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(4);
    $74 = __THREW__; __THREW__ = 0;
    $75 = $74&1;
    if ($75) {
     label = 36;
    } else {
     $$pre = HEAP32[$__nb>>2]|0;
     $110 = $$pre;$77 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   if ((label|0) == 36) {
    $59 = ___cxa_find_matching_catch(-1,-1)|0;
    $60 = tempRet0;
    $eh$lpad$body$index3Z2D = $60;$eh$lpad$body$indexZ2D = $59;
   }
   $$113 = $eh$lpad$body$indexZ2D;$$1212 = $eh$lpad$body$index3Z2D;
   ___resumeException($$113|0);
   // unreachable;
  } else {
   $$pre14 = HEAP32[$__nb>>2]|0;
   $110 = 0;$77 = $$pre14;$__nc$2 = $__nc$0;
  }
 } while(0);
 $76 = (($77) + ($__nc$2)|0);
 $78 = HEAP32[$8>>2]|0;
 $79 = $78 & 176;
 do {
  if ((($79|0) == 16)) {
   $80 = HEAP8[$77]|0;
   if ((($80<<24>>24) == 43) | (($80<<24>>24) == 45)) {
    $81 = (($77) + 1|0);
    $$0$i7 = $81;
    break;
   }
   $82 = ($__nc$2|0)>(1);
   $83 = ($80<<24>>24)==(48);
   $or$cond$i = $82 & $83;
   if ($or$cond$i) {
    $84 = (($77) + 1|0);
    $85 = HEAP8[$84]|0;
    if ((($85<<24>>24) == 88) | (($85<<24>>24) == 120)) {
     $86 = (($77) + 2|0);
     $$0$i7 = $86;
    } else {
     label = 53;
    }
   } else {
    label = 53;
   }
  } else if ((($79|0) == 32)) {
   $$0$i7 = $76;
  } else {
   label = 53;
  }
 } while(0);
 if ((label|0) == 53) {
  $$0$i7 = $77;
 }
 $87 = ($77|0)==($__nar|0);
 if ($87) {
  $108 = 0;$97 = $__nar;$__ob$0 = $__o;
  label = 59;
 } else {
  $88 = $__nc$2 << 1;
  $89 = (_malloc($88)|0);
  $90 = ($89|0)==(0|0);
  if ($90) {
   __THREW__ = 0;
   invoke_v(4);
   $91 = __THREW__; __THREW__ = 0;
   $92 = $91&1;
   if ($92) {
    $117 = 0;
    label = 58;
   } else {
    $$pre15 = HEAP32[$__nb>>2]|0;
    $108 = 0;$97 = $$pre15;$__ob$0 = 0;
    label = 59;
   }
  } else {
   $108 = $89;$97 = $77;$__ob$0 = $89;
   label = 59;
  }
 }
 do {
  if ((label|0) == 59) {
   __THREW__ = 0;
   invoke_vii(48,($0|0),($__iob|0));
   $95 = __THREW__; __THREW__ = 0;
   $96 = $95&1;
   if ($96) {
    $117 = $108;
    label = 58;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(41,($97|0),($$0$i7|0),($76|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $98 = __THREW__; __THREW__ = 0;
    $99 = $98&1;
    if ($99) {
     $111 = ___cxa_find_matching_catch(-1,-1)|0;
     $112 = tempRet0;
     $113 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($113)|0);
     $$0 = $111;$$01 = $112;$115 = $108;
     break;
    }
    $100 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($100)|0);
    $101 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $101;
    $102 = HEAP32[$__op>>2]|0;
    $103 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(42,($1|0),($$byval_copy|0),($__ob$0|0),($102|0),($103|0),($__iob|0),($__fl|0));
    $104 = __THREW__; __THREW__ = 0;
    $105 = $104&1;
    if ($105) {
     $117 = $108;
     label = 58;
    } else {
     $106 = HEAP32[$1>>2]|0;
     HEAP32[$__s>>2] = $106;
     HEAP32[$agg$result>>2] = $106;
     $107 = ($108|0)==(0|0);
     if (!($107)) {
      _free($108);
     }
     $109 = ($110|0)==(0|0);
     if ($109) {
      STACKTOP = sp;return;
     }
     _free($110);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 58) {
  $93 = ___cxa_find_matching_catch(-1,-1)|0;
  $94 = tempRet0;
  $$0 = $93;$$01 = $94;$115 = $117;
 }
 $114 = ($115|0)==(0|0);
 if (!($114)) {
  _free($115);
 }
 $116 = ($110|0)==(0|0);
 if ($116) {
  $$113 = $$0;$$1212 = $$01;
  ___resumeException($$113|0);
  // unreachable;
 }
 _free($110);
 $$113 = $$0;$$1212 = $$01;
 ___resumeException($$113|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $__p$i$i$i$i = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $$byval_copy = sp + 28|0;
 $vararg_buffer = sp;
 $__p$i$i$i$i = sp + 8|0;
 $__fmt = sp + 92|0;
 $__nar = sp + 72|0;
 $__o = sp + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 ;HEAP8[$__fmt+0|0]=HEAP8[17592+0|0]|0;HEAP8[$__fmt+1|0]=HEAP8[17592+1|0]|0;HEAP8[$__fmt+2|0]=HEAP8[17592+2|0]|0;HEAP8[$__fmt+3|0]=HEAP8[17592+3|0]|0;HEAP8[$__fmt+4|0]=HEAP8[17592+4|0]|0;HEAP8[$__fmt+5|0]=HEAP8[17592+5|0]|0;
 $2 = HEAP8[18688]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((18688|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $9 = ___cxa_find_matching_catch(-1,-1)|0;
     $10 = tempRet0;
     ___cxa_guard_abort((18688|0));
     ___resumeException($9|0);
     // unreachable;
    } else {
     HEAP32[18680>>2] = $6;
     ___cxa_guard_release((18688|0));
     break;
    }
   }
  }
 } while(0);
 $11 = HEAP32[18680>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $12 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$11,$__fmt,$vararg_buffer)|0);
 $13 = (($__nar) + ($12)|0);
 $14 = (($__iob) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 176;
 do {
  if ((($16|0) == 32)) {
   $$0$i = $13;
  } else if ((($16|0) == 16)) {
   $17 = HEAP8[$__nar]|0;
   if ((($17<<24>>24) == 43) | (($17<<24>>24) == 45)) {
    $18 = (($__nar) + 1|0);
    $$0$i = $18;
    break;
   }
   $19 = ($12|0)>(1);
   $20 = ($17<<24>>24)==(48);
   $or$cond$i = $19 & $20;
   if ($or$cond$i) {
    $21 = (($__nar) + 1|0);
    $22 = HEAP8[$21]|0;
    if ((($22<<24>>24) == 88) | (($22<<24>>24) == 120)) {
     $23 = (($__nar) + 2|0);
     $$0$i = $23;
    } else {
     label = 12;
    }
   } else {
    label = 12;
   }
  } else {
   label = 12;
  }
 } while(0);
 if ((label|0) == 12) {
  $$0$i = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $24 = HEAP32[$0>>2]|0;
 $25 = HEAP32[18792>>2]|0;
 $26 = ($25|0)==(-1);
 if (!($26)) {
  HEAP32[$__p$i$i$i$i>>2] = 18792;
  $27 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$27>>2] = (121);
  $28 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$28>>2] = 0;
  __THREW__ = 0;
  invoke_viii(6,(18792|0),($__p$i$i$i$i|0),(122|0));
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if ($30) {
   $54 = ___cxa_find_matching_catch(-1,-1)|0;
   $55 = tempRet0;
   $56 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($56)|0);
   ___resumeException($54|0);
   // unreachable;
  }
 }
 $31 = HEAP32[((18792 + 4|0))>>2]|0;
 $32 = (($31) + -1)|0;
 $33 = (($24) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($24) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $34;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = $39 >> 2;
 $41 = ($40>>>0)>($32>>>0);
 if ($41) {
  $42 = (($36) + ($32<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)==(0|0);
  if (!($44)) {
   $48 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
   $49 = HEAP32[$43>>2]|0;
   $50 = (($49) + 32|0);
   $51 = HEAP32[$50>>2]|0;
   (FUNCTION_TABLE_iiiii[$51 & 31]($43,$__nar,$13,$__o)|0);
   $52 = (($__o) + ($12)|0);
   $53 = ($$0$i|0)==($13|0);
   if ($53) {
    $__op$0 = $52;
    $61 = HEAP32[$__s>>2]|0;
    HEAP32[$1>>2] = $61;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$52,$__iob,$__fl);
    STACKTOP = sp;return;
   }
   $57 = $__nar;
   $58 = $$0$i;
   $59 = (($58) - ($57))|0;
   $60 = (($__o) + ($59)|0);
   $__op$0 = $60;
   $61 = HEAP32[$__s>>2]|0;
   HEAP32[$1>>2] = $61;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$52,$__iob,$__fl);
   STACKTOP = sp;return;
  }
 }
 $45 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($45);
 __THREW__ = 0;
 invoke_viii(7,($45|0),(26752|0),(102|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $54 = ___cxa_find_matching_catch(-1,-1)|0;
  $55 = tempRet0;
  $56 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($56)|0);
  ___resumeException($54|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $$pre4 = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $__nm = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $$byval_copy = sp + 32|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 12|0;
 $1 = sp + 16|0;
 $__nm = sp + 20|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$this>>2]|0;
  $7 = (($6) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $9;
  $10 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$8 & 15]($agg$result,$this,$$byval_copy,$__iob,$__fl,$10);
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $11 = HEAP32[$1>>2]|0;
 $12 = HEAP32[18944>>2]|0;
 $13 = ($12|0)==(-1);
 if ($13) {
  label = 5;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 18944;
  $14 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$14>>2] = (121);
  $15 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$15>>2] = 0;
  __THREW__ = 0;
  invoke_viii(6,(18944|0),($__p$i$i$i$i|0),(122|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $18 = HEAP32[((18944 + 4|0))>>2]|0;
  $19 = (($18) + -1)|0;
  $20 = (($11) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($11) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $21;
  $25 = $23;
  $26 = (($24) - ($25))|0;
  $27 = $26 >> 2;
  $28 = ($27>>>0)>($19>>>0);
  if ($28) {
   $29 = (($23) + ($19<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(0|0);
   if (!($31)) {
    $35 = HEAP32[$1>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($35)|0);
    $36 = HEAP32[$30>>2]|0;
    if ($__v) {
     $37 = (($36) + 24|0);
     $38 = HEAP32[$37>>2]|0;
     FUNCTION_TABLE_vii[$38 & 63]($__nm,$30);
    } else {
     $39 = (($36) + 28|0);
     $40 = HEAP32[$39>>2]|0;
     FUNCTION_TABLE_vii[$40 & 63]($__nm,$30);
    }
    $41 = HEAP8[$__nm]|0;
    $42 = $41 & 1;
    $43 = ($42<<24>>24)==(0);
    if ($43) {
     $46 = (($__nm) + 4|0);
     $$pre5 = (($__nm) + 8|0);
     $$ph = $46;$$pre$phi6Z2D = $$pre5;$$pre$phiZ2D = $46;
    } else {
     $44 = (($__nm) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $$pre4 = (($__nm) + 4|0);
     $$ph = $45;$$pre$phi6Z2D = $44;$$pre$phiZ2D = $$pre4;
    }
    $48 = $41;$58 = $$ph;
    while(1) {
     $47 = $48 & 1;
     $49 = ($47<<24>>24)==(0);
     if ($49) {
      $52 = $48&255;
      $53 = $52 >>> 1;
      $55 = $$pre$phiZ2D;$56 = $53;
     } else {
      $50 = HEAP32[$$pre$phi6Z2D>>2]|0;
      $51 = HEAP32[$$pre$phiZ2D>>2]|0;
      $55 = $50;$56 = $51;
     }
     $54 = (($55) + ($56<<2)|0);
     $57 = ($58|0)==($54|0);
     if ($57) {
      label = 29;
      break;
     }
     $59 = HEAP32[$58>>2]|0;
     $60 = HEAP32[$__s>>2]|0;
     $61 = ($60|0)==(0|0);
     if (!($61)) {
      $62 = (($60) + 24|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = (($60) + 28|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($63|0)==($65|0);
      if ($66) {
       $67 = HEAP32[$60>>2]|0;
       $68 = (($67) + 52|0);
       $69 = HEAP32[$68>>2]|0;
       __THREW__ = 0;
       $70 = (invoke_iii($69|0,($60|0),($59|0))|0);
       $71 = __THREW__; __THREW__ = 0;
       $72 = $71&1;
       if ($72) {
        label = 28;
        break;
       } else {
        $$0$i$i = $70;
       }
      } else {
       $73 = (($63) + 4|0);
       HEAP32[$62>>2] = $73;
       HEAP32[$63>>2] = $59;
       $$0$i$i = $59;
      }
      $74 = ($$0$i$i|0)==(-1);
      if ($74) {
       HEAP32[$__s>>2] = 0;
      }
     }
     $75 = (($58) + 4|0);
     $$pre = HEAP8[$__nm]|0;
     $48 = $$pre;$58 = $75;
    }
    if ((label|0) == 28) {
     $79 = ___cxa_find_matching_catch(-1,-1)|0;
     $80 = tempRet0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
     $$0 = $79;$$01 = $80;
     ___resumeException($$0|0);
     // unreachable;
    }
    else if ((label|0) == 29) {
     $81 = HEAP32[$__s>>2]|0;
     HEAP32[$agg$result>>2] = $81;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
     STACKTOP = sp;return;
    }
   }
  }
  $32 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($32);
  __THREW__ = 0;
  invoke_viii(7,($32|0),(26752|0),(102|0));
  $33 = __THREW__; __THREW__ = 0;
  $34 = $33&1;
  if (!($34)) {
   // unreachable;
  }
 }
 $76 = ___cxa_find_matching_catch(-1,-1)|0;
 $77 = tempRet0;
 $78 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($78)|0);
 $$0 = $76;$$01 = $77;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $$byval_copy = sp + 104|0;
 $vararg_buffer = sp;
 $__fmt = sp + 108|0;
 $__nar = sp + 116|0;
 $__o = sp + 12|0;
 $__op = sp + 96|0;
 $__oe = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp + 100|0;
 ;HEAP8[$__fmt+0|0]=HEAP8[17584+0|0]|0;HEAP8[$__fmt+1|0]=HEAP8[17584+1|0]|0;HEAP8[$__fmt+2|0]=HEAP8[17584+2|0]|0;HEAP8[$__fmt+3|0]=HEAP8[17584+3|0]|0;HEAP8[$__fmt+4|0]=HEAP8[17584+4|0]|0;HEAP8[$__fmt+5|0]=HEAP8[17584+5|0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 2048;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0$i = $2;
 } else {
  $7 = (($__fmt) + 2|0);
  HEAP8[$2] = 43;
  $$0$i = $7;
 }
 $8 = $4 & 512;
 $9 = ($8|0)==(0);
 if ($9) {
  $$13$i$ph = $$0$i;
 } else {
  $10 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $10;
 }
 HEAP8[$$13$i$ph] = 108;
 $scevgep = (($$13$i$ph) + 1|0);
 $11 = $4 & 74;
 do {
  if ((($11|0) == 64)) {
   HEAP8[$scevgep] = 111;
  } else if ((($11|0) == 8)) {
   $12 = $4 & 16384;
   $13 = ($12|0)==(0);
   if ($13) {
    HEAP8[$scevgep] = 120;
    break;
   } else {
    HEAP8[$scevgep] = 88;
    break;
   }
  } else {
   HEAP8[$scevgep] = 100;
  }
 } while(0);
 $14 = HEAP8[18688]|0;
 $15 = ($14<<24>>24)==(0);
 do {
  if ($15) {
   $16 = (___cxa_guard_acquire((18688|0))|0);
   $17 = ($16|0)==(0);
   if (!($17)) {
    __THREW__ = 0;
    $18 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(-1,-1)|0;
     $22 = tempRet0;
     ___cxa_guard_abort((18688|0));
     ___resumeException($21|0);
     // unreachable;
    } else {
     HEAP32[18680>>2] = $18;
     ___cxa_guard_release((18688|0));
     break;
    }
   }
  }
 } while(0);
 $23 = HEAP32[18680>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $24 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$23,$__fmt,$vararg_buffer)|0);
 $25 = (($__nar) + ($24)|0);
 $26 = HEAP32[$3>>2]|0;
 $27 = $26 & 176;
 do {
  if ((($27|0) == 32)) {
   $$0$i1 = $25;
  } else if ((($27|0) == 16)) {
   $28 = HEAP8[$__nar]|0;
   if ((($28<<24>>24) == 43) | (($28<<24>>24) == 45)) {
    $29 = (($__nar) + 1|0);
    $$0$i1 = $29;
    break;
   }
   $30 = ($24|0)>(1);
   $31 = ($28<<24>>24)==(48);
   $or$cond$i = $30 & $31;
   if ($or$cond$i) {
    $32 = (($__nar) + 1|0);
    $33 = HEAP8[$32]|0;
    if ((($33<<24>>24) == 88) | (($33<<24>>24) == 120)) {
     $34 = (($__nar) + 2|0);
     $$0$i1 = $34;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(43,($__nar|0),($$0$i1|0),($25|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $41 = ___cxa_find_matching_catch(-1,-1)|0;
  $42 = tempRet0;
  $43 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
  ___resumeException($41|0);
  // unreachable;
 } else {
  $37 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($37)|0);
  $38 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $38;
  $39 = HEAP32[$__op>>2]|0;
  $40 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$39,$40,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i10 = 0, $$15 = 0, $$__dg$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__dc$012 = 0, $__dc$1 = 0, $__dg$013 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$014 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $__p$i$i$i$i1 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__grouping = sp + 28|0;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[18784>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i$i$i>>2] = 18784;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (121);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(18784,$__p$i$i$i$i,122);
 }
 $5 = HEAP32[((18784 + 4|0))>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)>($6>>>0);
 if (!($15)) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(26752|0),(102|0));
  // unreachable;
 }
 $16 = (($10) + ($6<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(26752|0),(102|0));
  // unreachable;
 }
 $20 = HEAP32[$__loc>>2]|0;
 $21 = HEAP32[18944>>2]|0;
 $22 = ($21|0)==(-1);
 if (!($22)) {
  HEAP32[$__p$i$i$i$i1>>2] = 18944;
  $23 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$23>>2] = (121);
  $24 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$24>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(18944,$__p$i$i$i$i1,122);
 }
 $25 = HEAP32[((18944 + 4|0))>>2]|0;
 $26 = (($25) + -1)|0;
 $27 = (($20) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($20) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $28;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = $33 >> 2;
 $35 = ($34>>>0)>($26>>>0);
 if (!($35)) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(26752|0),(102|0));
  // unreachable;
 }
 $36 = (($30) + ($26<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(26752|0),(102|0));
  // unreachable;
 }
 $40 = HEAP32[$37>>2]|0;
 $41 = (($40) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 FUNCTION_TABLE_vii[$42 & 63]($__grouping,$37);
 $43 = HEAP8[$__grouping]|0;
 $44 = $43 & 1;
 $45 = ($44<<24>>24)==(0);
 if ($45) {
  $48 = $43&255;
  $49 = $48 >>> 1;
  $51 = $49;
 } else {
  $46 = (($__grouping) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $51 = $47;
 }
 $50 = ($51|0)==(0);
 do {
  if ($50) {
   $52 = HEAP32[$17>>2]|0;
   $53 = (($52) + 48|0);
   $54 = HEAP32[$53>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($54|0,($17|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   if ($56) {
    label = 18;
   } else {
    $57 = $__ne;
    $58 = $__nb;
    $59 = (($57) - ($58))|0;
    $60 = (($__ob) + ($59<<2)|0);
    HEAP32[$__oe>>2] = $60;
    $175 = $60;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $65 = HEAP8[$__nb]|0;
   if ((($65<<24>>24) == 43) | (($65<<24>>24) == 45)) {
    $66 = HEAP32[$17>>2]|0;
    $67 = (($66) + 44|0);
    $68 = HEAP32[$67>>2]|0;
    __THREW__ = 0;
    $69 = (invoke_iii($68|0,($17|0),($65|0))|0);
    $70 = __THREW__; __THREW__ = 0;
    $71 = $70&1;
    if ($71) {
     label = 18;
     break;
    }
    $72 = (($__nb) + 1|0);
    $73 = HEAP32[$__oe>>2]|0;
    $74 = (($73) + 4|0);
    HEAP32[$__oe>>2] = $74;
    HEAP32[$73>>2] = $69;
    $__nf$0 = $72;
   } else {
    $__nf$0 = $__nb;
   }
   $75 = $__ne;
   $76 = $__nf$0;
   $77 = (($75) - ($76))|0;
   $78 = ($77|0)>(1);
   if ($78) {
    $79 = HEAP8[$__nf$0]|0;
    $80 = ($79<<24>>24)==(48);
    if ($80) {
     $81 = (($__nf$0) + 1|0);
     $82 = HEAP8[$81]|0;
     if ((($82<<24>>24) == 88) | (($82<<24>>24) == 120)) {
      $83 = HEAP32[$17>>2]|0;
      $84 = (($83) + 44|0);
      $85 = HEAP32[$84>>2]|0;
      __THREW__ = 0;
      $86 = (invoke_iii($85|0,($17|0),48)|0);
      $87 = __THREW__; __THREW__ = 0;
      $88 = $87&1;
      if ($88) {
       label = 18;
       break;
      }
      $89 = HEAP32[$__oe>>2]|0;
      $90 = (($89) + 4|0);
      HEAP32[$__oe>>2] = $90;
      HEAP32[$89>>2] = $86;
      $91 = HEAP8[$81]|0;
      $92 = HEAP32[$17>>2]|0;
      $93 = (($92) + 44|0);
      $94 = HEAP32[$93>>2]|0;
      __THREW__ = 0;
      $95 = (invoke_iii($94|0,($17|0),($91|0))|0);
      $96 = __THREW__; __THREW__ = 0;
      $97 = $96&1;
      if ($97) {
       label = 18;
       break;
      }
      $98 = (($__nf$0) + 2|0);
      $99 = HEAP32[$__oe>>2]|0;
      $100 = (($99) + 4|0);
      HEAP32[$__oe>>2] = $100;
      HEAP32[$99>>2] = $95;
      $__nf$1 = $98;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $101 = ($__nf$1|0)==($__ne|0);
   if (!($101)) {
    $102 = (($__ne) + -1|0);
    $103 = ($102>>>0)>($__nf$1>>>0);
    if ($103) {
     $$012$i$i = $__nf$1;$106 = $102;
     while(1) {
      $104 = HEAP8[$$012$i$i]|0;
      $105 = HEAP8[$106]|0;
      HEAP8[$$012$i$i] = $105;
      HEAP8[$106] = $104;
      $107 = (($$012$i$i) + 1|0);
      $108 = (($106) + -1|0);
      $109 = ($107>>>0)<($108>>>0);
      if ($109) {
       $$012$i$i = $107;$106 = $108;
      } else {
       break;
      }
     }
    }
   }
   $110 = HEAP32[$37>>2]|0;
   $111 = (($110) + 16|0);
   $112 = HEAP32[$111>>2]|0;
   __THREW__ = 0;
   $113 = (invoke_ii($112|0,($37|0))|0);
   $114 = __THREW__; __THREW__ = 0;
   $115 = $114&1;
   if ($115) {
    label = 18;
   } else {
    $116 = ($__nf$1>>>0)<($__ne>>>0);
    L44: do {
     if ($116) {
      $117 = (($__grouping) + 1|0);
      $118 = (($__grouping) + 4|0);
      $119 = (($__grouping) + 8|0);
      $__dc$012 = 0;$__dg$013 = 0;$__p$014 = $__nf$1;
      while(1) {
       $120 = HEAP8[$__grouping]|0;
       $121 = $120 & 1;
       $122 = ($121<<24>>24)==(0);
       $123 = HEAP32[$119>>2]|0;
       $$ = $122 ? $117 : $123;
       $124 = (($$) + ($__dg$013)|0);
       $125 = HEAP8[$124]|0;
       $126 = ($125<<24>>24)==(0);
       if ($126) {
        $__dc$1 = $__dc$012;$__dg$1 = $__dg$013;
       } else {
        $127 = HEAP32[$119>>2]|0;
        $$15 = $122 ? $117 : $127;
        $128 = (($$15) + ($__dg$013)|0);
        $129 = HEAP8[$128]|0;
        $130 = $129 << 24 >> 24;
        $131 = ($__dc$012|0)==($130|0);
        if ($131) {
         $132 = HEAP32[$__oe>>2]|0;
         $133 = (($132) + 4|0);
         HEAP32[$__oe>>2] = $133;
         HEAP32[$132>>2] = $113;
         $134 = HEAP8[$__grouping]|0;
         $135 = $134 & 1;
         $136 = ($135<<24>>24)==(0);
         if ($136) {
          $138 = $134&255;
          $139 = $138 >>> 1;
          $141 = $139;
         } else {
          $137 = HEAP32[$118>>2]|0;
          $141 = $137;
         }
         $140 = (($141) + -1)|0;
         $142 = ($__dg$013>>>0)<($140>>>0);
         $143 = $142&1;
         $$__dg$0 = (($143) + ($__dg$013))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$012;$__dg$1 = $__dg$013;
        }
       }
       $144 = HEAP8[$__p$014]|0;
       $145 = HEAP32[$17>>2]|0;
       $146 = (($145) + 44|0);
       $147 = HEAP32[$146>>2]|0;
       __THREW__ = 0;
       $148 = (invoke_iii($147|0,($17|0),($144|0))|0);
       $149 = __THREW__; __THREW__ = 0;
       $150 = $149&1;
       if ($150) {
        break;
       }
       $151 = HEAP32[$__oe>>2]|0;
       $152 = (($151) + 4|0);
       HEAP32[$__oe>>2] = $152;
       HEAP32[$151>>2] = $148;
       $153 = (($__dc$1) + 1)|0;
       $154 = (($__p$014) + 1|0);
       $155 = ($154>>>0)<($__ne>>>0);
       if ($155) {
        $__dc$012 = $153;$__dg$013 = $__dg$1;$__p$014 = $154;
       } else {
        $161 = $152;
        break L44;
       }
      }
      $61 = ___cxa_find_matching_catch(-1,-1)|0;
      $62 = tempRet0;
      $lpad$phi$index = $61;$lpad$phi$index2 = $62;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $161 = $$pre;
     }
    } while(0);
    $156 = $__nf$1;
    $157 = $__nb;
    $158 = (($156) - ($157))|0;
    $159 = (($__ob) + ($158<<2)|0);
    $160 = ($159|0)==($161|0);
    if ($160) {
     $175 = $161;
    } else {
     $162 = (($161) + -4|0);
     $163 = ($162>>>0)>($159>>>0);
     if ($163) {
      $$012$i$i10 = $159;$166 = $162;
      while(1) {
       $164 = HEAP32[$$012$i$i10>>2]|0;
       $165 = HEAP32[$166>>2]|0;
       HEAP32[$$012$i$i10>>2] = $165;
       HEAP32[$166>>2] = $164;
       $167 = (($$012$i$i10) + 4|0);
       $168 = (($166) + -4|0);
       $169 = ($167>>>0)<($168>>>0);
       if ($169) {
        $$012$i$i10 = $167;$166 = $168;
       } else {
        $175 = $161;
        break;
       }
      }
     } else {
      $175 = $161;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 18) {
  $63 = ___cxa_find_matching_catch(-1,-1)|0;
  $64 = tempRet0;
  $lpad$phi$index = $63;$lpad$phi$index2 = $64;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $170 = ($__np|0)==($__ne|0);
 if ($170) {
  $storemerge = $175;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
 $171 = $__np;
 $172 = $__nb;
 $173 = (($171) - ($172))|0;
 $174 = (($__ob) + ($173<<2)|0);
 $storemerge = $174;
 HEAP32[$__op>>2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$agg$result>>2] = 0;
  STACKTOP = sp;return;
 }
 $2 = $__oe;
 $3 = $__ob;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 $6 = (($__iob) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>($5|0);
 $9 = (($7) - ($5))|0;
 $__ns$0 = $8 ? $9 : 0;
 $10 = $__op;
 $11 = (($10) - ($3))|0;
 $12 = $11 >> 2;
 $13 = ($11|0)>(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $15 = (($14) + 48|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_iiii[$16 & 31]($0,$__ob,$12)|0);
  $18 = ($17|0)==($12|0);
  if (!($18)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $19 = ($__ns$0|0)>(0);
 do {
  if ($19) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns$0,$__fl);
   $20 = HEAP8[$__sp]|0;
   $21 = $20 & 1;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    $25 = (($__sp) + 4|0);
    $29 = $25;
   } else {
    $23 = (($__sp) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $29 = $24;
   }
   $26 = HEAP32[$0>>2]|0;
   $27 = (($26) + 48|0);
   $28 = HEAP32[$27>>2]|0;
   __THREW__ = 0;
   $30 = (invoke_iiii($28|0,($0|0),($29|0),($__ns$0|0))|0);
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    $34 = ___cxa_find_matching_catch(-1,-1)|0;
    $35 = tempRet0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
    ___resumeException($34|0);
    // unreachable;
   }
   $33 = ($30|0)==($__ns$0|0);
   if ($33) {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
    break;
   }
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
   STACKTOP = sp;return;
  }
 } while(0);
 $36 = (($2) - ($10))|0;
 $37 = $36 >> 2;
 $38 = ($36|0)>(0);
 if ($38) {
  $39 = HEAP32[$0>>2]|0;
  $40 = (($39) + 48|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (FUNCTION_TABLE_iiii[$41 & 31]($0,$__op,$37)|0);
  $43 = ($42|0)==($37|0);
  if (!($43)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$6>>2] = 0;
 HEAP32[$agg$result>>2] = $0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0;
 var $__oe = 0, $__op = 0, $lftr$limit = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $$byval_copy = sp + 196|0;
 $vararg_buffer = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 200|0;
 $__o = sp + 20|0;
 $__op = sp + 184|0;
 $__oe = sp + 188|0;
 $2 = sp + 16|0;
 $3 = sp + 192|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 2048;
 $12 = ($11|0)==(0);
 if ($12) {
  $$0$i = $8;
 } else {
  $13 = (($__fmt) + 2|0);
  HEAP8[$8] = 43;
  $$0$i = $13;
 }
 $14 = $10 & 512;
 $15 = ($14|0)==(0);
 if ($15) {
  $$13$i$ph = $$0$i;
 } else {
  $16 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $16;
 }
 $lftr$limit = (($$13$i$ph) + 2|0);
 $17 = (($$13$i$ph) + 1|0);
 HEAP8[$$13$i$ph] = 108;
 HEAP8[$17] = 108;
 $18 = $10 & 74;
 do {
  if ((($18|0) == 8)) {
   $19 = $10 & 16384;
   $20 = ($19|0)==(0);
   if ($20) {
    HEAP8[$lftr$limit] = 120;
    break;
   } else {
    HEAP8[$lftr$limit] = 88;
    break;
   }
  } else if ((($18|0) == 64)) {
   HEAP8[$lftr$limit] = 111;
  } else {
   HEAP8[$lftr$limit] = 100;
  }
 } while(0);
 $21 = HEAP8[18688]|0;
 $22 = ($21<<24>>24)==(0);
 do {
  if ($22) {
   $23 = (___cxa_guard_acquire((18688|0))|0);
   $24 = ($23|0)==(0);
   if (!($24)) {
    __THREW__ = 0;
    $25 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     $28 = ___cxa_find_matching_catch(-1,-1)|0;
     $29 = tempRet0;
     ___cxa_guard_abort((18688|0));
     ___resumeException($28|0);
     // unreachable;
    } else {
     HEAP32[18680>>2] = $25;
     ___cxa_guard_release((18688|0));
     break;
    }
   }
  }
 } while(0);
 $30 = HEAP32[18680>>2]|0;
 $31 = $vararg_buffer;
 $32 = $31;
 HEAP32[$32>>2] = $0;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = $1;
 $35 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$30,$__fmt,$vararg_buffer)|0);
 $36 = (($__nar) + ($35)|0);
 $37 = HEAP32[$9>>2]|0;
 $38 = $37 & 176;
 do {
  if ((($38|0) == 32)) {
   $$0$i1 = $36;
  } else if ((($38|0) == 16)) {
   $39 = HEAP8[$__nar]|0;
   if ((($39<<24>>24) == 43) | (($39<<24>>24) == 45)) {
    $40 = (($__nar) + 1|0);
    $$0$i1 = $40;
    break;
   }
   $41 = ($35|0)>(1);
   $42 = ($39<<24>>24)==(48);
   $or$cond$i = $41 & $42;
   if ($or$cond$i) {
    $43 = (($__nar) + 1|0);
    $44 = HEAP8[$43]|0;
    if ((($44<<24>>24) == 88) | (($44<<24>>24) == 120)) {
     $45 = (($__nar) + 2|0);
     $$0$i1 = $45;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(43,($__nar|0),($$0$i1|0),($36|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $52 = ___cxa_find_matching_catch(-1,-1)|0;
  $53 = tempRet0;
  $54 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($54)|0);
  ___resumeException($52|0);
  // unreachable;
 } else {
  $48 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
  $49 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $49;
  $50 = HEAP32[$__op>>2]|0;
  $51 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$50,$51,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $$byval_copy = sp + 104|0;
 $vararg_buffer = sp;
 $__fmt = sp + 108|0;
 $__nar = sp + 116|0;
 $__o = sp + 12|0;
 $__op = sp + 96|0;
 $__oe = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp + 100|0;
 ;HEAP8[$__fmt+0|0]=HEAP8[17584+0|0]|0;HEAP8[$__fmt+1|0]=HEAP8[17584+1|0]|0;HEAP8[$__fmt+2|0]=HEAP8[17584+2|0]|0;HEAP8[$__fmt+3|0]=HEAP8[17584+3|0]|0;HEAP8[$__fmt+4|0]=HEAP8[17584+4|0]|0;HEAP8[$__fmt+5|0]=HEAP8[17584+5|0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 2048;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0$i = $2;
 } else {
  $7 = (($__fmt) + 2|0);
  HEAP8[$2] = 43;
  $$0$i = $7;
 }
 $8 = $4 & 512;
 $9 = ($8|0)==(0);
 if ($9) {
  $$13$i$ph = $$0$i;
 } else {
  $10 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $10;
 }
 HEAP8[$$13$i$ph] = 108;
 $scevgep = (($$13$i$ph) + 1|0);
 $11 = $4 & 74;
 do {
  if ((($11|0) == 8)) {
   $12 = $4 & 16384;
   $13 = ($12|0)==(0);
   if ($13) {
    HEAP8[$scevgep] = 120;
    break;
   } else {
    HEAP8[$scevgep] = 88;
    break;
   }
  } else if ((($11|0) == 64)) {
   HEAP8[$scevgep] = 111;
  } else {
   HEAP8[$scevgep] = 117;
  }
 } while(0);
 $14 = HEAP8[18688]|0;
 $15 = ($14<<24>>24)==(0);
 do {
  if ($15) {
   $16 = (___cxa_guard_acquire((18688|0))|0);
   $17 = ($16|0)==(0);
   if (!($17)) {
    __THREW__ = 0;
    $18 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(-1,-1)|0;
     $22 = tempRet0;
     ___cxa_guard_abort((18688|0));
     ___resumeException($21|0);
     // unreachable;
    } else {
     HEAP32[18680>>2] = $18;
     ___cxa_guard_release((18688|0));
     break;
    }
   }
  }
 } while(0);
 $23 = HEAP32[18680>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $24 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$23,$__fmt,$vararg_buffer)|0);
 $25 = (($__nar) + ($24)|0);
 $26 = HEAP32[$3>>2]|0;
 $27 = $26 & 176;
 do {
  if ((($27|0) == 32)) {
   $$0$i1 = $25;
  } else if ((($27|0) == 16)) {
   $28 = HEAP8[$__nar]|0;
   if ((($28<<24>>24) == 43) | (($28<<24>>24) == 45)) {
    $29 = (($__nar) + 1|0);
    $$0$i1 = $29;
    break;
   }
   $30 = ($24|0)>(1);
   $31 = ($28<<24>>24)==(48);
   $or$cond$i = $30 & $31;
   if ($or$cond$i) {
    $32 = (($__nar) + 1|0);
    $33 = HEAP8[$32]|0;
    if ((($33<<24>>24) == 88) | (($33<<24>>24) == 120)) {
     $34 = (($__nar) + 2|0);
     $$0$i1 = $34;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(43,($__nar|0),($$0$i1|0),($25|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $41 = ___cxa_find_matching_catch(-1,-1)|0;
  $42 = tempRet0;
  $43 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
  ___resumeException($41|0);
  // unreachable;
 } else {
  $37 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($37)|0);
  $38 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $38;
  $39 = HEAP32[$__op>>2]|0;
  $40 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$39,$40,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0;
 var $__oe = 0, $__op = 0, $lftr$limit = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $$byval_copy = sp + 204|0;
 $vararg_buffer = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 208|0;
 $__o = sp + 20|0;
 $__op = sp + 192|0;
 $__oe = sp + 196|0;
 $2 = sp + 16|0;
 $3 = sp + 200|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 2048;
 $12 = ($11|0)==(0);
 if ($12) {
  $$0$i = $8;
 } else {
  $13 = (($__fmt) + 2|0);
  HEAP8[$8] = 43;
  $$0$i = $13;
 }
 $14 = $10 & 512;
 $15 = ($14|0)==(0);
 if ($15) {
  $$13$i$ph = $$0$i;
 } else {
  $16 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $16;
 }
 $lftr$limit = (($$13$i$ph) + 2|0);
 $17 = (($$13$i$ph) + 1|0);
 HEAP8[$$13$i$ph] = 108;
 HEAP8[$17] = 108;
 $18 = $10 & 74;
 do {
  if ((($18|0) == 8)) {
   $19 = $10 & 16384;
   $20 = ($19|0)==(0);
   if ($20) {
    HEAP8[$lftr$limit] = 120;
    break;
   } else {
    HEAP8[$lftr$limit] = 88;
    break;
   }
  } else if ((($18|0) == 64)) {
   HEAP8[$lftr$limit] = 111;
  } else {
   HEAP8[$lftr$limit] = 117;
  }
 } while(0);
 $21 = HEAP8[18688]|0;
 $22 = ($21<<24>>24)==(0);
 do {
  if ($22) {
   $23 = (___cxa_guard_acquire((18688|0))|0);
   $24 = ($23|0)==(0);
   if (!($24)) {
    __THREW__ = 0;
    $25 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     $28 = ___cxa_find_matching_catch(-1,-1)|0;
     $29 = tempRet0;
     ___cxa_guard_abort((18688|0));
     ___resumeException($28|0);
     // unreachable;
    } else {
     HEAP32[18680>>2] = $25;
     ___cxa_guard_release((18688|0));
     break;
    }
   }
  }
 } while(0);
 $30 = HEAP32[18680>>2]|0;
 $31 = $vararg_buffer;
 $32 = $31;
 HEAP32[$32>>2] = $0;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = $1;
 $35 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$30,$__fmt,$vararg_buffer)|0);
 $36 = (($__nar) + ($35)|0);
 $37 = HEAP32[$9>>2]|0;
 $38 = $37 & 176;
 do {
  if ((($38|0) == 16)) {
   $39 = HEAP8[$__nar]|0;
   if ((($39<<24>>24) == 43) | (($39<<24>>24) == 45)) {
    $40 = (($__nar) + 1|0);
    $$0$i1 = $40;
    break;
   }
   $41 = ($35|0)>(1);
   $42 = ($39<<24>>24)==(48);
   $or$cond$i = $41 & $42;
   if ($or$cond$i) {
    $43 = (($__nar) + 1|0);
    $44 = HEAP8[$43]|0;
    if ((($44<<24>>24) == 88) | (($44<<24>>24) == 120)) {
     $45 = (($__nar) + 2|0);
     $$0$i1 = $45;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else if ((($38|0) == 32)) {
   $$0$i1 = $36;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(43,($__nar|0),($$0$i1|0),($36|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $52 = ___cxa_find_matching_catch(-1,-1)|0;
  $53 = tempRet0;
  $54 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($54)|0);
  ___resumeException($52|0);
  // unreachable;
 } else {
  $48 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
  $49 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $49;
  $50 = HEAP32[$__op>>2]|0;
  $51 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$50,$51,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$0$i7 = 0, $$01 = 0, $$1$i = 0, $$116 = 0, $$1215 = 0, $$byval_copy = 0, $$pre = 0, $$pre17 = 0, $$pre18 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0;
 var $__op = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0, $specify_precision$0$off0$ph$i10 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer9 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $$byval_copy = sp + 312|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer12 = sp + 8|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer = sp + 32|0;
 $__fmt = sp;
 $__nar = sp + 316|0;
 $__nb = sp + 64|0;
 $__o = sp + 68|0;
 $__op = sp + 296|0;
 $__oe = sp + 300|0;
 $0 = sp + 304|0;
 $1 = sp + 60|0;
 $2 = sp + 308|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2048;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0$i = $7;
 } else {
  $12 = (($__fmt) + 2|0);
  HEAP8[$7] = 43;
  $$0$i = $12;
 }
 $13 = $9 & 1024;
 $14 = ($13|0)==(0);
 if ($14) {
  $$1$i = $$0$i;
 } else {
  $15 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$1$i = $15;
 }
 $16 = $9 & 260;
 $17 = $9 >>> 14;
 $18 = ($16|0)==(260);
 do {
  if ($18) {
   $25 = $17 & 1;
   $26 = ($25|0)==(0);
   if ($26) {
    HEAP8[$$1$i] = 97;
    $specify_precision$0$off0$ph$i10 = 0;
    break;
   } else {
    HEAP8[$$1$i] = 65;
    $specify_precision$0$off0$ph$i10 = 0;
    break;
   }
  } else {
   $19 = (($$1$i) + 1|0);
   HEAP8[$$1$i] = 46;
   $20 = (($$1$i) + 2|0);
   HEAP8[$19] = 42;
   if ((($16|0) == 256)) {
    $23 = $17 & 1;
    $24 = ($23|0)==(0);
    if ($24) {
     HEAP8[$20] = 101;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    } else {
     HEAP8[$20] = 69;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    }
   } else if ((($16|0) == 4)) {
    $21 = $17 & 1;
    $22 = ($21|0)==(0);
    if ($22) {
     HEAP8[$20] = 102;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    } else {
     HEAP8[$20] = 70;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    }
   } else {
    $27 = $17 & 1;
    $28 = ($27|0)==(0);
    if ($28) {
     HEAP8[$20] = 103;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    } else {
     HEAP8[$20] = 71;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__nb>>2] = $__nar;
 $29 = HEAP8[18688]|0;
 $30 = ($29<<24>>24)==(0);
 do {
  if ($30) {
   $31 = (___cxa_guard_acquire((18688|0))|0);
   $32 = ($31|0)==(0);
   if (!($32)) {
    __THREW__ = 0;
    $33 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     $36 = ___cxa_find_matching_catch(-1,-1)|0;
     $37 = tempRet0;
     ___cxa_guard_abort((18688|0));
     ___resumeException($36|0);
     // unreachable;
    } else {
     HEAP32[18680>>2] = $33;
     ___cxa_guard_release((18688|0));
     break;
    }
   }
  }
 } while(0);
 $38 = HEAP32[18680>>2]|0;
 if ($specify_precision$0$off0$ph$i10) {
  $39 = (($__iob) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  HEAP32[$vararg_buffer>>2] = $40;
  $vararg_ptr8 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $41 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$38,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $41;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $42 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$38,$__fmt,$vararg_buffer9)|0);
  $__nc$0 = $42;
 }
 $43 = ($__nc$0|0)>(29);
 do {
  if ($43) {
   $44 = HEAP8[18688]|0;
   $45 = ($44<<24>>24)==(0);
   L41: do {
    if ($specify_precision$0$off0$ph$i10) {
     do {
      if ($45) {
       $46 = (___cxa_guard_acquire((18688|0))|0);
       $47 = ($46|0)==(0);
       if (!($47)) {
        __THREW__ = 0;
        $48 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
        $49 = __THREW__; __THREW__ = 0;
        $50 = $49&1;
        if ($50) {
         $51 = ___cxa_find_matching_catch(-1,-1)|0;
         $52 = tempRet0;
         ___cxa_guard_abort((18688|0));
         $eh$lpad$body$index3Z2D = $52;$eh$lpad$body$indexZ2D = $51;
         break L41;
        } else {
         HEAP32[18680>>2] = $48;
         ___cxa_guard_release((18688|0));
         break;
        }
       }
      }
     } while(0);
     $53 = HEAP32[18680>>2]|0;
     $54 = (($__iob) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer12>>2] = $55;
     $vararg_ptr15 = (($vararg_buffer12) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr15>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr15+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $56 = (invoke_iiiii(13,($__nb|0),($53|0),($__fmt|0),($vararg_buffer12|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 36;
     } else {
      $__nc$1 = $56;
      label = 44;
     }
    } else {
     do {
      if ($45) {
       $61 = (___cxa_guard_acquire((18688|0))|0);
       $62 = ($61|0)==(0);
       if (!($62)) {
        __THREW__ = 0;
        $63 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
        $64 = __THREW__; __THREW__ = 0;
        $65 = $64&1;
        if ($65) {
         $66 = ___cxa_find_matching_catch(-1,-1)|0;
         $67 = tempRet0;
         ___cxa_guard_abort((18688|0));
         $eh$lpad$body$index3Z2D = $67;$eh$lpad$body$indexZ2D = $66;
         break L41;
        } else {
         HEAP32[18680>>2] = $63;
         ___cxa_guard_release((18688|0));
         break;
        }
       }
      }
     } while(0);
     $68 = HEAP32[18680>>2]|0;
     $69 = (($__iob) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer16>>2] = $70;
     $vararg_ptr19 = (($vararg_buffer16) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr19+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $71 = (invoke_iiiii(13,($__nb|0),($68|0),($__fmt|0),($vararg_buffer16|0))|0);
     $72 = __THREW__; __THREW__ = 0;
     $73 = $72&1;
     if ($73) {
      label = 36;
     } else {
      $__nc$1 = $71;
      label = 44;
     }
    }
   } while(0);
   if ((label|0) == 44) {
    $74 = HEAP32[$__nb>>2]|0;
    $75 = ($74|0)==(0|0);
    if (!($75)) {
     $112 = $74;$79 = $74;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(4);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 36;
    } else {
     $$pre = HEAP32[$__nb>>2]|0;
     $112 = $$pre;$79 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   if ((label|0) == 36) {
    $59 = ___cxa_find_matching_catch(-1,-1)|0;
    $60 = tempRet0;
    $eh$lpad$body$index3Z2D = $60;$eh$lpad$body$indexZ2D = $59;
   }
   $$116 = $eh$lpad$body$indexZ2D;$$1215 = $eh$lpad$body$index3Z2D;
   ___resumeException($$116|0);
   // unreachable;
  } else {
   $$pre17 = HEAP32[$__nb>>2]|0;
   $112 = 0;$79 = $$pre17;$__nc$2 = $__nc$0;
  }
 } while(0);
 $78 = (($79) + ($__nc$2)|0);
 $80 = HEAP32[$8>>2]|0;
 $81 = $80 & 176;
 do {
  if ((($81|0) == 32)) {
   $$0$i7 = $78;
  } else if ((($81|0) == 16)) {
   $82 = HEAP8[$79]|0;
   if ((($82<<24>>24) == 43) | (($82<<24>>24) == 45)) {
    $83 = (($79) + 1|0);
    $$0$i7 = $83;
    break;
   }
   $84 = ($__nc$2|0)>(1);
   $85 = ($82<<24>>24)==(48);
   $or$cond$i = $84 & $85;
   if ($or$cond$i) {
    $86 = (($79) + 1|0);
    $87 = HEAP8[$86]|0;
    if ((($87<<24>>24) == 88) | (($87<<24>>24) == 120)) {
     $88 = (($79) + 2|0);
     $$0$i7 = $88;
    } else {
     label = 53;
    }
   } else {
    label = 53;
   }
  } else {
   label = 53;
  }
 } while(0);
 if ((label|0) == 53) {
  $$0$i7 = $79;
 }
 $89 = ($79|0)==($__nar|0);
 if ($89) {
  $110 = 0;$99 = $__nar;$__ob$0 = $__o;
  label = 59;
 } else {
  $90 = $__nc$2 << 3;
  $91 = (_malloc($90)|0);
  $92 = ($91|0)==(0|0);
  if ($92) {
   __THREW__ = 0;
   invoke_v(4);
   $93 = __THREW__; __THREW__ = 0;
   $94 = $93&1;
   if ($94) {
    $119 = 0;
    label = 58;
   } else {
    $$pre18 = HEAP32[$__nb>>2]|0;
    $110 = $91;$99 = $$pre18;$__ob$0 = $91;
    label = 59;
   }
  } else {
   $110 = $91;$99 = $79;$__ob$0 = $91;
   label = 59;
  }
 }
 do {
  if ((label|0) == 59) {
   __THREW__ = 0;
   invoke_vii(48,($0|0),($__iob|0));
   $97 = __THREW__; __THREW__ = 0;
   $98 = $97&1;
   if ($98) {
    $119 = $110;
    label = 58;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(44,($99|0),($$0$i7|0),($78|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $100 = __THREW__; __THREW__ = 0;
    $101 = $100&1;
    if ($101) {
     $113 = ___cxa_find_matching_catch(-1,-1)|0;
     $114 = tempRet0;
     $115 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($115)|0);
     $$0 = $113;$$01 = $114;$117 = $110;
     break;
    }
    $102 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($102)|0);
    $103 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $103;
    $104 = HEAP32[$__op>>2]|0;
    $105 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(45,($1|0),($$byval_copy|0),($__ob$0|0),($104|0),($105|0),($__iob|0),($__fl|0));
    $106 = __THREW__; __THREW__ = 0;
    $107 = $106&1;
    if ($107) {
     $119 = $110;
     label = 58;
    } else {
     $108 = HEAP32[$1>>2]|0;
     HEAP32[$__s>>2] = $108;
     HEAP32[$agg$result>>2] = $108;
     $109 = ($110|0)==(0|0);
     if (!($109)) {
      _free($110);
     }
     $111 = ($112|0)==(0|0);
     if ($111) {
      STACKTOP = sp;return;
     }
     _free($112);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 58) {
  $95 = ___cxa_find_matching_catch(-1,-1)|0;
  $96 = tempRet0;
  $$0 = $95;$$01 = $96;$117 = $119;
 }
 $116 = ($117|0)==(0|0);
 if (!($116)) {
  _free($117);
 }
 $118 = ($112|0)==(0|0);
 if ($118) {
  $$116 = $$0;$$1215 = $$01;
  ___resumeException($$116|0);
  // unreachable;
 }
 _free($112);
 $$116 = $$0;$$1215 = $$01;
 ___resumeException($$116|0);
 // unreachable;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i13 = 0, $$57 = 0, $$__dg$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__dc$024 = 0, $__dc$1 = 0, $__dg$025 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$220 = 0, $__nf$3 = 0, $__ns$042 = 0, $__ns$133 = 0, $__ns$2 = 0, $__p$026 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $eh$lpad$body$index7Z2D = 0, $eh$lpad$body$indexZ2D = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $__p$i$i$i$i1 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__grouping = sp + 28|0;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[18784>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i$i$i>>2] = 18784;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (121);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(18784,$__p$i$i$i$i,122);
 }
 $5 = HEAP32[((18784 + 4|0))>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)>($6>>>0);
 if (!($15)) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(26752|0),(102|0));
  // unreachable;
 }
 $16 = (($10) + ($6<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(26752|0),(102|0));
  // unreachable;
 }
 $20 = HEAP32[$__loc>>2]|0;
 $21 = HEAP32[18944>>2]|0;
 $22 = ($21|0)==(-1);
 if (!($22)) {
  HEAP32[$__p$i$i$i$i1>>2] = 18944;
  $23 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$23>>2] = (121);
  $24 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$24>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(18944,$__p$i$i$i$i1,122);
 }
 $25 = HEAP32[((18944 + 4|0))>>2]|0;
 $26 = (($25) + -1)|0;
 $27 = (($20) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($20) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $28;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = $33 >> 2;
 $35 = ($34>>>0)>($26>>>0);
 if (!($35)) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(26752|0),(102|0));
  // unreachable;
 }
 $36 = (($30) + ($26<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(26752|0),(102|0));
  // unreachable;
 }
 $40 = HEAP32[$37>>2]|0;
 $41 = (($40) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 FUNCTION_TABLE_vii[$42 & 63]($__grouping,$37);
 HEAP32[$__oe>>2] = $__ob;
 $43 = HEAP8[$__nb]|0;
 if ((($43<<24>>24) == 43) | (($43<<24>>24) == 45)) {
  $44 = HEAP32[$17>>2]|0;
  $45 = (($44) + 44|0);
  $46 = HEAP32[$45>>2]|0;
  __THREW__ = 0;
  $47 = (invoke_iii($46|0,($17|0),($43|0))|0);
  $48 = __THREW__; __THREW__ = 0;
  $49 = $48&1;
  if (!($49)) {
   $50 = (($__nb) + 1|0);
   $51 = HEAP32[$__oe>>2]|0;
   $52 = (($51) + 4|0);
   HEAP32[$__oe>>2] = $52;
   HEAP32[$51>>2] = $47;
   $__nf$0 = $50;
   label = 20;
  }
 } else {
  $__nf$0 = $__nb;
  label = 20;
 }
 L22: do {
  if ((label|0) == 20) {
   $63 = $__ne;
   $64 = $__nf$0;
   $65 = (($63) - ($64))|0;
   $66 = ($65|0)>(1);
   L24: do {
    if ($66) {
     $68 = HEAP8[$__nf$0]|0;
     $69 = ($68<<24>>24)==(48);
     if ($69) {
      $70 = (($__nf$0) + 1|0);
      $71 = HEAP8[$70]|0;
      if ((($71<<24>>24) == 88) | (($71<<24>>24) == 120)) {
       $72 = HEAP32[$17>>2]|0;
       $73 = (($72) + 44|0);
       $74 = HEAP32[$73>>2]|0;
       __THREW__ = 0;
       $75 = (invoke_iii($74|0,($17|0),48)|0);
       $76 = __THREW__; __THREW__ = 0;
       $77 = $76&1;
       if ($77) {
        break L22;
       }
       $78 = HEAP32[$__oe>>2]|0;
       $79 = (($78) + 4|0);
       HEAP32[$__oe>>2] = $79;
       HEAP32[$78>>2] = $75;
       $80 = (($__nf$0) + 2|0);
       $81 = HEAP8[$70]|0;
       $82 = HEAP32[$17>>2]|0;
       $83 = (($82) + 44|0);
       $84 = HEAP32[$83>>2]|0;
       __THREW__ = 0;
       $85 = (invoke_iii($84|0,($17|0),($81|0))|0);
       $86 = __THREW__; __THREW__ = 0;
       $87 = $86&1;
       if ($87) {
        break L22;
       }
       $88 = HEAP32[$__oe>>2]|0;
       $89 = (($88) + 4|0);
       HEAP32[$__oe>>2] = $89;
       HEAP32[$88>>2] = $85;
       $90 = ($80>>>0)<($__ne>>>0);
       if ($90) {
        $__ns$042 = $80;
        while(1) {
         $93 = HEAP8[$__ns$042]|0;
         $94 = HEAP8[18688]|0;
         $95 = ($94<<24>>24)==(0);
         if ($95) {
          $96 = (___cxa_guard_acquire((18688|0))|0);
          $97 = ($96|0)==(0);
          if (!($97)) {
           __THREW__ = 0;
           $98 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
           $99 = __THREW__; __THREW__ = 0;
           $100 = $99&1;
           if ($100) {
            label = 32;
            break;
           }
           HEAP32[18680>>2] = $98;
           ___cxa_guard_release((18688|0));
          }
         }
         $103 = HEAP32[18680>>2]|0;
         $104 = $93 << 24 >> 24;
         __THREW__ = 0;
         $105 = (invoke_iii(18,($104|0),($103|0))|0);
         $106 = __THREW__; __THREW__ = 0;
         $107 = $106&1;
         if ($107) {
          label = 17;
          break;
         }
         $108 = ($105|0)==(0);
         $92 = (($__ns$042) + 1|0);
         if ($108) {
          $__nf$1 = $80;$__ns$2 = $__ns$042;
          break L24;
         }
         $91 = ($92>>>0)<($__ne>>>0);
         if ($91) {
          $__ns$042 = $92;
         } else {
          $__nf$1 = $80;$__ns$2 = $92;
          break L24;
         }
        }
        if ((label|0) == 17) {
         $59 = ___cxa_find_matching_catch(-1,-1)|0;
         $60 = tempRet0;
         $eh$lpad$body$index7Z2D = $60;$eh$lpad$body$indexZ2D = $59;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
         ___resumeException($eh$lpad$body$indexZ2D|0);
         // unreachable;
        }
        else if ((label|0) == 32) {
         $101 = ___cxa_find_matching_catch(-1,-1)|0;
         $102 = tempRet0;
         ___cxa_guard_abort((18688|0));
         $eh$lpad$body$index7Z2D = $102;$eh$lpad$body$indexZ2D = $101;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
         ___resumeException($eh$lpad$body$indexZ2D|0);
         // unreachable;
        }
       } else {
        $__nf$1 = $80;$__ns$2 = $80;
       }
      } else {
       label = 21;
      }
     } else {
      label = 21;
     }
    } else {
     label = 21;
    }
   } while(0);
   L44: do {
    if ((label|0) == 21) {
     $67 = ($__nf$0>>>0)<($__ne>>>0);
     if ($67) {
      $__ns$133 = $__nf$0;
      while(1) {
       $111 = HEAP8[$__ns$133]|0;
       $112 = HEAP8[18688]|0;
       $113 = ($112<<24>>24)==(0);
       if ($113) {
        $114 = (___cxa_guard_acquire((18688|0))|0);
        $115 = ($114|0)==(0);
        if (!($115)) {
         __THREW__ = 0;
         $116 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
         $117 = __THREW__; __THREW__ = 0;
         $118 = $117&1;
         if ($118) {
          label = 40;
          break;
         }
         HEAP32[18680>>2] = $116;
         ___cxa_guard_release((18688|0));
        }
       }
       $121 = HEAP32[18680>>2]|0;
       $122 = $111 << 24 >> 24;
       __THREW__ = 0;
       $123 = (invoke_iii(19,($122|0),($121|0))|0);
       $124 = __THREW__; __THREW__ = 0;
       $125 = $124&1;
       if ($125) {
        label = 16;
        break;
       }
       $126 = ($123|0)==(0);
       $110 = (($__ns$133) + 1|0);
       if ($126) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$133;
        break L44;
       }
       $109 = ($110>>>0)<($__ne>>>0);
       if ($109) {
        $__ns$133 = $110;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $110;
        break L44;
       }
      }
      if ((label|0) == 16) {
       $57 = ___cxa_find_matching_catch(-1,-1)|0;
       $58 = tempRet0;
       $eh$lpad$body$index7Z2D = $58;$eh$lpad$body$indexZ2D = $57;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       ___resumeException($eh$lpad$body$indexZ2D|0);
       // unreachable;
      }
      else if ((label|0) == 40) {
       $119 = ___cxa_find_matching_catch(-1,-1)|0;
       $120 = tempRet0;
       ___cxa_guard_abort((18688|0));
       $eh$lpad$body$index7Z2D = $120;$eh$lpad$body$indexZ2D = $119;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       ___resumeException($eh$lpad$body$indexZ2D|0);
       // unreachable;
      }
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $127 = HEAP8[$__grouping]|0;
   $128 = $127 & 1;
   $129 = ($128<<24>>24)==(0);
   if ($129) {
    $132 = $127&255;
    $133 = $132 >>> 1;
    $135 = $133;
   } else {
    $130 = (($__grouping) + 4|0);
    $131 = HEAP32[$130>>2]|0;
    $135 = $131;
   }
   $134 = ($135|0)==(0);
   if ($134) {
    $136 = HEAP32[$__oe>>2]|0;
    $137 = HEAP32[$17>>2]|0;
    $138 = (($137) + 48|0);
    $139 = HEAP32[$138>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($139|0,($17|0),($__nf$1|0),($__ns$2|0),($136|0))|0);
    $140 = __THREW__; __THREW__ = 0;
    $141 = $140&1;
    if ($141) {
     break;
    }
    $142 = $__ns$2;
    $143 = $__nf$1;
    $144 = (($142) - ($143))|0;
    $145 = HEAP32[$__oe>>2]|0;
    $146 = (($145) + ($144<<2)|0);
    HEAP32[$__oe>>2] = $146;
    $253 = $146;
   } else {
    $147 = ($__nf$1|0)==($__ns$2|0);
    if (!($147)) {
     $148 = (($__ns$2) + -1|0);
     $149 = ($148>>>0)>($__nf$1>>>0);
     if ($149) {
      $$012$i$i = $__nf$1;$152 = $148;
      while(1) {
       $150 = HEAP8[$$012$i$i]|0;
       $151 = HEAP8[$152]|0;
       HEAP8[$$012$i$i] = $151;
       HEAP8[$152] = $150;
       $153 = (($$012$i$i) + 1|0);
       $154 = (($152) + -1|0);
       $155 = ($153>>>0)<($154>>>0);
       if ($155) {
        $$012$i$i = $153;$152 = $154;
       } else {
        break;
       }
      }
     }
    }
    $156 = HEAP32[$37>>2]|0;
    $157 = (($156) + 16|0);
    $158 = HEAP32[$157>>2]|0;
    __THREW__ = 0;
    $159 = (invoke_ii($158|0,($37|0))|0);
    $160 = __THREW__; __THREW__ = 0;
    $161 = $160&1;
    if ($161) {
     break;
    }
    $162 = ($__nf$1>>>0)<($__ns$2>>>0);
    L73: do {
     if ($162) {
      $163 = (($__grouping) + 1|0);
      $164 = (($__grouping) + 4|0);
      $165 = (($__grouping) + 8|0);
      $__dc$024 = 0;$__dg$025 = 0;$__p$026 = $__nf$1;
      while(1) {
       $166 = HEAP8[$__grouping]|0;
       $167 = $166 & 1;
       $168 = ($167<<24>>24)==(0);
       $169 = HEAP32[$165>>2]|0;
       $$ = $168 ? $163 : $169;
       $170 = (($$) + ($__dg$025)|0);
       $171 = HEAP8[$170]|0;
       $172 = ($171<<24>>24)>(0);
       if ($172) {
        $173 = HEAP32[$165>>2]|0;
        $$57 = $168 ? $163 : $173;
        $174 = (($$57) + ($__dg$025)|0);
        $175 = HEAP8[$174]|0;
        $176 = $175 << 24 >> 24;
        $177 = ($__dc$024|0)==($176|0);
        if ($177) {
         $178 = HEAP32[$__oe>>2]|0;
         $179 = (($178) + 4|0);
         HEAP32[$__oe>>2] = $179;
         HEAP32[$178>>2] = $159;
         $180 = HEAP8[$__grouping]|0;
         $181 = $180 & 1;
         $182 = ($181<<24>>24)==(0);
         if ($182) {
          $184 = $180&255;
          $185 = $184 >>> 1;
          $187 = $185;
         } else {
          $183 = HEAP32[$164>>2]|0;
          $187 = $183;
         }
         $186 = (($187) + -1)|0;
         $188 = ($__dg$025>>>0)<($186>>>0);
         $189 = $188&1;
         $$__dg$0 = (($189) + ($__dg$025))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$024;$__dg$1 = $__dg$025;
        }
       } else {
        $__dc$1 = $__dc$024;$__dg$1 = $__dg$025;
       }
       $190 = HEAP8[$__p$026]|0;
       $191 = HEAP32[$17>>2]|0;
       $192 = (($191) + 44|0);
       $193 = HEAP32[$192>>2]|0;
       __THREW__ = 0;
       $194 = (invoke_iii($193|0,($17|0),($190|0))|0);
       $195 = __THREW__; __THREW__ = 0;
       $196 = $195&1;
       if ($196) {
        break;
       }
       $197 = HEAP32[$__oe>>2]|0;
       $198 = (($197) + 4|0);
       HEAP32[$__oe>>2] = $198;
       HEAP32[$197>>2] = $194;
       $199 = (($__dc$1) + 1)|0;
       $200 = (($__p$026) + 1|0);
       $201 = ($200>>>0)<($__ns$2>>>0);
       if ($201) {
        $__dc$024 = $199;$__dg$025 = $__dg$1;$__p$026 = $200;
       } else {
        $207 = $198;
        break L73;
       }
      }
      $55 = ___cxa_find_matching_catch(-1,-1)|0;
      $56 = tempRet0;
      $eh$lpad$body$index7Z2D = $56;$eh$lpad$body$indexZ2D = $55;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $207 = $$pre;
     }
    } while(0);
    $202 = $__nf$1;
    $203 = $__nb;
    $204 = (($202) - ($203))|0;
    $205 = (($__ob) + ($204<<2)|0);
    $206 = ($205|0)==($207|0);
    if ($206) {
     $253 = $207;
    } else {
     $208 = (($207) + -4|0);
     $209 = ($208>>>0)>($205>>>0);
     if ($209) {
      $$012$i$i13 = $205;$212 = $208;
      while(1) {
       $210 = HEAP32[$$012$i$i13>>2]|0;
       $211 = HEAP32[$212>>2]|0;
       HEAP32[$$012$i$i13>>2] = $211;
       HEAP32[$212>>2] = $210;
       $213 = (($$012$i$i13) + 4|0);
       $214 = (($212) + -4|0);
       $215 = ($213>>>0)<($214>>>0);
       if ($215) {
        $$012$i$i13 = $213;$212 = $214;
       } else {
        $253 = $207;
        break;
       }
      }
     } else {
      $253 = $207;
     }
    }
   }
   $216 = ($__ns$2>>>0)<($__ne>>>0);
   L96: do {
    if ($216) {
     $__nf$220 = $__ns$2;
     while(1) {
      $217 = HEAP8[$__nf$220]|0;
      $218 = ($217<<24>>24)==(46);
      if ($218) {
       label = 70;
       break;
      }
      $228 = HEAP32[$17>>2]|0;
      $229 = (($228) + 44|0);
      $230 = HEAP32[$229>>2]|0;
      __THREW__ = 0;
      $231 = (invoke_iii($230|0,($17|0),($217|0))|0);
      $232 = __THREW__; __THREW__ = 0;
      $233 = $232&1;
      if ($233) {
       label = 14;
       break;
      }
      $234 = HEAP32[$__oe>>2]|0;
      $235 = (($234) + 4|0);
      HEAP32[$__oe>>2] = $235;
      HEAP32[$234>>2] = $231;
      $236 = (($__nf$220) + 1|0);
      $237 = ($236>>>0)<($__ne>>>0);
      if ($237) {
       $__nf$220 = $236;
      } else {
       $241 = $235;$__nf$3 = $236;
       break L96;
      }
     }
     if ((label|0) == 14) {
      $53 = ___cxa_find_matching_catch(-1,-1)|0;
      $54 = tempRet0;
      $eh$lpad$body$index7Z2D = $54;$eh$lpad$body$indexZ2D = $53;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
     else if ((label|0) == 70) {
      $219 = HEAP32[$37>>2]|0;
      $220 = (($219) + 12|0);
      $221 = HEAP32[$220>>2]|0;
      __THREW__ = 0;
      $222 = (invoke_ii($221|0,($37|0))|0);
      $223 = __THREW__; __THREW__ = 0;
      $224 = $223&1;
      if ($224) {
       break L22;
      }
      $225 = HEAP32[$__oe>>2]|0;
      $226 = (($225) + 4|0);
      HEAP32[$__oe>>2] = $226;
      HEAP32[$225>>2] = $222;
      $227 = (($__nf$220) + 1|0);
      $241 = $226;$__nf$3 = $227;
      break;
     }
    } else {
     $241 = $253;$__nf$3 = $__ns$2;
    }
   } while(0);
   $238 = HEAP32[$17>>2]|0;
   $239 = (($238) + 48|0);
   $240 = HEAP32[$239>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($240|0,($17|0),($__nf$3|0),($__ne|0),($241|0))|0);
   $242 = __THREW__; __THREW__ = 0;
   $243 = $242&1;
   if (!($243)) {
    $244 = $__nf$3;
    $245 = (($63) - ($244))|0;
    $246 = HEAP32[$__oe>>2]|0;
    $247 = (($246) + ($245<<2)|0);
    HEAP32[$__oe>>2] = $247;
    $248 = ($__np|0)==($__ne|0);
    if ($248) {
     $storemerge = $247;
     HEAP32[$__op>>2] = $storemerge;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
    $249 = $__np;
    $250 = $__nb;
    $251 = (($249) - ($250))|0;
    $252 = (($__ob) + ($251<<2)|0);
    $storemerge = $252;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $61 = ___cxa_find_matching_catch(-1,-1)|0;
 $62 = tempRet0;
 $eh$lpad$body$index7Z2D = $62;$eh$lpad$body$indexZ2D = $61;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$0$i7 = 0, $$01 = 0, $$1$i = 0, $$111 = 0, $$1210 = 0, $$byval_copy = 0, $$pre = 0, $$pre12 = 0, $$pre13 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $eh$lpad$body$index3Z2D = 0;
 var $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0, $scevgep = 0, $scevgep14 = 0, $specify_precision$0$off0$ph$i15 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer9 = 0, $vararg_ptr15 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $$byval_copy = sp + 308|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer12 = sp + 8|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer = sp + 32|0;
 $__fmt = sp;
 $__nar = sp + 312|0;
 $__nb = sp + 60|0;
 $__o = sp + 64|0;
 $__op = sp + 292|0;
 $__oe = sp + 296|0;
 $0 = sp + 300|0;
 $1 = sp + 56|0;
 $2 = sp + 304|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2048;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0$i = $7;
 } else {
  $12 = (($__fmt) + 2|0);
  HEAP8[$7] = 43;
  $$0$i = $12;
 }
 $13 = $9 & 1024;
 $14 = ($13|0)==(0);
 if ($14) {
  $$1$i = $$0$i;
 } else {
  $15 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$1$i = $15;
 }
 $16 = $9 & 260;
 $17 = $9 >>> 14;
 $18 = ($16|0)==(260);
 do {
  if ($18) {
   HEAP8[$$1$i] = 76;
   $scevgep14 = (($$1$i) + 1|0);
   $25 = $17 & 1;
   $26 = ($25|0)==(0);
   if ($26) {
    HEAP8[$scevgep14] = 97;
    $specify_precision$0$off0$ph$i15 = 0;
    break;
   } else {
    HEAP8[$scevgep14] = 65;
    $specify_precision$0$off0$ph$i15 = 0;
    break;
   }
  } else {
   $19 = (($$1$i) + 1|0);
   HEAP8[$$1$i] = 46;
   $20 = (($$1$i) + 2|0);
   HEAP8[$19] = 42;
   HEAP8[$20] = 76;
   $scevgep = (($$1$i) + 3|0);
   if ((($16|0) == 256)) {
    $23 = $17 & 1;
    $24 = ($23|0)==(0);
    if ($24) {
     HEAP8[$scevgep] = 101;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 69;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    }
   } else if ((($16|0) == 4)) {
    $21 = $17 & 1;
    $22 = ($21|0)==(0);
    if ($22) {
     HEAP8[$scevgep] = 102;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 70;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    }
   } else {
    $27 = $17 & 1;
    $28 = ($27|0)==(0);
    if ($28) {
     HEAP8[$scevgep] = 103;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 71;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__nb>>2] = $__nar;
 $29 = HEAP8[18688]|0;
 $30 = ($29<<24>>24)==(0);
 do {
  if ($30) {
   $31 = (___cxa_guard_acquire((18688|0))|0);
   $32 = ($31|0)==(0);
   if (!($32)) {
    __THREW__ = 0;
    $33 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     $36 = ___cxa_find_matching_catch(-1,-1)|0;
     $37 = tempRet0;
     ___cxa_guard_abort((18688|0));
     ___resumeException($36|0);
     // unreachable;
    } else {
     HEAP32[18680>>2] = $33;
     ___cxa_guard_release((18688|0));
     break;
    }
   }
  }
 } while(0);
 $38 = HEAP32[18680>>2]|0;
 if ($specify_precision$0$off0$ph$i15) {
  $39 = (($__iob) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  HEAP32[$vararg_buffer>>2] = $40;
  $vararg_ptr8 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $41 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$38,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $41;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $42 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$38,$__fmt,$vararg_buffer9)|0);
  $__nc$0 = $42;
 }
 $43 = ($__nc$0|0)>(29);
 do {
  if ($43) {
   $44 = HEAP8[18688]|0;
   $45 = ($44<<24>>24)==(0);
   L40: do {
    if ($specify_precision$0$off0$ph$i15) {
     do {
      if ($45) {
       $46 = (___cxa_guard_acquire((18688|0))|0);
       $47 = ($46|0)==(0);
       if (!($47)) {
        __THREW__ = 0;
        $48 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
        $49 = __THREW__; __THREW__ = 0;
        $50 = $49&1;
        if ($50) {
         $51 = ___cxa_find_matching_catch(-1,-1)|0;
         $52 = tempRet0;
         ___cxa_guard_abort((18688|0));
         $eh$lpad$body$index3Z2D = $52;$eh$lpad$body$indexZ2D = $51;
         break L40;
        } else {
         HEAP32[18680>>2] = $48;
         ___cxa_guard_release((18688|0));
         break;
        }
       }
      }
     } while(0);
     $53 = HEAP32[18680>>2]|0;
     $54 = (($__iob) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer12>>2] = $55;
     $vararg_ptr15 = (($vararg_buffer12) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr15>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr15+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $56 = (invoke_iiiii(13,($__nb|0),($53|0),($__fmt|0),($vararg_buffer12|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 36;
     } else {
      $__nc$1 = $56;
      label = 44;
     }
    } else {
     do {
      if ($45) {
       $61 = (___cxa_guard_acquire((18688|0))|0);
       $62 = ($61|0)==(0);
       if (!($62)) {
        __THREW__ = 0;
        $63 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
        $64 = __THREW__; __THREW__ = 0;
        $65 = $64&1;
        if ($65) {
         $66 = ___cxa_find_matching_catch(-1,-1)|0;
         $67 = tempRet0;
         ___cxa_guard_abort((18688|0));
         $eh$lpad$body$index3Z2D = $67;$eh$lpad$body$indexZ2D = $66;
         break L40;
        } else {
         HEAP32[18680>>2] = $63;
         ___cxa_guard_release((18688|0));
         break;
        }
       }
      }
     } while(0);
     $68 = HEAP32[18680>>2]|0;
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer16>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer16+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $69 = (invoke_iiiii(13,($__nb|0),($68|0),($__fmt|0),($vararg_buffer16|0))|0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 36;
     } else {
      $__nc$1 = $69;
      label = 44;
     }
    }
   } while(0);
   if ((label|0) == 44) {
    $72 = HEAP32[$__nb>>2]|0;
    $73 = ($72|0)==(0|0);
    if (!($73)) {
     $110 = $72;$77 = $72;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(4);
    $74 = __THREW__; __THREW__ = 0;
    $75 = $74&1;
    if ($75) {
     label = 36;
    } else {
     $$pre = HEAP32[$__nb>>2]|0;
     $110 = $$pre;$77 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   if ((label|0) == 36) {
    $59 = ___cxa_find_matching_catch(-1,-1)|0;
    $60 = tempRet0;
    $eh$lpad$body$index3Z2D = $60;$eh$lpad$body$indexZ2D = $59;
   }
   $$111 = $eh$lpad$body$indexZ2D;$$1210 = $eh$lpad$body$index3Z2D;
   ___resumeException($$111|0);
   // unreachable;
  } else {
   $$pre12 = HEAP32[$__nb>>2]|0;
   $110 = 0;$77 = $$pre12;$__nc$2 = $__nc$0;
  }
 } while(0);
 $76 = (($77) + ($__nc$2)|0);
 $78 = HEAP32[$8>>2]|0;
 $79 = $78 & 176;
 do {
  if ((($79|0) == 32)) {
   $$0$i7 = $76;
  } else if ((($79|0) == 16)) {
   $80 = HEAP8[$77]|0;
   if ((($80<<24>>24) == 43) | (($80<<24>>24) == 45)) {
    $81 = (($77) + 1|0);
    $$0$i7 = $81;
    break;
   }
   $82 = ($__nc$2|0)>(1);
   $83 = ($80<<24>>24)==(48);
   $or$cond$i = $82 & $83;
   if ($or$cond$i) {
    $84 = (($77) + 1|0);
    $85 = HEAP8[$84]|0;
    if ((($85<<24>>24) == 88) | (($85<<24>>24) == 120)) {
     $86 = (($77) + 2|0);
     $$0$i7 = $86;
    } else {
     label = 53;
    }
   } else {
    label = 53;
   }
  } else {
   label = 53;
  }
 } while(0);
 if ((label|0) == 53) {
  $$0$i7 = $77;
 }
 $87 = ($77|0)==($__nar|0);
 if ($87) {
  $108 = 0;$97 = $__nar;$__ob$0 = $__o;
  label = 59;
 } else {
  $88 = $__nc$2 << 3;
  $89 = (_malloc($88)|0);
  $90 = ($89|0)==(0|0);
  if ($90) {
   __THREW__ = 0;
   invoke_v(4);
   $91 = __THREW__; __THREW__ = 0;
   $92 = $91&1;
   if ($92) {
    $117 = 0;
    label = 58;
   } else {
    $$pre13 = HEAP32[$__nb>>2]|0;
    $108 = $89;$97 = $$pre13;$__ob$0 = $89;
    label = 59;
   }
  } else {
   $108 = $89;$97 = $77;$__ob$0 = $89;
   label = 59;
  }
 }
 do {
  if ((label|0) == 59) {
   __THREW__ = 0;
   invoke_vii(48,($0|0),($__iob|0));
   $95 = __THREW__; __THREW__ = 0;
   $96 = $95&1;
   if ($96) {
    $117 = $108;
    label = 58;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(44,($97|0),($$0$i7|0),($76|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $98 = __THREW__; __THREW__ = 0;
    $99 = $98&1;
    if ($99) {
     $111 = ___cxa_find_matching_catch(-1,-1)|0;
     $112 = tempRet0;
     $113 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($113)|0);
     $$0 = $111;$$01 = $112;$115 = $108;
     break;
    }
    $100 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($100)|0);
    $101 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $101;
    $102 = HEAP32[$__op>>2]|0;
    $103 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(45,($1|0),($$byval_copy|0),($__ob$0|0),($102|0),($103|0),($__iob|0),($__fl|0));
    $104 = __THREW__; __THREW__ = 0;
    $105 = $104&1;
    if ($105) {
     $117 = $108;
     label = 58;
    } else {
     $106 = HEAP32[$1>>2]|0;
     HEAP32[$__s>>2] = $106;
     HEAP32[$agg$result>>2] = $106;
     $107 = ($108|0)==(0|0);
     if (!($107)) {
      _free($108);
     }
     $109 = ($110|0)==(0|0);
     if ($109) {
      STACKTOP = sp;return;
     }
     _free($110);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 58) {
  $93 = ___cxa_find_matching_catch(-1,-1)|0;
  $94 = tempRet0;
  $$0 = $93;$$01 = $94;$115 = $117;
 }
 $114 = ($115|0)==(0|0);
 if (!($114)) {
  _free($115);
 }
 $116 = ($110|0)==(0|0);
 if ($116) {
  $$111 = $$0;$$1210 = $$01;
  ___resumeException($$111|0);
  // unreachable;
 }
 _free($110);
 $$111 = $$0;$$1210 = $$01;
 ___resumeException($$111|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $__p$i$i$i$i = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $$byval_copy = sp + 176|0;
 $vararg_buffer = sp;
 $__p$i$i$i$i = sp + 8|0;
 $__fmt = sp + 200|0;
 $__nar = sp + 180|0;
 $__o = sp + 28|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 ;HEAP8[$__fmt+0|0]=HEAP8[17592+0|0]|0;HEAP8[$__fmt+1|0]=HEAP8[17592+1|0]|0;HEAP8[$__fmt+2|0]=HEAP8[17592+2|0]|0;HEAP8[$__fmt+3|0]=HEAP8[17592+3|0]|0;HEAP8[$__fmt+4|0]=HEAP8[17592+4|0]|0;HEAP8[$__fmt+5|0]=HEAP8[17592+5|0]|0;
 $2 = HEAP8[18688]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((18688|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $9 = ___cxa_find_matching_catch(-1,-1)|0;
     $10 = tempRet0;
     ___cxa_guard_abort((18688|0));
     ___resumeException($9|0);
     // unreachable;
    } else {
     HEAP32[18680>>2] = $6;
     ___cxa_guard_release((18688|0));
     break;
    }
   }
  }
 } while(0);
 $11 = HEAP32[18680>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $12 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$11,$__fmt,$vararg_buffer)|0);
 $13 = (($__nar) + ($12)|0);
 $14 = (($__iob) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 176;
 do {
  if ((($16|0) == 16)) {
   $17 = HEAP8[$__nar]|0;
   if ((($17<<24>>24) == 43) | (($17<<24>>24) == 45)) {
    $18 = (($__nar) + 1|0);
    $$0$i = $18;
    break;
   }
   $19 = ($12|0)>(1);
   $20 = ($17<<24>>24)==(48);
   $or$cond$i = $19 & $20;
   if ($or$cond$i) {
    $21 = (($__nar) + 1|0);
    $22 = HEAP8[$21]|0;
    if ((($22<<24>>24) == 88) | (($22<<24>>24) == 120)) {
     $23 = (($__nar) + 2|0);
     $$0$i = $23;
    } else {
     label = 12;
    }
   } else {
    label = 12;
   }
  } else if ((($16|0) == 32)) {
   $$0$i = $13;
  } else {
   label = 12;
  }
 } while(0);
 if ((label|0) == 12) {
  $$0$i = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $24 = HEAP32[$0>>2]|0;
 $25 = HEAP32[18784>>2]|0;
 $26 = ($25|0)==(-1);
 if (!($26)) {
  HEAP32[$__p$i$i$i$i>>2] = 18784;
  $27 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$27>>2] = (121);
  $28 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$28>>2] = 0;
  __THREW__ = 0;
  invoke_viii(6,(18784|0),($__p$i$i$i$i|0),(122|0));
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if ($30) {
   $54 = ___cxa_find_matching_catch(-1,-1)|0;
   $55 = tempRet0;
   $56 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($56)|0);
   ___resumeException($54|0);
   // unreachable;
  }
 }
 $31 = HEAP32[((18784 + 4|0))>>2]|0;
 $32 = (($31) + -1)|0;
 $33 = (($24) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($24) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $34;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = $39 >> 2;
 $41 = ($40>>>0)>($32>>>0);
 if ($41) {
  $42 = (($36) + ($32<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)==(0|0);
  if (!($44)) {
   $48 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
   $49 = HEAP32[$43>>2]|0;
   $50 = (($49) + 48|0);
   $51 = HEAP32[$50>>2]|0;
   (FUNCTION_TABLE_iiiii[$51 & 31]($43,$__nar,$13,$__o)|0);
   $52 = (($__o) + ($12<<2)|0);
   $53 = ($$0$i|0)==($13|0);
   if ($53) {
    $__op$0 = $52;
    $61 = HEAP32[$__s>>2]|0;
    HEAP32[$1>>2] = $61;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
    __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$52,$__iob,$__fl);
    STACKTOP = sp;return;
   }
   $57 = $__nar;
   $58 = $$0$i;
   $59 = (($58) - ($57))|0;
   $60 = (($__o) + ($59<<2)|0);
   $__op$0 = $60;
   $61 = HEAP32[$__s>>2]|0;
   HEAP32[$1>>2] = $61;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$52,$__iob,$__fl);
   STACKTOP = sp;return;
  }
 }
 $45 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($45);
 __THREW__ = 0;
 invoke_viii(7,($45|0),(26752|0),(102|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $54 = ___cxa_find_matching_catch(-1,-1)|0;
  $55 = tempRet0;
  $56 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($56)|0);
  ___resumeException($54|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i16 = 0, $$0$ph$be = 0, $$0$ph38 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre = 0, $$pre$i$i$i20 = 0, $$pre$i$i$i7 = 0, $$pre$i2$i$i11 = 0, $$pre$i2$i$i1140 = 0, $$pre$i2$i$i1141 = 0, $$pre39 = 0, $$pre39$pre = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $__p$i$i$i$i = 0, $isascii1$i = 0, $isascii1$i14 = 0, $isascii1$i4 = 0, $sext = 0, $tmp$i$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $$byval_copy1 = sp + 32|0;
 $$byval_copy = sp + 12|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 16|0;
 $1 = sp + 20|0;
 $2 = sp + 24|0;
 $3 = sp + 28|0;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[18792>>2]|0;
 $6 = ($5|0)==(-1);
 if (!($6)) {
  HEAP32[$__p$i$i$i$i>>2] = 18792;
  $7 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$7>>2] = (121);
  $8 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$8>>2] = 0;
  __THREW__ = 0;
  invoke_viii(6,(18792|0),($__p$i$i$i$i|0),(122|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $59 = ___cxa_find_matching_catch(-1,-1)|0;
   $60 = tempRet0;
   $61 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($61)|0);
   ___resumeException($59|0);
   // unreachable;
  }
 }
 $11 = HEAP32[((18792 + 4|0))>>2]|0;
 $12 = (($11) + -1)|0;
 $13 = (($4) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($4) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $14;
 $18 = $16;
 $19 = (($17) - ($18))|0;
 $20 = $19 >> 2;
 $21 = ($20>>>0)>($12>>>0);
 if ($21) {
  $22 = (($16) + ($12<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0|0);
  if (!($24)) {
   $28 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($28)|0);
   HEAP32[$__err>>2] = 0;
   $29 = ($__fmtb|0)==($__fmte|0);
   L8: do {
    if ($29) {
     label = 67;
    } else {
     $30 = (($23) + 8|0);
     $$0$ph38 = $__fmtb;$$pre39 = 0;
     L10: while(1) {
      $32 = $$pre39;
      while(1) {
       $31 = ($32|0)==(0);
       if (!($31)) {
        label = 67;
        break L8;
       }
       $33 = HEAP32[$__b>>2]|0;
       $34 = ($33|0)==(0|0);
       if ($34) {
        $46 = 0;
       } else {
        $35 = (($33) + 12|0);
        $36 = HEAP32[$35>>2]|0;
        $37 = (($33) + 16|0);
        $38 = HEAP32[$37>>2]|0;
        $39 = ($36|0)==($38|0);
        if ($39) {
         $40 = HEAP32[$33>>2]|0;
         $41 = (($40) + 36|0);
         $42 = HEAP32[$41>>2]|0;
         $43 = (FUNCTION_TABLE_ii[$42 & 127]($33)|0);
         $44 = ($43|0)==(-1);
         if ($44) {
          HEAP32[$__b>>2] = 0;
          $46 = 0;
         } else {
          $46 = $33;
         }
        } else {
         $46 = $33;
        }
       }
       $45 = ($46|0)==(0|0);
       $47 = HEAP32[$__e>>2]|0;
       $48 = ($47|0)==(0|0);
       do {
        if ($48) {
         label = 20;
        } else {
         $49 = (($47) + 12|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = (($47) + 16|0);
         $52 = HEAP32[$51>>2]|0;
         $53 = ($50|0)==($52|0);
         if ($53) {
          $54 = HEAP32[$47>>2]|0;
          $55 = (($54) + 36|0);
          $56 = HEAP32[$55>>2]|0;
          $57 = (FUNCTION_TABLE_ii[$56 & 127]($47)|0);
          $58 = ($57|0)==(-1);
          if ($58) {
           HEAP32[$__e>>2] = 0;
           label = 20;
           break;
          }
         }
         if ($45) {
          $85 = $47;
         } else {
          label = 21;
          break L10;
         }
        }
       } while(0);
       if ((label|0) == 20) {
        label = 0;
        if ($45) {
         label = 21;
         break L10;
        } else {
         $85 = 0;
        }
       }
       $62 = HEAP8[$$0$ph38]|0;
       $63 = HEAP32[$23>>2]|0;
       $64 = (($63) + 36|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = (FUNCTION_TABLE_iiii[$65 & 31]($23,$62,0)|0);
       $67 = ($66<<24>>24)==(37);
       if ($67) {
        label = 24;
        break;
       }
       $89 = HEAP8[$$0$ph38]|0;
       $isascii1$i = ($89<<24>>24)>(-1);
       if ($isascii1$i) {
        $90 = $89 << 24 >> 24;
        $91 = HEAP32[$30>>2]|0;
        $92 = (($91) + ($90<<1)|0);
        $93 = HEAP16[$92>>1]|0;
        $94 = $93 & 8192;
        $95 = ($94<<16>>16)==(0);
        if (!($95)) {
         $$0$pn = $$0$ph38;
         label = 35;
         break;
        }
       }
       $154 = (($46) + 12|0);
       $155 = HEAP32[$154>>2]|0;
       $156 = (($46) + 16|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = ($155|0)==($157|0);
       if ($158) {
        $159 = HEAP32[$46>>2]|0;
        $160 = (($159) + 36|0);
        $161 = HEAP32[$160>>2]|0;
        $162 = (FUNCTION_TABLE_ii[$161 & 127]($46)|0);
        $$0$i$i16 = $162;
       } else {
        $163 = HEAP8[$155]|0;
        $164 = $163&255;
        $$0$i$i16 = $164;
       }
       $165 = $$0$i$i16&255;
       $166 = HEAP32[$23>>2]|0;
       $167 = (($166) + 12|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = (FUNCTION_TABLE_iii[$168 & 31]($23,$165)|0);
       $170 = HEAP8[$$0$ph38]|0;
       $171 = HEAP32[$23>>2]|0;
       $172 = (($171) + 12|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = (FUNCTION_TABLE_iii[$173 & 31]($23,$170)|0);
       $175 = ($169<<24>>24)==($174<<24>>24);
       if ($175) {
        label = 62;
        break;
       }
       HEAP32[$__err>>2] = 4;
       $32 = 4;
      }
      L38: do {
       if ((label|0) == 24) {
        label = 0;
        $68 = (($$0$ph38) + 1|0);
        $69 = ($68|0)==($__fmte|0);
        if ($69) {
         label = 25;
         break L10;
        }
        $70 = HEAP8[$68]|0;
        $71 = HEAP32[$23>>2]|0;
        $72 = (($71) + 36|0);
        $73 = HEAP32[$72>>2]|0;
        $74 = (FUNCTION_TABLE_iiii[$73 & 31]($23,$70,0)|0);
        if ((($74<<24>>24) == 48) | (($74<<24>>24) == 69)) {
         $75 = (($$0$ph38) + 2|0);
         $76 = ($75|0)==($__fmte|0);
         if ($76) {
          label = 28;
          break L10;
         }
         $77 = HEAP8[$75]|0;
         $78 = HEAP32[$23>>2]|0;
         $79 = (($78) + 36|0);
         $80 = HEAP32[$79>>2]|0;
         $81 = (FUNCTION_TABLE_iiii[$80 & 31]($23,$77,0)|0);
         $$1 = $75;$__cmd$0 = $81;$__opt$0 = $74;
        } else {
         $$1 = $68;$__cmd$0 = $74;$__opt$0 = 0;
        }
        $82 = HEAP32[$this>>2]|0;
        $83 = (($82) + 36|0);
        $84 = HEAP32[$83>>2]|0;
        HEAP32[$2>>2] = $46;
        HEAP32[$3>>2] = $85;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
        ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
        FUNCTION_TABLE_viiiiiiiii[$84 & 3]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
        $86 = HEAP32[$1>>2]|0;
        HEAP32[$__b>>2] = $86;
        $87 = (($$1) + 1|0);
        $$0$ph$be = $87;
       }
       else if ((label|0) == 35) {
        while(1) {
         label = 0;
         $$2 = (($$0$pn) + 1|0);
         $96 = ($$2|0)==($__fmte|0);
         if ($96) {
          $$2$lcssa = $__fmte;
          break;
         }
         $97 = HEAP8[$$2]|0;
         $isascii1$i4 = ($97<<24>>24)>(-1);
         if (!($isascii1$i4)) {
          $$2$lcssa = $$2;
          break;
         }
         $98 = $97 << 24 >> 24;
         $99 = (($91) + ($98<<1)|0);
         $100 = HEAP16[$99>>1]|0;
         $101 = $100 & 8192;
         $102 = ($101<<16>>16)==(0);
         if ($102) {
          $$2$lcssa = $$2;
          break;
         } else {
          $$0$pn = $$2;
          label = 35;
         }
        }
        $$pre$i$i$i7 = $46;$$pre$i2$i$i11 = $85;$117 = $85;
        while(1) {
         $103 = ($$pre$i$i$i7|0)==(0|0);
         if ($103) {
          $115 = 0;
         } else {
          $104 = (($$pre$i$i$i7) + 12|0);
          $105 = HEAP32[$104>>2]|0;
          $106 = (($$pre$i$i$i7) + 16|0);
          $107 = HEAP32[$106>>2]|0;
          $108 = ($105|0)==($107|0);
          if ($108) {
           $109 = HEAP32[$$pre$i$i$i7>>2]|0;
           $110 = (($109) + 36|0);
           $111 = HEAP32[$110>>2]|0;
           $112 = (FUNCTION_TABLE_ii[$111 & 127]($$pre$i$i$i7)|0);
           $113 = ($112|0)==(-1);
           if ($113) {
            HEAP32[$__b>>2] = 0;
            $115 = 0;
           } else {
            $115 = $$pre$i$i$i7;
           }
          } else {
           $115 = $$pre$i$i$i7;
          }
         }
         $114 = ($115|0)==(0|0);
         $116 = ($117|0)==(0|0);
         do {
          if ($116) {
           $$pre$i2$i$i1141 = $$pre$i2$i$i11;
           label = 48;
          } else {
           $118 = (($117) + 12|0);
           $119 = HEAP32[$118>>2]|0;
           $120 = (($117) + 16|0);
           $121 = HEAP32[$120>>2]|0;
           $122 = ($119|0)==($121|0);
           if (!($122)) {
            if ($114) {
             $$pre$i2$i$i1140 = $$pre$i2$i$i11;$211 = $117;
             break;
            } else {
             $$0$ph$be = $$2$lcssa;
             break L38;
            }
           }
           $123 = HEAP32[$117>>2]|0;
           $124 = (($123) + 36|0);
           $125 = HEAP32[$124>>2]|0;
           $126 = (FUNCTION_TABLE_ii[$125 & 127]($117)|0);
           $127 = ($126|0)==(-1);
           if ($127) {
            HEAP32[$__e>>2] = 0;
            $$pre$i2$i$i1141 = 0;
            label = 48;
            break;
           } else {
            $128 = ($$pre$i2$i$i11|0)==(0|0);
            $tmp$i$i13 = $114 ^ $128;
            if ($tmp$i$i13) {
             $$pre$i2$i$i1140 = $$pre$i2$i$i11;$211 = $$pre$i2$i$i11;
             break;
            } else {
             $$0$ph$be = $$2$lcssa;
             break L38;
            }
           }
          }
         } while(0);
         if ((label|0) == 48) {
          label = 0;
          if ($114) {
           $$0$ph$be = $$2$lcssa;
           break L38;
          } else {
           $$pre$i2$i$i1140 = $$pre$i2$i$i1141;$211 = 0;
          }
         }
         $129 = (($115) + 12|0);
         $130 = HEAP32[$129>>2]|0;
         $131 = (($115) + 16|0);
         $132 = HEAP32[$131>>2]|0;
         $133 = ($130|0)==($132|0);
         if ($133) {
          $134 = HEAP32[$115>>2]|0;
          $135 = (($134) + 36|0);
          $136 = HEAP32[$135>>2]|0;
          $137 = (FUNCTION_TABLE_ii[$136 & 127]($115)|0);
          $$0$i$i = $137;
         } else {
          $138 = HEAP8[$130]|0;
          $139 = $138&255;
          $$0$i$i = $139;
         }
         $140 = $$0$i$i&255;
         $isascii1$i14 = ($140<<24>>24)>(-1);
         if (!($isascii1$i14)) {
          $$0$ph$be = $$2$lcssa;
          break L38;
         }
         $sext = $$0$i$i << 24;
         $141 = $sext >> 24;
         $142 = HEAP32[$30>>2]|0;
         $143 = (($142) + ($141<<1)|0);
         $144 = HEAP16[$143>>1]|0;
         $145 = $144 & 8192;
         $146 = ($145<<16>>16)==(0);
         if ($146) {
          $$0$ph$be = $$2$lcssa;
          break L38;
         }
         $147 = HEAP32[$129>>2]|0;
         $148 = HEAP32[$131>>2]|0;
         $149 = ($147|0)==($148|0);
         if ($149) {
          $150 = HEAP32[$115>>2]|0;
          $151 = (($150) + 40|0);
          $152 = HEAP32[$151>>2]|0;
          (FUNCTION_TABLE_ii[$152 & 127]($115)|0);
          $$pre$i$i$i7 = $115;$$pre$i2$i$i11 = $$pre$i2$i$i1140;$117 = $211;
          continue;
         } else {
          $153 = (($147) + 1|0);
          HEAP32[$129>>2] = $153;
          $$pre$i$i$i7 = $115;$$pre$i2$i$i11 = $$pre$i2$i$i1140;$117 = $211;
          continue;
         }
        }
       }
       else if ((label|0) == 62) {
        label = 0;
        $176 = HEAP32[$154>>2]|0;
        $177 = HEAP32[$156>>2]|0;
        $178 = ($176|0)==($177|0);
        if ($178) {
         $179 = HEAP32[$46>>2]|0;
         $180 = (($179) + 40|0);
         $181 = HEAP32[$180>>2]|0;
         (FUNCTION_TABLE_ii[$181 & 127]($46)|0);
        } else {
         $182 = (($176) + 1|0);
         HEAP32[$154>>2] = $182;
        }
        $183 = (($$0$ph38) + 1|0);
        $$0$ph$be = $183;
       }
      } while(0);
      $88 = ($$0$ph$be|0)==($__fmte|0);
      if ($88) {
       label = 67;
       break L8;
      }
      $$pre39$pre = HEAP32[$__err>>2]|0;
      $$0$ph38 = $$0$ph$be;$$pre39 = $$pre39$pre;
     }
     if ((label|0) == 21) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i20 = $46;
      break;
     }
     else if ((label|0) == 25) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i20 = $46;
      break;
     }
     else if ((label|0) == 28) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i20 = $46;
      break;
     }
    }
   } while(0);
   if ((label|0) == 67) {
    $$pre = HEAP32[$__b>>2]|0;
    $$pre$i$i$i20 = $$pre;
   }
   $184 = ($$pre$i$i$i20|0)==(0|0);
   if ($184) {
    $196 = 0;
   } else {
    $185 = (($$pre$i$i$i20) + 12|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = (($$pre$i$i$i20) + 16|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = ($186|0)==($188|0);
    if ($189) {
     $190 = HEAP32[$$pre$i$i$i20>>2]|0;
     $191 = (($190) + 36|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = (FUNCTION_TABLE_ii[$192 & 127]($$pre$i$i$i20)|0);
     $194 = ($193|0)==(-1);
     if ($194) {
      HEAP32[$__b>>2] = 0;
      $196 = 0;
     } else {
      $196 = $$pre$i$i$i20;
     }
    } else {
     $196 = $$pre$i$i$i20;
    }
   }
   $195 = ($196|0)==(0|0);
   $197 = HEAP32[$__e>>2]|0;
   $198 = ($197|0)==(0|0);
   do {
    if ($198) {
     label = 77;
    } else {
     $199 = (($197) + 12|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = (($197) + 16|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = ($200|0)==($202|0);
     if ($203) {
      $204 = HEAP32[$197>>2]|0;
      $205 = (($204) + 36|0);
      $206 = HEAP32[$205>>2]|0;
      $207 = (FUNCTION_TABLE_ii[$206 & 127]($197)|0);
      $208 = ($207|0)==(-1);
      if ($208) {
       HEAP32[$__e>>2] = 0;
       label = 77;
       break;
      }
     }
     if ($195) {
      HEAP32[$agg$result>>2] = $196;
      STACKTOP = sp;return;
     }
    }
   } while(0);
   if ((label|0) == 77) {
    if (!($195)) {
     HEAP32[$agg$result>>2] = $196;
     STACKTOP = sp;return;
    }
   }
   $209 = HEAP32[$__err>>2]|0;
   $210 = $209 | 2;
   HEAP32[$__err>>2] = $210;
   HEAP32[$agg$result>>2] = $196;
   STACKTOP = sp;return;
  }
 }
 $25 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($25);
 __THREW__ = 0;
 invoke_viii(7,($25|0),(26752|0),(102|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $59 = ___cxa_find_matching_catch(-1,-1)|0;
  $60 = tempRet0;
  $61 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($61)|0);
  ___resumeException($59|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,17696,((17696 + 8|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 127]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $16 = (($6) + 1|0);
  $17 = (($6) + 1|0);
  $18 = $9&255;
  $19 = $18 >>> 1;
  $21 = $17;$22 = $19;$23 = $16;
 } else {
  $12 = (($6) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($6) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $21 = $13;$22 = $15;$23 = $13;
 }
 $20 = (($21) + ($22)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$23,$20);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 12|0;
 $__p$i$i$i$i = sp;
 $1 = sp + 16|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[18792>>2]|0;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  HEAP32[$__p$i$i$i$i>>2] = 18792;
  $5 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$5>>2] = (121);
  $6 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$6>>2] = 0;
  __THREW__ = 0;
  invoke_viii(6,(18792|0),($__p$i$i$i$i|0),(122|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $42 = ___cxa_find_matching_catch(-1,-1)|0;
   $43 = tempRet0;
   $44 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($44)|0);
   ___resumeException($42|0);
   // unreachable;
  }
 }
 $9 = HEAP32[((18792 + 4|0))>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = (($2) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($2) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 if ($19) {
  $20 = (($14) + ($10<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $26 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($26)|0);
   $27 = HEAP32[$__e>>2]|0;
   $28 = (($this) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = HEAP32[$29>>2]|0;
   $31 = (FUNCTION_TABLE_ii[$30 & 127]($28)|0);
   HEAP32[$0>>2] = $27;
   $32 = (($31) + 168|0);
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   $33 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$31,$32,$21,$__err,0)|0);
   $34 = $33;
   $35 = $31;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(168);
   if (!($37)) {
    $41 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $41;
    STACKTOP = sp;return;
   }
   $38 = (($__tm) + 24|0);
   $39 = (($36|0) / 12)&-1;
   $40 = (($39|0) % 7)&-1;
   HEAP32[$38>>2] = $40;
   $41 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $41;
   STACKTOP = sp;return;
  }
 }
 $23 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($23);
 __THREW__ = 0;
 invoke_viii(7,($23|0),(26752|0),(102|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $42 = ___cxa_find_matching_catch(-1,-1)|0;
  $43 = tempRet0;
  $44 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($44)|0);
  ___resumeException($42|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 12|0;
 $__p$i$i$i$i = sp;
 $1 = sp + 16|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[18792>>2]|0;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  HEAP32[$__p$i$i$i$i>>2] = 18792;
  $5 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$5>>2] = (121);
  $6 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$6>>2] = 0;
  __THREW__ = 0;
  invoke_viii(6,(18792|0),($__p$i$i$i$i|0),(122|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $43 = ___cxa_find_matching_catch(-1,-1)|0;
   $44 = tempRet0;
   $45 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($45)|0);
   ___resumeException($43|0);
   // unreachable;
  }
 }
 $9 = HEAP32[((18792 + 4|0))>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = (($2) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($2) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 if ($19) {
  $20 = (($14) + ($10<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $26 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($26)|0);
   $27 = HEAP32[$__e>>2]|0;
   $28 = (($this) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (FUNCTION_TABLE_ii[$31 & 127]($28)|0);
   HEAP32[$0>>2] = $27;
   $33 = (($32) + 288|0);
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   $34 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$32,$33,$21,$__err,0)|0);
   $35 = $34;
   $36 = $32;
   $37 = (($35) - ($36))|0;
   $38 = ($37|0)<(288);
   if (!($38)) {
    $42 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $42;
    STACKTOP = sp;return;
   }
   $39 = (($__tm) + 16|0);
   $40 = (($37|0) / 12)&-1;
   $41 = (($40|0) % 12)&-1;
   HEAP32[$39>>2] = $41;
   $42 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $42;
   STACKTOP = sp;return;
  }
 }
 $23 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($23);
 __THREW__ = 0;
 invoke_viii(7,($23|0),(26752|0),(102|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $43 = ___cxa_find_matching_catch(-1,-1)|0;
  $44 = tempRet0;
  $45 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($45)|0);
  ___resumeException($43|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$$i = 0, $$byval_copy = 0, $$off$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 12|0;
 $__p$i$i$i$i = sp;
 $1 = sp + 16|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[18792>>2]|0;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  HEAP32[$__p$i$i$i$i>>2] = 18792;
  $5 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$5>>2] = (121);
  $6 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$6>>2] = 0;
  __THREW__ = 0;
  invoke_viii(6,(18792|0),($__p$i$i$i$i|0),(122|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $39 = ___cxa_find_matching_catch(-1,-1)|0;
   $40 = tempRet0;
   $41 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
   ___resumeException($39|0);
   // unreachable;
  }
 }
 $9 = HEAP32[((18792 + 4|0))>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = (($2) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($2) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 if ($19) {
  $20 = (($14) + ($10<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $26 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($26)|0);
   $27 = (($__tm) + 20|0);
   $28 = HEAP32[$__e>>2]|0;
   HEAP32[$0>>2] = $28;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   $29 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$21,4)|0);
   $30 = HEAP32[$__err>>2]|0;
   $31 = $30 & 4;
   $32 = ($31|0)==(0);
   if (!($32)) {
    $38 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $38;
    STACKTOP = sp;return;
   }
   $33 = ($29|0)<(69);
   if ($33) {
    $34 = (($29) + 2000)|0;
    $__t$0$i = $34;
   } else {
    $$off$i = (($29) + -69)|0;
    $35 = ($$off$i>>>0)<(31);
    $36 = (($29) + 1900)|0;
    $$$i = $35 ? $36 : $29;
    $__t$0$i = $$$i;
   }
   $37 = (($__t$0$i) + -1900)|0;
   HEAP32[$27>>2] = $37;
   $38 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $38;
   STACKTOP = sp;return;
  }
 }
 $23 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($23);
 __THREW__ = 0;
 invoke_viii(7,($23|0),(26752|0),(102|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $39 = ___cxa_find_matching_catch(-1,-1)|0;
  $40 = tempRet0;
  $41 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
  ___resumeException($39|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$$i = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0;
 var $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$off$i = 0, $$off$i12 = 0, $$off$i35 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, $or$cond$i = 0, $or$cond$i15 = 0, $or$cond$i18 = 0, $or$cond$i21 = 0, $or$cond$i26 = 0, $or$cond$i29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $$byval_copy30 = sp + 288|0;
 $$byval_copy29 = sp + 284|0;
 $$byval_copy28 = sp + 280|0;
 $$byval_copy27 = sp + 276|0;
 $$byval_copy26 = sp + 272|0;
 $$byval_copy25 = sp + 268|0;
 $$byval_copy24 = sp + 264|0;
 $$byval_copy23 = sp + 260|0;
 $$byval_copy22 = sp + 256|0;
 $$byval_copy21 = sp + 252|0;
 $$byval_copy20 = sp + 248|0;
 $$byval_copy19 = sp + 244|0;
 $$byval_copy18 = sp + 240|0;
 $$byval_copy17 = sp + 236|0;
 $$byval_copy16 = sp + 232|0;
 $$byval_copy15 = sp + 228|0;
 $$byval_copy14 = sp + 224|0;
 $$byval_copy13 = sp + 220|0;
 $$byval_copy12 = sp + 216|0;
 $$byval_copy11 = sp + 212|0;
 $$byval_copy10 = sp + 208|0;
 $$byval_copy9 = sp + 204|0;
 $$byval_copy8 = sp + 200|0;
 $$byval_copy7 = sp + 196|0;
 $$byval_copy6 = sp + 192|0;
 $$byval_copy5 = sp + 188|0;
 $$byval_copy4 = sp + 184|0;
 $$byval_copy3 = sp + 180|0;
 $$byval_copy2 = sp + 176|0;
 $$byval_copy1 = sp + 172|0;
 $$byval_copy = sp + 168|0;
 $1 = sp + 164|0;
 $2 = sp + 160|0;
 $3 = sp + 156|0;
 $4 = sp + 152|0;
 $5 = sp + 148|0;
 $6 = sp + 72|0;
 $7 = sp + 68|0;
 $8 = sp + 64|0;
 $9 = sp + 60|0;
 $10 = sp + 56|0;
 $11 = sp + 52|0;
 $12 = sp + 48|0;
 $13 = sp + 44|0;
 $__p$i$i$i$i = sp;
 $14 = sp + 32|0;
 $15 = sp + 28|0;
 $16 = sp + 24|0;
 $17 = sp + 20|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $20 = sp + 36|0;
 $21 = sp + 40|0;
 $22 = sp + 76|0;
 $23 = sp + 80|0;
 $24 = sp + 84|0;
 $25 = sp + 88|0;
 $26 = sp + 92|0;
 $27 = sp + 96|0;
 $28 = sp + 100|0;
 $29 = sp + 104|0;
 $30 = sp + 108|0;
 $31 = sp + 112|0;
 $32 = sp + 116|0;
 $33 = sp + 120|0;
 $34 = sp + 124|0;
 $35 = sp + 128|0;
 $36 = sp + 132|0;
 $37 = sp + 136|0;
 $38 = sp + 140|0;
 $39 = sp + 144|0;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($14,$__iob);
 $40 = HEAP32[$14>>2]|0;
 $41 = HEAP32[18792>>2]|0;
 $42 = ($41|0)==(-1);
 if (!($42)) {
  HEAP32[$__p$i$i$i$i>>2] = 18792;
  $43 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$43>>2] = (121);
  $44 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$44>>2] = 0;
  __THREW__ = 0;
  invoke_viii(6,(18792|0),($__p$i$i$i$i|0),(122|0));
  $45 = __THREW__; __THREW__ = 0;
  $46 = $45&1;
  if ($46) {
   $66 = ___cxa_find_matching_catch(-1,-1)|0;
   $67 = tempRet0;
   $68 = HEAP32[$14>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($68)|0);
   ___resumeException($66|0);
   // unreachable;
  }
 }
 $47 = HEAP32[((18792 + 4|0))>>2]|0;
 $48 = (($47) + -1)|0;
 $49 = (($40) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($40) + 8|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $50;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = $55 >> 2;
 $57 = ($56>>>0)>($48>>>0);
 if ($57) {
  $58 = (($52) + ($48<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   $64 = HEAP32[$14>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($64)|0);
   $65 = $__fmt << 24 >> 24;
   L8: do {
    switch ($65|0) {
    case 77:  {
     $168 = HEAP32[$__e>>2]|0;
     HEAP32[$6>>2] = $168;
     ;HEAP32[$$byval_copy13+0>>2]=HEAP32[$6+0>>2]|0;
     $169 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy13,$__err,$59,2)|0);
     $170 = HEAP32[$__err>>2]|0;
     $171 = $170 & 4;
     $172 = ($171|0)==(0);
     $173 = ($169|0)<(60);
     $or$cond$i21 = $172 & $173;
     if ($or$cond$i21) {
      $174 = (($__tm) + 4|0);
      HEAP32[$174>>2] = $169;
      break L8;
     } else {
      $175 = $170 | 4;
      HEAP32[$__err>>2] = $175;
      break L8;
     }
     break;
    }
    case 72:  {
     $135 = HEAP32[$__e>>2]|0;
     HEAP32[$10>>2] = $135;
     ;HEAP32[$$byval_copy9+0>>2]=HEAP32[$10+0>>2]|0;
     $136 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy9,$__err,$59,2)|0);
     $137 = HEAP32[$__err>>2]|0;
     $138 = $137 & 4;
     $139 = ($138|0)==(0);
     $140 = ($136|0)<(24);
     $or$cond$i = $139 & $140;
     if ($or$cond$i) {
      $141 = (($__tm) + 8|0);
      HEAP32[$141>>2] = $136;
      break L8;
     } else {
      $142 = $137 | 4;
      HEAP32[$__err>>2] = $142;
      break L8;
     }
     break;
    }
    case 65: case 97:  {
     $69 = HEAP32[$__e>>2]|0;
     $70 = (($this) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = HEAP32[$71>>2]|0;
     $73 = (FUNCTION_TABLE_ii[$72 & 127]($70)|0);
     HEAP32[$13>>2] = $69;
     $74 = (($73) + 168|0);
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$13+0>>2]|0;
     $75 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$73,$74,$59,$__err,0)|0);
     $76 = $75;
     $77 = $73;
     $78 = (($76) - ($77))|0;
     $79 = ($78|0)<(168);
     if ($79) {
      $80 = (($__tm) + 24|0);
      $81 = (($78|0) / 12)&-1;
      $82 = (($81|0) % 7)&-1;
      HEAP32[$80>>2] = $82;
     }
     break;
    }
    case 70:  {
     $132 = HEAP32[$__b>>2]|0;
     HEAP32[$22>>2] = $132;
     $133 = HEAP32[$__e>>2]|0;
     HEAP32[$23>>2] = $133;
     ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$22+0>>2]|0;
     ;HEAP32[$$byval_copy8+0>>2]=HEAP32[$23+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($21,$this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,17712,((17712 + 8|0)));
     $134 = HEAP32[$21>>2]|0;
     HEAP32[$__b>>2] = $134;
     break;
    }
    case 101: case 100:  {
     $121 = (($__tm) + 12|0);
     $122 = HEAP32[$__e>>2]|0;
     HEAP32[$11>>2] = $122;
     ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$11+0>>2]|0;
     $123 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy4,$__err,$59,2)|0);
     $124 = HEAP32[$__err>>2]|0;
     $125 = $124 & 4;
     $126 = ($125|0)==(0);
     if ($126) {
      $$off$i = (($123) + -1)|0;
      $127 = ($$off$i>>>0)<(31);
      if ($127) {
       HEAP32[$121>>2] = $123;
       break L8;
      }
     }
     $128 = $124 | 4;
     HEAP32[$__err>>2] = $128;
     break;
    }
    case 73:  {
     $143 = (($__tm) + 8|0);
     $144 = HEAP32[$__e>>2]|0;
     HEAP32[$9>>2] = $144;
     ;HEAP32[$$byval_copy10+0>>2]=HEAP32[$9+0>>2]|0;
     $145 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy10,$__err,$59,2)|0);
     $146 = HEAP32[$__err>>2]|0;
     $147 = $146 & 4;
     $148 = ($147|0)==(0);
     if ($148) {
      $$off$i12 = (($145) + -1)|0;
      $149 = ($$off$i12>>>0)<(12);
      if ($149) {
       HEAP32[$143>>2] = $145;
       break L8;
      }
     }
     $150 = $146 | 4;
     HEAP32[$__err>>2] = $150;
     break;
    }
    case 83:  {
     $223 = HEAP32[$__e>>2]|0;
     HEAP32[$4>>2] = $223;
     ;HEAP32[$$byval_copy20+0>>2]=HEAP32[$4+0>>2]|0;
     $224 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy20,$__err,$59,2)|0);
     $225 = HEAP32[$__err>>2]|0;
     $226 = $225 & 4;
     $227 = ($226|0)==(0);
     $228 = ($224|0)<(61);
     $or$cond$i26 = $227 & $228;
     if ($or$cond$i26) {
      HEAP32[$__tm>>2] = $224;
      break L8;
     } else {
      $229 = $225 | 4;
      HEAP32[$__err>>2] = $229;
      break L8;
     }
     break;
    }
    case 116: case 110:  {
     $176 = HEAP32[$__e>>2]|0;
     HEAP32[$24>>2] = $176;
     ;HEAP32[$$byval_copy14+0>>2]=HEAP32[$24+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$$byval_copy14,$__err,$59);
     break;
    }
    case 84:  {
     $230 = HEAP32[$__b>>2]|0;
     HEAP32[$32>>2] = $230;
     $231 = HEAP32[$__e>>2]|0;
     HEAP32[$33>>2] = $231;
     ;HEAP32[$$byval_copy21+0>>2]=HEAP32[$32+0>>2]|0;
     ;HEAP32[$$byval_copy22+0>>2]=HEAP32[$33+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($31,$this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,17744,((17744 + 8|0)));
     $232 = HEAP32[$31>>2]|0;
     HEAP32[$__b>>2] = $232;
     break;
    }
    case 114:  {
     $217 = HEAP32[$__b>>2]|0;
     HEAP32[$26>>2] = $217;
     $218 = HEAP32[$__e>>2]|0;
     HEAP32[$27>>2] = $218;
     ;HEAP32[$$byval_copy16+0>>2]=HEAP32[$26+0>>2]|0;
     ;HEAP32[$$byval_copy17+0>>2]=HEAP32[$27+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($25,$this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,17720,((17720 + 11|0)));
     $219 = HEAP32[$25>>2]|0;
     HEAP32[$__b>>2] = $219;
     break;
    }
    case 119:  {
     $233 = HEAP32[$__e>>2]|0;
     HEAP32[$3>>2] = $233;
     ;HEAP32[$$byval_copy23+0>>2]=HEAP32[$3+0>>2]|0;
     $234 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy23,$__err,$59,1)|0);
     $235 = HEAP32[$__err>>2]|0;
     $236 = $235 & 4;
     $237 = ($236|0)==(0);
     $238 = ($234|0)<(7);
     $or$cond$i29 = $237 & $238;
     if ($or$cond$i29) {
      $239 = (($__tm) + 24|0);
      HEAP32[$239>>2] = $234;
      break L8;
     } else {
      $240 = $235 | 4;
      HEAP32[$__err>>2] = $240;
      break L8;
     }
     break;
    }
    case 68:  {
     $129 = HEAP32[$__b>>2]|0;
     HEAP32[$19>>2] = $129;
     $130 = HEAP32[$__e>>2]|0;
     HEAP32[$20>>2] = $130;
     ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$19+0>>2]|0;
     ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$20+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($18,$this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,17704,((17704 + 8|0)));
     $131 = HEAP32[$18>>2]|0;
     HEAP32[$__b>>2] = $131;
     break;
    }
    case 82:  {
     $220 = HEAP32[$__b>>2]|0;
     HEAP32[$29>>2] = $220;
     $221 = HEAP32[$__e>>2]|0;
     HEAP32[$30>>2] = $221;
     ;HEAP32[$$byval_copy18+0>>2]=HEAP32[$29+0>>2]|0;
     ;HEAP32[$$byval_copy19+0>>2]=HEAP32[$30+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($28,$this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,17736,((17736 + 5|0)));
     $222 = HEAP32[$28>>2]|0;
     HEAP32[$__b>>2] = $222;
     break;
    }
    case 120:  {
     $241 = HEAP32[$this>>2]|0;
     $242 = (($241) + 20|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = HEAP32[$__b>>2]|0;
     HEAP32[$34>>2] = $244;
     $245 = HEAP32[$__e>>2]|0;
     HEAP32[$35>>2] = $245;
     ;HEAP32[$$byval_copy24+0>>2]=HEAP32[$34+0>>2]|0;
     ;HEAP32[$$byval_copy25+0>>2]=HEAP32[$35+0>>2]|0;
     FUNCTION_TABLE_viiiiiii[$243 & 63]($agg$result,$this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm);
     STACKTOP = sp;return;
     break;
    }
    case 104: case 66: case 98:  {
     $83 = HEAP32[$__e>>2]|0;
     $84 = (($this) + 8|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = (($85) + 4|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (FUNCTION_TABLE_ii[$87 & 127]($84)|0);
     HEAP32[$12>>2] = $83;
     $89 = (($88) + 288|0);
     ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$12+0>>2]|0;
     $90 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy1,$88,$89,$59,$__err,0)|0);
     $91 = $90;
     $92 = $88;
     $93 = (($91) - ($92))|0;
     $94 = ($93|0)<(288);
     if ($94) {
      $95 = (($__tm) + 16|0);
      $96 = (($93|0) / 12)&-1;
      $97 = (($96|0) % 12)&-1;
      HEAP32[$95>>2] = $97;
     }
     break;
    }
    case 106:  {
     $151 = HEAP32[$__e>>2]|0;
     HEAP32[$8>>2] = $151;
     ;HEAP32[$$byval_copy11+0>>2]=HEAP32[$8+0>>2]|0;
     $152 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy11,$__err,$59,3)|0);
     $153 = HEAP32[$__err>>2]|0;
     $154 = $153 & 4;
     $155 = ($154|0)==(0);
     $156 = ($152|0)<(366);
     $or$cond$i15 = $155 & $156;
     if ($or$cond$i15) {
      $157 = (($__tm) + 28|0);
      HEAP32[$157>>2] = $152;
      break L8;
     } else {
      $158 = $153 | 4;
      HEAP32[$__err>>2] = $158;
      break L8;
     }
     break;
    }
    case 112:  {
     $177 = (($__tm) + 8|0);
     $178 = HEAP32[$__e>>2]|0;
     $179 = (($this) + 8|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = (($180) + 8|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (FUNCTION_TABLE_ii[$182 & 127]($179)|0);
     $184 = HEAP8[$183]|0;
     $185 = $184 & 1;
     $186 = ($185<<24>>24)==(0);
     if ($186) {
      $189 = $184&255;
      $190 = $189 >>> 1;
      $202 = $190;
     } else {
      $187 = (($183) + 4|0);
      $188 = HEAP32[$187>>2]|0;
      $202 = $188;
     }
     $191 = (($183) + 12|0);
     $192 = HEAP8[$191]|0;
     $193 = $192 & 1;
     $194 = ($193<<24>>24)==(0);
     if ($194) {
      $197 = $192&255;
      $198 = $197 >>> 1;
      $200 = $198;
     } else {
      $195 = (($183) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $200 = $196;
     }
     $199 = (0 - ($200))|0;
     $201 = ($202|0)==($199|0);
     if ($201) {
      $203 = HEAP32[$__err>>2]|0;
      $204 = $203 | 4;
      HEAP32[$__err>>2] = $204;
      break L8;
     }
     HEAP32[$5>>2] = $178;
     $205 = (($183) + 24|0);
     ;HEAP32[$$byval_copy15+0>>2]=HEAP32[$5+0>>2]|0;
     $206 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy15,$183,$205,$59,$__err,0)|0);
     $207 = $206;
     $208 = $183;
     $209 = (($207) - ($208))|0;
     $210 = ($206|0)==($183|0);
     if ($210) {
      $211 = HEAP32[$177>>2]|0;
      $212 = ($211|0)==(12);
      if ($212) {
       HEAP32[$177>>2] = 0;
       break L8;
      }
     }
     $213 = ($209|0)==(12);
     if ($213) {
      $214 = HEAP32[$177>>2]|0;
      $215 = ($214|0)<(12);
      if ($215) {
       $216 = (($214) + 12)|0;
       HEAP32[$177>>2] = $216;
      }
     }
     break;
    }
    case 99:  {
     $98 = (($this) + 8|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = (($99) + 12|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = (FUNCTION_TABLE_ii[$101 & 127]($98)|0);
     $103 = HEAP32[$__b>>2]|0;
     HEAP32[$16>>2] = $103;
     $104 = HEAP32[$__e>>2]|0;
     HEAP32[$17>>2] = $104;
     $105 = HEAP8[$102]|0;
     $106 = $105 & 1;
     $107 = ($106<<24>>24)==(0);
     if ($107) {
      $112 = (($102) + 1|0);
      $113 = (($102) + 1|0);
      $114 = $105&255;
      $115 = $114 >>> 1;
      $117 = $113;$118 = $115;$119 = $112;
     } else {
      $108 = (($102) + 8|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = (($102) + 4|0);
      $111 = HEAP32[$110>>2]|0;
      $117 = $109;$118 = $111;$119 = $109;
     }
     $116 = (($117) + ($118)|0);
     ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$16+0>>2]|0;
     ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$17+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($15,$this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$119,$116);
     $120 = HEAP32[$15>>2]|0;
     HEAP32[$__b>>2] = $120;
     break;
    }
    case 109:  {
     $159 = HEAP32[$__e>>2]|0;
     HEAP32[$7>>2] = $159;
     ;HEAP32[$$byval_copy12+0>>2]=HEAP32[$7+0>>2]|0;
     $160 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy12,$__err,$59,2)|0);
     $161 = HEAP32[$__err>>2]|0;
     $162 = $161 & 4;
     $163 = ($162|0)==(0);
     $164 = ($160|0)<(13);
     $or$cond$i18 = $163 & $164;
     if ($or$cond$i18) {
      $165 = (($__tm) + 16|0);
      $166 = (($160) + -1)|0;
      HEAP32[$165>>2] = $166;
      break L8;
     } else {
      $167 = $161 | 4;
      HEAP32[$__err>>2] = $167;
      break L8;
     }
     break;
    }
    case 88:  {
     $246 = (($this) + 8|0);
     $247 = HEAP32[$246>>2]|0;
     $248 = (($247) + 24|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = (FUNCTION_TABLE_ii[$249 & 127]($246)|0);
     $251 = HEAP32[$__b>>2]|0;
     HEAP32[$37>>2] = $251;
     $252 = HEAP32[$__e>>2]|0;
     HEAP32[$38>>2] = $252;
     $253 = HEAP8[$250]|0;
     $254 = $253 & 1;
     $255 = ($254<<24>>24)==(0);
     if ($255) {
      $260 = (($250) + 1|0);
      $261 = (($250) + 1|0);
      $262 = $253&255;
      $263 = $262 >>> 1;
      $265 = $261;$266 = $263;$267 = $260;
     } else {
      $256 = (($250) + 8|0);
      $257 = HEAP32[$256>>2]|0;
      $258 = (($250) + 4|0);
      $259 = HEAP32[$258>>2]|0;
      $265 = $257;$266 = $259;$267 = $257;
     }
     $264 = (($265) + ($266)|0);
     ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$37+0>>2]|0;
     ;HEAP32[$$byval_copy27+0>>2]=HEAP32[$38+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($36,$this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$267,$264);
     $268 = HEAP32[$36>>2]|0;
     HEAP32[$__b>>2] = $268;
     break;
    }
    case 121:  {
     $269 = (($__tm) + 20|0);
     $270 = HEAP32[$__e>>2]|0;
     HEAP32[$2>>2] = $270;
     ;HEAP32[$$byval_copy28+0>>2]=HEAP32[$2+0>>2]|0;
     $271 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy28,$__err,$59,4)|0);
     $272 = HEAP32[$__err>>2]|0;
     $273 = $272 & 4;
     $274 = ($273|0)==(0);
     if ($274) {
      $275 = ($271|0)<(69);
      if ($275) {
       $276 = (($271) + 2000)|0;
       $__t$0$i = $276;
      } else {
       $$off$i35 = (($271) + -69)|0;
       $277 = ($$off$i35>>>0)<(31);
       $278 = (($271) + 1900)|0;
       $$$i = $277 ? $278 : $271;
       $__t$0$i = $$$i;
      }
      $279 = (($__t$0$i) + -1900)|0;
      HEAP32[$269>>2] = $279;
     }
     break;
    }
    case 89:  {
     $280 = HEAP32[$__e>>2]|0;
     HEAP32[$1>>2] = $280;
     ;HEAP32[$$byval_copy29+0>>2]=HEAP32[$1+0>>2]|0;
     $281 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy29,$__err,$59,4)|0);
     $282 = HEAP32[$__err>>2]|0;
     $283 = $282 & 4;
     $284 = ($283|0)==(0);
     if ($284) {
      $285 = (($__tm) + 20|0);
      $286 = (($281) + -1900)|0;
      HEAP32[$285>>2] = $286;
     }
     break;
    }
    case 37:  {
     $287 = HEAP32[$__e>>2]|0;
     HEAP32[$39>>2] = $287;
     ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$39+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$$byval_copy30,$__err,$59);
     break;
    }
    default: {
     $288 = HEAP32[$__err>>2]|0;
     $289 = $288 | 4;
     HEAP32[$__err>>2] = $289;
    }
    }
   } while(0);
   $290 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $290;
   STACKTOP = sp;return;
  }
 }
 $61 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($61);
 __THREW__ = 0;
 invoke_viii(7,($61|0),(26752|0),(102|0));
 $62 = __THREW__; __THREW__ = 0;
 $63 = $62&1;
 if ($63) {
  $66 = ___cxa_find_matching_catch(-1,-1)|0;
  $67 = tempRet0;
  $68 = HEAP32[$14>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($68)|0);
  ___resumeException($66|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__ct) + 8|0);
 L1: while(1) {
  $1 = HEAP32[$__b>>2]|0;
  $2 = ($1|0)==(0|0);
  do {
   if ($2) {
    $14 = 0;
   } else {
    $3 = (($1) + 12|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (($1) + 16|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($4|0)==($6|0);
    if ($7) {
     $8 = HEAP32[$1>>2]|0;
     $9 = (($8) + 36|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (FUNCTION_TABLE_ii[$10 & 127]($1)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      HEAP32[$__b>>2] = 0;
      $14 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $14 = $$pre$i$i$i;
      break;
     }
    } else {
     $14 = $1;
    }
   }
  } while(0);
  $13 = ($14|0)==(0|0);
  $15 = HEAP32[$__e>>2]|0;
  $16 = ($15|0)==(0|0);
  do {
   if ($16) {
    label = 12;
   } else {
    $17 = (($15) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($15) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($18|0)==($20|0);
    if (!($21)) {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
    $22 = HEAP32[$15>>2]|0;
    $23 = (($22) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (FUNCTION_TABLE_ii[$24 & 127]($15)|0);
    $26 = ($25|0)==(-1);
    if ($26) {
     HEAP32[$__e>>2] = 0;
     label = 12;
     break;
    } else {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   if ($13) {
    $$pre$i2$i$i6 = 0;
    break;
   } else {
    $83 = 0;
   }
  }
  $27 = HEAP32[$__b>>2]|0;
  $28 = (($27) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($29|0)==($31|0);
  if ($32) {
   $33 = HEAP32[$27>>2]|0;
   $34 = (($33) + 36|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (FUNCTION_TABLE_ii[$35 & 127]($27)|0);
   $$0$i$i = $36;
  } else {
   $37 = HEAP8[$29]|0;
   $38 = $37&255;
   $$0$i$i = $38;
  }
  $39 = $$0$i$i&255;
  $isascii1$i = ($39<<24>>24)>(-1);
  if (!($isascii1$i)) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $sext = $$0$i$i << 24;
  $40 = $sext >> 24;
  $41 = HEAP32[$0>>2]|0;
  $42 = (($41) + ($40<<1)|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 & 8192;
  $45 = ($44<<16>>16)==(0);
  if ($45) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $46 = HEAP32[$__b>>2]|0;
  $47 = (($46) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($48|0)==($50|0);
  if ($51) {
   $52 = HEAP32[$46>>2]|0;
   $53 = (($52) + 40|0);
   $54 = HEAP32[$53>>2]|0;
   (FUNCTION_TABLE_ii[$54 & 127]($46)|0);
   continue;
  } else {
   $55 = (($48) + 1|0);
   HEAP32[$47>>2] = $55;
   continue;
  }
 }
 $56 = HEAP32[$__b>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $69 = 0;
  } else {
   $58 = (($56) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($56) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = (($63) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 127]($56)|0);
    $67 = ($66|0)==(-1);
    if ($67) {
     HEAP32[$__b>>2] = 0;
     $69 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $69 = $$pre$i$i$i2;
     break;
    }
   } else {
    $69 = $56;
   }
  }
 } while(0);
 $68 = ($69|0)==(0|0);
 $70 = ($$pre$i2$i$i6|0)==(0|0);
 do {
  if ($70) {
   label = 32;
  } else {
   $71 = (($$pre$i2$i$i6) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($$pre$i2$i$i6) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($72|0)==($74|0);
   if ($75) {
    $76 = HEAP32[$$pre$i2$i$i6>>2]|0;
    $77 = (($76) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (FUNCTION_TABLE_ii[$78 & 127]($$pre$i2$i$i6)|0);
    $80 = ($79|0)==(-1);
    if ($80) {
     HEAP32[$__e>>2] = 0;
     label = 32;
     break;
    }
   }
   if ($68) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  if (!($68)) {
   STACKTOP = sp;return;
  }
 }
 $81 = HEAP32[$__err>>2]|0;
 $82 = $81 | 2;
 HEAP32[$__err>>2] = $82;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i611 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 127]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while(0);
 $12 = ($13|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = (($14) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($14) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = (($21) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 127]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $$pre$i2$i$i611 = $14;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $$pre$i2$i$i611 = 0;
  }
 }
 if ((label|0) == 12) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  STACKTOP = sp;return;
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 127]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP8[$30]|0;
  $39 = $38&255;
  $$0$i$i = $39;
 }
 $40 = $$0$i$i&255;
 $41 = HEAP32[$__ct>>2]|0;
 $42 = (($41) + 36|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (FUNCTION_TABLE_iiii[$43 & 31]($__ct,$40,0)|0);
 $45 = ($44<<24>>24)==(37);
 if (!($45)) {
  $46 = HEAP32[$__err>>2]|0;
  $47 = $46 | 4;
  HEAP32[$__err>>2] = $47;
  STACKTOP = sp;return;
 }
 $48 = HEAP32[$__b>>2]|0;
 $49 = (($48) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($48) + 16|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($50|0)==($52|0);
 if ($53) {
  $54 = HEAP32[$48>>2]|0;
  $55 = (($54) + 40|0);
  $56 = HEAP32[$55>>2]|0;
  (FUNCTION_TABLE_ii[$56 & 127]($48)|0);
 } else {
  $57 = (($50) + 1|0);
  HEAP32[$49>>2] = $57;
 }
 $58 = HEAP32[$__b>>2]|0;
 $59 = ($58|0)==(0|0);
 do {
  if ($59) {
   $71 = 0;
  } else {
   $60 = (($58) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($58) + 16|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($61|0)==($63|0);
   if ($64) {
    $65 = HEAP32[$58>>2]|0;
    $66 = (($65) + 36|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (FUNCTION_TABLE_ii[$67 & 127]($58)|0);
    $69 = ($68|0)==(-1);
    if ($69) {
     HEAP32[$__b>>2] = 0;
     $71 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $71 = $$pre$i$i$i2;
     break;
    }
   } else {
    $71 = $58;
   }
  }
 } while(0);
 $70 = ($71|0)==(0|0);
 $72 = ($$pre$i2$i$i611|0)==(0|0);
 do {
  if ($72) {
   label = 31;
  } else {
   $73 = (($$pre$i2$i$i611) + 12|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (($$pre$i2$i$i611) + 16|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($74|0)==($76|0);
   if ($77) {
    $78 = HEAP32[$$pre$i2$i$i611>>2]|0;
    $79 = (($78) + 36|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (FUNCTION_TABLE_ii[$80 & 127]($$pre$i2$i$i611)|0);
    $82 = ($81|0)==(-1);
    if ($82) {
     HEAP32[$__e>>2] = 0;
     label = 31;
     break;
    }
   }
   if ($70) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 31) {
  if (!($70)) {
   STACKTOP = sp;return;
  }
 }
 $83 = HEAP32[$__err>>2]|0;
 $84 = $83 | 2;
 HEAP32[$__err>>2] = $84;
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i10 = 0, $$0$in = 0, $$01 = 0, $$pre$i$i$i = 0, $$pre$i$i$i16 = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $isascii1$i = 0, $isascii1$i12 = 0, $sext = 0, $sext24 = 0, $tmp$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 127]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while(0);
 $12 = ($13|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = (($14) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($14) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = (($21) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 127]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $156 = $14;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $156 = 0;
  }
 }
 if ((label|0) == 12) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 127]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP8[$30]|0;
  $39 = $38&255;
  $$0$i$i = $39;
 }
 $40 = $$0$i$i&255;
 $isascii1$i = ($40<<24>>24)>(-1);
 if ($isascii1$i) {
  $sext = $$0$i$i << 24;
  $41 = $sext >> 24;
  $42 = (($__ct) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($41<<1)|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45 & 2048;
  $47 = ($46<<16>>16)==(0);
  if (!($47)) {
   $50 = HEAP32[$__ct>>2]|0;
   $51 = (($50) + 36|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (FUNCTION_TABLE_iiii[$52 & 31]($__ct,$40,0)|0);
   $54 = $53 << 24 >> 24;
   $55 = HEAP32[$__b>>2]|0;
   $56 = (($55) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($55) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($57|0)==($59|0);
   if ($60) {
    $61 = HEAP32[$55>>2]|0;
    $62 = (($61) + 40|0);
    $63 = HEAP32[$62>>2]|0;
    (FUNCTION_TABLE_ii[$63 & 127]($55)|0);
    $$0$in = $__n;$$pre$i2$i$i7 = $156;$80 = $156;$__r$0$in = $54;
   } else {
    $64 = (($57) + 1|0);
    HEAP32[$56>>2] = $64;
    $$0$in = $__n;$$pre$i2$i$i7 = $156;$80 = $156;$__r$0$in = $54;
   }
   while(1) {
    $__r$0 = (($__r$0$in) + -48)|0;
    $$0 = (($$0$in) + -1)|0;
    $65 = HEAP32[$__b>>2]|0;
    $66 = ($65|0)==(0|0);
    do {
     if ($66) {
      $78 = 0;
     } else {
      $67 = (($65) + 12|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (($65) + 16|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($68|0)==($70|0);
      if ($71) {
       $72 = HEAP32[$65>>2]|0;
       $73 = (($72) + 36|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = (FUNCTION_TABLE_ii[$74 & 127]($65)|0);
       $76 = ($75|0)==(-1);
       if ($76) {
        HEAP32[$__b>>2] = 0;
        $78 = 0;
        break;
       } else {
        $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
        $78 = $$pre$i$i$i3;
        break;
       }
      } else {
       $78 = $65;
      }
     }
    } while(0);
    $77 = ($78|0)==(0|0);
    $79 = ($80|0)==(0|0);
    if ($79) {
     $$pre$i2$i$i20 = $$pre$i2$i$i7;$92 = 0;
    } else {
     $81 = (($80) + 12|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (($80) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($82|0)==($84|0);
     if ($85) {
      $86 = HEAP32[$80>>2]|0;
      $87 = (($86) + 36|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (FUNCTION_TABLE_ii[$88 & 127]($80)|0);
      $90 = ($89|0)==(-1);
      if ($90) {
       HEAP32[$__e>>2] = 0;
       $$pre$i2$i$i20 = 0;$92 = 0;
      } else {
       $$pre$i2$i$i20 = $$pre$i2$i$i7;$92 = $$pre$i2$i$i7;
      }
     } else {
      $$pre$i2$i$i20 = $$pre$i2$i$i7;$92 = $80;
     }
    }
    $91 = ($92|0)==(0|0);
    $tmp$i$i9 = $77 ^ $91;
    $93 = ($$0|0)>(0);
    $$ = $tmp$i$i9 & $93;
    $94 = HEAP32[$__b>>2]|0;
    if (!($$)) {
     label = 40;
     break;
    }
    $95 = (($94) + 12|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (($94) + 16|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($96|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$94>>2]|0;
     $101 = (($100) + 36|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = (FUNCTION_TABLE_ii[$102 & 127]($94)|0);
     $$0$i$i10 = $103;
    } else {
     $104 = HEAP8[$96]|0;
     $105 = $104&255;
     $$0$i$i10 = $105;
    }
    $106 = $$0$i$i10&255;
    $isascii1$i12 = ($106<<24>>24)>(-1);
    if (!($isascii1$i12)) {
     $$01 = $__r$0;
     label = 52;
     break;
    }
    $sext24 = $$0$i$i10 << 24;
    $107 = $sext24 >> 24;
    $108 = HEAP32[$42>>2]|0;
    $109 = (($108) + ($107<<1)|0);
    $110 = HEAP16[$109>>1]|0;
    $111 = $110 & 2048;
    $112 = ($111<<16>>16)==(0);
    if ($112) {
     $$01 = $__r$0;
     label = 52;
     break;
    }
    $113 = ($__r$0*10)|0;
    $114 = HEAP32[$__ct>>2]|0;
    $115 = (($114) + 36|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (FUNCTION_TABLE_iiii[$116 & 31]($__ct,$106,0)|0);
    $118 = $117 << 24 >> 24;
    $119 = (($118) + ($113))|0;
    $120 = HEAP32[$__b>>2]|0;
    $121 = (($120) + 12|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = (($120) + 16|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ($122|0)==($124|0);
    if ($125) {
     $126 = HEAP32[$120>>2]|0;
     $127 = (($126) + 40|0);
     $128 = HEAP32[$127>>2]|0;
     (FUNCTION_TABLE_ii[$128 & 127]($120)|0);
     $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$80 = $92;$__r$0$in = $119;
     continue;
    } else {
     $129 = (($122) + 1|0);
     HEAP32[$121>>2] = $129;
     $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$80 = $92;$__r$0$in = $119;
     continue;
    }
   }
   if ((label|0) == 40) {
    $130 = ($94|0)==(0|0);
    do {
     if ($130) {
      $142 = 0;
     } else {
      $131 = (($94) + 12|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = (($94) + 16|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($132|0)==($134|0);
      if ($135) {
       $136 = HEAP32[$94>>2]|0;
       $137 = (($136) + 36|0);
       $138 = HEAP32[$137>>2]|0;
       $139 = (FUNCTION_TABLE_ii[$138 & 127]($94)|0);
       $140 = ($139|0)==(-1);
       if ($140) {
        HEAP32[$__b>>2] = 0;
        $142 = 0;
        break;
       } else {
        $$pre$i$i$i16 = HEAP32[$__b>>2]|0;
        $142 = $$pre$i$i$i16;
        break;
       }
      } else {
       $142 = $94;
      }
     }
    } while(0);
    $141 = ($142|0)==(0|0);
    $143 = ($$pre$i2$i$i20|0)==(0|0);
    do {
     if ($143) {
      label = 50;
     } else {
      $144 = (($$pre$i2$i$i20) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (($$pre$i2$i$i20) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i2$i$i20>>2]|0;
       $150 = (($149) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = (FUNCTION_TABLE_ii[$151 & 127]($$pre$i2$i$i20)|0);
       $153 = ($152|0)==(-1);
       if ($153) {
        HEAP32[$__e>>2] = 0;
        label = 50;
        break;
       }
      }
      if ($141) {
       $$01 = $__r$0;
       STACKTOP = sp;return ($$01|0);
      }
     }
    } while(0);
    if ((label|0) == 50) {
     if (!($141)) {
      $$01 = $__r$0;
      STACKTOP = sp;return ($$01|0);
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    $$01 = $__r$0;
    STACKTOP = sp;return ($$01|0);
   }
   else if ((label|0) == 52) {
    STACKTOP = sp;return ($$01|0);
   }
  }
 }
 $48 = HEAP32[$__err>>2]|0;
 $49 = $48 | 4;
 HEAP32[$__err>>2] = $49;
 $$01 = 0;
 STACKTOP = sp;return ($$01|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$0$i$i1$i$i25 = 0, $$0$i$i16 = 0, $$0$ph$be = 0, $$0$ph43 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre = 0, $$pre$i$i$i21 = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i12 = 0;
 var $$pre$i3$i$i1245 = 0, $$pre$i3$i$i1246 = 0, $$pre44 = 0, $$pre44$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $__p$i$i$i$i = 0, $phitmp$i4$i$i13 = 0, $tmp$i$i15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $$byval_copy1 = sp + 32|0;
 $$byval_copy = sp + 12|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 16|0;
 $1 = sp + 20|0;
 $2 = sp + 24|0;
 $3 = sp + 28|0;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[18784>>2]|0;
 $6 = ($5|0)==(-1);
 if (!($6)) {
  HEAP32[$__p$i$i$i$i>>2] = 18784;
  $7 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$7>>2] = (121);
  $8 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$8>>2] = 0;
  __THREW__ = 0;
  invoke_viii(6,(18784|0),($__p$i$i$i$i|0),(122|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $58 = ___cxa_find_matching_catch(-1,-1)|0;
   $59 = tempRet0;
   $60 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($60)|0);
   ___resumeException($58|0);
   // unreachable;
  }
 }
 $11 = HEAP32[((18784 + 4|0))>>2]|0;
 $12 = (($11) + -1)|0;
 $13 = (($4) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($4) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $14;
 $18 = $16;
 $19 = (($17) - ($18))|0;
 $20 = $19 >> 2;
 $21 = ($20>>>0)>($12>>>0);
 if ($21) {
  $22 = (($16) + ($12<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0|0);
  if (!($24)) {
   $28 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($28)|0);
   HEAP32[$__err>>2] = 0;
   $29 = ($__fmtb|0)==($__fmte|0);
   L8: do {
    if ($29) {
     label = 71;
    } else {
     $$0$ph43 = $__fmtb;$$pre44 = 0;
     L10: while(1) {
      $31 = $$pre44;
      while(1) {
       $30 = ($31|0)==(0);
       if (!($30)) {
        label = 71;
        break L8;
       }
       $32 = HEAP32[$__b>>2]|0;
       $33 = ($32|0)==(0|0);
       if ($33) {
        $204 = 1;$84 = 0;
       } else {
        $34 = (($32) + 12|0);
        $35 = HEAP32[$34>>2]|0;
        $36 = (($32) + 16|0);
        $37 = HEAP32[$36>>2]|0;
        $38 = ($35|0)==($37|0);
        if ($38) {
         $39 = HEAP32[$32>>2]|0;
         $40 = (($39) + 36|0);
         $41 = HEAP32[$40>>2]|0;
         $42 = (FUNCTION_TABLE_ii[$41 & 127]($32)|0);
         $$0$i$i$i$i = $42;
        } else {
         $43 = HEAP32[$35>>2]|0;
         $$0$i$i$i$i = $43;
        }
        $44 = ($$0$i$i$i$i|0)==(-1);
        if ($44) {
         HEAP32[$__b>>2] = 0;
         $204 = 1;$84 = 0;
        } else {
         $204 = 0;$84 = $32;
        }
       }
       $45 = HEAP32[$__e>>2]|0;
       $46 = ($45|0)==(0|0);
       do {
        if ($46) {
         label = 23;
        } else {
         $47 = (($45) + 12|0);
         $48 = HEAP32[$47>>2]|0;
         $49 = (($45) + 16|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = ($48|0)==($50|0);
         if ($51) {
          $52 = HEAP32[$45>>2]|0;
          $53 = (($52) + 36|0);
          $54 = HEAP32[$53>>2]|0;
          $55 = (FUNCTION_TABLE_ii[$54 & 127]($45)|0);
          $$0$i$i1$i$i = $55;
         } else {
          $56 = HEAP32[$48>>2]|0;
          $$0$i$i1$i$i = $56;
         }
         $57 = ($$0$i$i1$i$i|0)==(-1);
         if ($57) {
          HEAP32[$__e>>2] = 0;
          label = 23;
          break;
         } else {
          if ($204) {
           $85 = $45;
           break;
          } else {
           label = 25;
           break L10;
          }
         }
        }
       } while(0);
       if ((label|0) == 23) {
        label = 0;
        if ($204) {
         label = 25;
         break L10;
        } else {
         $85 = 0;
        }
       }
       $61 = HEAP32[$$0$ph43>>2]|0;
       $62 = HEAP32[$23>>2]|0;
       $63 = (($62) + 52|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = (FUNCTION_TABLE_iiii[$64 & 31]($23,$61,0)|0);
       $66 = ($65<<24>>24)==(37);
       if ($66) {
        label = 28;
        break;
       }
       $89 = HEAP32[$$0$ph43>>2]|0;
       $90 = HEAP32[$23>>2]|0;
       $91 = (($90) + 12|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = (FUNCTION_TABLE_iiii[$92 & 31]($23,8192,$89)|0);
       if ($93) {
        $$0$pn = $$0$ph43;
        label = 38;
        break;
       }
       $148 = (($84) + 12|0);
       $149 = HEAP32[$148>>2]|0;
       $150 = (($84) + 16|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = ($149|0)==($151|0);
       if ($152) {
        $153 = HEAP32[$84>>2]|0;
        $154 = (($153) + 36|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = (FUNCTION_TABLE_ii[$155 & 127]($84)|0);
        $$0$i$i16 = $156;
       } else {
        $157 = HEAP32[$149>>2]|0;
        $$0$i$i16 = $157;
       }
       $158 = HEAP32[$23>>2]|0;
       $159 = (($158) + 28|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = (FUNCTION_TABLE_iii[$160 & 31]($23,$$0$i$i16)|0);
       $162 = HEAP32[$$0$ph43>>2]|0;
       $163 = HEAP32[$23>>2]|0;
       $164 = (($163) + 28|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = (FUNCTION_TABLE_iii[$165 & 31]($23,$162)|0);
       $167 = ($161|0)==($166|0);
       if ($167) {
        label = 66;
        break;
       }
       HEAP32[$__err>>2] = 4;
       $31 = 4;
      }
      L42: do {
       if ((label|0) == 28) {
        label = 0;
        $67 = (($$0$ph43) + 4|0);
        $68 = ($67|0)==($__fmte|0);
        if ($68) {
         label = 29;
         break L10;
        }
        $69 = HEAP32[$67>>2]|0;
        $70 = HEAP32[$23>>2]|0;
        $71 = (($70) + 52|0);
        $72 = HEAP32[$71>>2]|0;
        $73 = (FUNCTION_TABLE_iiii[$72 & 31]($23,$69,0)|0);
        if ((($73<<24>>24) == 48) | (($73<<24>>24) == 69)) {
         $74 = (($$0$ph43) + 8|0);
         $75 = ($74|0)==($__fmte|0);
         if ($75) {
          label = 32;
          break L10;
         }
         $76 = HEAP32[$74>>2]|0;
         $77 = HEAP32[$23>>2]|0;
         $78 = (($77) + 52|0);
         $79 = HEAP32[$78>>2]|0;
         $80 = (FUNCTION_TABLE_iiii[$79 & 31]($23,$76,0)|0);
         $$1 = $74;$__cmd$0 = $80;$__opt$0 = $73;
        } else {
         $$1 = $67;$__cmd$0 = $73;$__opt$0 = 0;
        }
        $81 = HEAP32[$this>>2]|0;
        $82 = (($81) + 36|0);
        $83 = HEAP32[$82>>2]|0;
        HEAP32[$2>>2] = $84;
        HEAP32[$3>>2] = $85;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
        ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
        FUNCTION_TABLE_viiiiiiiii[$83 & 3]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
        $86 = HEAP32[$1>>2]|0;
        HEAP32[$__b>>2] = $86;
        $87 = (($$1) + 4|0);
        $$0$ph$be = $87;
       }
       else if ((label|0) == 38) {
        while(1) {
         label = 0;
         $$2 = (($$0$pn) + 4|0);
         $94 = ($$2|0)==($__fmte|0);
         if ($94) {
          $$2$lcssa = $__fmte;
          break;
         }
         $95 = HEAP32[$$2>>2]|0;
         $96 = HEAP32[$23>>2]|0;
         $97 = (($96) + 12|0);
         $98 = HEAP32[$97>>2]|0;
         $99 = (FUNCTION_TABLE_iiii[$98 & 31]($23,8192,$95)|0);
         if ($99) {
          $$0$pn = $$2;
          label = 38;
         } else {
          $$2$lcssa = $$2;
          break;
         }
        }
        $$pre$i$i$i6 = $84;$$pre$i3$i$i12 = $85;$113 = $85;
        while(1) {
         $100 = ($$pre$i$i$i6|0)==(0|0);
         if ($100) {
          $125 = 1;$127 = 0;
         } else {
          $101 = (($$pre$i$i$i6) + 12|0);
          $102 = HEAP32[$101>>2]|0;
          $103 = (($$pre$i$i$i6) + 16|0);
          $104 = HEAP32[$103>>2]|0;
          $105 = ($102|0)==($104|0);
          if ($105) {
           $106 = HEAP32[$$pre$i$i$i6>>2]|0;
           $107 = (($106) + 36|0);
           $108 = HEAP32[$107>>2]|0;
           $109 = (FUNCTION_TABLE_ii[$108 & 127]($$pre$i$i$i6)|0);
           $$0$i$i$i$i4 = $109;
          } else {
           $110 = HEAP32[$102>>2]|0;
           $$0$i$i$i$i4 = $110;
          }
          $111 = ($$0$i$i$i$i4|0)==(-1);
          if ($111) {
           HEAP32[$__b>>2] = 0;
           $125 = 1;$127 = 0;
          } else {
           $125 = 0;$127 = $$pre$i$i$i6;
          }
         }
         $112 = ($113|0)==(0|0);
         do {
          if ($112) {
           $$pre$i3$i$i1246 = $$pre$i3$i$i12;
           label = 53;
          } else {
           $114 = (($113) + 12|0);
           $115 = HEAP32[$114>>2]|0;
           $116 = (($113) + 16|0);
           $117 = HEAP32[$116>>2]|0;
           $118 = ($115|0)==($117|0);
           if ($118) {
            $119 = HEAP32[$113>>2]|0;
            $120 = (($119) + 36|0);
            $121 = HEAP32[$120>>2]|0;
            $122 = (FUNCTION_TABLE_ii[$121 & 127]($113)|0);
            $$0$i$i1$i$i10 = $122;
           } else {
            $123 = HEAP32[$115>>2]|0;
            $$0$i$i1$i$i10 = $123;
           }
           $124 = ($$0$i$i1$i$i10|0)==(-1);
           if ($124) {
            HEAP32[$__e>>2] = 0;
            $$pre$i3$i$i1246 = 0;
            label = 53;
            break;
           } else {
            $phitmp$i4$i$i13 = ($$pre$i3$i$i12|0)==(0|0);
            $tmp$i$i15 = $125 ^ $phitmp$i4$i$i13;
            if ($tmp$i$i15) {
             $$pre$i3$i$i1245 = $$pre$i3$i$i12;$205 = $$pre$i3$i$i12;
             break;
            } else {
             $$0$ph$be = $$2$lcssa;
             break L42;
            }
           }
          }
         } while(0);
         if ((label|0) == 53) {
          label = 0;
          if ($125) {
           $$0$ph$be = $$2$lcssa;
           break L42;
          } else {
           $$pre$i3$i$i1245 = $$pre$i3$i$i1246;$205 = 0;
          }
         }
         $126 = (($127) + 12|0);
         $128 = HEAP32[$126>>2]|0;
         $129 = (($127) + 16|0);
         $130 = HEAP32[$129>>2]|0;
         $131 = ($128|0)==($130|0);
         if ($131) {
          $132 = HEAP32[$127>>2]|0;
          $133 = (($132) + 36|0);
          $134 = HEAP32[$133>>2]|0;
          $135 = (FUNCTION_TABLE_ii[$134 & 127]($127)|0);
          $$0$i$i = $135;
         } else {
          $136 = HEAP32[$128>>2]|0;
          $$0$i$i = $136;
         }
         $137 = HEAP32[$23>>2]|0;
         $138 = (($137) + 12|0);
         $139 = HEAP32[$138>>2]|0;
         $140 = (FUNCTION_TABLE_iiii[$139 & 31]($23,8192,$$0$i$i)|0);
         if (!($140)) {
          $$0$ph$be = $$2$lcssa;
          break L42;
         }
         $141 = HEAP32[$126>>2]|0;
         $142 = HEAP32[$129>>2]|0;
         $143 = ($141|0)==($142|0);
         if ($143) {
          $144 = HEAP32[$127>>2]|0;
          $145 = (($144) + 40|0);
          $146 = HEAP32[$145>>2]|0;
          (FUNCTION_TABLE_ii[$146 & 127]($127)|0);
          $$pre$i$i$i6 = $127;$$pre$i3$i$i12 = $$pre$i3$i$i1245;$113 = $205;
          continue;
         } else {
          $147 = (($141) + 4|0);
          HEAP32[$126>>2] = $147;
          $$pre$i$i$i6 = $127;$$pre$i3$i$i12 = $$pre$i3$i$i1245;$113 = $205;
          continue;
         }
        }
       }
       else if ((label|0) == 66) {
        label = 0;
        $168 = HEAP32[$148>>2]|0;
        $169 = HEAP32[$150>>2]|0;
        $170 = ($168|0)==($169|0);
        if ($170) {
         $171 = HEAP32[$84>>2]|0;
         $172 = (($171) + 40|0);
         $173 = HEAP32[$172>>2]|0;
         (FUNCTION_TABLE_ii[$173 & 127]($84)|0);
        } else {
         $174 = (($168) + 4|0);
         HEAP32[$148>>2] = $174;
        }
        $175 = (($$0$ph43) + 4|0);
        $$0$ph$be = $175;
       }
      } while(0);
      $88 = ($$0$ph$be|0)==($__fmte|0);
      if ($88) {
       label = 71;
       break L8;
      }
      $$pre44$pre = HEAP32[$__err>>2]|0;
      $$0$ph43 = $$0$ph$be;$$pre44 = $$pre44$pre;
     }
     if ((label|0) == 25) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i21 = $84;
      break;
     }
     else if ((label|0) == 29) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i21 = $84;
      break;
     }
     else if ((label|0) == 32) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i21 = $84;
      break;
     }
    }
   } while(0);
   if ((label|0) == 71) {
    $$pre = HEAP32[$__b>>2]|0;
    $$pre$i$i$i21 = $$pre;
   }
   $176 = ($$pre$i$i$i21|0)==(0|0);
   if ($176) {
    $203 = 0;$206 = 1;
   } else {
    $177 = (($$pre$i$i$i21) + 12|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = (($$pre$i$i$i21) + 16|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = ($178|0)==($180|0);
    if ($181) {
     $182 = HEAP32[$$pre$i$i$i21>>2]|0;
     $183 = (($182) + 36|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = (FUNCTION_TABLE_ii[$184 & 127]($$pre$i$i$i21)|0);
     $$0$i$i$i$i19 = $185;
    } else {
     $186 = HEAP32[$178>>2]|0;
     $$0$i$i$i$i19 = $186;
    }
    $187 = ($$0$i$i$i$i19|0)==(-1);
    if ($187) {
     HEAP32[$__b>>2] = 0;
     $203 = 0;$206 = 1;
    } else {
     $203 = $$pre$i$i$i21;$206 = 0;
    }
   }
   $188 = HEAP32[$__e>>2]|0;
   $189 = ($188|0)==(0|0);
   do {
    if ($189) {
     label = 84;
    } else {
     $190 = (($188) + 12|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (($188) + 16|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($191|0)==($193|0);
     if ($194) {
      $195 = HEAP32[$188>>2]|0;
      $196 = (($195) + 36|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = (FUNCTION_TABLE_ii[$197 & 127]($188)|0);
      $$0$i$i1$i$i25 = $198;
     } else {
      $199 = HEAP32[$191>>2]|0;
      $$0$i$i1$i$i25 = $199;
     }
     $200 = ($$0$i$i1$i$i25|0)==(-1);
     if ($200) {
      HEAP32[$__e>>2] = 0;
      label = 84;
      break;
     }
     if ($206) {
      HEAP32[$agg$result>>2] = $203;
      STACKTOP = sp;return;
     }
    }
   } while(0);
   if ((label|0) == 84) {
    if (!($206)) {
     HEAP32[$agg$result>>2] = $203;
     STACKTOP = sp;return;
    }
   }
   $201 = HEAP32[$__err>>2]|0;
   $202 = $201 | 2;
   HEAP32[$__err>>2] = $202;
   HEAP32[$agg$result>>2] = $203;
   STACKTOP = sp;return;
  }
 }
 $25 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($25);
 __THREW__ = 0;
 invoke_viii(7,($25|0),(26752|0),(102|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $58 = ___cxa_find_matching_catch(-1,-1)|0;
  $59 = tempRet0;
  $60 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($60)|0);
  ___resumeException($58|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,17848,((17848 + 32|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 127]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $16 = (($6) + 4|0);
  $17 = (($6) + 4|0);
  $18 = $9&255;
  $19 = $18 >>> 1;
  $21 = $17;$22 = $19;$23 = $16;
 } else {
  $12 = (($6) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($6) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $21 = $13;$22 = $15;$23 = $13;
 }
 $20 = (($21) + ($22<<2)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$23,$20);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 12|0;
 $__p$i$i$i$i = sp;
 $1 = sp + 16|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[18784>>2]|0;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  HEAP32[$__p$i$i$i$i>>2] = 18784;
  $5 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$5>>2] = (121);
  $6 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$6>>2] = 0;
  __THREW__ = 0;
  invoke_viii(6,(18784|0),($__p$i$i$i$i|0),(122|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $42 = ___cxa_find_matching_catch(-1,-1)|0;
   $43 = tempRet0;
   $44 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($44)|0);
   ___resumeException($42|0);
   // unreachable;
  }
 }
 $9 = HEAP32[((18784 + 4|0))>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = (($2) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($2) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 if ($19) {
  $20 = (($14) + ($10<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $26 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($26)|0);
   $27 = HEAP32[$__e>>2]|0;
   $28 = (($this) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = HEAP32[$29>>2]|0;
   $31 = (FUNCTION_TABLE_ii[$30 & 127]($28)|0);
   HEAP32[$0>>2] = $27;
   $32 = (($31) + 168|0);
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   $33 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$31,$32,$21,$__err,0)|0);
   $34 = $33;
   $35 = $31;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(168);
   if (!($37)) {
    $41 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $41;
    STACKTOP = sp;return;
   }
   $38 = (($__tm) + 24|0);
   $39 = (($36|0) / 12)&-1;
   $40 = (($39|0) % 7)&-1;
   HEAP32[$38>>2] = $40;
   $41 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $41;
   STACKTOP = sp;return;
  }
 }
 $23 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($23);
 __THREW__ = 0;
 invoke_viii(7,($23|0),(26752|0),(102|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $42 = ___cxa_find_matching_catch(-1,-1)|0;
  $43 = tempRet0;
  $44 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($44)|0);
  ___resumeException($42|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 12|0;
 $__p$i$i$i$i = sp;
 $1 = sp + 16|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[18784>>2]|0;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  HEAP32[$__p$i$i$i$i>>2] = 18784;
  $5 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$5>>2] = (121);
  $6 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$6>>2] = 0;
  __THREW__ = 0;
  invoke_viii(6,(18784|0),($__p$i$i$i$i|0),(122|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $43 = ___cxa_find_matching_catch(-1,-1)|0;
   $44 = tempRet0;
   $45 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($45)|0);
   ___resumeException($43|0);
   // unreachable;
  }
 }
 $9 = HEAP32[((18784 + 4|0))>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = (($2) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($2) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 if ($19) {
  $20 = (($14) + ($10<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $26 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($26)|0);
   $27 = HEAP32[$__e>>2]|0;
   $28 = (($this) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (FUNCTION_TABLE_ii[$31 & 127]($28)|0);
   HEAP32[$0>>2] = $27;
   $33 = (($32) + 288|0);
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   $34 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$32,$33,$21,$__err,0)|0);
   $35 = $34;
   $36 = $32;
   $37 = (($35) - ($36))|0;
   $38 = ($37|0)<(288);
   if (!($38)) {
    $42 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $42;
    STACKTOP = sp;return;
   }
   $39 = (($__tm) + 16|0);
   $40 = (($37|0) / 12)&-1;
   $41 = (($40|0) % 12)&-1;
   HEAP32[$39>>2] = $41;
   $42 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $42;
   STACKTOP = sp;return;
  }
 }
 $23 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($23);
 __THREW__ = 0;
 invoke_viii(7,($23|0),(26752|0),(102|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $43 = ___cxa_find_matching_catch(-1,-1)|0;
  $44 = tempRet0;
  $45 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($45)|0);
  ___resumeException($43|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$$i = 0, $$byval_copy = 0, $$off$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 12|0;
 $__p$i$i$i$i = sp;
 $1 = sp + 16|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[18784>>2]|0;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  HEAP32[$__p$i$i$i$i>>2] = 18784;
  $5 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$5>>2] = (121);
  $6 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$6>>2] = 0;
  __THREW__ = 0;
  invoke_viii(6,(18784|0),($__p$i$i$i$i|0),(122|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $39 = ___cxa_find_matching_catch(-1,-1)|0;
   $40 = tempRet0;
   $41 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
   ___resumeException($39|0);
   // unreachable;
  }
 }
 $9 = HEAP32[((18784 + 4|0))>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = (($2) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($2) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 if ($19) {
  $20 = (($14) + ($10<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $26 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($26)|0);
   $27 = (($__tm) + 20|0);
   $28 = HEAP32[$__e>>2]|0;
   HEAP32[$0>>2] = $28;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   $29 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$21,4)|0);
   $30 = HEAP32[$__err>>2]|0;
   $31 = $30 & 4;
   $32 = ($31|0)==(0);
   if (!($32)) {
    $38 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $38;
    STACKTOP = sp;return;
   }
   $33 = ($29|0)<(69);
   if ($33) {
    $34 = (($29) + 2000)|0;
    $__t$0$i = $34;
   } else {
    $$off$i = (($29) + -69)|0;
    $35 = ($$off$i>>>0)<(31);
    $36 = (($29) + 1900)|0;
    $$$i = $35 ? $36 : $29;
    $__t$0$i = $$$i;
   }
   $37 = (($__t$0$i) + -1900)|0;
   HEAP32[$27>>2] = $37;
   $38 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $38;
   STACKTOP = sp;return;
  }
 }
 $23 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($23);
 __THREW__ = 0;
 invoke_viii(7,($23|0),(26752|0),(102|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $39 = ___cxa_find_matching_catch(-1,-1)|0;
  $40 = tempRet0;
  $41 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
  ___resumeException($39|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$$i = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0;
 var $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$off$i = 0, $$off$i12 = 0, $$off$i35 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, $or$cond$i = 0, $or$cond$i15 = 0, $or$cond$i18 = 0, $or$cond$i21 = 0, $or$cond$i26 = 0, $or$cond$i29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $$byval_copy30 = sp + 288|0;
 $$byval_copy29 = sp + 284|0;
 $$byval_copy28 = sp + 280|0;
 $$byval_copy27 = sp + 276|0;
 $$byval_copy26 = sp + 272|0;
 $$byval_copy25 = sp + 268|0;
 $$byval_copy24 = sp + 264|0;
 $$byval_copy23 = sp + 260|0;
 $$byval_copy22 = sp + 256|0;
 $$byval_copy21 = sp + 252|0;
 $$byval_copy20 = sp + 248|0;
 $$byval_copy19 = sp + 244|0;
 $$byval_copy18 = sp + 240|0;
 $$byval_copy17 = sp + 236|0;
 $$byval_copy16 = sp + 232|0;
 $$byval_copy15 = sp + 228|0;
 $$byval_copy14 = sp + 224|0;
 $$byval_copy13 = sp + 220|0;
 $$byval_copy12 = sp + 216|0;
 $$byval_copy11 = sp + 212|0;
 $$byval_copy10 = sp + 208|0;
 $$byval_copy9 = sp + 204|0;
 $$byval_copy8 = sp + 200|0;
 $$byval_copy7 = sp + 196|0;
 $$byval_copy6 = sp + 192|0;
 $$byval_copy5 = sp + 188|0;
 $$byval_copy4 = sp + 184|0;
 $$byval_copy3 = sp + 180|0;
 $$byval_copy2 = sp + 176|0;
 $$byval_copy1 = sp + 172|0;
 $$byval_copy = sp + 168|0;
 $1 = sp + 164|0;
 $2 = sp + 160|0;
 $3 = sp + 156|0;
 $4 = sp + 152|0;
 $5 = sp + 148|0;
 $6 = sp + 72|0;
 $7 = sp + 68|0;
 $8 = sp + 64|0;
 $9 = sp + 60|0;
 $10 = sp + 56|0;
 $11 = sp + 52|0;
 $12 = sp + 48|0;
 $13 = sp + 44|0;
 $__p$i$i$i$i = sp;
 $14 = sp + 32|0;
 $15 = sp + 28|0;
 $16 = sp + 24|0;
 $17 = sp + 20|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $20 = sp + 36|0;
 $21 = sp + 40|0;
 $22 = sp + 76|0;
 $23 = sp + 80|0;
 $24 = sp + 84|0;
 $25 = sp + 88|0;
 $26 = sp + 92|0;
 $27 = sp + 96|0;
 $28 = sp + 100|0;
 $29 = sp + 104|0;
 $30 = sp + 108|0;
 $31 = sp + 112|0;
 $32 = sp + 116|0;
 $33 = sp + 120|0;
 $34 = sp + 124|0;
 $35 = sp + 128|0;
 $36 = sp + 132|0;
 $37 = sp + 136|0;
 $38 = sp + 140|0;
 $39 = sp + 144|0;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($14,$__iob);
 $40 = HEAP32[$14>>2]|0;
 $41 = HEAP32[18784>>2]|0;
 $42 = ($41|0)==(-1);
 if (!($42)) {
  HEAP32[$__p$i$i$i$i>>2] = 18784;
  $43 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$43>>2] = (121);
  $44 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$44>>2] = 0;
  __THREW__ = 0;
  invoke_viii(6,(18784|0),($__p$i$i$i$i|0),(122|0));
  $45 = __THREW__; __THREW__ = 0;
  $46 = $45&1;
  if ($46) {
   $66 = ___cxa_find_matching_catch(-1,-1)|0;
   $67 = tempRet0;
   $68 = HEAP32[$14>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($68)|0);
   ___resumeException($66|0);
   // unreachable;
  }
 }
 $47 = HEAP32[((18784 + 4|0))>>2]|0;
 $48 = (($47) + -1)|0;
 $49 = (($40) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($40) + 8|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $50;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = $55 >> 2;
 $57 = ($56>>>0)>($48>>>0);
 if ($57) {
  $58 = (($52) + ($48<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   $64 = HEAP32[$14>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($64)|0);
   $65 = $__fmt << 24 >> 24;
   L8: do {
    switch ($65|0) {
    case 65: case 97:  {
     $69 = HEAP32[$__e>>2]|0;
     $70 = (($this) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = HEAP32[$71>>2]|0;
     $73 = (FUNCTION_TABLE_ii[$72 & 127]($70)|0);
     HEAP32[$13>>2] = $69;
     $74 = (($73) + 168|0);
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$13+0>>2]|0;
     $75 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$73,$74,$59,$__err,0)|0);
     $76 = $75;
     $77 = $73;
     $78 = (($76) - ($77))|0;
     $79 = ($78|0)<(168);
     if ($79) {
      $80 = (($__tm) + 24|0);
      $81 = (($78|0) / 12)&-1;
      $82 = (($81|0) % 7)&-1;
      HEAP32[$80>>2] = $82;
     }
     break;
    }
    case 73:  {
     $143 = (($__tm) + 8|0);
     $144 = HEAP32[$__e>>2]|0;
     HEAP32[$9>>2] = $144;
     ;HEAP32[$$byval_copy10+0>>2]=HEAP32[$9+0>>2]|0;
     $145 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy10,$__err,$59,2)|0);
     $146 = HEAP32[$__err>>2]|0;
     $147 = $146 & 4;
     $148 = ($147|0)==(0);
     if ($148) {
      $$off$i12 = (($145) + -1)|0;
      $149 = ($$off$i12>>>0)<(12);
      if ($149) {
       HEAP32[$143>>2] = $145;
       break L8;
      }
     }
     $150 = $146 | 4;
     HEAP32[$__err>>2] = $150;
     break;
    }
    case 101: case 100:  {
     $121 = (($__tm) + 12|0);
     $122 = HEAP32[$__e>>2]|0;
     HEAP32[$11>>2] = $122;
     ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$11+0>>2]|0;
     $123 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy4,$__err,$59,2)|0);
     $124 = HEAP32[$__err>>2]|0;
     $125 = $124 & 4;
     $126 = ($125|0)==(0);
     if ($126) {
      $$off$i = (($123) + -1)|0;
      $127 = ($$off$i>>>0)<(31);
      if ($127) {
       HEAP32[$121>>2] = $123;
       break L8;
      }
     }
     $128 = $124 | 4;
     HEAP32[$__err>>2] = $128;
     break;
    }
    case 70:  {
     $132 = HEAP32[$__b>>2]|0;
     HEAP32[$22>>2] = $132;
     $133 = HEAP32[$__e>>2]|0;
     HEAP32[$23>>2] = $133;
     ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$22+0>>2]|0;
     ;HEAP32[$$byval_copy8+0>>2]=HEAP32[$23+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($21,$this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,17912,((17912 + 32|0)));
     $134 = HEAP32[$21>>2]|0;
     HEAP32[$__b>>2] = $134;
     break;
    }
    case 106:  {
     $151 = HEAP32[$__e>>2]|0;
     HEAP32[$8>>2] = $151;
     ;HEAP32[$$byval_copy11+0>>2]=HEAP32[$8+0>>2]|0;
     $152 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy11,$__err,$59,3)|0);
     $153 = HEAP32[$__err>>2]|0;
     $154 = $153 & 4;
     $155 = ($154|0)==(0);
     $156 = ($152|0)<(366);
     $or$cond$i15 = $155 & $156;
     if ($or$cond$i15) {
      $157 = (($__tm) + 28|0);
      HEAP32[$157>>2] = $152;
      break L8;
     } else {
      $158 = $153 | 4;
      HEAP32[$__err>>2] = $158;
      break L8;
     }
     break;
    }
    case 82:  {
     $220 = HEAP32[$__b>>2]|0;
     HEAP32[$29>>2] = $220;
     $221 = HEAP32[$__e>>2]|0;
     HEAP32[$30>>2] = $221;
     ;HEAP32[$$byval_copy18+0>>2]=HEAP32[$29+0>>2]|0;
     ;HEAP32[$$byval_copy19+0>>2]=HEAP32[$30+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($28,$this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,17992,((17992 + 20|0)));
     $222 = HEAP32[$28>>2]|0;
     HEAP32[$__b>>2] = $222;
     break;
    }
    case 104: case 66: case 98:  {
     $83 = HEAP32[$__e>>2]|0;
     $84 = (($this) + 8|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = (($85) + 4|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (FUNCTION_TABLE_ii[$87 & 127]($84)|0);
     HEAP32[$12>>2] = $83;
     $89 = (($88) + 288|0);
     ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$12+0>>2]|0;
     $90 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy1,$88,$89,$59,$__err,0)|0);
     $91 = $90;
     $92 = $88;
     $93 = (($91) - ($92))|0;
     $94 = ($93|0)<(288);
     if ($94) {
      $95 = (($__tm) + 16|0);
      $96 = (($93|0) / 12)&-1;
      $97 = (($96|0) % 12)&-1;
      HEAP32[$95>>2] = $97;
     }
     break;
    }
    case 72:  {
     $135 = HEAP32[$__e>>2]|0;
     HEAP32[$10>>2] = $135;
     ;HEAP32[$$byval_copy9+0>>2]=HEAP32[$10+0>>2]|0;
     $136 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy9,$__err,$59,2)|0);
     $137 = HEAP32[$__err>>2]|0;
     $138 = $137 & 4;
     $139 = ($138|0)==(0);
     $140 = ($136|0)<(24);
     $or$cond$i = $139 & $140;
     if ($or$cond$i) {
      $141 = (($__tm) + 8|0);
      HEAP32[$141>>2] = $136;
      break L8;
     } else {
      $142 = $137 | 4;
      HEAP32[$__err>>2] = $142;
      break L8;
     }
     break;
    }
    case 68:  {
     $129 = HEAP32[$__b>>2]|0;
     HEAP32[$19>>2] = $129;
     $130 = HEAP32[$__e>>2]|0;
     HEAP32[$20>>2] = $130;
     ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$19+0>>2]|0;
     ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$20+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($18,$this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,17880,((17880 + 32|0)));
     $131 = HEAP32[$18>>2]|0;
     HEAP32[$__b>>2] = $131;
     break;
    }
    case 83:  {
     $223 = HEAP32[$__e>>2]|0;
     HEAP32[$4>>2] = $223;
     ;HEAP32[$$byval_copy20+0>>2]=HEAP32[$4+0>>2]|0;
     $224 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy20,$__err,$59,2)|0);
     $225 = HEAP32[$__err>>2]|0;
     $226 = $225 & 4;
     $227 = ($226|0)==(0);
     $228 = ($224|0)<(61);
     $or$cond$i26 = $227 & $228;
     if ($or$cond$i26) {
      HEAP32[$__tm>>2] = $224;
      break L8;
     } else {
      $229 = $225 | 4;
      HEAP32[$__err>>2] = $229;
      break L8;
     }
     break;
    }
    case 112:  {
     $177 = (($__tm) + 8|0);
     $178 = HEAP32[$__e>>2]|0;
     $179 = (($this) + 8|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = (($180) + 8|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (FUNCTION_TABLE_ii[$182 & 127]($179)|0);
     $184 = HEAP8[$183]|0;
     $185 = $184 & 1;
     $186 = ($185<<24>>24)==(0);
     if ($186) {
      $189 = $184&255;
      $190 = $189 >>> 1;
      $202 = $190;
     } else {
      $187 = (($183) + 4|0);
      $188 = HEAP32[$187>>2]|0;
      $202 = $188;
     }
     $191 = (($183) + 12|0);
     $192 = HEAP8[$191]|0;
     $193 = $192 & 1;
     $194 = ($193<<24>>24)==(0);
     if ($194) {
      $197 = $192&255;
      $198 = $197 >>> 1;
      $200 = $198;
     } else {
      $195 = (($183) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $200 = $196;
     }
     $199 = (0 - ($200))|0;
     $201 = ($202|0)==($199|0);
     if ($201) {
      $203 = HEAP32[$__err>>2]|0;
      $204 = $203 | 4;
      HEAP32[$__err>>2] = $204;
      break L8;
     }
     HEAP32[$5>>2] = $178;
     $205 = (($183) + 24|0);
     ;HEAP32[$$byval_copy15+0>>2]=HEAP32[$5+0>>2]|0;
     $206 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy15,$183,$205,$59,$__err,0)|0);
     $207 = $206;
     $208 = $183;
     $209 = (($207) - ($208))|0;
     $210 = ($206|0)==($183|0);
     if ($210) {
      $211 = HEAP32[$177>>2]|0;
      $212 = ($211|0)==(12);
      if ($212) {
       HEAP32[$177>>2] = 0;
       break L8;
      }
     }
     $213 = ($209|0)==(12);
     if ($213) {
      $214 = HEAP32[$177>>2]|0;
      $215 = ($214|0)<(12);
      if ($215) {
       $216 = (($214) + 12)|0;
       HEAP32[$177>>2] = $216;
      }
     }
     break;
    }
    case 114:  {
     $217 = HEAP32[$__b>>2]|0;
     HEAP32[$26>>2] = $217;
     $218 = HEAP32[$__e>>2]|0;
     HEAP32[$27>>2] = $218;
     ;HEAP32[$$byval_copy16+0>>2]=HEAP32[$26+0>>2]|0;
     ;HEAP32[$$byval_copy17+0>>2]=HEAP32[$27+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($25,$this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,17944,((17944 + 44|0)));
     $219 = HEAP32[$25>>2]|0;
     HEAP32[$__b>>2] = $219;
     break;
    }
    case 84:  {
     $230 = HEAP32[$__b>>2]|0;
     HEAP32[$32>>2] = $230;
     $231 = HEAP32[$__e>>2]|0;
     HEAP32[$33>>2] = $231;
     ;HEAP32[$$byval_copy21+0>>2]=HEAP32[$32+0>>2]|0;
     ;HEAP32[$$byval_copy22+0>>2]=HEAP32[$33+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($31,$this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,18016,((18016 + 32|0)));
     $232 = HEAP32[$31>>2]|0;
     HEAP32[$__b>>2] = $232;
     break;
    }
    case 119:  {
     $233 = HEAP32[$__e>>2]|0;
     HEAP32[$3>>2] = $233;
     ;HEAP32[$$byval_copy23+0>>2]=HEAP32[$3+0>>2]|0;
     $234 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy23,$__err,$59,1)|0);
     $235 = HEAP32[$__err>>2]|0;
     $236 = $235 & 4;
     $237 = ($236|0)==(0);
     $238 = ($234|0)<(7);
     $or$cond$i29 = $237 & $238;
     if ($or$cond$i29) {
      $239 = (($__tm) + 24|0);
      HEAP32[$239>>2] = $234;
      break L8;
     } else {
      $240 = $235 | 4;
      HEAP32[$__err>>2] = $240;
      break L8;
     }
     break;
    }
    case 99:  {
     $98 = (($this) + 8|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = (($99) + 12|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = (FUNCTION_TABLE_ii[$101 & 127]($98)|0);
     $103 = HEAP32[$__b>>2]|0;
     HEAP32[$16>>2] = $103;
     $104 = HEAP32[$__e>>2]|0;
     HEAP32[$17>>2] = $104;
     $105 = HEAP8[$102]|0;
     $106 = $105 & 1;
     $107 = ($106<<24>>24)==(0);
     if ($107) {
      $112 = (($102) + 4|0);
      $113 = (($102) + 4|0);
      $114 = $105&255;
      $115 = $114 >>> 1;
      $117 = $113;$118 = $115;$119 = $112;
     } else {
      $108 = (($102) + 8|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = (($102) + 4|0);
      $111 = HEAP32[$110>>2]|0;
      $117 = $109;$118 = $111;$119 = $109;
     }
     $116 = (($117) + ($118<<2)|0);
     ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$16+0>>2]|0;
     ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$17+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($15,$this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$119,$116);
     $120 = HEAP32[$15>>2]|0;
     HEAP32[$__b>>2] = $120;
     break;
    }
    case 109:  {
     $159 = HEAP32[$__e>>2]|0;
     HEAP32[$7>>2] = $159;
     ;HEAP32[$$byval_copy12+0>>2]=HEAP32[$7+0>>2]|0;
     $160 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy12,$__err,$59,2)|0);
     $161 = HEAP32[$__err>>2]|0;
     $162 = $161 & 4;
     $163 = ($162|0)==(0);
     $164 = ($160|0)<(13);
     $or$cond$i18 = $163 & $164;
     if ($or$cond$i18) {
      $165 = (($__tm) + 16|0);
      $166 = (($160) + -1)|0;
      HEAP32[$165>>2] = $166;
      break L8;
     } else {
      $167 = $161 | 4;
      HEAP32[$__err>>2] = $167;
      break L8;
     }
     break;
    }
    case 77:  {
     $168 = HEAP32[$__e>>2]|0;
     HEAP32[$6>>2] = $168;
     ;HEAP32[$$byval_copy13+0>>2]=HEAP32[$6+0>>2]|0;
     $169 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy13,$__err,$59,2)|0);
     $170 = HEAP32[$__err>>2]|0;
     $171 = $170 & 4;
     $172 = ($171|0)==(0);
     $173 = ($169|0)<(60);
     $or$cond$i21 = $172 & $173;
     if ($or$cond$i21) {
      $174 = (($__tm) + 4|0);
      HEAP32[$174>>2] = $169;
      break L8;
     } else {
      $175 = $170 | 4;
      HEAP32[$__err>>2] = $175;
      break L8;
     }
     break;
    }
    case 116: case 110:  {
     $176 = HEAP32[$__e>>2]|0;
     HEAP32[$24>>2] = $176;
     ;HEAP32[$$byval_copy14+0>>2]=HEAP32[$24+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$$byval_copy14,$__err,$59);
     break;
    }
    case 121:  {
     $269 = (($__tm) + 20|0);
     $270 = HEAP32[$__e>>2]|0;
     HEAP32[$2>>2] = $270;
     ;HEAP32[$$byval_copy28+0>>2]=HEAP32[$2+0>>2]|0;
     $271 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy28,$__err,$59,4)|0);
     $272 = HEAP32[$__err>>2]|0;
     $273 = $272 & 4;
     $274 = ($273|0)==(0);
     if ($274) {
      $275 = ($271|0)<(69);
      if ($275) {
       $276 = (($271) + 2000)|0;
       $__t$0$i = $276;
      } else {
       $$off$i35 = (($271) + -69)|0;
       $277 = ($$off$i35>>>0)<(31);
       $278 = (($271) + 1900)|0;
       $$$i = $277 ? $278 : $271;
       $__t$0$i = $$$i;
      }
      $279 = (($__t$0$i) + -1900)|0;
      HEAP32[$269>>2] = $279;
     }
     break;
    }
    case 37:  {
     $287 = HEAP32[$__e>>2]|0;
     HEAP32[$39>>2] = $287;
     ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$39+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$$byval_copy30,$__err,$59);
     break;
    }
    case 88:  {
     $246 = (($this) + 8|0);
     $247 = HEAP32[$246>>2]|0;
     $248 = (($247) + 24|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = (FUNCTION_TABLE_ii[$249 & 127]($246)|0);
     $251 = HEAP32[$__b>>2]|0;
     HEAP32[$37>>2] = $251;
     $252 = HEAP32[$__e>>2]|0;
     HEAP32[$38>>2] = $252;
     $253 = HEAP8[$250]|0;
     $254 = $253 & 1;
     $255 = ($254<<24>>24)==(0);
     if ($255) {
      $260 = (($250) + 4|0);
      $261 = (($250) + 4|0);
      $262 = $253&255;
      $263 = $262 >>> 1;
      $265 = $261;$266 = $263;$267 = $260;
     } else {
      $256 = (($250) + 8|0);
      $257 = HEAP32[$256>>2]|0;
      $258 = (($250) + 4|0);
      $259 = HEAP32[$258>>2]|0;
      $265 = $257;$266 = $259;$267 = $257;
     }
     $264 = (($265) + ($266<<2)|0);
     ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$37+0>>2]|0;
     ;HEAP32[$$byval_copy27+0>>2]=HEAP32[$38+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($36,$this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$267,$264);
     $268 = HEAP32[$36>>2]|0;
     HEAP32[$__b>>2] = $268;
     break;
    }
    case 120:  {
     $241 = HEAP32[$this>>2]|0;
     $242 = (($241) + 20|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = HEAP32[$__b>>2]|0;
     HEAP32[$34>>2] = $244;
     $245 = HEAP32[$__e>>2]|0;
     HEAP32[$35>>2] = $245;
     ;HEAP32[$$byval_copy24+0>>2]=HEAP32[$34+0>>2]|0;
     ;HEAP32[$$byval_copy25+0>>2]=HEAP32[$35+0>>2]|0;
     FUNCTION_TABLE_viiiiiii[$243 & 63]($agg$result,$this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm);
     STACKTOP = sp;return;
     break;
    }
    case 89:  {
     $280 = HEAP32[$__e>>2]|0;
     HEAP32[$1>>2] = $280;
     ;HEAP32[$$byval_copy29+0>>2]=HEAP32[$1+0>>2]|0;
     $281 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy29,$__err,$59,4)|0);
     $282 = HEAP32[$__err>>2]|0;
     $283 = $282 & 4;
     $284 = ($283|0)==(0);
     if ($284) {
      $285 = (($__tm) + 20|0);
      $286 = (($281) + -1900)|0;
      HEAP32[$285>>2] = $286;
     }
     break;
    }
    default: {
     $288 = HEAP32[$__err>>2]|0;
     $289 = $288 | 4;
     HEAP32[$__err>>2] = $289;
    }
    }
   } while(0);
   $290 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $290;
   STACKTOP = sp;return;
  }
 }
 $61 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($61);
 __THREW__ = 0;
 invoke_viii(7,($61|0),(26752|0),(102|0));
 $62 = __THREW__; __THREW__ = 0;
 $63 = $62&1;
 if ($63) {
  $66 = ___cxa_find_matching_catch(-1,-1)|0;
  $67 = tempRet0;
  $68 = HEAP32[$14>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($68)|0);
  ___resumeException($66|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $0 = HEAP32[$__b>>2]|0;
  $1 = ($0|0)==(0|0);
  do {
   if ($1) {
    $78 = 1;
   } else {
    $2 = (($0) + 12|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = (($0) + 16|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($3|0)==($5|0);
    if ($6) {
     $7 = HEAP32[$0>>2]|0;
     $8 = (($7) + 36|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (FUNCTION_TABLE_ii[$9 & 127]($0)|0);
     $$0$i$i$i$i = $10;
    } else {
     $11 = HEAP32[$3>>2]|0;
     $$0$i$i$i$i = $11;
    }
    $12 = ($$0$i$i$i$i|0)==(-1);
    if ($12) {
     HEAP32[$__b>>2] = 0;
     $78 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $78 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $13 = HEAP32[$__e>>2]|0;
  $14 = ($13|0)==(0|0);
  do {
   if ($14) {
    label = 15;
   } else {
    $15 = (($13) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($13) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($16|0)==($18|0);
    if ($19) {
     $20 = HEAP32[$13>>2]|0;
     $21 = (($20) + 36|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (FUNCTION_TABLE_ii[$22 & 127]($13)|0);
     $$0$i$i1$i$i = $23;
    } else {
     $24 = HEAP32[$16>>2]|0;
     $$0$i$i1$i$i = $24;
    }
    $25 = ($$0$i$i1$i$i|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 15;
     break;
    } else {
     if ($78) {
      $79 = $13;
      break;
     } else {
      $$pre$i3$i$i9 = $13;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($78) {
    $$pre$i3$i$i9 = 0;
    break;
   } else {
    $79 = 0;
   }
  }
  $26 = HEAP32[$__b>>2]|0;
  $27 = (($26) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($28|0)==($30|0);
  if ($31) {
   $32 = HEAP32[$26>>2]|0;
   $33 = (($32) + 36|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_ii[$34 & 127]($26)|0);
   $$0$i$i = $35;
  } else {
   $36 = HEAP32[$28>>2]|0;
   $$0$i$i = $36;
  }
  $37 = HEAP32[$__ct>>2]|0;
  $38 = (($37) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_iiii[$39 & 31]($__ct,8192,$$0$i$i)|0);
  if (!($40)) {
   $$pre$i3$i$i9 = $79;
   break;
  }
  $41 = HEAP32[$__b>>2]|0;
  $42 = (($41) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($43|0)==($45|0);
  if ($46) {
   $47 = HEAP32[$41>>2]|0;
   $48 = (($47) + 40|0);
   $49 = HEAP32[$48>>2]|0;
   (FUNCTION_TABLE_ii[$49 & 127]($41)|0);
   continue;
  } else {
   $50 = (($43) + 4|0);
   HEAP32[$42>>2] = $50;
   continue;
  }
 }
 $51 = HEAP32[$__b>>2]|0;
 $52 = ($51|0)==(0|0);
 do {
  if ($52) {
   $80 = 1;
  } else {
   $53 = (($51) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($51) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($54|0)==($56|0);
   if ($57) {
    $58 = HEAP32[$51>>2]|0;
    $59 = (($58) + 36|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (FUNCTION_TABLE_ii[$60 & 127]($51)|0);
    $$0$i$i$i$i1 = $61;
   } else {
    $62 = HEAP32[$54>>2]|0;
    $$0$i$i$i$i1 = $62;
   }
   $63 = ($$0$i$i$i$i1|0)==(-1);
   if ($63) {
    HEAP32[$__b>>2] = 0;
    $80 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $80 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $64 = ($$pre$i3$i$i9|0)==(0|0);
 do {
  if ($64) {
   label = 37;
  } else {
   $65 = (($$pre$i3$i$i9) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($$pre$i3$i$i9) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($66|0)==($68|0);
   if ($69) {
    $70 = HEAP32[$$pre$i3$i$i9>>2]|0;
    $71 = (($70) + 36|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (FUNCTION_TABLE_ii[$72 & 127]($$pre$i3$i$i9)|0);
    $$0$i$i1$i$i7 = $73;
   } else {
    $74 = HEAP32[$66>>2]|0;
    $$0$i$i1$i$i7 = $74;
   }
   $75 = ($$0$i$i1$i$i7|0)==(-1);
   if ($75) {
    HEAP32[$__e>>2] = 0;
    label = 37;
    break;
   }
   if ($80) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  if (!($80)) {
   STACKTOP = sp;return;
  }
 }
 $76 = HEAP32[$__err>>2]|0;
 $77 = $76 | 2;
 HEAP32[$__err>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i915 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $83 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 127]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $83 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $83 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = (($13) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 127]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($83) {
     $$pre$i3$i$i915 = $13;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($83) {
   label = 16;
  } else {
   $$pre$i3$i$i915 = 0;
  }
 }
 if ((label|0) == 16) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  STACKTOP = sp;return;
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 127]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP32[$30>>2]|0;
  $$0$i$i = $38;
 }
 $39 = HEAP32[$__ct>>2]|0;
 $40 = (($39) + 52|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (FUNCTION_TABLE_iiii[$41 & 31]($__ct,$$0$i$i,0)|0);
 $43 = ($42<<24>>24)==(37);
 if (!($43)) {
  $44 = HEAP32[$__err>>2]|0;
  $45 = $44 | 4;
  HEAP32[$__err>>2] = $45;
  STACKTOP = sp;return;
 }
 $46 = HEAP32[$__b>>2]|0;
 $47 = (($46) + 12|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($46) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($48|0)==($50|0);
 if ($51) {
  $52 = HEAP32[$46>>2]|0;
  $53 = (($52) + 40|0);
  $54 = HEAP32[$53>>2]|0;
  (FUNCTION_TABLE_ii[$54 & 127]($46)|0);
 } else {
  $55 = (($48) + 4|0);
  HEAP32[$47>>2] = $55;
 }
 $56 = HEAP32[$__b>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $84 = 1;
  } else {
   $58 = (($56) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($56) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = (($63) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 127]($56)|0);
    $$0$i$i$i$i1 = $66;
   } else {
    $67 = HEAP32[$59>>2]|0;
    $$0$i$i$i$i1 = $67;
   }
   $68 = ($$0$i$i$i$i1|0)==(-1);
   if ($68) {
    HEAP32[$__b>>2] = 0;
    $84 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $84 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $69 = ($$pre$i3$i$i915|0)==(0|0);
 do {
  if ($69) {
   label = 38;
  } else {
   $70 = (($$pre$i3$i$i915) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($$pre$i3$i$i915) + 16|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($71|0)==($73|0);
   if ($74) {
    $75 = HEAP32[$$pre$i3$i$i915>>2]|0;
    $76 = (($75) + 36|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (FUNCTION_TABLE_ii[$77 & 127]($$pre$i3$i$i915)|0);
    $$0$i$i1$i$i7 = $78;
   } else {
    $79 = HEAP32[$71>>2]|0;
    $$0$i$i1$i$i7 = $79;
   }
   $80 = ($$0$i$i1$i$i7|0)==(-1);
   if ($80) {
    HEAP32[$__e>>2] = 0;
    label = 38;
    break;
   }
   if ($84) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 38) {
  if (!($84)) {
   STACKTOP = sp;return;
  }
 }
 $81 = HEAP32[$__err>>2]|0;
 $82 = $81 | 2;
 HEAP32[$__err>>2] = $82;
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i17 = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i23 = 0, $$0$i$i1$i$i8 = 0, $$0$i$i14 = 0, $$0$in = 0, $$01 = 0, $$pre$i$i$i = 0, $$pre$i$i$i19 = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i10 = 0, $$pre$i3$i$i25 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i20 = 0, $phitmp$i$i$i5 = 0, $phitmp$i4$i$i11 = 0, $tmp$i$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $147 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 127]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $147 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $147 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = (($13) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 127]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($147) {
     $148 = $13;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($147) {
   label = 16;
  } else {
   $148 = 0;
  }
 }
 if ((label|0) == 16) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 127]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP32[$30>>2]|0;
  $$0$i$i = $38;
 }
 $39 = HEAP32[$__ct>>2]|0;
 $40 = (($39) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (FUNCTION_TABLE_iiii[$41 & 31]($__ct,2048,$$0$i$i)|0);
 if (!($42)) {
  $43 = HEAP32[$__err>>2]|0;
  $44 = $43 | 4;
  HEAP32[$__err>>2] = $44;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $45 = HEAP32[$__ct>>2]|0;
 $46 = (($45) + 52|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (FUNCTION_TABLE_iiii[$47 & 31]($__ct,$$0$i$i,0)|0);
 $49 = $48 << 24 >> 24;
 $50 = HEAP32[$__b>>2]|0;
 $51 = (($50) + 12|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($50) + 16|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($52|0)==($54|0);
 if ($55) {
  $56 = HEAP32[$50>>2]|0;
  $57 = (($56) + 40|0);
  $58 = HEAP32[$57>>2]|0;
  (FUNCTION_TABLE_ii[$58 & 127]($50)|0);
  $$0$in = $__n;$$pre$i3$i$i10 = $148;$74 = $148;$__r$0$in = $49;
 } else {
  $59 = (($52) + 4|0);
  HEAP32[$51>>2] = $59;
  $$0$in = $__n;$$pre$i3$i$i10 = $148;$74 = $148;$__r$0$in = $49;
 }
 while(1) {
  $__r$0 = (($__r$0$in) + -48)|0;
  $$0 = (($$0$in) + -1)|0;
  $60 = HEAP32[$__b>>2]|0;
  $61 = ($60|0)==(0|0);
  do {
   if ($61) {
    $86 = 1;
   } else {
    $62 = (($60) + 12|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($60) + 16|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($63|0)==($65|0);
    if ($66) {
     $67 = HEAP32[$60>>2]|0;
     $68 = (($67) + 36|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (FUNCTION_TABLE_ii[$69 & 127]($60)|0);
     $$0$i$i$i$i2 = $70;
    } else {
     $71 = HEAP32[$63>>2]|0;
     $$0$i$i$i$i2 = $71;
    }
    $72 = ($$0$i$i$i$i2|0)==(-1);
    if ($72) {
     HEAP32[$__b>>2] = 0;
     $86 = 1;
     break;
    } else {
     $$pre$i$i$i4 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i5 = ($$pre$i$i$i4|0)==(0|0);
     $86 = $phitmp$i$i$i5;
     break;
    }
   }
  } while(0);
  $73 = ($74|0)==(0|0);
  do {
   if ($73) {
    $$pre$i3$i$i25 = $$pre$i3$i$i10;$149 = 0;$87 = 1;
   } else {
    $75 = (($74) + 12|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (($74) + 16|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($76|0)==($78|0);
    if ($79) {
     $80 = HEAP32[$74>>2]|0;
     $81 = (($80) + 36|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (FUNCTION_TABLE_ii[$82 & 127]($74)|0);
     $$0$i$i1$i$i8 = $83;
    } else {
     $84 = HEAP32[$76>>2]|0;
     $$0$i$i1$i$i8 = $84;
    }
    $85 = ($$0$i$i1$i$i8|0)==(-1);
    if ($85) {
     HEAP32[$__e>>2] = 0;
     $$pre$i3$i$i25 = 0;$149 = 0;$87 = 1;
     break;
    } else {
     $phitmp$i4$i$i11 = ($$pre$i3$i$i10|0)==(0|0);
     $$pre$i3$i$i25 = $$pre$i3$i$i10;$149 = $$pre$i3$i$i10;$87 = $phitmp$i4$i$i11;
     break;
    }
   }
  } while(0);
  $tmp$i$i13 = $86 ^ $87;
  $88 = ($$0|0)>(0);
  $$ = $tmp$i$i13 & $88;
  $89 = HEAP32[$__b>>2]|0;
  if (!($$)) {
   break;
  }
  $90 = (($89) + 12|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($89) + 16|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($91|0)==($93|0);
  if ($94) {
   $95 = HEAP32[$89>>2]|0;
   $96 = (($95) + 36|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (FUNCTION_TABLE_ii[$97 & 127]($89)|0);
   $$0$i$i14 = $98;
  } else {
   $99 = HEAP32[$91>>2]|0;
   $$0$i$i14 = $99;
  }
  $100 = HEAP32[$__ct>>2]|0;
  $101 = (($100) + 12|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (FUNCTION_TABLE_iiii[$102 & 31]($__ct,2048,$$0$i$i14)|0);
  if (!($103)) {
   $$01 = $__r$0;
   label = 63;
   break;
  }
  $104 = ($__r$0*10)|0;
  $105 = HEAP32[$__ct>>2]|0;
  $106 = (($105) + 52|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (FUNCTION_TABLE_iiii[$107 & 31]($__ct,$$0$i$i14,0)|0);
  $109 = $108 << 24 >> 24;
  $110 = (($109) + ($104))|0;
  $111 = HEAP32[$__b>>2]|0;
  $112 = (($111) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($111) + 16|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($113|0)==($115|0);
  if ($116) {
   $117 = HEAP32[$111>>2]|0;
   $118 = (($117) + 40|0);
   $119 = HEAP32[$118>>2]|0;
   (FUNCTION_TABLE_ii[$119 & 127]($111)|0);
   $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$74 = $149;$__r$0$in = $110;
   continue;
  } else {
   $120 = (($113) + 4|0);
   HEAP32[$112>>2] = $120;
   $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$74 = $149;$__r$0$in = $110;
   continue;
  }
 }
 if ((label|0) == 63) {
  STACKTOP = sp;return ($$01|0);
 }
 $121 = ($89|0)==(0|0);
 do {
  if ($121) {
   $150 = 1;
  } else {
   $122 = (($89) + 12|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = (($89) + 16|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ($123|0)==($125|0);
   if ($126) {
    $127 = HEAP32[$89>>2]|0;
    $128 = (($127) + 36|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (FUNCTION_TABLE_ii[$129 & 127]($89)|0);
    $$0$i$i$i$i17 = $130;
   } else {
    $131 = HEAP32[$123>>2]|0;
    $$0$i$i$i$i17 = $131;
   }
   $132 = ($$0$i$i$i$i17|0)==(-1);
   if ($132) {
    HEAP32[$__b>>2] = 0;
    $150 = 1;
    break;
   } else {
    $$pre$i$i$i19 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i20 = ($$pre$i$i$i19|0)==(0|0);
    $150 = $phitmp$i$i$i20;
    break;
   }
  }
 } while(0);
 $133 = ($$pre$i3$i$i25|0)==(0|0);
 do {
  if ($133) {
   label = 60;
  } else {
   $134 = (($$pre$i3$i$i25) + 12|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = (($$pre$i3$i$i25) + 16|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = ($135|0)==($137|0);
   if ($138) {
    $139 = HEAP32[$$pre$i3$i$i25>>2]|0;
    $140 = (($139) + 36|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (FUNCTION_TABLE_ii[$141 & 127]($$pre$i3$i$i25)|0);
    $$0$i$i1$i$i23 = $142;
   } else {
    $143 = HEAP32[$135>>2]|0;
    $$0$i$i1$i$i23 = $143;
   }
   $144 = ($$0$i$i1$i$i23|0)==(-1);
   if ($144) {
    HEAP32[$__e>>2] = 0;
    label = 60;
    break;
   }
   if ($150) {
    $$01 = $__r$0;
    STACKTOP = sp;return ($$01|0);
   }
  }
 } while(0);
 if ((label|0) == 60) {
  if (!($150)) {
   $$01 = $__r$0;
   STACKTOP = sp;return ($$01|0);
  }
 }
 $145 = HEAP32[$__err>>2]|0;
 $146 = $145 | 2;
 HEAP32[$__err>>2] = $146;
 $$01 = $__r$0;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$i$i$indexZ2D = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[18688]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((18688|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if (!($8)) {
     HEAP32[18680>>2] = $6;
     ___cxa_guard_release((18688|0));
     break;
    }
    $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $10 = tempRet0;
    ___cxa_guard_abort((18688|0));
    $eh$lpad$body$i$i$i$indexZ2D = $9;
    ___clang_call_terminate($eh$lpad$body$i$i$i$indexZ2D);
    // unreachable;
   }
  }
 } while(0);
 $11 = HEAP32[18680>>2]|0;
 $12 = ($1|0)==($11|0);
 if ($12) {
  __ZdlPv($this);
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi(123,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  __ZdlPv($this);
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $17 = tempRet0;
 $eh$lpad$body$i$i$i$indexZ2D = $16;
 ___clang_call_terminate($eh$lpad$body$i$i$i$indexZ2D);
 // unreachable;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$i$indexZ2D = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[18688]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((18688|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if (!($8)) {
     HEAP32[18680>>2] = $6;
     ___cxa_guard_release((18688|0));
     break;
    }
    $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $10 = tempRet0;
    ___cxa_guard_abort((18688|0));
    $eh$lpad$body$i$i$indexZ2D = $9;
    ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
    // unreachable;
   }
  }
 } while(0);
 $11 = HEAP32[18680>>2]|0;
 $12 = ($1|0)==($11|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi(123,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $17 = tempRet0;
 $eh$lpad$body$i$i$indexZ2D = $16;
 ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
 // unreachable;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$01$i$i = 0, $$7$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $fmt$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $fmt$i = sp + 100|0;
 $__nar = sp;
 HEAP8[$fmt$i] = 37;
 $2 = (($fmt$i) + 1|0);
 HEAP8[$2] = $__fmt;
 $3 = (($fmt$i) + 2|0);
 HEAP8[$3] = $__mod;
 $4 = (($fmt$i) + 3|0);
 HEAP8[$4] = 0;
 $5 = ($__mod<<24>>24)==(0);
 if (!($5)) {
  HEAP8[$2] = $__mod;
  HEAP8[$3] = $__fmt;
 }
 $6 = (($this) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_strftime_l(($__nar|0),100,($fmt$i|0),($__tm|0),($7|0))|0);
 $9 = (($__nar) + ($8)|0);
 $10 = HEAP32[$__s>>2]|0;
 $11 = ($8|0)==(0);
 if ($11) {
  $30 = $10;
  HEAP32[$agg$result>>2] = $30;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $__nar;$14 = $10;$27 = $10;
 }
 while(1) {
  $12 = HEAP8[$$01$i$i]|0;
  $13 = ($14|0)==(0|0);
  do {
   if ($13) {
    $31 = $27;$32 = 0;
   } else {
    $15 = (($14) + 24|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($14) + 28|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($16|0)==($18|0);
    if ($19) {
     $21 = HEAP32[$14>>2]|0;
     $22 = (($21) + 52|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = $12&255;
     $25 = (FUNCTION_TABLE_iii[$23 & 31]($14,$24)|0);
     $26 = ($25|0)==(-1);
     $$$i = $26 ? 0 : $27;
     $$7$i = $26 ? 0 : $14;
     $31 = $$$i;$32 = $$7$i;
     break;
    } else {
     $20 = (($16) + 1|0);
     HEAP32[$15>>2] = $20;
     HEAP8[$16] = $12;
     $31 = $27;$32 = $14;
     break;
    }
   }
  } while(0);
  $28 = (($$01$i$i) + 1|0);
  $29 = ($28|0)==($9|0);
  if ($29) {
   $30 = $31;
   break;
  } else {
   $$01$i$i = $28;$14 = $32;$27 = $31;
  }
 }
 HEAP32[$agg$result>>2] = $30;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$i$i$indexZ2D = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[18688]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((18688|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if (!($8)) {
     HEAP32[18680>>2] = $6;
     ___cxa_guard_release((18688|0));
     break;
    }
    $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $10 = tempRet0;
    ___cxa_guard_abort((18688|0));
    $eh$lpad$body$i$i$i$indexZ2D = $9;
    ___clang_call_terminate($eh$lpad$body$i$i$i$indexZ2D);
    // unreachable;
   }
  }
 } while(0);
 $11 = HEAP32[18680>>2]|0;
 $12 = ($1|0)==($11|0);
 if ($12) {
  __ZdlPv($this);
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi(123,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  __ZdlPv($this);
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $17 = tempRet0;
 $eh$lpad$body$i$i$i$indexZ2D = $16;
 ___clang_call_terminate($eh$lpad$body$i$i$i$indexZ2D);
 // unreachable;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$i$indexZ2D = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[18688]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((18688|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if (!($8)) {
     HEAP32[18680>>2] = $6;
     ___cxa_guard_release((18688|0));
     break;
    }
    $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $10 = tempRet0;
    ___cxa_guard_abort((18688|0));
    $eh$lpad$body$i$i$indexZ2D = $9;
    ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
    // unreachable;
   }
  }
 } while(0);
 $11 = HEAP32[18680>>2]|0;
 $12 = ($1|0)==($11|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi(123,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $17 = tempRet0;
 $eh$lpad$body$i$i$indexZ2D = $16;
 ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
 // unreachable;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i$i$i = 0, $$01$i$i = 0, $$7$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0;
 $__nar = sp + 8|0;
 $__ne = sp;
 $2 = (($__nar) + 400|0);
 HEAP32[$__ne>>2] = $2;
 $3 = (($this) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = ($__nar|0)==($4|0);
 if ($6) {
  $24 = $5;
  HEAP32[$agg$result>>2] = $24;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $__nar;$21 = $5;$9 = $5;
 }
 while(1) {
  $7 = HEAP32[$$01$i$i>>2]|0;
  $8 = ($9|0)==(0|0);
  if ($8) {
   $25 = $21;$26 = 0;
  } else {
   $10 = (($9) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($9) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($11|0)==($13|0);
   if ($14) {
    $15 = HEAP32[$9>>2]|0;
    $16 = (($15) + 52|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (FUNCTION_TABLE_iii[$17 & 31]($9,$7)|0);
    $$0$i$i$i$i = $18;
   } else {
    $19 = (($11) + 4|0);
    HEAP32[$10>>2] = $19;
    HEAP32[$11>>2] = $7;
    $$0$i$i$i$i = $7;
   }
   $20 = ($$0$i$i$i$i|0)==(-1);
   $$$i = $20 ? 0 : $21;
   $$7$i = $20 ? 0 : $9;
   $25 = $$$i;$26 = $$7$i;
  }
  $22 = (($$01$i$i) + 4|0);
  $23 = ($22|0)==($4|0);
  if ($23) {
   $24 = $25;
   break;
  } else {
   $$01$i$i = $22;$21 = $25;$9 = $26;
  }
 }
 HEAP32[$agg$result>>2] = $24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__wb = $__wb|0;
 $__we = $__we|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__nb = 0, $fmt$i = 0, $mb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $fmt$i = sp + 112|0;
 $__nar = sp + 12|0;
 $mb = sp;
 $__nb = sp + 8|0;
 HEAP8[$fmt$i] = 37;
 $0 = (($fmt$i) + 1|0);
 HEAP8[$0] = $__fmt;
 $1 = (($fmt$i) + 2|0);
 HEAP8[$1] = $__mod;
 $2 = (($fmt$i) + 3|0);
 HEAP8[$2] = 0;
 $3 = ($__mod<<24>>24)==(0);
 if (!($3)) {
  HEAP8[$0] = $__mod;
  HEAP8[$1] = $__fmt;
 }
 $4 = HEAP32[$this>>2]|0;
 (_strftime_l(($__nar|0),100,($fmt$i|0),($__tm|0),($4|0))|0);
 $5 = $mb;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 HEAP32[$__nb>>2] = $__nar;
 $9 = HEAP32[$__we>>2]|0;
 $10 = $9;
 $11 = $__wb;
 $12 = (($10) - ($11))|0;
 $13 = $12 >> 2;
 $14 = HEAP32[$this>>2]|0;
 $15 = (_uselocale(($14|0))|0);
 __THREW__ = 0;
 $16 = (invoke_iiiii(14,($__wb|0),($__nb|0),($13|0),($mb|0))|0);
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $24 = ___cxa_find_matching_catch(-1,-1)|0;
  $25 = tempRet0;
  $26 = ($15|0)==(0|0);
  if ($26) {
   ___resumeException($24|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(73,($15|0))|0);
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if ($28) {
   $29 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $30 = tempRet0;
   ___clang_call_terminate($29);
   // unreachable;
  } else {
   ___resumeException($24|0);
   // unreachable;
  }
 }
 $19 = ($15|0)==(0|0);
 if (!($19)) {
  __THREW__ = 0;
  (invoke_ii(73,($15|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if ($21) {
   $22 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $23 = tempRet0;
   ___clang_call_terminate($22);
   // unreachable;
  }
 }
 $31 = ($16|0)==(-1);
 if ($31) {
  __ZNSt3__121__throw_runtime_errorEPKc(19672);
  // unreachable;
 } else {
  $32 = (($__wb) + ($16<<2)|0);
  HEAP32[$__we>>2] = $32;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result]=67109634&255;HEAP8[$agg$result+1|0]=(67109634>>8)&255;HEAP8[$agg$result+2|0]=(67109634>>16)&255;HEAP8[$agg$result+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result]=67109634&255;HEAP8[$agg$result+1|0]=(67109634>>8)&255;HEAP8[$agg$result+2|0]=(67109634>>16)&255;HEAP8[$agg$result+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result]=67109634&255;HEAP8[$agg$result+1|0]=(67109634>>8)&255;HEAP8[$agg$result+2|0]=(67109634>>16)&255;HEAP8[$agg$result+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result]=67109634&255;HEAP8[$agg$result+1|0]=(67109634>>8)&255;HEAP8[$agg$result+2|0]=(67109634>>16)&255;HEAP8[$agg$result+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result]=67109634&255;HEAP8[$agg$result+1|0]=(67109634>>8)&255;HEAP8[$agg$result+2|0]=(67109634>>16)&255;HEAP8[$agg$result+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result]=67109634&255;HEAP8[$agg$result+1|0]=(67109634>>8)&255;HEAP8[$agg$result+2|0]=(67109634>>16)&255;HEAP8[$agg$result+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result]=67109634&255;HEAP8[$agg$result+1|0]=(67109634>>8)&255;HEAP8[$agg$result+2|0]=(67109634>>16)&255;HEAP8[$agg$result+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result]=67109634&255;HEAP8[$agg$result+1|0]=(67109634>>8)&255;HEAP8[$agg$result+2|0]=(67109634>>16)&255;HEAP8[$agg$result+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$117 = 0, $$118 = 0, $$1215 = 0, $$1216 = 0, $$byval_copy = 0, $$pre = 0, $$pre20 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$211 = 0, $__neg = 0, $__p$i$i$i$i = 0, $__w$012 = 0, $__wb = 0;
 var $__wbuf = 0, $__wn = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp;
 $__p$i$i$i$i = sp + 8|0;
 $__wbuf = sp + 48|0;
 $__wb = sp + 40|0;
 $__wn = sp + 28|0;
 $__loc = sp + 24|0;
 $__neg = sp + 260|0;
 $0 = sp + 20|0;
 $__atoms = sp + 148|0;
 $__nbuf = sp + 160|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 124;
 $2 = (($__wbuf) + 100|0);
 __THREW__ = 0;
 invoke_vii(48,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $51 = ___cxa_find_matching_catch(-1,-1)|0;
   $52 = tempRet0;
   HEAP32[$__wb>>2] = 0;
   $$117 = $51;$$1215 = $52;$131 = 124;$132 = $__wbuf;
  } else {
   $5 = HEAP32[$__loc>>2]|0;
   $6 = HEAP32[18792>>2]|0;
   $7 = ($6|0)==(-1);
   if ($7) {
    label = 4;
   } else {
    HEAP32[$__p$i$i$i$i>>2] = 18792;
    $8 = (($__p$i$i$i$i) + 4|0);
    HEAP32[$8>>2] = (121);
    $9 = (($__p$i$i$i$i) + 8|0);
    HEAP32[$9>>2] = 0;
    __THREW__ = 0;
    invoke_viii(6,(18792|0),($__p$i$i$i$i|0),(122|0));
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     label = 15;
    } else {
     label = 4;
    }
   }
   L5: do {
    if ((label|0) == 4) {
     $12 = HEAP32[((18792 + 4|0))>>2]|0;
     $13 = (($12) + -1)|0;
     $14 = (($5) + 12|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (($5) + 8|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = $15;
     $19 = $17;
     $20 = (($18) - ($19))|0;
     $21 = $20 >> 2;
     $22 = ($21>>>0)>($13>>>0);
     if ($22) {
      $23 = (($17) + ($13<<2)|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(0|0);
      if (!($25)) {
       HEAP8[$__neg] = 0;
       $29 = HEAP32[$__e>>2]|0;
       HEAP32[$0>>2] = $29;
       $30 = (($__iob) + 4|0);
       $31 = HEAP32[$30>>2]|0;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
       $32 = (invoke_iiiiiiiiiiii(1,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($31|0),($__err|0),($__neg|0),($24|0),($__wb|0),($__wn|0),($2|0))|0);
       $33 = __THREW__; __THREW__ = 0;
       $34 = $33&1;
       if ($34) {
        label = 15;
        break;
       }
       L11: do {
        if ($32) {
         $35 = HEAP32[$24>>2]|0;
         $36 = (($35) + 32|0);
         $37 = HEAP32[$36>>2]|0;
         __THREW__ = 0;
         (invoke_iiiii($37|0,($24|0),(18408|0),(((18408 + 10|0))|0),($__atoms|0))|0);
         $38 = __THREW__; __THREW__ = 0;
         $39 = $38&1;
         if ($39) {
          label = 15;
          break L5;
         }
         $40 = HEAP32[$__wn>>2]|0;
         $41 = HEAP32[$__wb>>2]|0;
         $42 = $40;
         $43 = $41;
         $44 = (($42) - ($43))|0;
         $45 = ($44|0)>(98);
         if ($45) {
          $46 = (($44) + 2)|0;
          $47 = (_malloc($46)|0);
          $48 = ($47|0)==(0|0);
          if ($48) {
           __THREW__ = 0;
           invoke_v(4);
           $49 = __THREW__; __THREW__ = 0;
           $50 = $49&1;
           if ($50) {
            $137 = 0;
            label = 16;
           } else {
            $88 = 0;$__nc$0 = 0;
            label = 19;
           }
          } else {
           $88 = $47;$__nc$0 = $47;
           label = 19;
          }
         } else {
          $88 = 0;$__nc$0 = $__nbuf;
          label = 19;
         }
         do {
          if ((label|0) == 19) {
           $59 = HEAP8[$__neg]|0;
           $60 = ($59<<24>>24)==(0);
           if ($60) {
            $__nc$1 = $__nc$0;
           } else {
            $61 = (($__nc$0) + 1|0);
            HEAP8[$__nc$0] = 45;
            $__nc$1 = $61;
           }
           $62 = ($41>>>0)<($40>>>0);
           if ($62) {
            $63 = (($__atoms) + 10|0);
            $64 = $__atoms;
            $__nc$211 = $__nc$1;$__w$012 = $41;
            while(1) {
             $65 = HEAP8[$__w$012]|0;
             $$01$i = $__atoms;
             while(1) {
              $68 = HEAP8[$$01$i]|0;
              $69 = ($68<<24>>24)==($65<<24>>24);
              $67 = (($$01$i) + 1|0);
              if ($69) {
               $$0$lcssa$i = $$01$i;
               break;
              }
              $66 = ($67|0)==($63|0);
              if ($66) {
               $$0$lcssa$i = $63;
               break;
              } else {
               $$01$i = $67;
              }
             }
             $70 = $$0$lcssa$i;
             $71 = (($70) - ($64))|0;
             $72 = (18408 + ($71)|0);
             $73 = HEAP8[$72]|0;
             HEAP8[$__nc$211] = $73;
             $74 = (($__w$012) + 1|0);
             $75 = (($__nc$211) + 1|0);
             $76 = HEAP32[$__wn>>2]|0;
             $77 = ($74>>>0)<($76>>>0);
             if ($77) {
              $__nc$211 = $75;$__w$012 = $74;
             } else {
              $__nc$2$lcssa = $75;
              break;
             }
            }
           } else {
            $__nc$2$lcssa = $__nc$1;
           }
           HEAP8[$__nc$2$lcssa] = 0;
           HEAP32[$vararg_buffer>>2] = $__v;
           $78 = (_sscanf(($__nbuf|0),(18424|0),($vararg_buffer|0))|0);
           $79 = ($78|0)==(1);
           if ($79) {
            $87 = ($88|0)==(0|0);
            if ($87) {
             break L11;
            }
            _free($88);
            break L11;
           }
           $80 = (___cxa_allocate_exception(8)|0);
           __THREW__ = 0;
           invoke_vii(45,($80|0),(18432|0));
           $81 = __THREW__; __THREW__ = 0;
           $82 = $81&1;
           if ($82) {
            $85 = ___cxa_find_matching_catch(-1,-1)|0;
            $86 = tempRet0;
            ___cxa_free_exception(($80|0));
            $58 = $88;$eh$lpad$body$index2Z2D = $86;$eh$lpad$body$indexZ2D = $85;
            break;
           }
           __THREW__ = 0;
           invoke_viii(7,($80|0),(15328|0),(11|0));
           $83 = __THREW__; __THREW__ = 0;
           $84 = $83&1;
           if ($84) {
            $137 = $88;
            label = 16;
           } else {
            // unreachable;
           }
          }
         } while(0);
         if ((label|0) == 16) {
          $55 = ___cxa_find_matching_catch(-1,-1)|0;
          $56 = tempRet0;
          $58 = $137;$eh$lpad$body$index2Z2D = $56;$eh$lpad$body$indexZ2D = $55;
         }
         $57 = ($58|0)==(0|0);
         if ($57) {
          $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index2Z2D;
          break L5;
         }
         _free($58);
         $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index2Z2D;
         break L5;
        }
       } while(0);
       $89 = HEAP32[$__b>>2]|0;
       $90 = ($89|0)==(0|0);
       if ($90) {
        $104 = 0;
       } else {
        $91 = (($89) + 12|0);
        $92 = HEAP32[$91>>2]|0;
        $93 = (($89) + 16|0);
        $94 = HEAP32[$93>>2]|0;
        $95 = ($92|0)==($94|0);
        if ($95) {
         $96 = HEAP32[$89>>2]|0;
         $97 = (($96) + 36|0);
         $98 = HEAP32[$97>>2]|0;
         __THREW__ = 0;
         $99 = (invoke_ii($98|0,($89|0))|0);
         $100 = __THREW__; __THREW__ = 0;
         $101 = $100&1;
         if ($101) {
          label = 15;
          break;
         }
         $102 = ($99|0)==(-1);
         if ($102) {
          HEAP32[$__b>>2] = 0;
          $104 = 0;
         } else {
          $104 = $89;
         }
        } else {
         $104 = $89;
        }
       }
       $103 = ($104|0)==(0|0);
       $105 = HEAP32[$__e>>2]|0;
       $106 = ($105|0)==(0|0);
       do {
        if ($106) {
         label = 45;
        } else {
         $107 = (($105) + 12|0);
         $108 = HEAP32[$107>>2]|0;
         $109 = (($105) + 16|0);
         $110 = HEAP32[$109>>2]|0;
         $111 = ($108|0)==($110|0);
         if (!($111)) {
          if ($103) {
           break;
          } else {
           label = 47;
           break;
          }
         }
         $112 = HEAP32[$105>>2]|0;
         $113 = (($112) + 36|0);
         $114 = HEAP32[$113>>2]|0;
         __THREW__ = 0;
         $115 = (invoke_ii($114|0,($105|0))|0);
         $116 = __THREW__; __THREW__ = 0;
         $117 = $116&1;
         if ($117) {
          label = 15;
          break L5;
         }
         $118 = ($115|0)==(-1);
         if ($118) {
          HEAP32[$__e>>2] = 0;
          label = 45;
          break;
         } else {
          if ($103) {
           break;
          } else {
           label = 47;
           break;
          }
         }
        }
       } while(0);
       if ((label|0) == 45) {
        if ($103) {
         label = 47;
        }
       }
       if ((label|0) == 47) {
        $119 = HEAP32[$__err>>2]|0;
        $120 = $119 | 2;
        HEAP32[$__err>>2] = $120;
       }
       HEAP32[$agg$result>>2] = $104;
       $121 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($121)|0);
       $122 = HEAP32[$__wb>>2]|0;
       HEAP32[$__wb>>2] = 0;
       $123 = ($122|0)==(0|0);
       if ($123) {
        STACKTOP = sp;return;
       }
       $124 = HEAP32[$1>>2]|0;
       __THREW__ = 0;
       invoke_vi($124|0,($122|0));
       $125 = __THREW__; __THREW__ = 0;
       $126 = $125&1;
       if ($126) {
        $127 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $128 = tempRet0;
        ___clang_call_terminate($127);
        // unreachable;
       } else {
        STACKTOP = sp;return;
       }
      }
     }
     $26 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($26);
     __THREW__ = 0;
     invoke_viii(7,($26|0),(26752|0),(102|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      label = 15;
     } else {
      // unreachable;
     }
    }
   } while(0);
   if ((label|0) == 15) {
    $53 = ___cxa_find_matching_catch(-1,-1)|0;
    $54 = tempRet0;
    $$0 = $53;$$01 = $54;
   }
   $129 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($129)|0);
   $$pre = HEAP32[$__wb>>2]|0;
   HEAP32[$__wb>>2] = 0;
   $130 = ($$pre|0)==(0|0);
   if ($130) {
    $$118 = $$0;$$1216 = $$01;
    ___resumeException($$118|0);
    // unreachable;
   } else {
    $$pre20 = HEAP32[$1>>2]|0;
    $$117 = $$0;$$1215 = $$01;$131 = $$pre20;$132 = $$pre;
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi($131|0,($132|0));
 $133 = __THREW__; __THREW__ = 0;
 $134 = $133&1;
 if ($134) {
  $135 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $136 = tempRet0;
  ___clang_call_terminate($135);
  // unreachable;
 } else {
  $$118 = $$117;$$1216 = $$1215;
  ___resumeException($$118|0);
  // unreachable;
 }
}
function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$$i = 0, $$$i118 = 0, $$$i128 = 0, $$$i140 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i114 = 0, $$0$i$i151 = 0, $$0$i$i172 = 0, $$0$i$i29 = 0, $$0$i$i32 = 0, $$0$i$i45 = 0, $$0$i$i50 = 0, $$0$i$i53 = 0, $$0$i$i64 = 0, $$0$i$i67 = 0, $$0$i$i84 = 0, $$0$i$i93 = 0, $$0$i$i96 = 0;
 var $$462 = 0, $$463 = 0, $$464 = 0, $$465 = 0, $$467 = 0, $$lcssa293 = 0, $$lcssa309 = 0, $$lcssa535 = 0, $$ph$ph = 0, $$ph$ph235$ph$ph$ph$ph = 0, $$phi$trans$insert = 0, $$phi$trans$insert576 = 0, $$pr$i = 0, $$pr$i142 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i101 = 0, $$pre$i$i$i156 = 0, $$pre$i$i$i176 = 0;
 var $$pre$i$i$i19 = 0, $$pre$i$i$i35 = 0, $$pre$i$i$i71 = 0, $$pre$i143 = 0, $$pre$i2$i$i180 = 0, $$pre$i2$i$i180427 = 0, $$pre$i2$i$i180428 = 0, $$pre$i2$i$i39 = 0, $$pre$i2$i$i39424 = 0, $$pre$i2$i$i39426 = 0, $$pre$i2$i$i75 = 0, $$pre$i2$i$i75431$ph = 0, $$pre$i2$i$i75431458 = 0, $$pre450 = 0, $$pre451 = 0, $$pre452 = 0, $$pre453 = 0, $$pre574 = 0, $$pre575 = 0, $$pre577 = 0;
 var $$sum = 0, $$sum454 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0;
 var $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0;
 var $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0;
 var $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gbuf = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$06 = 0, $__p$0353 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$05 = 0, $__spaces = 0, $__sym = 0;
 var $__trailing_sign$0$lcssa = 0, $__trailing_sign$0355 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $free = 0, $free200 = 0, $free201 = 0, $free202$lcssa = 0, $free202349 = 0, $free203 = 0, $free204 = 0, $free205 = 0, $free206 = 0, $free206$ph$ph = 0, $free206$ph$ph234$ph$ph$ph$ph = 0, $free208 = 0, $isascii1$i = 0, $isascii1$i136 = 0;
 var $isascii1$i149 = 0, $isascii1$i48 = 0, $isascii1$i62 = 0, $lpad$phi$index = 0, $lpad$phi$index7 = 0, $or$cond = 0, $or$cond7 = 0, $or$cond8 = 0, $sext = 0, $sext230 = 0, $sext231 = 0, $sext232 = 0, $switch = 0, $tmp$i$i182 = 0, $tmp$i$i41 = 0, $tmp$i$i77 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0;
 $__gbuf = sp + 72|0;
 $__pat = sp + 68|0;
 $__dp = sp + 472|0;
 $__ts = sp + 473|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__psn = sp + 28|0;
 $__nsn = sp + 16|0;
 $__spaces = sp + 4|0;
 $__fd = sp;
 $__et = sp + 40|0;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(1,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   $67 = ___cxa_find_matching_catch(-1,-1)|0;
   $68 = tempRet0;
   $70 = $__gbuf;$free206 = 124;$lpad$phi$index = $67;$lpad$phi$index7 = $68;
  } else {
   $2 = (($__gbuf) + 400|0);
   $3 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $3;
   $4 = (($__ct) + 8|0);
   $5 = (($__nsn) + 1|0);
   $6 = (($__nsn) + 4|0);
   $7 = (($__nsn) + 8|0);
   $8 = (($__psn) + 1|0);
   $9 = (($__psn) + 4|0);
   $10 = (($__psn) + 8|0);
   $11 = $__flags & 512;
   $12 = ($11|0)!=(0);
   $13 = (($__sym) + 1|0);
   $14 = (($__sym) + 8|0);
   $15 = (($__sym) + 4|0);
   $16 = (($__spaces) + 1|0);
   $17 = (($__spaces) + 8|0);
   $18 = (($__spaces) + 4|0);
   $19 = (($__pat) + 3|0);
   $20 = (($__wb) + 4|0);
   $21 = (($__grp) + 4|0);
   $932 = $2;$933 = $__gbuf;$934 = $__gbuf;$935 = $__we;$__p$0353 = 0;$__trailing_sign$0355 = 0;$free202349 = 124;
   L4: while(1) {
    $22 = HEAP32[$__b>>2]|0;
    $23 = ($22|0)==(0|0);
    do {
     if ($23) {
      $37 = 0;
     } else {
      $24 = (($22) + 12|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = (($22) + 16|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($25|0)==($27|0);
      if ($28) {
       $29 = HEAP32[$22>>2]|0;
       $30 = (($29) + 36|0);
       $31 = HEAP32[$30>>2]|0;
       __THREW__ = 0;
       $32 = (invoke_ii($31|0,($22|0))|0);
       $33 = __THREW__; __THREW__ = 0;
       $34 = $33&1;
       if ($34) {
        $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
        label = 23;
        break L4;
       }
       $35 = ($32|0)==(-1);
       if ($35) {
        HEAP32[$__b>>2] = 0;
        $37 = 0;
        break;
       } else {
        $$pre$i$i$i19 = HEAP32[$__b>>2]|0;
        $37 = $$pre$i$i$i19;
        break;
       }
      } else {
       $37 = $22;
      }
     }
    } while(0);
    $36 = ($37|0)==(0|0);
    $38 = HEAP32[$__e>>2]|0;
    $39 = ($38|0)==(0|0);
    do {
     if ($39) {
      label = 15;
     } else {
      $40 = (($38) + 12|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (($38) + 16|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($41|0)==($43|0);
      if (!($44)) {
       if ($36) {
        $936 = $38;
        break;
       } else {
        $$lcssa293 = $934;$$lcssa309 = $933;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
        label = 301;
        break L4;
       }
      }
      $45 = HEAP32[$38>>2]|0;
      $46 = (($45) + 36|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_ii($47|0,($38|0))|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
       label = 23;
       break L4;
      }
      $51 = ($48|0)==(-1);
      if ($51) {
       HEAP32[$__e>>2] = 0;
       label = 15;
       break;
      } else {
       if ($36) {
        $936 = $38;
        break;
       } else {
        $$lcssa293 = $934;$$lcssa309 = $933;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
        label = 301;
        break L4;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($36) {
      $$lcssa293 = $934;$$lcssa309 = $933;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
      label = 301;
      break;
     } else {
      $936 = 0;
     }
    }
    $52 = (($__pat) + ($__p$0353)|0);
    $53 = HEAP8[$52]|0;
    $54 = $53 << 24 >> 24;
    L26: do {
     switch ($54|0) {
     case 0:  {
      label = 40;
      break;
     }
     case 1:  {
      $cond = ($__p$0353|0)==(3);
      if ($cond) {
       $$lcssa293 = $934;$$lcssa309 = $933;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
       label = 301;
       break L4;
      }
      $75 = HEAP32[$__b>>2]|0;
      $76 = (($75) + 12|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (($75) + 16|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($77|0)==($79|0);
      if ($80) {
       $81 = HEAP32[$75>>2]|0;
       $82 = (($81) + 36|0);
       $83 = HEAP32[$82>>2]|0;
       __THREW__ = 0;
       $84 = (invoke_ii($83|0,($75|0))|0);
       $85 = __THREW__; __THREW__ = 0;
       $86 = $85&1;
       if ($86) {
        $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
        label = 23;
        break L4;
       } else {
        $$0$i$i29 = $84;
       }
      } else {
       $87 = HEAP8[$77]|0;
       $88 = $87&255;
       $$0$i$i29 = $88;
      }
      $89 = $$0$i$i29&255;
      $isascii1$i = ($89<<24>>24)>(-1);
      if (!($isascii1$i)) {
       label = 39;
       break L4;
      }
      $sext232 = $$0$i$i29 << 24;
      $90 = $sext232 >> 24;
      $91 = HEAP32[$4>>2]|0;
      $92 = (($91) + ($90<<1)|0);
      $93 = HEAP16[$92>>1]|0;
      $94 = $93 & 8192;
      $95 = ($94<<16>>16)==(0);
      if ($95) {
       label = 39;
       break L4;
      }
      $96 = HEAP32[$__b>>2]|0;
      $97 = (($96) + 12|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = (($96) + 16|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($98|0)==($100|0);
      if ($101) {
       $102 = HEAP32[$96>>2]|0;
       $103 = (($102) + 40|0);
       $104 = HEAP32[$103>>2]|0;
       __THREW__ = 0;
       $105 = (invoke_ii($104|0,($96|0))|0);
       $106 = __THREW__; __THREW__ = 0;
       $107 = $106&1;
       if ($107) {
        $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
        label = 23;
        break L4;
       } else {
        $$0$i$i32 = $105;
       }
      } else {
       $108 = (($98) + 1|0);
       HEAP32[$97>>2] = $108;
       $109 = HEAP8[$98]|0;
       $110 = $109&255;
       $$0$i$i32 = $110;
      }
      $111 = $$0$i$i32&255;
      __THREW__ = 0;
      invoke_vii(49,($__spaces|0),($111|0));
      $112 = __THREW__; __THREW__ = 0;
      $113 = $112&1;
      if ($113) {
       $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
       label = 23;
       break L4;
      } else {
       label = 40;
      }
      break;
     }
     case 3:  {
      $187 = HEAP8[$__psn]|0;
      $188 = $187 & 1;
      $189 = ($188<<24>>24)==(0);
      if ($189) {
       $191 = $187&255;
       $192 = $191 >>> 1;
       $202 = $192;
      } else {
       $190 = HEAP32[$9>>2]|0;
       $202 = $190;
      }
      $193 = HEAP8[$__nsn]|0;
      $194 = $193 & 1;
      $195 = ($194<<24>>24)==(0);
      if ($195) {
       $197 = $193&255;
       $198 = $197 >>> 1;
       $200 = $198;
      } else {
       $196 = HEAP32[$6>>2]|0;
       $200 = $196;
      }
      $199 = (0 - ($200))|0;
      $201 = ($202|0)==($199|0);
      if ($201) {
       $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
      } else {
       if ($189) {
        $204 = $187&255;
        $205 = $204 >>> 1;
        $207 = $205;
       } else {
        $203 = HEAP32[$9>>2]|0;
        $207 = $203;
       }
       $206 = ($207|0)==(0);
       if (!($206)) {
        if ($195) {
         $209 = $193&255;
         $210 = $209 >>> 1;
         $212 = $210;
        } else {
         $208 = HEAP32[$6>>2]|0;
         $212 = $208;
        }
        $211 = ($212|0)==(0);
        if (!($211)) {
         $294 = HEAP32[$__b>>2]|0;
         $295 = (($294) + 12|0);
         $296 = HEAP32[$295>>2]|0;
         $297 = (($294) + 16|0);
         $298 = HEAP32[$297>>2]|0;
         $299 = ($296|0)==($298|0);
         if ($299) {
          $300 = HEAP32[$294>>2]|0;
          $301 = (($300) + 36|0);
          $302 = HEAP32[$301>>2]|0;
          __THREW__ = 0;
          $303 = (invoke_ii($302|0,($294|0))|0);
          $304 = __THREW__; __THREW__ = 0;
          $305 = $304&1;
          if ($305) {
           $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
           label = 23;
           break L4;
          }
          $$pre452 = HEAP8[$__psn]|0;
          $$pre574 = HEAP32[$__b>>2]|0;
          $$phi$trans$insert = (($$pre574) + 12|0);
          $$pre575 = HEAP32[$$phi$trans$insert>>2]|0;
          $$phi$trans$insert576 = (($$pre574) + 16|0);
          $$pre577 = HEAP32[$$phi$trans$insert576>>2]|0;
          $$0$i$i96 = $303;$310 = $$pre452;$316 = $$pre574;$318 = $$pre575;$319 = $$pre577;
         } else {
          $306 = HEAP8[$296]|0;
          $307 = $306&255;
          $$0$i$i96 = $307;$310 = $187;$316 = $294;$318 = $296;$319 = $298;
         }
         $308 = $$0$i$i96&255;
         $309 = $310 & 1;
         $311 = ($309<<24>>24)==(0);
         $312 = HEAP32[$10>>2]|0;
         $$463 = $311 ? $8 : $312;
         $313 = HEAP8[$$463]|0;
         $314 = ($308<<24>>24)==($313<<24>>24);
         $315 = (($316) + 12|0);
         $317 = ($318|0)==($319|0);
         if ($314) {
          if ($317) {
           $320 = HEAP32[$316>>2]|0;
           $321 = (($320) + 40|0);
           $322 = HEAP32[$321>>2]|0;
           __THREW__ = 0;
           (invoke_ii($322|0,($316|0))|0);
           $323 = __THREW__; __THREW__ = 0;
           $324 = $323&1;
           if ($324) {
            $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
            label = 23;
            break L4;
           }
          } else {
           $325 = (($318) + 1|0);
           HEAP32[$315>>2] = $325;
          }
          $326 = HEAP8[$__psn]|0;
          $327 = $326 & 1;
          $328 = ($327<<24>>24)==(0);
          if ($328) {
           $330 = $326&255;
           $331 = $330 >>> 1;
           $333 = $331;
          } else {
           $329 = HEAP32[$9>>2]|0;
           $333 = $329;
          }
          $332 = ($333>>>0)>(1);
          $__psn$__trailing_sign$05 = $332 ? $__psn : $__trailing_sign$0355;
          $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__psn$__trailing_sign$05;$free203 = $free202349;
          break L26;
         }
         if ($317) {
          $334 = HEAP32[$316>>2]|0;
          $335 = (($334) + 36|0);
          $336 = HEAP32[$335>>2]|0;
          __THREW__ = 0;
          $337 = (invoke_ii($336|0,($316|0))|0);
          $338 = __THREW__; __THREW__ = 0;
          $339 = $338&1;
          if ($339) {
           $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
           label = 23;
           break L4;
          } else {
           $$0$i$i114 = $337;
          }
         } else {
          $340 = HEAP8[$318]|0;
          $341 = $340&255;
          $$0$i$i114 = $341;
         }
         $342 = $$0$i$i114&255;
         $343 = HEAP8[$__nsn]|0;
         $344 = $343 & 1;
         $345 = ($344<<24>>24)==(0);
         $346 = HEAP32[$7>>2]|0;
         $$464 = $345 ? $5 : $346;
         $347 = HEAP8[$$464]|0;
         $348 = ($342<<24>>24)==($347<<24>>24);
         if (!($348)) {
          label = 131;
          break L4;
         }
         $349 = HEAP32[$__b>>2]|0;
         $350 = (($349) + 12|0);
         $351 = HEAP32[$350>>2]|0;
         $352 = (($349) + 16|0);
         $353 = HEAP32[$352>>2]|0;
         $354 = ($351|0)==($353|0);
         if ($354) {
          $355 = HEAP32[$349>>2]|0;
          $356 = (($355) + 40|0);
          $357 = HEAP32[$356>>2]|0;
          __THREW__ = 0;
          (invoke_ii($357|0,($349|0))|0);
          $358 = __THREW__; __THREW__ = 0;
          $359 = $358&1;
          if ($359) {
           $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
           label = 23;
           break L4;
          }
         } else {
          $360 = (($351) + 1|0);
          HEAP32[$350>>2] = $360;
         }
         HEAP8[$__neg] = 1;
         $361 = HEAP8[$__nsn]|0;
         $362 = $361 & 1;
         $363 = ($362<<24>>24)==(0);
         if ($363) {
          $365 = $361&255;
          $366 = $365 >>> 1;
          $368 = $366;
         } else {
          $364 = HEAP32[$6>>2]|0;
          $368 = $364;
         }
         $367 = ($368>>>0)>(1);
         $__nsn$__trailing_sign$06 = $367 ? $__nsn : $__trailing_sign$0355;
         $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__nsn$__trailing_sign$06;$free203 = $free202349;
         break L26;
        }
       }
       if ($189) {
        $214 = $187&255;
        $215 = $214 >>> 1;
        $217 = $215;
       } else {
        $213 = HEAP32[$9>>2]|0;
        $217 = $213;
       }
       $216 = ($217|0)==(0);
       $218 = HEAP32[$__b>>2]|0;
       $219 = (($218) + 12|0);
       $220 = HEAP32[$219>>2]|0;
       $221 = (($218) + 16|0);
       $222 = HEAP32[$221>>2]|0;
       $223 = ($220|0)==($222|0);
       if ($216) {
        if ($223) {
         $259 = HEAP32[$218>>2]|0;
         $260 = (($259) + 36|0);
         $261 = HEAP32[$260>>2]|0;
         __THREW__ = 0;
         $262 = (invoke_ii($261|0,($218|0))|0);
         $263 = __THREW__; __THREW__ = 0;
         $264 = $263&1;
         if ($264) {
          $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
          label = 23;
          break L4;
         }
         $$pre450 = HEAP8[$__nsn]|0;
         $$0$i$i84 = $262;$269 = $$pre450;
        } else {
         $265 = HEAP8[$220]|0;
         $266 = $265&255;
         $$0$i$i84 = $266;$269 = $193;
        }
        $267 = $$0$i$i84&255;
        $268 = $269 & 1;
        $270 = ($268<<24>>24)==(0);
        $271 = HEAP32[$7>>2]|0;
        $$462 = $270 ? $5 : $271;
        $272 = HEAP8[$$462]|0;
        $273 = ($267<<24>>24)==($272<<24>>24);
        if (!($273)) {
         $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
         break L26;
        }
        $274 = HEAP32[$__b>>2]|0;
        $275 = (($274) + 12|0);
        $276 = HEAP32[$275>>2]|0;
        $277 = (($274) + 16|0);
        $278 = HEAP32[$277>>2]|0;
        $279 = ($276|0)==($278|0);
        if ($279) {
         $280 = HEAP32[$274>>2]|0;
         $281 = (($280) + 40|0);
         $282 = HEAP32[$281>>2]|0;
         __THREW__ = 0;
         (invoke_ii($282|0,($274|0))|0);
         $283 = __THREW__; __THREW__ = 0;
         $284 = $283&1;
         if ($284) {
          $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
          label = 23;
          break L4;
         }
        } else {
         $285 = (($276) + 1|0);
         HEAP32[$275>>2] = $285;
        }
        HEAP8[$__neg] = 1;
        $286 = HEAP8[$__nsn]|0;
        $287 = $286 & 1;
        $288 = ($287<<24>>24)==(0);
        if ($288) {
         $290 = $286&255;
         $291 = $290 >>> 1;
         $293 = $291;
        } else {
         $289 = HEAP32[$6>>2]|0;
         $293 = $289;
        }
        $292 = ($293>>>0)>(1);
        $__nsn$__trailing_sign$0 = $292 ? $__nsn : $__trailing_sign$0355;
        $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__nsn$__trailing_sign$0;$free203 = $free202349;
        break L26;
       }
       if ($223) {
        $224 = HEAP32[$218>>2]|0;
        $225 = (($224) + 36|0);
        $226 = HEAP32[$225>>2]|0;
        __THREW__ = 0;
        $227 = (invoke_ii($226|0,($218|0))|0);
        $228 = __THREW__; __THREW__ = 0;
        $229 = $228&1;
        if ($229) {
         $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
         label = 23;
         break L4;
        }
        $$pre451 = HEAP8[$__psn]|0;
        $$0$i$i67 = $227;$234 = $$pre451;
       } else {
        $230 = HEAP8[$220]|0;
        $231 = $230&255;
        $$0$i$i67 = $231;$234 = $187;
       }
       $232 = $$0$i$i67&255;
       $233 = $234 & 1;
       $235 = ($233<<24>>24)==(0);
       $236 = HEAP32[$10>>2]|0;
       $$ = $235 ? $8 : $236;
       $237 = HEAP8[$$]|0;
       $238 = ($232<<24>>24)==($237<<24>>24);
       if (!($238)) {
        HEAP8[$__neg] = 1;
        $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
        break L26;
       }
       $239 = HEAP32[$__b>>2]|0;
       $240 = (($239) + 12|0);
       $241 = HEAP32[$240>>2]|0;
       $242 = (($239) + 16|0);
       $243 = HEAP32[$242>>2]|0;
       $244 = ($241|0)==($243|0);
       if ($244) {
        $245 = HEAP32[$239>>2]|0;
        $246 = (($245) + 40|0);
        $247 = HEAP32[$246>>2]|0;
        __THREW__ = 0;
        (invoke_ii($247|0,($239|0))|0);
        $248 = __THREW__; __THREW__ = 0;
        $249 = $248&1;
        if ($249) {
         $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
         label = 23;
         break L4;
        }
       } else {
        $250 = (($241) + 1|0);
        HEAP32[$240>>2] = $250;
       }
       $251 = HEAP8[$__psn]|0;
       $252 = $251 & 1;
       $253 = ($252<<24>>24)==(0);
       if ($253) {
        $255 = $251&255;
        $256 = $255 >>> 1;
        $258 = $256;
       } else {
        $254 = HEAP32[$9>>2]|0;
        $258 = $254;
       }
       $257 = ($258>>>0)>(1);
       $__psn$__trailing_sign$0 = $257 ? $__psn : $__trailing_sign$0355;
       $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__psn$__trailing_sign$0;$free203 = $free202349;
      }
      break;
     }
     case 2:  {
      $371 = ($__trailing_sign$0355|0)!=(0|0);
      $372 = ($__p$0353>>>0)<(2);
      $or$cond = $371 | $372;
      if (!($or$cond)) {
       $373 = ($__p$0353|0)==(2);
       if ($373) {
        $374 = HEAP8[$19]|0;
        $375 = ($374<<24>>24)!=(0);
        $376 = $375;
       } else {
        $376 = 0;
       }
       $brmerge = $12 | $376;
       if (!($brmerge)) {
        $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = 0;$free203 = $free202349;
        break L26;
       }
      }
      $377 = HEAP8[$__sym]|0;
      $378 = $377 & 1;
      $379 = ($378<<24>>24)==(0);
      $380 = HEAP32[$14>>2]|0;
      $$465 = $379 ? $13 : $380;
      $381 = ($__p$0353|0)==(0);
      L134: do {
       if ($381) {
        $$pre$i2$i$i180 = $936;$430 = $377;$440 = $$465;$458 = $936;
       } else {
        $382 = (($__p$0353) + -1)|0;
        $383 = (($__pat) + ($382)|0);
        $384 = HEAP8[$383]|0;
        $switch = ($384&255)<(2);
        if ($switch) {
         $385 = $377&255;
         $386 = $385 >>> 1;
         $387 = HEAP32[$15>>2]|0;
         $$467 = $379 ? $386 : $387;
         $388 = (($$465) + ($$467)|0);
         $390 = $$465;
         while(1) {
          $389 = ($390|0)==($388|0);
          if ($389) {
           $$lcssa535 = $388;
           break;
          }
          $391 = HEAP8[$390]|0;
          $isascii1$i136 = ($391<<24>>24)>(-1);
          if (!($isascii1$i136)) {
           $$lcssa535 = $390;
           break;
          }
          $392 = $391 << 24 >> 24;
          $393 = HEAP32[$4>>2]|0;
          $394 = (($393) + ($392<<1)|0);
          $395 = HEAP16[$394>>1]|0;
          $396 = $395 & 8192;
          $397 = ($396<<16>>16)==(0);
          $398 = (($390) + 1|0);
          if ($397) {
           $$lcssa535 = $390;
           break;
          } else {
           $390 = $398;
          }
         }
         $399 = $$lcssa535;
         $400 = $$465;
         $401 = (($399) - ($400))|0;
         $402 = HEAP8[$__spaces]|0;
         $403 = $402 & 1;
         $404 = ($403<<24>>24)==(0);
         if ($404) {
          $406 = $402&255;
          $407 = $406 >>> 1;
          $409 = $407;
         } else {
          $405 = HEAP32[$18>>2]|0;
          $409 = $405;
         }
         $408 = ($401>>>0)>($409>>>0);
         if ($408) {
          $$pre$i2$i$i180 = $936;$430 = $377;$440 = $$465;$458 = $936;
         } else {
          if ($404) {
           $413 = $402&255;
           $414 = $413 >>> 1;
           $$sum454 = (($414) - ($401))|0;
           $415 = ((($__spaces) + ($$sum454)|0) + 1|0);
           $417 = $16;$418 = $414;$420 = $415;
          } else {
           $410 = HEAP32[$17>>2]|0;
           $411 = HEAP32[$18>>2]|0;
           $$sum = (($411) - ($401))|0;
           $412 = (($410) + ($$sum)|0);
           $417 = $410;$418 = $411;$420 = $412;
          }
          $416 = (($417) + ($418)|0);
          $419 = ($420|0)==($416|0);
          if ($419) {
           $$pre$i2$i$i180 = $936;$430 = $377;$440 = $$lcssa535;$458 = $936;
          } else {
           $422 = $420;$424 = $$465;
           while(1) {
            $421 = HEAP8[$422]|0;
            $423 = HEAP8[$424]|0;
            $425 = ($421<<24>>24)==($423<<24>>24);
            if (!($425)) {
             $$pre$i2$i$i180 = $936;$430 = $377;$440 = $$465;$458 = $936;
             break L134;
            }
            $426 = (($422) + 1|0);
            $427 = (($424) + 1|0);
            $428 = ($426|0)==($416|0);
            if ($428) {
             $$pre$i2$i$i180 = $936;$430 = $377;$440 = $$lcssa535;$458 = $936;
             break;
            } else {
             $422 = $426;$424 = $427;
            }
           }
          }
         }
        } else {
         $$pre$i2$i$i180 = $936;$430 = $377;$440 = $$465;$458 = $936;
        }
       }
      } while(0);
      L154: while(1) {
       $429 = $430 & 1;
       $431 = ($429<<24>>24)==(0);
       if ($431) {
        $434 = $430&255;
        $435 = $434 >>> 1;
        $437 = $13;$438 = $435;
       } else {
        $432 = HEAP32[$14>>2]|0;
        $433 = HEAP32[$15>>2]|0;
        $437 = $432;$438 = $433;
       }
       $436 = (($437) + ($438)|0);
       $439 = ($440|0)==($436|0);
       if ($439) {
        break;
       }
       $441 = HEAP32[$__b>>2]|0;
       $442 = ($441|0)==(0|0);
       do {
        if ($442) {
         $456 = 0;
        } else {
         $443 = (($441) + 12|0);
         $444 = HEAP32[$443>>2]|0;
         $445 = (($441) + 16|0);
         $446 = HEAP32[$445>>2]|0;
         $447 = ($444|0)==($446|0);
         if ($447) {
          $448 = HEAP32[$441>>2]|0;
          $449 = (($448) + 36|0);
          $450 = HEAP32[$449>>2]|0;
          __THREW__ = 0;
          $451 = (invoke_ii($450|0,($441|0))|0);
          $452 = __THREW__; __THREW__ = 0;
          $453 = $452&1;
          if ($453) {
           label = 21;
           break L4;
          }
          $454 = ($451|0)==(-1);
          if ($454) {
           HEAP32[$__b>>2] = 0;
           $456 = 0;
           break;
          } else {
           $$pre$i$i$i176 = HEAP32[$__b>>2]|0;
           $456 = $$pre$i$i$i176;
           break;
          }
         } else {
          $456 = $441;
         }
        }
       } while(0);
       $455 = ($456|0)==(0|0);
       $457 = ($458|0)==(0|0);
       do {
        if ($457) {
         $$pre$i2$i$i180428 = $$pre$i2$i$i180;
         label = 168;
        } else {
         $459 = (($458) + 12|0);
         $460 = HEAP32[$459>>2]|0;
         $461 = (($458) + 16|0);
         $462 = HEAP32[$461>>2]|0;
         $463 = ($460|0)==($462|0);
         if (!($463)) {
          if ($455) {
           $$pre$i2$i$i180427 = $$pre$i2$i$i180;$943 = $458;
           break;
          } else {
           break L154;
          }
         }
         $464 = HEAP32[$458>>2]|0;
         $465 = (($464) + 36|0);
         $466 = HEAP32[$465>>2]|0;
         __THREW__ = 0;
         $467 = (invoke_ii($466|0,($458|0))|0);
         $468 = __THREW__; __THREW__ = 0;
         $469 = $468&1;
         if ($469) {
          label = 21;
          break L4;
         }
         $470 = ($467|0)==(-1);
         if ($470) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i180428 = 0;
          label = 168;
          break;
         } else {
          $471 = ($$pre$i2$i$i180|0)==(0|0);
          $tmp$i$i182 = $455 ^ $471;
          if ($tmp$i$i182) {
           $$pre$i2$i$i180427 = $$pre$i2$i$i180;$943 = $$pre$i2$i$i180;
           break;
          } else {
           break L154;
          }
         }
        }
       } while(0);
       if ((label|0) == 168) {
        label = 0;
        if ($455) {
         break;
        } else {
         $$pre$i2$i$i180427 = $$pre$i2$i$i180428;$943 = 0;
        }
       }
       $472 = HEAP32[$__b>>2]|0;
       $473 = (($472) + 12|0);
       $474 = HEAP32[$473>>2]|0;
       $475 = (($472) + 16|0);
       $476 = HEAP32[$475>>2]|0;
       $477 = ($474|0)==($476|0);
       if ($477) {
        $478 = HEAP32[$472>>2]|0;
        $479 = (($478) + 36|0);
        $480 = HEAP32[$479>>2]|0;
        __THREW__ = 0;
        $481 = (invoke_ii($480|0,($472|0))|0);
        $482 = __THREW__; __THREW__ = 0;
        $483 = $482&1;
        if ($483) {
         label = 21;
         break L4;
        } else {
         $$0$i$i172 = $481;
        }
       } else {
        $484 = HEAP8[$474]|0;
        $485 = $484&255;
        $$0$i$i172 = $485;
       }
       $486 = $$0$i$i172&255;
       $487 = HEAP8[$440]|0;
       $488 = ($486<<24>>24)==($487<<24>>24);
       if (!($488)) {
        break;
       }
       $489 = HEAP32[$__b>>2]|0;
       $490 = (($489) + 12|0);
       $491 = HEAP32[$490>>2]|0;
       $492 = (($489) + 16|0);
       $493 = HEAP32[$492>>2]|0;
       $494 = ($491|0)==($493|0);
       if ($494) {
        $495 = HEAP32[$489>>2]|0;
        $496 = (($495) + 40|0);
        $497 = HEAP32[$496>>2]|0;
        __THREW__ = 0;
        (invoke_ii($497|0,($489|0))|0);
        $498 = __THREW__; __THREW__ = 0;
        $499 = $498&1;
        if ($499) {
         label = 21;
         break L4;
        }
       } else {
        $500 = (($491) + 1|0);
        HEAP32[$490>>2] = $500;
       }
       $501 = (($440) + 1|0);
       $$pre = HEAP8[$__sym]|0;
       $$pre$i2$i$i180 = $$pre$i2$i$i180427;$430 = $$pre;$440 = $501;$458 = $943;
      }
      if ($12) {
       $502 = HEAP8[$__sym]|0;
       $503 = $502 & 1;
       $504 = ($503<<24>>24)==(0);
       if ($504) {
        $507 = $502&255;
        $508 = $507 >>> 1;
        $510 = $13;$511 = $508;
       } else {
        $505 = HEAP32[$14>>2]|0;
        $506 = HEAP32[$15>>2]|0;
        $510 = $505;$511 = $506;
       }
       $509 = (($510) + ($511)|0);
       $512 = ($440|0)==($509|0);
       if ($512) {
        $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
       } else {
        label = 183;
        break L4;
       }
      } else {
       $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
      }
      break;
     }
     case 4:  {
      $568 = $935;$607 = $933;$608 = $932;$612 = $934;$__ng$0 = 0;$free201 = $free202349;
      L196: while(1) {
       $515 = HEAP32[$__b>>2]|0;
       $516 = ($515|0)==(0|0);
       do {
        if ($516) {
         $530 = 0;
        } else {
         $517 = (($515) + 12|0);
         $518 = HEAP32[$517>>2]|0;
         $519 = (($515) + 16|0);
         $520 = HEAP32[$519>>2]|0;
         $521 = ($518|0)==($520|0);
         if ($521) {
          $522 = HEAP32[$515>>2]|0;
          $523 = (($522) + 36|0);
          $524 = HEAP32[$523>>2]|0;
          __THREW__ = 0;
          $525 = (invoke_ii($524|0,($515|0))|0);
          $526 = __THREW__; __THREW__ = 0;
          $527 = $526&1;
          if ($527) {
           $$ph$ph = $612;$free206$ph$ph = $free201;
           label = 19;
           break L4;
          }
          $528 = ($525|0)==(-1);
          if ($528) {
           HEAP32[$__b>>2] = 0;
           $530 = 0;
           break;
          } else {
           $$pre$i$i$i156 = HEAP32[$__b>>2]|0;
           $530 = $$pre$i$i$i156;
           break;
          }
         } else {
          $530 = $515;
         }
        }
       } while(0);
       $529 = ($530|0)==(0|0);
       $531 = HEAP32[$__e>>2]|0;
       $532 = ($531|0)==(0|0);
       do {
        if ($532) {
         label = 196;
        } else {
         $533 = (($531) + 12|0);
         $534 = HEAP32[$533>>2]|0;
         $535 = (($531) + 16|0);
         $536 = HEAP32[$535>>2]|0;
         $537 = ($534|0)==($536|0);
         if (!($537)) {
          if ($529) {
           break;
          } else {
           break L196;
          }
         }
         $538 = HEAP32[$531>>2]|0;
         $539 = (($538) + 36|0);
         $540 = HEAP32[$539>>2]|0;
         __THREW__ = 0;
         $541 = (invoke_ii($540|0,($531|0))|0);
         $542 = __THREW__; __THREW__ = 0;
         $543 = $542&1;
         if ($543) {
          $$ph$ph = $612;$free206$ph$ph = $free201;
          label = 19;
          break L4;
         }
         $544 = ($541|0)==(-1);
         if ($544) {
          HEAP32[$__e>>2] = 0;
          label = 196;
          break;
         } else {
          if ($529) {
           break;
          } else {
           break L196;
          }
         }
        }
       } while(0);
       if ((label|0) == 196) {
        label = 0;
        if ($529) {
         break;
        }
       }
       $545 = HEAP32[$__b>>2]|0;
       $546 = (($545) + 12|0);
       $547 = HEAP32[$546>>2]|0;
       $548 = (($545) + 16|0);
       $549 = HEAP32[$548>>2]|0;
       $550 = ($547|0)==($549|0);
       if ($550) {
        $551 = HEAP32[$545>>2]|0;
        $552 = (($551) + 36|0);
        $553 = HEAP32[$552>>2]|0;
        __THREW__ = 0;
        $554 = (invoke_ii($553|0,($545|0))|0);
        $555 = __THREW__; __THREW__ = 0;
        $556 = $555&1;
        if ($556) {
         $$ph$ph = $612;$free206$ph$ph = $free201;
         label = 19;
         break L4;
        } else {
         $$0$i$i151 = $554;
        }
       } else {
        $557 = HEAP8[$547]|0;
        $558 = $557&255;
        $$0$i$i151 = $558;
       }
       $559 = $$0$i$i151&255;
       $isascii1$i149 = ($559<<24>>24)>(-1);
       if ($isascii1$i149) {
        $sext230 = $$0$i$i151 << 24;
        $560 = $sext230 >> 24;
        $561 = HEAP32[$4>>2]|0;
        $562 = (($561) + ($560<<1)|0);
        $563 = HEAP16[$562>>1]|0;
        $564 = $563 & 2048;
        $565 = ($564<<16>>16)==(0);
        if ($565) {
         label = 214;
        } else {
         $566 = HEAP32[$__wn>>2]|0;
         $567 = ($566|0)==($568|0);
         if ($567) {
          $569 = HEAP32[$20>>2]|0;
          $570 = ($569|0)!=(124|0);
          $571 = HEAP32[$__wb>>2]|0;
          $572 = $568;
          $573 = $571;
          $574 = (($572) - ($573))|0;
          $575 = ($574>>>0)<(2147483647);
          $576 = $574 << 1;
          $$$i140 = $575 ? $576 : -1;
          $577 = $570 ? $571 : 0;
          $578 = (_realloc($577,$$$i140)|0);
          $579 = ($578|0)==(0|0);
          if ($579) {
           __THREW__ = 0;
           invoke_v(4);
           $580 = __THREW__; __THREW__ = 0;
           $581 = $580&1;
           if ($581) {
            $$ph$ph = $612;$free206$ph$ph = $free201;
            label = 19;
            break L4;
           }
          }
          if ($570) {
           HEAP32[$__wb>>2] = $578;
           $589 = $578;
          } else {
           $$pr$i142 = HEAP32[$__wb>>2]|0;
           HEAP32[$__wb>>2] = $578;
           $582 = ($$pr$i142|0)==(0|0);
           if ($582) {
            $589 = $578;
           } else {
            $583 = HEAP32[$20>>2]|0;
            __THREW__ = 0;
            invoke_vi($583|0,($$pr$i142|0));
            $584 = __THREW__; __THREW__ = 0;
            $585 = $584&1;
            if ($585) {
             label = 211;
             break L4;
            }
            $$pre$i143 = HEAP32[$__wb>>2]|0;
            $589 = $$pre$i143;
           }
          }
          HEAP32[$20>>2] = 112;
          $588 = (($589) + ($574)|0);
          HEAP32[$__wn>>2] = $588;
          $590 = HEAP32[$__wb>>2]|0;
          $591 = (($590) + ($$$i140)|0);
          $593 = $588;$944 = $591;
         } else {
          $593 = $566;$944 = $568;
         }
         $592 = (($593) + 1|0);
         HEAP32[$__wn>>2] = $592;
         HEAP8[$593] = $559;
         $594 = (($__ng$0) + 1)|0;
         $945 = $944;$946 = $612;$947 = $607;$948 = $608;$__ng$1 = $594;$free = $free201;
        }
       } else {
        label = 214;
       }
       if ((label|0) == 214) {
        label = 0;
        $595 = HEAP8[$__grp]|0;
        $596 = $595 & 1;
        $597 = ($596<<24>>24)==(0);
        if ($597) {
         $599 = $595&255;
         $600 = $599 >>> 1;
         $602 = $600;
        } else {
         $598 = HEAP32[$21>>2]|0;
         $602 = $598;
        }
        $601 = ($602|0)==(0);
        $603 = ($__ng$0|0)==(0);
        $or$cond7 = $601 | $603;
        if ($or$cond7) {
         break;
        }
        $604 = HEAP8[$__ts]|0;
        $605 = ($559<<24>>24)==($604<<24>>24);
        if (!($605)) {
         break;
        }
        $606 = ($607|0)==($608|0);
        if ($606) {
         $609 = ($free201|0)==(124|0);
         $610 = $607;
         $611 = $612;
         $613 = (($610) - ($611))|0;
         $614 = ($613>>>0)<(2147483647);
         $615 = $613 << 1;
         $$$i128 = $614 ? $615 : -1;
         $616 = $613 >> 2;
         if ($609) {
          $617 = 0;
         } else {
          $617 = $612;
         }
         $618 = (_realloc($617,$$$i128)|0);
         $619 = ($618|0)==(0|0);
         if ($619) {
          __THREW__ = 0;
          invoke_v(4);
          $620 = __THREW__; __THREW__ = 0;
          $621 = $620&1;
          if ($621) {
           $$ph$ph = $612;$free206$ph$ph = $free201;
           label = 19;
           break L4;
          }
         }
         $622 = $$$i128 >>> 2;
         $623 = (($618) + ($616<<2)|0);
         $624 = (($618) + ($622<<2)|0);
         $626 = $623;$949 = $618;$950 = $624;$free200 = 112;
        } else {
         $626 = $607;$949 = $612;$950 = $608;$free200 = $free201;
        }
        $625 = (($626) + 4|0);
        HEAP32[$626>>2] = $__ng$0;
        $945 = $568;$946 = $949;$947 = $625;$948 = $950;$__ng$1 = 0;$free = $free200;
       }
       $627 = HEAP32[$__b>>2]|0;
       $628 = (($627) + 12|0);
       $629 = HEAP32[$628>>2]|0;
       $630 = (($627) + 16|0);
       $631 = HEAP32[$630>>2]|0;
       $632 = ($629|0)==($631|0);
       if ($632) {
        $633 = HEAP32[$627>>2]|0;
        $634 = (($633) + 40|0);
        $635 = HEAP32[$634>>2]|0;
        __THREW__ = 0;
        (invoke_ii($635|0,($627|0))|0);
        $636 = __THREW__; __THREW__ = 0;
        $637 = $636&1;
        if ($637) {
         $$ph$ph = $946;$free206$ph$ph = $free;
         label = 19;
         break L4;
        } else {
         $568 = $945;$607 = $947;$608 = $948;$612 = $946;$__ng$0 = $__ng$1;$free201 = $free;
         continue;
        }
       } else {
        $638 = (($629) + 1|0);
        HEAP32[$628>>2] = $638;
        $568 = $945;$607 = $947;$608 = $948;$612 = $946;$__ng$0 = $__ng$1;$free201 = $free;
        continue;
       }
      }
      $639 = ($612|0)==($607|0);
      $640 = ($__ng$0|0)==(0);
      $or$cond8 = $639 | $640;
      if ($or$cond8) {
       $941 = $612;$951 = $607;$952 = $608;$free204 = $free201;
      } else {
       $641 = ($607|0)==($608|0);
       if ($641) {
        $642 = ($free201|0)==(124|0);
        $643 = $607;
        $644 = $612;
        $645 = (($643) - ($644))|0;
        $646 = ($645>>>0)<(2147483647);
        $647 = $645 << 1;
        $$$i118 = $646 ? $647 : -1;
        $648 = $645 >> 2;
        if ($642) {
         $649 = 0;
        } else {
         $649 = $612;
        }
        $650 = (_realloc($649,$$$i118)|0);
        $651 = ($650|0)==(0|0);
        if ($651) {
         __THREW__ = 0;
         invoke_v(4);
         $652 = __THREW__; __THREW__ = 0;
         $653 = $652&1;
         if ($653) {
          $$ph$ph235$ph$ph$ph$ph = $612;$free206$ph$ph234$ph$ph$ph$ph = $free201;
          label = 23;
          break L4;
         }
        }
        $654 = $$$i118 >>> 2;
        $655 = (($650) + ($648<<2)|0);
        $656 = (($650) + ($654<<2)|0);
        $658 = $655;$953 = $650;$954 = $656;$free205 = 112;
       } else {
        $658 = $607;$953 = $612;$954 = $608;$free205 = $free201;
       }
       $657 = (($658) + 4|0);
       HEAP32[$658>>2] = $__ng$0;
       $941 = $953;$951 = $657;$952 = $954;$free204 = $free205;
      }
      $659 = HEAP32[$__fd>>2]|0;
      $660 = ($659|0)>(0);
      if ($660) {
       $661 = HEAP32[$__b>>2]|0;
       $662 = ($661|0)==(0|0);
       do {
        if ($662) {
         $676 = 0;
        } else {
         $663 = (($661) + 12|0);
         $664 = HEAP32[$663>>2]|0;
         $665 = (($661) + 16|0);
         $666 = HEAP32[$665>>2]|0;
         $667 = ($664|0)==($666|0);
         if ($667) {
          $668 = HEAP32[$661>>2]|0;
          $669 = (($668) + 36|0);
          $670 = HEAP32[$669>>2]|0;
          __THREW__ = 0;
          $671 = (invoke_ii($670|0,($661|0))|0);
          $672 = __THREW__; __THREW__ = 0;
          $673 = $672&1;
          if ($673) {
           $$ph$ph235$ph$ph$ph$ph = $941;$free206$ph$ph234$ph$ph$ph$ph = $free204;
           label = 23;
           break L4;
          }
          $674 = ($671|0)==(-1);
          if ($674) {
           HEAP32[$__b>>2] = 0;
           $676 = 0;
           break;
          } else {
           $$pre$i$i$i101 = HEAP32[$__b>>2]|0;
           $676 = $$pre$i$i$i101;
           break;
          }
         } else {
          $676 = $661;
         }
        }
       } while(0);
       $675 = ($676|0)==(0|0);
       $677 = HEAP32[$__e>>2]|0;
       $678 = ($677|0)==(0|0);
       do {
        if ($678) {
         label = 250;
        } else {
         $679 = (($677) + 12|0);
         $680 = HEAP32[$679>>2]|0;
         $681 = (($677) + 16|0);
         $682 = HEAP32[$681>>2]|0;
         $683 = ($680|0)==($682|0);
         if (!($683)) {
          if ($675) {
           $956 = $677;
           break;
          } else {
           label = 256;
           break L4;
          }
         }
         $684 = HEAP32[$677>>2]|0;
         $685 = (($684) + 36|0);
         $686 = HEAP32[$685>>2]|0;
         __THREW__ = 0;
         $687 = (invoke_ii($686|0,($677|0))|0);
         $688 = __THREW__; __THREW__ = 0;
         $689 = $688&1;
         if ($689) {
          $$ph$ph235$ph$ph$ph$ph = $941;$free206$ph$ph234$ph$ph$ph$ph = $free204;
          label = 23;
          break L4;
         }
         $690 = ($687|0)==(-1);
         if ($690) {
          HEAP32[$__e>>2] = 0;
          label = 250;
          break;
         } else {
          if ($675) {
           $956 = $677;
           break;
          } else {
           label = 256;
           break L4;
          }
         }
        }
       } while(0);
       if ((label|0) == 250) {
        label = 0;
        if ($675) {
         label = 256;
         break L4;
        } else {
         $956 = 0;
        }
       }
       $691 = HEAP32[$__b>>2]|0;
       $692 = (($691) + 12|0);
       $693 = HEAP32[$692>>2]|0;
       $694 = (($691) + 16|0);
       $695 = HEAP32[$694>>2]|0;
       $696 = ($693|0)==($695|0);
       if ($696) {
        $697 = HEAP32[$691>>2]|0;
        $698 = (($697) + 36|0);
        $699 = HEAP32[$698>>2]|0;
        __THREW__ = 0;
        $700 = (invoke_ii($699|0,($691|0))|0);
        $701 = __THREW__; __THREW__ = 0;
        $702 = $701&1;
        if ($702) {
         $$ph$ph235$ph$ph$ph$ph = $941;$free206$ph$ph234$ph$ph$ph$ph = $free204;
         label = 23;
         break L4;
        } else {
         $$0$i$i93 = $700;
        }
       } else {
        $703 = HEAP8[$693]|0;
        $704 = $703&255;
        $$0$i$i93 = $704;
       }
       $705 = $$0$i$i93&255;
       $706 = HEAP8[$__dp]|0;
       $707 = ($705<<24>>24)==($706<<24>>24);
       if (!($707)) {
        label = 256;
        break L4;
       }
       $710 = HEAP32[$__b>>2]|0;
       $711 = (($710) + 12|0);
       $712 = HEAP32[$711>>2]|0;
       $713 = (($710) + 16|0);
       $714 = HEAP32[$713>>2]|0;
       $715 = ($712|0)==($714|0);
       if ($715) {
        $716 = HEAP32[$710>>2]|0;
        $717 = (($716) + 40|0);
        $718 = HEAP32[$717>>2]|0;
        __THREW__ = 0;
        (invoke_ii($718|0,($710|0))|0);
        $719 = __THREW__; __THREW__ = 0;
        $720 = $719&1;
        if ($720) {
         $$ph$ph235$ph$ph$ph$ph = $941;$free206$ph$ph234$ph$ph$ph$ph = $free204;
         label = 23;
         break L4;
        } else {
         $$pre$i2$i$i75 = $956;$739 = $956;$778 = $568;$820 = $659;
        }
       } else {
        $721 = (($712) + 1|0);
        HEAP32[$711>>2] = $721;
        $$pre$i2$i$i75 = $956;$739 = $956;$778 = $568;$820 = $659;
       }
       while(1) {
        $722 = HEAP32[$__b>>2]|0;
        $723 = ($722|0)==(0|0);
        do {
         if ($723) {
          $737 = 0;
         } else {
          $724 = (($722) + 12|0);
          $725 = HEAP32[$724>>2]|0;
          $726 = (($722) + 16|0);
          $727 = HEAP32[$726>>2]|0;
          $728 = ($725|0)==($727|0);
          if ($728) {
           $729 = HEAP32[$722>>2]|0;
           $730 = (($729) + 36|0);
           $731 = HEAP32[$730>>2]|0;
           __THREW__ = 0;
           $732 = (invoke_ii($731|0,($722|0))|0);
           $733 = __THREW__; __THREW__ = 0;
           $734 = $733&1;
           if ($734) {
            label = 20;
            break L4;
           }
           $735 = ($732|0)==(-1);
           if ($735) {
            HEAP32[$__b>>2] = 0;
            $737 = 0;
            break;
           } else {
            $$pre$i$i$i71 = HEAP32[$__b>>2]|0;
            $737 = $$pre$i$i$i71;
            break;
           }
          } else {
           $737 = $722;
          }
         }
        } while(0);
        $736 = ($737|0)==(0|0);
        $738 = ($739|0)==(0|0);
        do {
         if ($738) {
          $$pre$i2$i$i75431$ph = $$pre$i2$i$i75;
          label = 272;
         } else {
          $740 = (($739) + 12|0);
          $741 = HEAP32[$740>>2]|0;
          $742 = (($739) + 16|0);
          $743 = HEAP32[$742>>2]|0;
          $744 = ($741|0)==($743|0);
          if (!($744)) {
           if ($736) {
            $$pre$i2$i$i75431458 = $$pre$i2$i$i75;$957 = $739;
            break;
           } else {
            label = 279;
            break L4;
           }
          }
          $745 = HEAP32[$739>>2]|0;
          $746 = (($745) + 36|0);
          $747 = HEAP32[$746>>2]|0;
          __THREW__ = 0;
          $748 = (invoke_ii($747|0,($739|0))|0);
          $749 = __THREW__; __THREW__ = 0;
          $750 = $749&1;
          if ($750) {
           label = 20;
           break L4;
          }
          $751 = ($748|0)==(-1);
          if ($751) {
           HEAP32[$__e>>2] = 0;
           $$pre$i2$i$i75431$ph = 0;
           label = 272;
           break;
          } else {
           $752 = ($$pre$i2$i$i75|0)==(0|0);
           $tmp$i$i77 = $736 ^ $752;
           if ($tmp$i$i77) {
            $$pre$i2$i$i75431458 = $$pre$i2$i$i75;$957 = $$pre$i2$i$i75;
            break;
           } else {
            label = 279;
            break L4;
           }
          }
         }
        } while(0);
        if ((label|0) == 272) {
         label = 0;
         if ($736) {
          label = 279;
          break L4;
         } else {
          $$pre$i2$i$i75431458 = $$pre$i2$i$i75431$ph;$957 = 0;
         }
        }
        $753 = HEAP32[$__b>>2]|0;
        $754 = (($753) + 12|0);
        $755 = HEAP32[$754>>2]|0;
        $756 = (($753) + 16|0);
        $757 = HEAP32[$756>>2]|0;
        $758 = ($755|0)==($757|0);
        if ($758) {
         $759 = HEAP32[$753>>2]|0;
         $760 = (($759) + 36|0);
         $761 = HEAP32[$760>>2]|0;
         __THREW__ = 0;
         $762 = (invoke_ii($761|0,($753|0))|0);
         $763 = __THREW__; __THREW__ = 0;
         $764 = $763&1;
         if ($764) {
          label = 20;
          break L4;
         } else {
          $$0$i$i64 = $762;
         }
        } else {
         $765 = HEAP8[$755]|0;
         $766 = $765&255;
         $$0$i$i64 = $766;
        }
        $767 = $$0$i$i64&255;
        $isascii1$i62 = ($767<<24>>24)>(-1);
        if (!($isascii1$i62)) {
         label = 279;
         break L4;
        }
        $sext = $$0$i$i64 << 24;
        $768 = $sext >> 24;
        $769 = HEAP32[$4>>2]|0;
        $770 = (($769) + ($768<<1)|0);
        $771 = HEAP16[$770>>1]|0;
        $772 = $771 & 2048;
        $773 = ($772<<16>>16)==(0);
        if ($773) {
         label = 279;
         break L4;
        }
        $776 = HEAP32[$__wn>>2]|0;
        $777 = ($776|0)==($778|0);
        if ($777) {
         $779 = HEAP32[$20>>2]|0;
         $780 = ($779|0)!=(124|0);
         $781 = HEAP32[$__wb>>2]|0;
         $782 = $778;
         $783 = $781;
         $784 = (($782) - ($783))|0;
         $785 = ($784>>>0)<(2147483647);
         $786 = $784 << 1;
         $$$i = $785 ? $786 : -1;
         $787 = $780 ? $781 : 0;
         $788 = (_realloc($787,$$$i)|0);
         $789 = ($788|0)==(0|0);
         if ($789) {
          __THREW__ = 0;
          invoke_v(4);
          $790 = __THREW__; __THREW__ = 0;
          $791 = $790&1;
          if ($791) {
           label = 20;
           break L4;
          }
         }
         if ($780) {
          HEAP32[$__wb>>2] = $788;
          $799 = $788;
         } else {
          $$pr$i = HEAP32[$__wb>>2]|0;
          HEAP32[$__wb>>2] = $788;
          $792 = ($$pr$i|0)==(0|0);
          if ($792) {
           $799 = $788;
          } else {
           $793 = HEAP32[$20>>2]|0;
           __THREW__ = 0;
           invoke_vi($793|0,($$pr$i|0));
           $794 = __THREW__; __THREW__ = 0;
           $795 = $794&1;
           if ($795) {
            label = 288;
            break L4;
           }
           $$pre$i = HEAP32[$__wb>>2]|0;
           $799 = $$pre$i;
          }
         }
         HEAP32[$20>>2] = 112;
         $798 = (($799) + ($784)|0);
         HEAP32[$__wn>>2] = $798;
         $800 = HEAP32[$__wb>>2]|0;
         $801 = (($800) + ($$$i)|0);
         $958 = $798;$959 = $801;
        } else {
         $958 = $776;$959 = $778;
        }
        $802 = HEAP32[$__b>>2]|0;
        $803 = (($802) + 12|0);
        $804 = HEAP32[$803>>2]|0;
        $805 = (($802) + 16|0);
        $806 = HEAP32[$805>>2]|0;
        $807 = ($804|0)==($806|0);
        if ($807) {
         $808 = HEAP32[$802>>2]|0;
         $809 = (($808) + 36|0);
         $810 = HEAP32[$809>>2]|0;
         __THREW__ = 0;
         $811 = (invoke_ii($810|0,($802|0))|0);
         $812 = __THREW__; __THREW__ = 0;
         $813 = $812&1;
         if ($813) {
          label = 20;
          break L4;
         }
         $$pre453 = HEAP32[$__wn>>2]|0;
         $$0$i$i53 = $811;$818 = $$pre453;
        } else {
         $814 = HEAP8[$804]|0;
         $815 = $814&255;
         $$0$i$i53 = $815;$818 = $958;
        }
        $816 = $$0$i$i53&255;
        $817 = (($818) + 1|0);
        HEAP32[$__wn>>2] = $817;
        HEAP8[$818] = $816;
        $819 = (($820) + -1)|0;
        HEAP32[$__fd>>2] = $819;
        $821 = HEAP32[$__b>>2]|0;
        $822 = (($821) + 12|0);
        $823 = HEAP32[$822>>2]|0;
        $824 = (($821) + 16|0);
        $825 = HEAP32[$824>>2]|0;
        $826 = ($823|0)==($825|0);
        if ($826) {
         $827 = HEAP32[$821>>2]|0;
         $828 = (($827) + 40|0);
         $829 = HEAP32[$828>>2]|0;
         __THREW__ = 0;
         (invoke_ii($829|0,($821|0))|0);
         $830 = __THREW__; __THREW__ = 0;
         $831 = $830&1;
         if ($831) {
          label = 20;
          break L4;
         }
        } else {
         $833 = (($823) + 1|0);
         HEAP32[$822>>2] = $833;
        }
        $832 = ($819|0)>(0);
        if ($832) {
         $$pre$i2$i$i75 = $$pre$i2$i$i75431458;$739 = $957;$778 = $959;$820 = $819;
        } else {
         $955 = $959;
         break;
        }
       }
      } else {
       $955 = $568;
      }
      $834 = HEAP32[$__wn>>2]|0;
      $835 = HEAP32[$__wb>>2]|0;
      $836 = ($834|0)==($835|0);
      if ($836) {
       label = 299;
       break L4;
      } else {
       $937 = $955;$938 = $941;$939 = $951;$940 = $952;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free204;
      }
      break;
     }
     default: {
      $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
     }
     }
    } while(0);
    L351: do {
     if ((label|0) == 40) {
      label = 0;
      $116 = ($__p$0353|0)==(3);
      if ($116) {
       $$lcssa293 = $934;$$lcssa309 = $933;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
       label = 301;
       break L4;
      } else {
       $$pre$i2$i$i39 = $936;$134 = $936;
      }
      while(1) {
       $117 = HEAP32[$__b>>2]|0;
       $118 = ($117|0)==(0|0);
       do {
        if ($118) {
         $132 = 0;
        } else {
         $119 = (($117) + 12|0);
         $120 = HEAP32[$119>>2]|0;
         $121 = (($117) + 16|0);
         $122 = HEAP32[$121>>2]|0;
         $123 = ($120|0)==($122|0);
         if ($123) {
          $124 = HEAP32[$117>>2]|0;
          $125 = (($124) + 36|0);
          $126 = HEAP32[$125>>2]|0;
          __THREW__ = 0;
          $127 = (invoke_ii($126|0,($117|0))|0);
          $128 = __THREW__; __THREW__ = 0;
          $129 = $128&1;
          if ($129) {
           label = 22;
           break L4;
          }
          $130 = ($127|0)==(-1);
          if ($130) {
           HEAP32[$__b>>2] = 0;
           $132 = 0;
           break;
          } else {
           $$pre$i$i$i35 = HEAP32[$__b>>2]|0;
           $132 = $$pre$i$i$i35;
           break;
          }
         } else {
          $132 = $117;
         }
        }
       } while(0);
       $131 = ($132|0)==(0|0);
       $133 = ($134|0)==(0|0);
       do {
        if ($133) {
         $$pre$i2$i$i39424 = $$pre$i2$i$i39;
         label = 53;
        } else {
         $135 = (($134) + 12|0);
         $136 = HEAP32[$135>>2]|0;
         $137 = (($134) + 16|0);
         $138 = HEAP32[$137>>2]|0;
         $139 = ($136|0)==($138|0);
         if (!($139)) {
          if ($131) {
           $$pre$i2$i$i39426 = $$pre$i2$i$i39;$942 = $134;
           break;
          } else {
           $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
           break L351;
          }
         }
         $140 = HEAP32[$134>>2]|0;
         $141 = (($140) + 36|0);
         $142 = HEAP32[$141>>2]|0;
         __THREW__ = 0;
         $143 = (invoke_ii($142|0,($134|0))|0);
         $144 = __THREW__; __THREW__ = 0;
         $145 = $144&1;
         if ($145) {
          label = 22;
          break L4;
         }
         $146 = ($143|0)==(-1);
         if ($146) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i39424 = 0;
          label = 53;
          break;
         } else {
          $147 = ($$pre$i2$i$i39|0)==(0|0);
          $tmp$i$i41 = $131 ^ $147;
          if ($tmp$i$i41) {
           $$pre$i2$i$i39426 = $$pre$i2$i$i39;$942 = $$pre$i2$i$i39;
           break;
          } else {
           $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
           break L351;
          }
         }
        }
       } while(0);
       if ((label|0) == 53) {
        label = 0;
        if ($131) {
         $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
         break L351;
        } else {
         $$pre$i2$i$i39426 = $$pre$i2$i$i39424;$942 = 0;
        }
       }
       $148 = HEAP32[$__b>>2]|0;
       $149 = (($148) + 12|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = (($148) + 16|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = ($150|0)==($152|0);
       if ($153) {
        $154 = HEAP32[$148>>2]|0;
        $155 = (($154) + 36|0);
        $156 = HEAP32[$155>>2]|0;
        __THREW__ = 0;
        $157 = (invoke_ii($156|0,($148|0))|0);
        $158 = __THREW__; __THREW__ = 0;
        $159 = $158&1;
        if ($159) {
         label = 22;
         break L4;
        } else {
         $$0$i$i45 = $157;
        }
       } else {
        $160 = HEAP8[$150]|0;
        $161 = $160&255;
        $$0$i$i45 = $161;
       }
       $162 = $$0$i$i45&255;
       $isascii1$i48 = ($162<<24>>24)>(-1);
       if (!($isascii1$i48)) {
        $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
        break L351;
       }
       $sext231 = $$0$i$i45 << 24;
       $163 = $sext231 >> 24;
       $164 = HEAP32[$4>>2]|0;
       $165 = (($164) + ($163<<1)|0);
       $166 = HEAP16[$165>>1]|0;
       $167 = $166 & 8192;
       $168 = ($167<<16>>16)==(0);
       if ($168) {
        $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
        break L351;
       }
       $169 = HEAP32[$__b>>2]|0;
       $170 = (($169) + 12|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = (($169) + 16|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($171|0)==($173|0);
       if ($174) {
        $175 = HEAP32[$169>>2]|0;
        $176 = (($175) + 40|0);
        $177 = HEAP32[$176>>2]|0;
        __THREW__ = 0;
        $178 = (invoke_ii($177|0,($169|0))|0);
        $179 = __THREW__; __THREW__ = 0;
        $180 = $179&1;
        if ($180) {
         label = 22;
         break L4;
        } else {
         $$0$i$i50 = $178;
        }
       } else {
        $181 = (($171) + 1|0);
        HEAP32[$170>>2] = $181;
        $182 = HEAP8[$171]|0;
        $183 = $182&255;
        $$0$i$i50 = $183;
       }
       $184 = $$0$i$i50&255;
       __THREW__ = 0;
       invoke_vii(49,($__spaces|0),($184|0));
       $185 = __THREW__; __THREW__ = 0;
       $186 = $185&1;
       if ($186) {
        label = 22;
        break L4;
       } else {
        $$pre$i2$i$i39 = $$pre$i2$i$i39426;$134 = $942;
       }
      }
     }
    } while(0);
    $839 = (($__p$0353) + 1)|0;
    $840 = ($839>>>0)<(4);
    if ($840) {
     $932 = $940;$933 = $939;$934 = $938;$935 = $937;$__p$0353 = $839;$__trailing_sign$0355 = $__trailing_sign$1;$free202349 = $free203;
    } else {
     $$lcssa293 = $938;$$lcssa309 = $939;$__trailing_sign$0$lcssa = $__trailing_sign$1;$free202$lcssa = $free203;
     label = 301;
     break;
    }
   }
   L386: do {
    if ((label|0) == 19) {
     $57 = ___cxa_find_matching_catch(-1,-1)|0;
     $58 = tempRet0;
     $70 = $$ph$ph;$free206 = $free206$ph$ph;$lpad$phi$index = $57;$lpad$phi$index7 = $58;
     break L1;
    }
    else if ((label|0) == 20) {
     $59 = ___cxa_find_matching_catch(-1,-1)|0;
     $60 = tempRet0;
     $70 = $941;$free206 = $free204;$lpad$phi$index = $59;$lpad$phi$index7 = $60;
     break L1;
    }
    else if ((label|0) == 21) {
     $61 = ___cxa_find_matching_catch(-1,-1)|0;
     $62 = tempRet0;
     $70 = $934;$free206 = $free202349;$lpad$phi$index = $61;$lpad$phi$index7 = $62;
     break L1;
    }
    else if ((label|0) == 22) {
     $63 = ___cxa_find_matching_catch(-1,-1)|0;
     $64 = tempRet0;
     $70 = $934;$free206 = $free202349;$lpad$phi$index = $63;$lpad$phi$index7 = $64;
     break L1;
    }
    else if ((label|0) == 23) {
     $65 = ___cxa_find_matching_catch(-1,-1)|0;
     $66 = tempRet0;
     $70 = $$ph$ph235$ph$ph$ph$ph;$free206 = $free206$ph$ph234$ph$ph$ph$ph;$lpad$phi$index = $65;$lpad$phi$index7 = $66;
     break L1;
    }
    else if ((label|0) == 39) {
     $114 = HEAP32[$__err>>2]|0;
     $115 = $114 | 4;
     HEAP32[$__err>>2] = $115;
     $$0 = 0;$927 = $934;$free208 = $free202349;
    }
    else if ((label|0) == 131) {
     $369 = HEAP32[$__err>>2]|0;
     $370 = $369 | 4;
     HEAP32[$__err>>2] = $370;
     $$0 = 0;$927 = $934;$free208 = $free202349;
    }
    else if ((label|0) == 183) {
     $513 = HEAP32[$__err>>2]|0;
     $514 = $513 | 4;
     HEAP32[$__err>>2] = $514;
     $$0 = 0;$927 = $934;$free208 = $free202349;
    }
    else if ((label|0) == 211) {
     $586 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $587 = tempRet0;
     ___clang_call_terminate($586);
     // unreachable;
    }
    else if ((label|0) == 256) {
     $708 = HEAP32[$__err>>2]|0;
     $709 = $708 | 4;
     HEAP32[$__err>>2] = $709;
     $$0 = 0;$927 = $941;$free208 = $free204;
    }
    else if ((label|0) == 279) {
     $774 = HEAP32[$__err>>2]|0;
     $775 = $774 | 4;
     HEAP32[$__err>>2] = $775;
     $$0 = 0;$927 = $941;$free208 = $free204;
    }
    else if ((label|0) == 288) {
     $796 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $797 = tempRet0;
     ___clang_call_terminate($796);
     // unreachable;
    }
    else if ((label|0) == 299) {
     $837 = HEAP32[$__err>>2]|0;
     $838 = $837 | 4;
     HEAP32[$__err>>2] = $838;
     $$0 = 0;$927 = $941;$free208 = $free204;
    }
    else if ((label|0) == 301) {
     $841 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L400: do {
      if (!($841)) {
       $842 = (($__trailing_sign$0$lcssa) + 1|0);
       $843 = (($__trailing_sign$0$lcssa) + 8|0);
       $844 = (($__trailing_sign$0$lcssa) + 4|0);
       $__i$0 = 1;
       L402: while(1) {
        $845 = HEAP8[$__trailing_sign$0$lcssa]|0;
        $846 = $845 & 1;
        $847 = ($846<<24>>24)==(0);
        if ($847) {
         $849 = $845&255;
         $850 = $849 >>> 1;
         $852 = $850;
        } else {
         $848 = HEAP32[$844>>2]|0;
         $852 = $848;
        }
        $851 = ($__i$0>>>0)<($852>>>0);
        if (!($851)) {
         break L400;
        }
        $853 = HEAP32[$__b>>2]|0;
        $854 = ($853|0)==(0|0);
        do {
         if ($854) {
          $868 = 0;
         } else {
          $855 = (($853) + 12|0);
          $856 = HEAP32[$855>>2]|0;
          $857 = (($853) + 16|0);
          $858 = HEAP32[$857>>2]|0;
          $859 = ($856|0)==($858|0);
          if ($859) {
           $860 = HEAP32[$853>>2]|0;
           $861 = (($860) + 36|0);
           $862 = HEAP32[$861>>2]|0;
           __THREW__ = 0;
           $863 = (invoke_ii($862|0,($853|0))|0);
           $864 = __THREW__; __THREW__ = 0;
           $865 = $864&1;
           if ($865) {
            label = 18;
            break L402;
           }
           $866 = ($863|0)==(-1);
           if ($866) {
            HEAP32[$__b>>2] = 0;
            $868 = 0;
            break;
           } else {
            $$pre$i$i$i = HEAP32[$__b>>2]|0;
            $868 = $$pre$i$i$i;
            break;
           }
          } else {
           $868 = $853;
          }
         }
        } while(0);
        $867 = ($868|0)==(0|0);
        $869 = HEAP32[$__e>>2]|0;
        $870 = ($869|0)==(0|0);
        do {
         if ($870) {
          label = 319;
         } else {
          $871 = (($869) + 12|0);
          $872 = HEAP32[$871>>2]|0;
          $873 = (($869) + 16|0);
          $874 = HEAP32[$873>>2]|0;
          $875 = ($872|0)==($874|0);
          if (!($875)) {
           if ($867) {
            break;
           } else {
            label = 327;
            break L402;
           }
          }
          $876 = HEAP32[$869>>2]|0;
          $877 = (($876) + 36|0);
          $878 = HEAP32[$877>>2]|0;
          __THREW__ = 0;
          $879 = (invoke_ii($878|0,($869|0))|0);
          $880 = __THREW__; __THREW__ = 0;
          $881 = $880&1;
          if ($881) {
           label = 18;
           break L402;
          }
          $882 = ($879|0)==(-1);
          if ($882) {
           HEAP32[$__e>>2] = 0;
           label = 319;
           break;
          } else {
           if ($867) {
            break;
           } else {
            label = 327;
            break L402;
           }
          }
         }
        } while(0);
        if ((label|0) == 319) {
         label = 0;
         if ($867) {
          label = 327;
          break;
         }
        }
        $883 = HEAP32[$__b>>2]|0;
        $884 = (($883) + 12|0);
        $885 = HEAP32[$884>>2]|0;
        $886 = (($883) + 16|0);
        $887 = HEAP32[$886>>2]|0;
        $888 = ($885|0)==($887|0);
        if ($888) {
         $889 = HEAP32[$883>>2]|0;
         $890 = (($889) + 36|0);
         $891 = HEAP32[$890>>2]|0;
         __THREW__ = 0;
         $892 = (invoke_ii($891|0,($883|0))|0);
         $893 = __THREW__; __THREW__ = 0;
         $894 = $893&1;
         if ($894) {
          label = 18;
          break;
         } else {
          $$0$i$i = $892;
         }
        } else {
         $895 = HEAP8[$885]|0;
         $896 = $895&255;
         $$0$i$i = $896;
        }
        $897 = $$0$i$i&255;
        $898 = HEAP8[$__trailing_sign$0$lcssa]|0;
        $899 = $898 & 1;
        $900 = ($899<<24>>24)==(0);
        if ($900) {
         $903 = $842;
        } else {
         $901 = HEAP32[$843>>2]|0;
         $903 = $901;
        }
        $902 = (($903) + ($__i$0)|0);
        $904 = HEAP8[$902]|0;
        $905 = ($897<<24>>24)==($904<<24>>24);
        if (!($905)) {
         label = 327;
         break;
        }
        $908 = (($__i$0) + 1)|0;
        $909 = HEAP32[$__b>>2]|0;
        $910 = (($909) + 12|0);
        $911 = HEAP32[$910>>2]|0;
        $912 = (($909) + 16|0);
        $913 = HEAP32[$912>>2]|0;
        $914 = ($911|0)==($913|0);
        if ($914) {
         $915 = HEAP32[$909>>2]|0;
         $916 = (($915) + 40|0);
         $917 = HEAP32[$916>>2]|0;
         __THREW__ = 0;
         (invoke_ii($917|0,($909|0))|0);
         $918 = __THREW__; __THREW__ = 0;
         $919 = $918&1;
         if ($919) {
          label = 18;
          break;
         } else {
          $__i$0 = $908;
          continue;
         }
        } else {
         $920 = (($911) + 1|0);
         HEAP32[$910>>2] = $920;
         $__i$0 = $908;
         continue;
        }
       }
       if ((label|0) == 18) {
        $55 = ___cxa_find_matching_catch(-1,-1)|0;
        $56 = tempRet0;
        $70 = $$lcssa293;$free206 = $free202$lcssa;$lpad$phi$index = $55;$lpad$phi$index7 = $56;
        break L1;
       }
       else if ((label|0) == 327) {
        $906 = HEAP32[$__err>>2]|0;
        $907 = $906 | 4;
        HEAP32[$__err>>2] = $907;
        $$0 = 0;$927 = $$lcssa293;$free208 = $free202$lcssa;
        break L386;
       }
      }
     } while(0);
     $921 = ($$lcssa293|0)==($$lcssa309|0);
     if ($921) {
      $$0 = 1;$927 = $$lcssa309;$free208 = $free202$lcssa;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$$lcssa293,$$lcssa309,$__et);
      $922 = HEAP32[$__et>>2]|0;
      $923 = ($922|0)==(0);
      if ($923) {
       $$0 = 1;$927 = $$lcssa293;$free208 = $free202$lcssa;
      } else {
       $924 = HEAP32[$__err>>2]|0;
       $925 = $924 | 4;
       HEAP32[$__err>>2] = $925;
       $$0 = 0;$927 = $$lcssa293;$free208 = $free202$lcssa;
      }
     }
    }
   } while(0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $926 = ($927|0)==(0|0);
   if ($926) {
    STACKTOP = sp;return ($$0|0);
   }
   __THREW__ = 0;
   invoke_vi($free208|0,($927|0));
   $928 = __THREW__; __THREW__ = 0;
   $929 = $928&1;
   if ($929) {
    $930 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $931 = tempRet0;
    ___clang_call_terminate($930);
    // unreachable;
   } else {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $69 = ($70|0)==(0|0);
 if ($69) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi($free206|0,($70|0));
 $71 = __THREW__; __THREW__ = 0;
 $72 = $71&1;
 if ($72) {
  $73 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $74 = tempRet0;
  ___clang_call_terminate($73);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(45,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1)|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  ___cxa_throw(($0|0),(15328|0),(11|0));
  // unreachable;
 }
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0117 = 0, $$0118 = 0, $$019 = 0, $$020 = 0, $$byval_copy = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__p$i$i$i$i = 0, $__w$0$lcssa = 0, $__w$09 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $$byval_copy = sp + 32|0;
 $__p$i$i$i$i = sp;
 $__wbuf = sp + 40|0;
 $__wb = sp + 16|0;
 $__wn = sp + 24|0;
 $__loc = sp + 28|0;
 $__neg = sp + 36|0;
 $0 = sp + 12|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 124;
 $2 = (($__wbuf) + 100|0);
 __THREW__ = 0;
 invoke_vii(48,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $52 = ___cxa_find_matching_catch(-1,-1)|0;
  $53 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$0117 = $53;$$019 = $52;$115 = $__wbuf;
 } else {
  $5 = HEAP32[$__loc>>2]|0;
  $6 = HEAP32[18792>>2]|0;
  $7 = ($6|0)==(-1);
  if ($7) {
   label = 4;
  } else {
   HEAP32[$__p$i$i$i$i>>2] = 18792;
   $8 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$8>>2] = (121);
   $9 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$9>>2] = 0;
   __THREW__ = 0;
   invoke_viii(6,(18792|0),($__p$i$i$i$i|0),(122|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    label = 4;
   }
  }
  L5: do {
   if ((label|0) == 4) {
    $12 = HEAP32[((18792 + 4|0))>>2]|0;
    $13 = (($12) + -1)|0;
    $14 = (($5) + 12|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (($5) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $15;
    $19 = $17;
    $20 = (($18) - ($19))|0;
    $21 = $20 >> 2;
    $22 = ($21>>>0)>($13>>>0);
    if ($22) {
     $23 = (($17) + ($13<<2)|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(0|0);
     if (!($25)) {
      HEAP8[$__neg] = 0;
      $29 = HEAP32[$__e>>2]|0;
      HEAP32[$0>>2] = $29;
      $30 = (($__iob) + 4|0);
      $31 = HEAP32[$30>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
      $32 = (invoke_iiiiiiiiiiii(1,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($31|0),($__err|0),($__neg|0),($24|0),($__wb|0),($__wn|0),($2|0))|0);
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       break;
      }
      if ($32) {
       $35 = HEAP8[$__v]|0;
       $36 = $35 & 1;
       $37 = ($36<<24>>24)==(0);
       if ($37) {
        $41 = (($__v) + 1|0);
        HEAP8[$41] = 0;
        HEAP8[$__v] = 0;
       } else {
        $38 = (($__v) + 8|0);
        $39 = HEAP32[$38>>2]|0;
        HEAP8[$39] = 0;
        $40 = (($__v) + 4|0);
        HEAP32[$40>>2] = 0;
       }
       $42 = HEAP8[$__neg]|0;
       $43 = ($42<<24>>24)==(0);
       if (!($43)) {
        $44 = HEAP32[$24>>2]|0;
        $45 = (($44) + 28|0);
        $46 = HEAP32[$45>>2]|0;
        __THREW__ = 0;
        $47 = (invoke_iii($46|0,($24|0),45)|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         break;
        }
        __THREW__ = 0;
        invoke_vii(49,($__v|0),($47|0));
        $50 = __THREW__; __THREW__ = 0;
        $51 = $50&1;
        if ($51) {
         break;
        }
       }
       $54 = HEAP32[$24>>2]|0;
       $55 = (($54) + 28|0);
       $56 = HEAP32[$55>>2]|0;
       __THREW__ = 0;
       $57 = (invoke_iii($56|0,($24|0),48)|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        break;
       }
       $60 = HEAP32[$__wb>>2]|0;
       $61 = HEAP32[$__wn>>2]|0;
       $62 = (($61) + -1|0);
       $63 = ($60>>>0)<($62>>>0);
       L22: do {
        if ($63) {
         $__w$09 = $60;
         while(1) {
          $66 = HEAP8[$__w$09]|0;
          $67 = ($66<<24>>24)==($57<<24>>24);
          $65 = (($__w$09) + 1|0);
          if (!($67)) {
           $__w$0$lcssa = $__w$09;
           break L22;
          }
          $64 = ($65>>>0)<($62>>>0);
          if ($64) {
           $__w$09 = $65;
          } else {
           $__w$0$lcssa = $65;
           break;
          }
         }
        } else {
         $__w$0$lcssa = $60;
        }
       } while(0);
       __THREW__ = 0;
       (invoke_iiii(27,($__v|0),($__w$0$lcssa|0),($61|0))|0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        break;
       }
      }
      $70 = HEAP32[$__b>>2]|0;
      $71 = ($70|0)==(0|0);
      if ($71) {
       $85 = 0;
      } else {
       $72 = (($70) + 12|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = (($70) + 16|0);
       $75 = HEAP32[$74>>2]|0;
       $76 = ($73|0)==($75|0);
       if ($76) {
        $77 = HEAP32[$70>>2]|0;
        $78 = (($77) + 36|0);
        $79 = HEAP32[$78>>2]|0;
        __THREW__ = 0;
        $80 = (invoke_ii($79|0,($70|0))|0);
        $81 = __THREW__; __THREW__ = 0;
        $82 = $81&1;
        if ($82) {
         break;
        }
        $83 = ($80|0)==(-1);
        if ($83) {
         HEAP32[$__b>>2] = 0;
         $85 = 0;
        } else {
         $85 = $70;
        }
       } else {
        $85 = $70;
       }
      }
      $84 = ($85|0)==(0|0);
      $86 = ($29|0)==(0|0);
      do {
       if ($86) {
        label = 33;
       } else {
        $87 = (($29) + 12|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = (($29) + 16|0);
        $90 = HEAP32[$89>>2]|0;
        $91 = ($88|0)==($90|0);
        if (!($91)) {
         if ($84) {
          break;
         } else {
          label = 35;
          break;
         }
        }
        $92 = HEAP32[$29>>2]|0;
        $93 = (($92) + 36|0);
        $94 = HEAP32[$93>>2]|0;
        __THREW__ = 0;
        $95 = (invoke_ii($94|0,($29|0))|0);
        $96 = __THREW__; __THREW__ = 0;
        $97 = $96&1;
        if ($97) {
         break L5;
        }
        $98 = ($95|0)==(-1);
        if ($98) {
         HEAP32[$__e>>2] = 0;
         label = 33;
         break;
        } else {
         $99 = ($29|0)==(0|0);
         $tmp$i$i = $84 ^ $99;
         if ($tmp$i$i) {
          break;
         } else {
          label = 35;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 33) {
       if ($84) {
        label = 35;
       }
      }
      if ((label|0) == 35) {
       $100 = HEAP32[$__err>>2]|0;
       $101 = $100 | 2;
       HEAP32[$__err>>2] = $101;
      }
      HEAP32[$agg$result>>2] = $85;
      $102 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($102)|0);
      $103 = HEAP32[$__wb>>2]|0;
      HEAP32[$__wb>>2] = 0;
      $104 = ($103|0)==(0|0);
      if ($104) {
       STACKTOP = sp;return;
      }
      $105 = HEAP32[$1>>2]|0;
      __THREW__ = 0;
      invoke_vi($105|0,($103|0));
      $106 = __THREW__; __THREW__ = 0;
      $107 = $106&1;
      if ($107) {
       $108 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $109 = tempRet0;
       ___clang_call_terminate($108);
       // unreachable;
      } else {
       STACKTOP = sp;return;
      }
     }
    }
    $26 = (___cxa_allocate_exception(4)|0);
    __ZNSt8bad_castC2Ev($26);
    __THREW__ = 0;
    invoke_viii(7,($26|0),(26752|0),(102|0));
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     // unreachable;
    }
   }
  } while(0);
  $110 = ___cxa_find_matching_catch(-1,-1)|0;
  $111 = tempRet0;
  $112 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($112)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $113 = ($$pre|0)==(0|0);
  if ($113) {
   $$0118 = $111;$$020 = $110;
   ___resumeException($$020|0);
   // unreachable;
  } else {
   $$0117 = $111;$$019 = $110;$115 = $$pre;
  }
 }
 $114 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi($114|0,($115|0));
 $116 = __THREW__; __THREW__ = 0;
 $117 = $116&1;
 if ($117) {
  $118 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $119 = tempRet0;
  ___clang_call_terminate($118);
  // unreachable;
 } else {
  $$0118 = $$0117;$$020 = $$019;
  ___resumeException($$020|0);
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__p$02 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep3 = 0, $scevgep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $15 = 10;$16 = $5;$40 = $1;
 } else {
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $15 = $phitmp$i;$16 = $7;$40 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = ($__last|0)==($__first|0);
 if ($13) {
  STACKTOP = sp;return ($this|0);
 }
 $14 = (($15) - ($16))|0;
 $17 = ($14>>>0)<($12>>>0);
 if ($17) {
  $18 = (($16) + ($12))|0;
  $19 = (($18) - ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
  $$pre = HEAP8[$this]|0;
  $21 = $$pre;
 } else {
  $21 = $40;
 }
 $20 = $21 & 1;
 $22 = ($20<<24>>24)==(0);
 if ($22) {
  $25 = (($this) + 1|0);
  $27 = $25;
 } else {
  $23 = (($this) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 }
 $26 = (($27) + ($16)|0);
 $28 = (($16) - ($0))|0;
 $scevgep = (($__last) + ($28)|0);
 $scevgep3 = $scevgep;
 $$01 = $__first;$__p$02 = $26;
 while(1) {
  $29 = HEAP8[$$01]|0;
  HEAP8[$__p$02] = $29;
  $30 = (($__p$02) + 1|0);
  $31 = (($$01) + 1|0);
  $32 = ($31|0)==($__last|0);
  if ($32) {
   break;
  } else {
   $$01 = $31;$__p$02 = $30;
  }
 }
 $scevgep4 = (($27) + ($scevgep3)|0);
 HEAP8[$scevgep4] = 0;
 $33 = (($16) + ($12))|0;
 $34 = HEAP8[$this]|0;
 $35 = $34 & 1;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $38 = $33 << 1;
  $39 = $38&255;
  HEAP8[$this] = $39;
  STACKTOP = sp;return ($this|0);
 } else {
  $37 = (($this) + 4|0);
  HEAP32[$37>>2] = $33;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i8 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $__p$i$i$i$i8 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 116|0;
 $1 = sp + 104|0;
 $2 = sp + 92|0;
 $3 = sp + 80|0;
 $4 = sp + 120|0;
 $5 = sp + 52|0;
 $6 = sp + 40|0;
 $7 = sp + 28|0;
 $8 = sp + 56|0;
 $9 = sp + 68|0;
 if ($__intl) {
  $10 = HEAP32[$__loc>>2]|0;
  $11 = HEAP32[18232>>2]|0;
  $12 = ($11|0)==(-1);
  if (!($12)) {
   HEAP32[$__p$i$i$i$i>>2] = 18232;
   $13 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$13>>2] = (121);
   $14 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$14>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(18232,$__p$i$i$i$i,122);
  }
  $15 = HEAP32[((18232 + 4|0))>>2]|0;
  $16 = (($15) + -1)|0;
  $17 = (($10) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($10) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $18;
  $22 = $20;
  $23 = (($21) - ($22))|0;
  $24 = $23 >> 2;
  $25 = ($24>>>0)>($16>>>0);
  if (!($25)) {
   $29 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($29);
   ___cxa_throw(($29|0),(26752|0),(102|0));
   // unreachable;
  }
  $26 = (($20) + ($16<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0|0);
  if ($28) {
   $29 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($29);
   ___cxa_throw(($29|0),(26752|0),(102|0));
   // unreachable;
  }
  $30 = HEAP32[$27>>2]|0;
  $31 = (($30) + 44|0);
  $32 = HEAP32[$31>>2]|0;
  FUNCTION_TABLE_vii[$32 & 63]($0,$27);
  $33 = HEAP32[$0>>2]|0;
  HEAP8[$__pat]=$33&255;HEAP8[$__pat+1|0]=($33>>8)&255;HEAP8[$__pat+2|0]=($33>>16)&255;HEAP8[$__pat+3|0]=$33>>24;
  $34 = HEAP32[$27>>2]|0;
  $35 = (($34) + 32|0);
  $36 = HEAP32[$35>>2]|0;
  FUNCTION_TABLE_vii[$36 & 63]($1,$27);
  $37 = HEAP8[$__nsn]|0;
  $38 = $37 & 1;
  $39 = ($38<<24>>24)==(0);
  if ($39) {
   $43 = (($__nsn) + 1|0);
   HEAP8[$43] = 0;
   HEAP8[$__nsn] = 0;
  } else {
   $40 = (($__nsn) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   HEAP8[$41] = 0;
   $42 = (($__nsn) + 4|0);
   HEAP32[$42>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(50,($__nsn|0),0);
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  if ($45) {
   $46 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $47 = tempRet0;
   ___clang_call_terminate($46);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  $48 = HEAP32[$27>>2]|0;
  $49 = (($48) + 28|0);
  $50 = HEAP32[$49>>2]|0;
  FUNCTION_TABLE_vii[$50 & 63]($2,$27);
  $51 = HEAP8[$__psn]|0;
  $52 = $51 & 1;
  $53 = ($52<<24>>24)==(0);
  if ($53) {
   $57 = (($__psn) + 1|0);
   HEAP8[$57] = 0;
   HEAP8[$__psn] = 0;
  } else {
   $54 = (($__psn) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   HEAP8[$55] = 0;
   $56 = (($__psn) + 4|0);
   HEAP32[$56>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(50,($__psn|0),0);
  $58 = __THREW__; __THREW__ = 0;
  $59 = $58&1;
  if ($59) {
   $60 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $61 = tempRet0;
   ___clang_call_terminate($60);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
  $62 = HEAP32[$27>>2]|0;
  $63 = (($62) + 12|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (FUNCTION_TABLE_ii[$64 & 127]($27)|0);
  HEAP8[$__dp] = $65;
  $66 = HEAP32[$27>>2]|0;
  $67 = (($66) + 16|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (FUNCTION_TABLE_ii[$68 & 127]($27)|0);
  HEAP8[$__ts] = $69;
  $70 = HEAP32[$27>>2]|0;
  $71 = (($70) + 20|0);
  $72 = HEAP32[$71>>2]|0;
  FUNCTION_TABLE_vii[$72 & 63]($3,$27);
  $73 = HEAP8[$__grp]|0;
  $74 = $73 & 1;
  $75 = ($74<<24>>24)==(0);
  if ($75) {
   $79 = (($__grp) + 1|0);
   HEAP8[$79] = 0;
   HEAP8[$__grp] = 0;
  } else {
   $76 = (($__grp) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   HEAP8[$77] = 0;
   $78 = (($__grp) + 4|0);
   HEAP32[$78>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(50,($__grp|0),0);
  $80 = __THREW__; __THREW__ = 0;
  $81 = $80&1;
  if ($81) {
   $82 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $83 = tempRet0;
   ___clang_call_terminate($82);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  $84 = HEAP32[$27>>2]|0;
  $85 = (($84) + 24|0);
  $86 = HEAP32[$85>>2]|0;
  FUNCTION_TABLE_vii[$86 & 63]($4,$27);
  $87 = HEAP8[$__sym]|0;
  $88 = $87 & 1;
  $89 = ($88<<24>>24)==(0);
  if ($89) {
   $93 = (($__sym) + 1|0);
   HEAP8[$93] = 0;
   HEAP8[$__sym] = 0;
  } else {
   $90 = (($__sym) + 8|0);
   $91 = HEAP32[$90>>2]|0;
   HEAP8[$91] = 0;
   $92 = (($__sym) + 4|0);
   HEAP32[$92>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(50,($__sym|0),0);
  $94 = __THREW__; __THREW__ = 0;
  $95 = $94&1;
  if ($95) {
   $96 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $97 = tempRet0;
   ___clang_call_terminate($96);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $98 = HEAP32[$27>>2]|0;
  $99 = (($98) + 36|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (FUNCTION_TABLE_ii[$100 & 127]($27)|0);
  $storemerge = $101;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $102 = HEAP32[$__loc>>2]|0;
  $103 = HEAP32[18168>>2]|0;
  $104 = ($103|0)==(-1);
  if (!($104)) {
   HEAP32[$__p$i$i$i$i8>>2] = 18168;
   $105 = (($__p$i$i$i$i8) + 4|0);
   HEAP32[$105>>2] = (121);
   $106 = (($__p$i$i$i$i8) + 8|0);
   HEAP32[$106>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(18168,$__p$i$i$i$i8,122);
  }
  $107 = HEAP32[((18168 + 4|0))>>2]|0;
  $108 = (($107) + -1)|0;
  $109 = (($102) + 12|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($102) + 8|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = $110;
  $114 = $112;
  $115 = (($113) - ($114))|0;
  $116 = $115 >> 2;
  $117 = ($116>>>0)>($108>>>0);
  if (!($117)) {
   $121 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($121);
   ___cxa_throw(($121|0),(26752|0),(102|0));
   // unreachable;
  }
  $118 = (($112) + ($108<<2)|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ($119|0)==(0|0);
  if ($120) {
   $121 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($121);
   ___cxa_throw(($121|0),(26752|0),(102|0));
   // unreachable;
  }
  $122 = HEAP32[$119>>2]|0;
  $123 = (($122) + 44|0);
  $124 = HEAP32[$123>>2]|0;
  FUNCTION_TABLE_vii[$124 & 63]($5,$119);
  $125 = HEAP32[$5>>2]|0;
  HEAP8[$__pat]=$125&255;HEAP8[$__pat+1|0]=($125>>8)&255;HEAP8[$__pat+2|0]=($125>>16)&255;HEAP8[$__pat+3|0]=$125>>24;
  $126 = HEAP32[$119>>2]|0;
  $127 = (($126) + 32|0);
  $128 = HEAP32[$127>>2]|0;
  FUNCTION_TABLE_vii[$128 & 63]($6,$119);
  $129 = HEAP8[$__nsn]|0;
  $130 = $129 & 1;
  $131 = ($130<<24>>24)==(0);
  if ($131) {
   $135 = (($__nsn) + 1|0);
   HEAP8[$135] = 0;
   HEAP8[$__nsn] = 0;
  } else {
   $132 = (($__nsn) + 8|0);
   $133 = HEAP32[$132>>2]|0;
   HEAP8[$133] = 0;
   $134 = (($__nsn) + 4|0);
   HEAP32[$134>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(50,($__nsn|0),0);
  $136 = __THREW__; __THREW__ = 0;
  $137 = $136&1;
  if ($137) {
   $138 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $139 = tempRet0;
   ___clang_call_terminate($138);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
  $140 = HEAP32[$119>>2]|0;
  $141 = (($140) + 28|0);
  $142 = HEAP32[$141>>2]|0;
  FUNCTION_TABLE_vii[$142 & 63]($7,$119);
  $143 = HEAP8[$__psn]|0;
  $144 = $143 & 1;
  $145 = ($144<<24>>24)==(0);
  if ($145) {
   $149 = (($__psn) + 1|0);
   HEAP8[$149] = 0;
   HEAP8[$__psn] = 0;
  } else {
   $146 = (($__psn) + 8|0);
   $147 = HEAP32[$146>>2]|0;
   HEAP8[$147] = 0;
   $148 = (($__psn) + 4|0);
   HEAP32[$148>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(50,($__psn|0),0);
  $150 = __THREW__; __THREW__ = 0;
  $151 = $150&1;
  if ($151) {
   $152 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $153 = tempRet0;
   ___clang_call_terminate($152);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
  $154 = HEAP32[$119>>2]|0;
  $155 = (($154) + 12|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = (FUNCTION_TABLE_ii[$156 & 127]($119)|0);
  HEAP8[$__dp] = $157;
  $158 = HEAP32[$119>>2]|0;
  $159 = (($158) + 16|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (FUNCTION_TABLE_ii[$160 & 127]($119)|0);
  HEAP8[$__ts] = $161;
  $162 = HEAP32[$119>>2]|0;
  $163 = (($162) + 20|0);
  $164 = HEAP32[$163>>2]|0;
  FUNCTION_TABLE_vii[$164 & 63]($8,$119);
  $165 = HEAP8[$__grp]|0;
  $166 = $165 & 1;
  $167 = ($166<<24>>24)==(0);
  if ($167) {
   $171 = (($__grp) + 1|0);
   HEAP8[$171] = 0;
   HEAP8[$__grp] = 0;
  } else {
   $168 = (($__grp) + 8|0);
   $169 = HEAP32[$168>>2]|0;
   HEAP8[$169] = 0;
   $170 = (($__grp) + 4|0);
   HEAP32[$170>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(50,($__grp|0),0);
  $172 = __THREW__; __THREW__ = 0;
  $173 = $172&1;
  if ($173) {
   $174 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $175 = tempRet0;
   ___clang_call_terminate($174);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
  $176 = HEAP32[$119>>2]|0;
  $177 = (($176) + 24|0);
  $178 = HEAP32[$177>>2]|0;
  FUNCTION_TABLE_vii[$178 & 63]($9,$119);
  $179 = HEAP8[$__sym]|0;
  $180 = $179 & 1;
  $181 = ($180<<24>>24)==(0);
  if ($181) {
   $185 = (($__sym) + 1|0);
   HEAP8[$185] = 0;
   HEAP8[$__sym] = 0;
  } else {
   $182 = (($__sym) + 8|0);
   $183 = HEAP32[$182>>2]|0;
   HEAP8[$183] = 0;
   $184 = (($__sym) + 4|0);
   HEAP32[$184>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(50,($__sym|0),0);
  $186 = __THREW__; __THREW__ = 0;
  $187 = $186&1;
  if ($187) {
   $188 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $189 = tempRet0;
   ___clang_call_terminate($188);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
  $190 = HEAP32[$119>>2]|0;
  $191 = (($190) + 36|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = (FUNCTION_TABLE_ii[$192 & 127]($119)|0);
  $storemerge = $193;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$012$i$i = 0, $$__ig$0 = 0, $$lcssa6 = 0, $$not = 0, $$not9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ig$011 = 0, $__r$012 = 0;
 var $or$cond = 0, $or$cond2 = 0, $or$cond2$lcssa = 0, $or$cond210 = 0, $or$cond213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__grouping]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($__grouping) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $9 = ($__g|0)==($__g_end|0);
 if ($9) {
  $19 = $0;
 } else {
  $10 = (($__g_end) + -4|0);
  $11 = ($10>>>0)>($__g>>>0);
  if ($11) {
   $$012$i$i = $__g;$14 = $10;
   while(1) {
    $12 = HEAP32[$$012$i$i>>2]|0;
    $13 = HEAP32[$14>>2]|0;
    HEAP32[$$012$i$i>>2] = $13;
    HEAP32[$14>>2] = $12;
    $15 = (($$012$i$i) + 4|0);
    $16 = (($14) + -4|0);
    $17 = ($15>>>0)<($16>>>0);
    if ($17) {
     $$012$i$i = $15;$14 = $16;
    } else {
     break;
    }
   }
   $$pre = HEAP8[$__grouping]|0;
   $19 = $$pre;
  } else {
   $19 = $0;
  }
 }
 $18 = $19 & 1;
 $20 = ($18<<24>>24)==(0);
 if ($20) {
  $25 = (($__grouping) + 1|0);
  $26 = $19&255;
  $27 = $26 >>> 1;
  $31 = $25;$34 = $27;
 } else {
  $21 = (($__grouping) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($__grouping) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $31 = $22;$34 = $24;
 }
 $28 = (($__g_end) + -4|0);
 $29 = ($28>>>0)>($__g>>>0);
 $30 = HEAP8[$31]|0;
 $$not9 = ($30<<24>>24)<(1);
 $32 = ($30<<24>>24)==(127);
 $or$cond210 = $$not9 | $32;
 L18: do {
  if ($29) {
   $33 = (($31) + ($34)|0);
   $35 = $33;
   $37 = $30;$__ig$011 = $31;$__r$012 = $__g;$or$cond213 = $or$cond210;
   while(1) {
    if (!($or$cond213)) {
     $36 = $37 << 24 >> 24;
     $38 = HEAP32[$__r$012>>2]|0;
     $39 = ($36|0)==($38|0);
     if (!($39)) {
      break;
     }
    }
    $40 = $__ig$011;
    $41 = (($35) - ($40))|0;
    $42 = ($41|0)>(1);
    $43 = (($__ig$011) + 1|0);
    $$__ig$0 = $42 ? $43 : $__ig$011;
    $44 = (($__r$012) + 4|0);
    $45 = ($44>>>0)<($28>>>0);
    $46 = HEAP8[$$__ig$0]|0;
    $$not = ($46<<24>>24)<(1);
    $47 = ($46<<24>>24)==(127);
    $or$cond2 = $$not | $47;
    if ($45) {
     $37 = $46;$__ig$011 = $$__ig$0;$__r$012 = $44;$or$cond213 = $or$cond2;
    } else {
     $$lcssa6 = $46;$or$cond2$lcssa = $or$cond2;
     break L18;
    }
   }
   HEAP32[$__err>>2] = 4;
   STACKTOP = sp;return;
  } else {
   $$lcssa6 = $30;$or$cond2$lcssa = $or$cond210;
  }
 } while(0);
 if ($or$cond2$lcssa) {
  STACKTOP = sp;return;
 }
 $48 = $$lcssa6 << 24 >> 24;
 $49 = HEAP32[$28>>2]|0;
 $50 = ($48>>>0)<($49>>>0);
 $51 = ($49|0)==(0);
 $or$cond = $50 | $51;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 HEAP32[$__err>>2] = 4;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$116 = 0, $$117 = 0, $$1214 = 0, $$1215 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre19 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0;
 var $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$210 = 0, $__neg = 0, $__p$i$i$i$i = 0, $__w$011 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0;
 $$byval_copy = sp + 68|0;
 $vararg_buffer = sp;
 $__p$i$i$i$i = sp + 8|0;
 $__wbuf = sp + 88|0;
 $__wb = sp + 80|0;
 $__wn = sp + 76|0;
 $__loc = sp + 72|0;
 $__neg = sp + 588|0;
 $0 = sp + 64|0;
 $__atoms = sp + 24|0;
 $__nbuf = sp + 488|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 124;
 $2 = (($__wbuf) + 400|0);
 __THREW__ = 0;
 invoke_vii(48,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $52 = ___cxa_find_matching_catch(-1,-1)|0;
   $53 = tempRet0;
   HEAP32[$__wb>>2] = 0;
   $$116 = $52;$$1214 = $53;$134 = 124;$135 = $__wbuf;
  } else {
   $5 = HEAP32[$__loc>>2]|0;
   $6 = HEAP32[18784>>2]|0;
   $7 = ($6|0)==(-1);
   if ($7) {
    label = 4;
   } else {
    HEAP32[$__p$i$i$i$i>>2] = 18784;
    $8 = (($__p$i$i$i$i) + 4|0);
    HEAP32[$8>>2] = (121);
    $9 = (($__p$i$i$i$i) + 8|0);
    HEAP32[$9>>2] = 0;
    __THREW__ = 0;
    invoke_viii(6,(18784|0),($__p$i$i$i$i|0),(122|0));
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     label = 15;
    } else {
     label = 4;
    }
   }
   L6: do {
    if ((label|0) == 4) {
     $12 = HEAP32[((18784 + 4|0))>>2]|0;
     $13 = (($12) + -1)|0;
     $14 = (($5) + 12|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (($5) + 8|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = $15;
     $19 = $17;
     $20 = (($18) - ($19))|0;
     $21 = $20 >> 2;
     $22 = ($21>>>0)>($13>>>0);
     if ($22) {
      $23 = (($17) + ($13<<2)|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(0|0);
      if (!($25)) {
       HEAP8[$__neg] = 0;
       $29 = HEAP32[$__e>>2]|0;
       HEAP32[$0>>2] = $29;
       $30 = (($__iob) + 4|0);
       $31 = HEAP32[$30>>2]|0;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
       $32 = (invoke_iiiiiiiiiiii(2,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($31|0),($__err|0),($__neg|0),($24|0),($__wb|0),($__wn|0),($2|0))|0);
       $33 = __THREW__; __THREW__ = 0;
       $34 = $33&1;
       if ($34) {
        label = 15;
        break;
       }
       L12: do {
        if ($32) {
         $35 = HEAP32[$24>>2]|0;
         $36 = (($35) + 48|0);
         $37 = HEAP32[$36>>2]|0;
         __THREW__ = 0;
         (invoke_iiiii($37|0,($24|0),(18488|0),(((18488 + 10|0))|0),($__atoms|0))|0);
         $38 = __THREW__; __THREW__ = 0;
         $39 = $38&1;
         if ($39) {
          label = 15;
          break L6;
         }
         $40 = HEAP32[$__wn>>2]|0;
         $41 = HEAP32[$__wb>>2]|0;
         $42 = $40;
         $43 = $41;
         $44 = (($42) - ($43))|0;
         $45 = ($44|0)>(392);
         if ($45) {
          $46 = $44 >> 2;
          $47 = (($46) + 2)|0;
          $48 = (_malloc($47)|0);
          $49 = ($48|0)==(0|0);
          if ($49) {
           __THREW__ = 0;
           invoke_v(4);
           $50 = __THREW__; __THREW__ = 0;
           $51 = $50&1;
           if ($51) {
            $140 = 0;
            label = 16;
           } else {
            $90 = 0;$__nc$0 = 0;
            label = 19;
           }
          } else {
           $90 = $48;$__nc$0 = $48;
           label = 19;
          }
         } else {
          $90 = 0;$__nc$0 = $__nbuf;
          label = 19;
         }
         do {
          if ((label|0) == 19) {
           $60 = HEAP8[$__neg]|0;
           $61 = ($60<<24>>24)==(0);
           if ($61) {
            $__nc$1 = $__nc$0;
           } else {
            $62 = (($__nc$0) + 1|0);
            HEAP8[$__nc$0] = 45;
            $__nc$1 = $62;
           }
           $63 = ($41>>>0)<($40>>>0);
           if ($63) {
            $64 = (($__atoms) + 40|0);
            $65 = $__atoms;
            $__nc$210 = $__nc$1;$__w$011 = $41;
            while(1) {
             $66 = HEAP32[$__w$011>>2]|0;
             $$01$i = $__atoms;
             while(1) {
              $69 = HEAP32[$$01$i>>2]|0;
              $70 = ($69|0)==($66|0);
              $68 = (($$01$i) + 4|0);
              if ($70) {
               $$0$lcssa$i = $$01$i;
               break;
              }
              $67 = ($68|0)==($64|0);
              if ($67) {
               $$0$lcssa$i = $64;
               break;
              } else {
               $$01$i = $68;
              }
             }
             $71 = $$0$lcssa$i;
             $72 = (($71) - ($65))|0;
             $73 = $72 >> 2;
             $74 = (18488 + ($73)|0);
             $75 = HEAP8[$74]|0;
             HEAP8[$__nc$210] = $75;
             $76 = (($__w$011) + 4|0);
             $77 = (($__nc$210) + 1|0);
             $78 = HEAP32[$__wn>>2]|0;
             $79 = ($76>>>0)<($78>>>0);
             if ($79) {
              $__nc$210 = $77;$__w$011 = $76;
             } else {
              $__nc$2$lcssa = $77;
              break;
             }
            }
           } else {
            $__nc$2$lcssa = $__nc$1;
           }
           HEAP8[$__nc$2$lcssa] = 0;
           HEAP32[$vararg_buffer>>2] = $__v;
           $80 = (_sscanf(($__nbuf|0),(18424|0),($vararg_buffer|0))|0);
           $81 = ($80|0)==(1);
           if ($81) {
            $89 = ($90|0)==(0|0);
            if ($89) {
             break L12;
            }
            _free($90);
            break L12;
           }
           $82 = (___cxa_allocate_exception(8)|0);
           __THREW__ = 0;
           invoke_vii(45,($82|0),(18432|0));
           $83 = __THREW__; __THREW__ = 0;
           $84 = $83&1;
           if ($84) {
            $87 = ___cxa_find_matching_catch(-1,-1)|0;
            $88 = tempRet0;
            ___cxa_free_exception(($82|0));
            $59 = $90;$eh$lpad$body$index2Z2D = $88;$eh$lpad$body$indexZ2D = $87;
            break;
           }
           __THREW__ = 0;
           invoke_viii(7,($82|0),(15328|0),(11|0));
           $85 = __THREW__; __THREW__ = 0;
           $86 = $85&1;
           if ($86) {
            $140 = $90;
            label = 16;
           } else {
            // unreachable;
           }
          }
         } while(0);
         if ((label|0) == 16) {
          $56 = ___cxa_find_matching_catch(-1,-1)|0;
          $57 = tempRet0;
          $59 = $140;$eh$lpad$body$index2Z2D = $57;$eh$lpad$body$indexZ2D = $56;
         }
         $58 = ($59|0)==(0|0);
         if ($58) {
          $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index2Z2D;
          break L6;
         }
         _free($59);
         $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index2Z2D;
         break L6;
        }
       } while(0);
       $91 = HEAP32[$__b>>2]|0;
       $92 = ($91|0)==(0|0);
       do {
        if ($92) {
         $141 = 1;
        } else {
         $93 = (($91) + 12|0);
         $94 = HEAP32[$93>>2]|0;
         $95 = (($91) + 16|0);
         $96 = HEAP32[$95>>2]|0;
         $97 = ($94|0)==($96|0);
         if ($97) {
          $98 = HEAP32[$91>>2]|0;
          $99 = (($98) + 36|0);
          $100 = HEAP32[$99>>2]|0;
          __THREW__ = 0;
          $101 = (invoke_ii($100|0,($91|0))|0);
          $102 = __THREW__; __THREW__ = 0;
          $103 = $102&1;
          if ($103) {
           label = 15;
           break L6;
          } else {
           $$0$i$i$i$i = $101;
          }
         } else {
          $104 = HEAP32[$94>>2]|0;
          $$0$i$i$i$i = $104;
         }
         $105 = ($$0$i$i$i$i|0)==(-1);
         if ($105) {
          HEAP32[$__b>>2] = 0;
          $141 = 1;
          break;
         } else {
          $$pre$i$i$i = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
          $141 = $phitmp$i$i$i;
          break;
         }
        }
       } while(0);
       $106 = HEAP32[$__e>>2]|0;
       $107 = ($106|0)==(0|0);
       do {
        if ($107) {
         label = 47;
        } else {
         $108 = (($106) + 12|0);
         $109 = HEAP32[$108>>2]|0;
         $110 = (($106) + 16|0);
         $111 = HEAP32[$110>>2]|0;
         $112 = ($109|0)==($111|0);
         if ($112) {
          $113 = HEAP32[$106>>2]|0;
          $114 = (($113) + 36|0);
          $115 = HEAP32[$114>>2]|0;
          __THREW__ = 0;
          $116 = (invoke_ii($115|0,($106|0))|0);
          $117 = __THREW__; __THREW__ = 0;
          $118 = $117&1;
          if ($118) {
           label = 15;
           break L6;
          } else {
           $$0$i$i1$i$i = $116;
          }
         } else {
          $119 = HEAP32[$109>>2]|0;
          $$0$i$i1$i$i = $119;
         }
         $120 = ($$0$i$i1$i$i|0)==(-1);
         if ($120) {
          HEAP32[$__e>>2] = 0;
          label = 47;
          break;
         } else {
          if ($141) {
           break;
          } else {
           label = 49;
           break;
          }
         }
        }
       } while(0);
       if ((label|0) == 47) {
        if ($141) {
         label = 49;
        }
       }
       if ((label|0) == 49) {
        $121 = HEAP32[$__err>>2]|0;
        $122 = $121 | 2;
        HEAP32[$__err>>2] = $122;
       }
       $123 = HEAP32[$__b>>2]|0;
       HEAP32[$agg$result>>2] = $123;
       $124 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($124)|0);
       $125 = HEAP32[$__wb>>2]|0;
       HEAP32[$__wb>>2] = 0;
       $126 = ($125|0)==(0|0);
       if ($126) {
        STACKTOP = sp;return;
       }
       $127 = HEAP32[$1>>2]|0;
       __THREW__ = 0;
       invoke_vi($127|0,($125|0));
       $128 = __THREW__; __THREW__ = 0;
       $129 = $128&1;
       if ($129) {
        $130 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $131 = tempRet0;
        ___clang_call_terminate($130);
        // unreachable;
       } else {
        STACKTOP = sp;return;
       }
      }
     }
     $26 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($26);
     __THREW__ = 0;
     invoke_viii(7,($26|0),(26752|0),(102|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      label = 15;
     } else {
      // unreachable;
     }
    }
   } while(0);
   if ((label|0) == 15) {
    $54 = ___cxa_find_matching_catch(-1,-1)|0;
    $55 = tempRet0;
    $$0 = $54;$$01 = $55;
   }
   $132 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($132)|0);
   $$pre = HEAP32[$__wb>>2]|0;
   HEAP32[$__wb>>2] = 0;
   $133 = ($$pre|0)==(0|0);
   if ($133) {
    $$117 = $$0;$$1215 = $$01;
    ___resumeException($$117|0);
    // unreachable;
   } else {
    $$pre19 = HEAP32[$1>>2]|0;
    $$116 = $$0;$$1214 = $$01;$134 = $$pre19;$135 = $$pre;
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi($134|0,($135|0));
 $136 = __THREW__; __THREW__ = 0;
 $137 = $136&1;
 if ($137) {
  $138 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $139 = tempRet0;
  ___clang_call_terminate($138);
  // unreachable;
 } else {
  $$117 = $$116;$$1215 = $$1214;
  ___resumeException($$117|0);
  // unreachable;
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$$i = 0, $$$i138 = 0, $$$i149 = 0, $$$i159 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i123 = 0, $$0$i$i$i$i177 = 0, $$0$i$i$i$i18 = 0, $$0$i$i$i$i192 = 0, $$0$i$i$i$i39 = 0, $$0$i$i$i$i89 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i129 = 0, $$0$i$i1$i$i183 = 0, $$0$i$i1$i$i198 = 0, $$0$i$i1$i$i24 = 0, $$0$i$i1$i$i45 = 0;
 var $$0$i$i1$i$i95 = 0, $$0$i$i104 = 0, $$0$i$i113 = 0, $$0$i$i117 = 0, $$0$i$i173 = 0, $$0$i$i207 = 0, $$0$i$i33 = 0, $$0$i$i37 = 0, $$0$i$i54 = 0, $$0$i$i59 = 0, $$0$i$i64 = 0, $$0$i$i71 = 0, $$0$i$i79 = 0, $$0$i$i83 = 0, $$477 = 0, $$478 = 0, $$479 = 0, $$480 = 0, $$481 = 0, $$482 = 0;
 var $$483 = 0, $$lcssa313 = 0, $$lcssa330 = 0, $$ph$ph = 0, $$ph$ph251$ph$ph$ph$ph$ph = 0, $$pr$i = 0, $$pr$i162 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i125 = 0, $$pre$i$i$i179 = 0, $$pre$i$i$i194 = 0, $$pre$i$i$i20 = 0, $$pre$i$i$i41 = 0, $$pre$i$i$i91 = 0, $$pre$i163 = 0, $$pre$i3$i$i200 = 0, $$pre$i3$i$i200455 = 0, $$pre$i3$i$i200456 = 0;
 var $$pre$i3$i$i47 = 0, $$pre$i3$i$i47452 = 0, $$pre$i3$i$i47454 = 0, $$pre$i3$i$i97 = 0, $$pre$i3$i$i97459$ph = 0, $$pre$i3$i$i97459475 = 0, $$pre465 = 0, $$pre466 = 0, $$pre467 = 0, $$pre468 = 0, $$pre469 = 0, $$pre470 = 0, $$sum = 0, $$sum471 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gbuf = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$06 = 0, $__p$0377 = 0;
 var $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$05 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0379 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $free = 0, $free226 = 0, $free227 = 0, $free228$lcssa = 0, $free228372 = 0, $free229 = 0, $free230 = 0, $free231 = 0;
 var $free232 = 0, $free232$ph$ph = 0, $free232$ph$ph250$ph$ph$ph$ph$ph = 0, $free234 = 0, $lpad$phi$index = 0, $lpad$phi$index8 = 0, $or$cond = 0, $or$cond247 = 0, $or$cond248 = 0, $or$cond7 = 0, $or$cond8 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i126 = 0, $phitmp$i$i$i180 = 0, $phitmp$i$i$i195 = 0, $phitmp$i$i$i21 = 0, $phitmp$i$i$i42 = 0, $phitmp$i$i$i92 = 0, $phitmp$i4$i$i201 = 0, $phitmp$i4$i$i48 = 0;
 var $phitmp$i4$i$i98 = 0, $switch = 0, $tmp$i$i100 = 0, $tmp$i$i203 = 0, $tmp$i$i50 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0;
 $__gbuf = sp + 80|0;
 $__pat = sp + 76|0;
 $__dp = sp + 72|0;
 $__ts = sp + 68|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__psn = sp + 28|0;
 $__nsn = sp + 16|0;
 $__spaces = sp + 4|0;
 $__fd = sp;
 $__et = sp + 40|0;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(2,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   $64 = ___cxa_find_matching_catch(-1,-1)|0;
   $65 = tempRet0;
   $67 = $__gbuf;$free232 = 124;$lpad$phi$index = $64;$lpad$phi$index8 = $65;
  } else {
   $2 = (($__gbuf) + 400|0);
   $3 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $3;
   $4 = (($__nsn) + 4|0);
   $5 = (($__nsn) + 8|0);
   $6 = (($__psn) + 4|0);
   $7 = (($__psn) + 8|0);
   $8 = $__flags & 512;
   $9 = ($8|0)!=(0);
   $10 = (($__sym) + 4|0);
   $11 = (($__sym) + 8|0);
   $12 = (($__spaces) + 4|0);
   $13 = (($__spaces) + 8|0);
   $14 = (($__pat) + 3|0);
   $15 = (($__wb) + 4|0);
   $16 = (($__grp) + 4|0);
   $922 = $2;$923 = $__gbuf;$924 = $__gbuf;$925 = $__we;$__p$0377 = 0;$__trailing_sign$0379 = 0;$free228372 = 124;
   L3: while(1) {
    $17 = HEAP32[$__b>>2]|0;
    $18 = ($17|0)==(0|0);
    do {
     if ($18) {
      $926 = 1;
     } else {
      $19 = (($17) + 12|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (($17) + 16|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($20|0)==($22|0);
      if ($23) {
       $24 = HEAP32[$17>>2]|0;
       $25 = (($24) + 36|0);
       $26 = HEAP32[$25>>2]|0;
       __THREW__ = 0;
       $27 = (invoke_ii($26|0,($17|0))|0);
       $28 = __THREW__; __THREW__ = 0;
       $29 = $28&1;
       if ($29) {
        $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
        label = 25;
        break L3;
       } else {
        $$0$i$i$i$i18 = $27;
       }
      } else {
       $30 = HEAP32[$20>>2]|0;
       $$0$i$i$i$i18 = $30;
      }
      $31 = ($$0$i$i$i$i18|0)==(-1);
      if ($31) {
       HEAP32[$__b>>2] = 0;
       $926 = 1;
       break;
      } else {
       $$pre$i$i$i20 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i21 = ($$pre$i$i$i20|0)==(0|0);
       $926 = $phitmp$i$i$i21;
       break;
      }
     }
    } while(0);
    $32 = HEAP32[$__e>>2]|0;
    $33 = ($32|0)==(0|0);
    do {
     if ($33) {
      label = 16;
     } else {
      $34 = (($32) + 12|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = (($32) + 16|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($35|0)==($37|0);
      if ($38) {
       $39 = HEAP32[$32>>2]|0;
       $40 = (($39) + 36|0);
       $41 = HEAP32[$40>>2]|0;
       __THREW__ = 0;
       $42 = (invoke_ii($41|0,($32|0))|0);
       $43 = __THREW__; __THREW__ = 0;
       $44 = $43&1;
       if ($44) {
        $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
        label = 25;
        break L3;
       } else {
        $$0$i$i1$i$i24 = $42;
       }
      } else {
       $45 = HEAP32[$35>>2]|0;
       $$0$i$i1$i$i24 = $45;
      }
      $46 = ($$0$i$i1$i$i24|0)==(-1);
      if ($46) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($926) {
        $927 = $32;
        break;
       } else {
        $$lcssa313 = $924;$$lcssa330 = $923;$__trailing_sign$0$lcssa = $__trailing_sign$0379;$free228$lcssa = $free228372;
        label = 322;
        break L3;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($926) {
      $$lcssa313 = $924;$$lcssa330 = $923;$__trailing_sign$0$lcssa = $__trailing_sign$0379;$free228$lcssa = $free228372;
      label = 322;
      break;
     } else {
      $927 = 0;
     }
    }
    $47 = (($__pat) + ($__p$0377)|0);
    $48 = HEAP8[$47]|0;
    $49 = $48 << 24 >> 24;
    L27: do {
     switch ($49|0) {
     case 0:  {
      label = 42;
      break;
     }
     case 1:  {
      $cond = ($__p$0377|0)==(3);
      if ($cond) {
       $$lcssa313 = $924;$$lcssa330 = $923;$__trailing_sign$0$lcssa = $__trailing_sign$0379;$free228$lcssa = $free228372;
       label = 322;
       break L3;
      }
      $72 = HEAP32[$__b>>2]|0;
      $73 = (($72) + 12|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = (($72) + 16|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ($74|0)==($76|0);
      if ($77) {
       $78 = HEAP32[$72>>2]|0;
       $79 = (($78) + 36|0);
       $80 = HEAP32[$79>>2]|0;
       __THREW__ = 0;
       $81 = (invoke_ii($80|0,($72|0))|0);
       $82 = __THREW__; __THREW__ = 0;
       $83 = $82&1;
       if ($83) {
        $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
        label = 25;
        break L3;
       } else {
        $$0$i$i33 = $81;
       }
      } else {
       $84 = HEAP32[$74>>2]|0;
       $$0$i$i33 = $84;
      }
      $85 = HEAP32[$__ct>>2]|0;
      $86 = (($85) + 12|0);
      $87 = HEAP32[$86>>2]|0;
      __THREW__ = 0;
      $88 = (invoke_iiii($87|0,($__ct|0),8192,($$0$i$i33|0))|0);
      $89 = __THREW__; __THREW__ = 0;
      $90 = $89&1;
      if ($90) {
       $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
       label = 25;
       break L3;
      }
      if (!($88)) {
       label = 41;
       break L3;
      }
      $91 = HEAP32[$__b>>2]|0;
      $92 = (($91) + 12|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = (($91) + 16|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = ($93|0)==($95|0);
      if ($96) {
       $97 = HEAP32[$91>>2]|0;
       $98 = (($97) + 40|0);
       $99 = HEAP32[$98>>2]|0;
       __THREW__ = 0;
       $100 = (invoke_ii($99|0,($91|0))|0);
       $101 = __THREW__; __THREW__ = 0;
       $102 = $101&1;
       if ($102) {
        $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
        label = 25;
        break L3;
       } else {
        $$0$i$i37 = $100;
       }
      } else {
       $103 = (($93) + 4|0);
       HEAP32[$92>>2] = $103;
       $104 = HEAP32[$93>>2]|0;
       $$0$i$i37 = $104;
      }
      __THREW__ = 0;
      invoke_vii(51,($__spaces|0),($$0$i$i37|0));
      $105 = __THREW__; __THREW__ = 0;
      $106 = $105&1;
      if ($106) {
       $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
       label = 25;
       break L3;
      } else {
       label = 42;
      }
      break;
     }
     case 3:  {
      $176 = HEAP8[$__psn]|0;
      $177 = $176 & 1;
      $178 = ($177<<24>>24)==(0);
      if ($178) {
       $180 = $176&255;
       $181 = $180 >>> 1;
       $191 = $181;
      } else {
       $179 = HEAP32[$6>>2]|0;
       $191 = $179;
      }
      $182 = HEAP8[$__nsn]|0;
      $183 = $182 & 1;
      $184 = ($183<<24>>24)==(0);
      if ($184) {
       $186 = $182&255;
       $187 = $186 >>> 1;
       $189 = $187;
      } else {
       $185 = HEAP32[$4>>2]|0;
       $189 = $185;
      }
      $188 = (0 - ($189))|0;
      $190 = ($191|0)==($188|0);
      if ($190) {
       $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
      } else {
       if ($178) {
        $193 = $176&255;
        $194 = $193 >>> 1;
        $196 = $194;
       } else {
        $192 = HEAP32[$6>>2]|0;
        $196 = $192;
       }
       $195 = ($196|0)==(0);
       if (!($195)) {
        if ($184) {
         $198 = $182&255;
         $199 = $198 >>> 1;
         $201 = $199;
        } else {
         $197 = HEAP32[$4>>2]|0;
         $201 = $197;
        }
        $200 = ($201|0)==(0);
        if (!($200)) {
         $279 = HEAP32[$__b>>2]|0;
         $280 = (($279) + 12|0);
         $281 = HEAP32[$280>>2]|0;
         $282 = (($279) + 16|0);
         $283 = HEAP32[$282>>2]|0;
         $284 = ($281|0)==($283|0);
         if ($284) {
          $285 = HEAP32[$279>>2]|0;
          $286 = (($285) + 36|0);
          $287 = HEAP32[$286>>2]|0;
          __THREW__ = 0;
          $288 = (invoke_ii($287|0,($279|0))|0);
          $289 = __THREW__; __THREW__ = 0;
          $290 = $289&1;
          if ($290) {
           $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
           label = 25;
           break L3;
          }
          $$pre467 = HEAP8[$__psn]|0;
          $$0$i$i104 = $288;$293 = $$pre467;
         } else {
          $291 = HEAP32[$281>>2]|0;
          $$0$i$i104 = $291;$293 = $176;
         }
         $292 = $293 & 1;
         $294 = ($292<<24>>24)==(0);
         $295 = HEAP32[$7>>2]|0;
         $$478 = $294 ? $6 : $295;
         $296 = HEAP32[$$478>>2]|0;
         $297 = ($$0$i$i104|0)==($296|0);
         $298 = HEAP32[$__b>>2]|0;
         $299 = (($298) + 12|0);
         $300 = HEAP32[$299>>2]|0;
         $301 = (($298) + 16|0);
         $302 = HEAP32[$301>>2]|0;
         $303 = ($300|0)==($302|0);
         if ($297) {
          if ($303) {
           $304 = HEAP32[$298>>2]|0;
           $305 = (($304) + 40|0);
           $306 = HEAP32[$305>>2]|0;
           __THREW__ = 0;
           (invoke_ii($306|0,($298|0))|0);
           $307 = __THREW__; __THREW__ = 0;
           $308 = $307&1;
           if ($308) {
            $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
            label = 25;
            break L3;
           }
          } else {
           $309 = (($300) + 4|0);
           HEAP32[$299>>2] = $309;
          }
          $310 = HEAP8[$__psn]|0;
          $311 = $310 & 1;
          $312 = ($311<<24>>24)==(0);
          if ($312) {
           $314 = $310&255;
           $315 = $314 >>> 1;
           $317 = $315;
          } else {
           $313 = HEAP32[$6>>2]|0;
           $317 = $313;
          }
          $316 = ($317>>>0)>(1);
          $__psn$__trailing_sign$05 = $316 ? $__psn : $__trailing_sign$0379;
          $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__psn$__trailing_sign$05;$free229 = $free228372;
          break L27;
         }
         if ($303) {
          $318 = HEAP32[$298>>2]|0;
          $319 = (($318) + 36|0);
          $320 = HEAP32[$319>>2]|0;
          __THREW__ = 0;
          $321 = (invoke_ii($320|0,($298|0))|0);
          $322 = __THREW__; __THREW__ = 0;
          $323 = $322&1;
          if ($323) {
           $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
           label = 25;
           break L3;
          } else {
           $$0$i$i113 = $321;
          }
         } else {
          $324 = HEAP32[$300>>2]|0;
          $$0$i$i113 = $324;
         }
         $325 = HEAP8[$__nsn]|0;
         $326 = $325 & 1;
         $327 = ($326<<24>>24)==(0);
         $328 = HEAP32[$5>>2]|0;
         $$479 = $327 ? $4 : $328;
         $329 = HEAP32[$$479>>2]|0;
         $330 = ($$0$i$i113|0)==($329|0);
         if (!($330)) {
          label = 134;
          break L3;
         }
         $331 = HEAP32[$__b>>2]|0;
         $332 = (($331) + 12|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = (($331) + 16|0);
         $335 = HEAP32[$334>>2]|0;
         $336 = ($333|0)==($335|0);
         if ($336) {
          $337 = HEAP32[$331>>2]|0;
          $338 = (($337) + 40|0);
          $339 = HEAP32[$338>>2]|0;
          __THREW__ = 0;
          (invoke_ii($339|0,($331|0))|0);
          $340 = __THREW__; __THREW__ = 0;
          $341 = $340&1;
          if ($341) {
           $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
           label = 25;
           break L3;
          }
         } else {
          $342 = (($333) + 4|0);
          HEAP32[$332>>2] = $342;
         }
         HEAP8[$__neg] = 1;
         $343 = HEAP8[$__nsn]|0;
         $344 = $343 & 1;
         $345 = ($344<<24>>24)==(0);
         if ($345) {
          $347 = $343&255;
          $348 = $347 >>> 1;
          $350 = $348;
         } else {
          $346 = HEAP32[$4>>2]|0;
          $350 = $346;
         }
         $349 = ($350>>>0)>(1);
         $__nsn$__trailing_sign$06 = $349 ? $__nsn : $__trailing_sign$0379;
         $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__nsn$__trailing_sign$06;$free229 = $free228372;
         break L27;
        }
       }
       if ($178) {
        $203 = $176&255;
        $204 = $203 >>> 1;
        $206 = $204;
       } else {
        $202 = HEAP32[$6>>2]|0;
        $206 = $202;
       }
       $205 = ($206|0)==(0);
       $207 = HEAP32[$__b>>2]|0;
       $208 = (($207) + 12|0);
       $209 = HEAP32[$208>>2]|0;
       $210 = (($207) + 16|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = ($209|0)==($211|0);
       if ($205) {
        if ($212) {
         $246 = HEAP32[$207>>2]|0;
         $247 = (($246) + 36|0);
         $248 = HEAP32[$247>>2]|0;
         __THREW__ = 0;
         $249 = (invoke_ii($248|0,($207|0))|0);
         $250 = __THREW__; __THREW__ = 0;
         $251 = $250&1;
         if ($251) {
          $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
          label = 25;
          break L3;
         }
         $$pre465 = HEAP8[$__nsn]|0;
         $$0$i$i79 = $249;$254 = $$pre465;
        } else {
         $252 = HEAP32[$209>>2]|0;
         $$0$i$i79 = $252;$254 = $182;
        }
        $253 = $254 & 1;
        $255 = ($253<<24>>24)==(0);
        $256 = HEAP32[$5>>2]|0;
        $$477 = $255 ? $4 : $256;
        $257 = HEAP32[$$477>>2]|0;
        $258 = ($$0$i$i79|0)==($257|0);
        if (!($258)) {
         $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
         break L27;
        }
        $259 = HEAP32[$__b>>2]|0;
        $260 = (($259) + 12|0);
        $261 = HEAP32[$260>>2]|0;
        $262 = (($259) + 16|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = ($261|0)==($263|0);
        if ($264) {
         $265 = HEAP32[$259>>2]|0;
         $266 = (($265) + 40|0);
         $267 = HEAP32[$266>>2]|0;
         __THREW__ = 0;
         (invoke_ii($267|0,($259|0))|0);
         $268 = __THREW__; __THREW__ = 0;
         $269 = $268&1;
         if ($269) {
          $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
          label = 25;
          break L3;
         }
        } else {
         $270 = (($261) + 4|0);
         HEAP32[$260>>2] = $270;
        }
        HEAP8[$__neg] = 1;
        $271 = HEAP8[$__nsn]|0;
        $272 = $271 & 1;
        $273 = ($272<<24>>24)==(0);
        if ($273) {
         $275 = $271&255;
         $276 = $275 >>> 1;
         $278 = $276;
        } else {
         $274 = HEAP32[$4>>2]|0;
         $278 = $274;
        }
        $277 = ($278>>>0)>(1);
        $__nsn$__trailing_sign$0 = $277 ? $__nsn : $__trailing_sign$0379;
        $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__nsn$__trailing_sign$0;$free229 = $free228372;
        break L27;
       }
       if ($212) {
        $213 = HEAP32[$207>>2]|0;
        $214 = (($213) + 36|0);
        $215 = HEAP32[$214>>2]|0;
        __THREW__ = 0;
        $216 = (invoke_ii($215|0,($207|0))|0);
        $217 = __THREW__; __THREW__ = 0;
        $218 = $217&1;
        if ($218) {
         $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
         label = 25;
         break L3;
        }
        $$pre466 = HEAP8[$__psn]|0;
        $$0$i$i71 = $216;$221 = $$pre466;
       } else {
        $219 = HEAP32[$209>>2]|0;
        $$0$i$i71 = $219;$221 = $176;
       }
       $220 = $221 & 1;
       $222 = ($220<<24>>24)==(0);
       $223 = HEAP32[$7>>2]|0;
       $$ = $222 ? $6 : $223;
       $224 = HEAP32[$$>>2]|0;
       $225 = ($$0$i$i71|0)==($224|0);
       if (!($225)) {
        HEAP8[$__neg] = 1;
        $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
        break L27;
       }
       $226 = HEAP32[$__b>>2]|0;
       $227 = (($226) + 12|0);
       $228 = HEAP32[$227>>2]|0;
       $229 = (($226) + 16|0);
       $230 = HEAP32[$229>>2]|0;
       $231 = ($228|0)==($230|0);
       if ($231) {
        $232 = HEAP32[$226>>2]|0;
        $233 = (($232) + 40|0);
        $234 = HEAP32[$233>>2]|0;
        __THREW__ = 0;
        (invoke_ii($234|0,($226|0))|0);
        $235 = __THREW__; __THREW__ = 0;
        $236 = $235&1;
        if ($236) {
         $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
         label = 25;
         break L3;
        }
       } else {
        $237 = (($228) + 4|0);
        HEAP32[$227>>2] = $237;
       }
       $238 = HEAP8[$__psn]|0;
       $239 = $238 & 1;
       $240 = ($239<<24>>24)==(0);
       if ($240) {
        $242 = $238&255;
        $243 = $242 >>> 1;
        $245 = $243;
       } else {
        $241 = HEAP32[$6>>2]|0;
        $245 = $241;
       }
       $244 = ($245>>>0)>(1);
       $__psn$__trailing_sign$0 = $244 ? $__psn : $__trailing_sign$0379;
       $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__psn$__trailing_sign$0;$free229 = $free228372;
      }
      break;
     }
     case 2:  {
      $353 = ($__trailing_sign$0379|0)!=(0|0);
      $354 = ($__p$0377>>>0)<(2);
      $or$cond = $353 | $354;
      if (!($or$cond)) {
       $355 = ($__p$0377|0)==(2);
       if ($355) {
        $356 = HEAP8[$14]|0;
        $357 = ($356<<24>>24)!=(0);
        $358 = $357;
       } else {
        $358 = 0;
       }
       $brmerge = $9 | $358;
       if (!($brmerge)) {
        $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = 0;$free229 = $free228372;
        break L27;
       }
      }
      $359 = HEAP8[$__sym]|0;
      $360 = $359 & 1;
      $361 = ($360<<24>>24)==(0);
      $362 = HEAP32[$11>>2]|0;
      $$480 = $361 ? $10 : $362;
      $363 = ($__p$0377|0)==(0);
      L135: do {
       if ($363) {
        $$pre$i3$i$i200 = $927;$427 = $359;$437 = $$480;$454 = $927;
       } else {
        $364 = (($__p$0377) + -1)|0;
        $365 = (($__pat) + ($364)|0);
        $366 = HEAP8[$365]|0;
        $switch = ($366&255)<(2);
        if ($switch) {
         $368 = $359;$378 = $$480;
         while(1) {
          $367 = $368 & 1;
          $369 = ($367<<24>>24)==(0);
          if ($369) {
           $372 = $368&255;
           $373 = $372 >>> 1;
           $375 = $10;$376 = $373;
          } else {
           $370 = HEAP32[$11>>2]|0;
           $371 = HEAP32[$10>>2]|0;
           $375 = $370;$376 = $371;
          }
          $374 = (($375) + ($376<<2)|0);
          $377 = ($378|0)==($374|0);
          if ($377) {
           $388 = $368;
           break;
          }
          $379 = HEAP32[$378>>2]|0;
          $380 = HEAP32[$__ct>>2]|0;
          $381 = (($380) + 12|0);
          $382 = HEAP32[$381>>2]|0;
          __THREW__ = 0;
          $383 = (invoke_iiii($382|0,($__ct|0),8192,($379|0))|0);
          $384 = __THREW__; __THREW__ = 0;
          $385 = $384&1;
          if ($385) {
           label = 22;
           break L3;
          }
          if (!($383)) {
           label = 148;
           break;
          }
          $386 = (($378) + 4|0);
          $$pre468 = HEAP8[$__sym]|0;
          $368 = $$pre468;$378 = $386;
         }
         if ((label|0) == 148) {
          label = 0;
          $$pre469 = HEAP8[$__sym]|0;
          $388 = $$pre469;
         }
         $387 = $388 & 1;
         $389 = ($387<<24>>24)==(0);
         $390 = HEAP32[$11>>2]|0;
         $$481 = $389 ? $10 : $390;
         $391 = $378;
         $392 = $$481;
         $393 = (($391) - ($392))|0;
         $394 = $393 >> 2;
         $395 = HEAP8[$__spaces]|0;
         $396 = $395 & 1;
         $397 = ($396<<24>>24)==(0);
         if ($397) {
          $399 = $395&255;
          $400 = $399 >>> 1;
          $402 = $400;
         } else {
          $398 = HEAP32[$12>>2]|0;
          $402 = $398;
         }
         $401 = ($394>>>0)>($402>>>0);
         L153: do {
          if (!($401)) {
           if ($397) {
            $406 = $395&255;
            $407 = $406 >>> 1;
            $$sum471 = (($407) - ($394))|0;
            $408 = (($12) + ($$sum471<<2)|0);
            $409 = $395&255;
            $410 = $409 >>> 1;
            $412 = $12;$413 = $410;$416 = $408;
           } else {
            $403 = HEAP32[$13>>2]|0;
            $404 = HEAP32[$12>>2]|0;
            $$sum = (($404) - ($394))|0;
            $405 = (($403) + ($$sum<<2)|0);
            $412 = $403;$413 = $404;$416 = $405;
           }
           $411 = (($412) + ($413<<2)|0);
           $414 = HEAP32[$11>>2]|0;
           $$482 = $389 ? $10 : $414;
           $415 = ($416|0)==($411|0);
           if ($415) {
            $$pre$i3$i$i200 = $927;$427 = $388;$437 = $378;$454 = $927;
            break L135;
           } else {
            $418 = $416;$420 = $$482;
           }
           while(1) {
            $417 = HEAP32[$418>>2]|0;
            $419 = HEAP32[$420>>2]|0;
            $421 = ($417|0)==($419|0);
            if (!($421)) {
             break L153;
            }
            $422 = (($418) + 4|0);
            $423 = ($422|0)==($411|0);
            if ($423) {
             $$pre$i3$i$i200 = $927;$427 = $388;$437 = $378;$454 = $927;
             break L135;
            }
            $424 = (($420) + 4|0);
            $418 = $422;$420 = $424;
           }
          }
         } while(0);
         $425 = HEAP32[$11>>2]|0;
         $$483 = $389 ? $10 : $425;
         $$pre$i3$i$i200 = $927;$427 = $388;$437 = $$483;$454 = $927;
        } else {
         $$pre$i3$i$i200 = $927;$427 = $359;$437 = $$480;$454 = $927;
        }
       }
      } while(0);
      L164: while(1) {
       $426 = $427 & 1;
       $428 = ($426<<24>>24)==(0);
       if ($428) {
        $431 = $427&255;
        $432 = $431 >>> 1;
        $434 = $10;$435 = $432;
       } else {
        $429 = HEAP32[$11>>2]|0;
        $430 = HEAP32[$10>>2]|0;
        $434 = $429;$435 = $430;
       }
       $433 = (($434) + ($435<<2)|0);
       $436 = ($437|0)==($433|0);
       if ($436) {
        break;
       }
       $438 = HEAP32[$__b>>2]|0;
       $439 = ($438|0)==(0|0);
       do {
        if ($439) {
         $468 = 1;
        } else {
         $440 = (($438) + 12|0);
         $441 = HEAP32[$440>>2]|0;
         $442 = (($438) + 16|0);
         $443 = HEAP32[$442>>2]|0;
         $444 = ($441|0)==($443|0);
         if ($444) {
          $445 = HEAP32[$438>>2]|0;
          $446 = (($445) + 36|0);
          $447 = HEAP32[$446>>2]|0;
          __THREW__ = 0;
          $448 = (invoke_ii($447|0,($438|0))|0);
          $449 = __THREW__; __THREW__ = 0;
          $450 = $449&1;
          if ($450) {
           label = 23;
           break L3;
          } else {
           $$0$i$i$i$i192 = $448;
          }
         } else {
          $451 = HEAP32[$441>>2]|0;
          $$0$i$i$i$i192 = $451;
         }
         $452 = ($$0$i$i$i$i192|0)==(-1);
         if ($452) {
          HEAP32[$__b>>2] = 0;
          $468 = 1;
          break;
         } else {
          $$pre$i$i$i194 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i195 = ($$pre$i$i$i194|0)==(0|0);
          $468 = $phitmp$i$i$i195;
          break;
         }
        }
       } while(0);
       $453 = ($454|0)==(0|0);
       do {
        if ($453) {
         $$pre$i3$i$i200456 = $$pre$i3$i$i200;
         label = 178;
        } else {
         $455 = (($454) + 12|0);
         $456 = HEAP32[$455>>2]|0;
         $457 = (($454) + 16|0);
         $458 = HEAP32[$457>>2]|0;
         $459 = ($456|0)==($458|0);
         if ($459) {
          $460 = HEAP32[$454>>2]|0;
          $461 = (($460) + 36|0);
          $462 = HEAP32[$461>>2]|0;
          __THREW__ = 0;
          $463 = (invoke_ii($462|0,($454|0))|0);
          $464 = __THREW__; __THREW__ = 0;
          $465 = $464&1;
          if ($465) {
           label = 23;
           break L3;
          } else {
           $$0$i$i1$i$i198 = $463;
          }
         } else {
          $466 = HEAP32[$456>>2]|0;
          $$0$i$i1$i$i198 = $466;
         }
         $467 = ($$0$i$i1$i$i198|0)==(-1);
         if ($467) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i200456 = 0;
          label = 178;
          break;
         } else {
          $phitmp$i4$i$i201 = ($$pre$i3$i$i200|0)==(0|0);
          $tmp$i$i203 = $468 ^ $phitmp$i4$i$i201;
          if ($tmp$i$i203) {
           $$pre$i3$i$i200455 = $$pre$i3$i$i200;$934 = $$pre$i3$i$i200;
           break;
          } else {
           break L164;
          }
         }
        }
       } while(0);
       if ((label|0) == 178) {
        label = 0;
        if ($468) {
         break;
        } else {
         $$pre$i3$i$i200455 = $$pre$i3$i$i200456;$934 = 0;
        }
       }
       $469 = HEAP32[$__b>>2]|0;
       $470 = (($469) + 12|0);
       $471 = HEAP32[$470>>2]|0;
       $472 = (($469) + 16|0);
       $473 = HEAP32[$472>>2]|0;
       $474 = ($471|0)==($473|0);
       if ($474) {
        $475 = HEAP32[$469>>2]|0;
        $476 = (($475) + 36|0);
        $477 = HEAP32[$476>>2]|0;
        __THREW__ = 0;
        $478 = (invoke_ii($477|0,($469|0))|0);
        $479 = __THREW__; __THREW__ = 0;
        $480 = $479&1;
        if ($480) {
         label = 23;
         break L3;
        } else {
         $$0$i$i207 = $478;
        }
       } else {
        $481 = HEAP32[$471>>2]|0;
        $$0$i$i207 = $481;
       }
       $482 = HEAP32[$437>>2]|0;
       $483 = ($$0$i$i207|0)==($482|0);
       if (!($483)) {
        break;
       }
       $484 = HEAP32[$__b>>2]|0;
       $485 = (($484) + 12|0);
       $486 = HEAP32[$485>>2]|0;
       $487 = (($484) + 16|0);
       $488 = HEAP32[$487>>2]|0;
       $489 = ($486|0)==($488|0);
       if ($489) {
        $490 = HEAP32[$484>>2]|0;
        $491 = (($490) + 40|0);
        $492 = HEAP32[$491>>2]|0;
        __THREW__ = 0;
        (invoke_ii($492|0,($484|0))|0);
        $493 = __THREW__; __THREW__ = 0;
        $494 = $493&1;
        if ($494) {
         label = 23;
         break L3;
        }
       } else {
        $495 = (($486) + 4|0);
        HEAP32[$485>>2] = $495;
       }
       $496 = (($437) + 4|0);
       $$pre = HEAP8[$__sym]|0;
       $$pre$i3$i$i200 = $$pre$i3$i$i200455;$427 = $$pre;$437 = $496;$454 = $934;
      }
      if ($9) {
       $497 = HEAP8[$__sym]|0;
       $498 = $497 & 1;
       $499 = ($498<<24>>24)==(0);
       if ($499) {
        $502 = $497&255;
        $503 = $502 >>> 1;
        $505 = $10;$506 = $503;
       } else {
        $500 = HEAP32[$11>>2]|0;
        $501 = HEAP32[$10>>2]|0;
        $505 = $500;$506 = $501;
       }
       $504 = (($505) + ($506<<2)|0);
       $507 = ($437|0)==($504|0);
       if ($507) {
        $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
       } else {
        label = 193;
        break L3;
       }
      } else {
       $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
      }
      break;
     }
     case 4:  {
      $561 = $925;$602 = $923;$603 = $922;$607 = $924;$__ng$0 = 0;$free227 = $free228372;
      L208: while(1) {
       $510 = HEAP32[$__b>>2]|0;
       $511 = ($510|0)==(0|0);
       do {
        if ($511) {
         $935 = 1;
        } else {
         $512 = (($510) + 12|0);
         $513 = HEAP32[$512>>2]|0;
         $514 = (($510) + 16|0);
         $515 = HEAP32[$514>>2]|0;
         $516 = ($513|0)==($515|0);
         if ($516) {
          $517 = HEAP32[$510>>2]|0;
          $518 = (($517) + 36|0);
          $519 = HEAP32[$518>>2]|0;
          __THREW__ = 0;
          $520 = (invoke_ii($519|0,($510|0))|0);
          $521 = __THREW__; __THREW__ = 0;
          $522 = $521&1;
          if ($522) {
           $$ph$ph = $607;$free232$ph$ph = $free227;
           label = 20;
           break L3;
          } else {
           $$0$i$i$i$i177 = $520;
          }
         } else {
          $523 = HEAP32[$513>>2]|0;
          $$0$i$i$i$i177 = $523;
         }
         $524 = ($$0$i$i$i$i177|0)==(-1);
         if ($524) {
          HEAP32[$__b>>2] = 0;
          $935 = 1;
          break;
         } else {
          $$pre$i$i$i179 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i180 = ($$pre$i$i$i179|0)==(0|0);
          $935 = $phitmp$i$i$i180;
          break;
         }
        }
       } while(0);
       $525 = HEAP32[$__e>>2]|0;
       $526 = ($525|0)==(0|0);
       do {
        if ($526) {
         label = 207;
        } else {
         $527 = (($525) + 12|0);
         $528 = HEAP32[$527>>2]|0;
         $529 = (($525) + 16|0);
         $530 = HEAP32[$529>>2]|0;
         $531 = ($528|0)==($530|0);
         if ($531) {
          $532 = HEAP32[$525>>2]|0;
          $533 = (($532) + 36|0);
          $534 = HEAP32[$533>>2]|0;
          __THREW__ = 0;
          $535 = (invoke_ii($534|0,($525|0))|0);
          $536 = __THREW__; __THREW__ = 0;
          $537 = $536&1;
          if ($537) {
           $$ph$ph = $607;$free232$ph$ph = $free227;
           label = 20;
           break L3;
          } else {
           $$0$i$i1$i$i183 = $535;
          }
         } else {
          $538 = HEAP32[$528>>2]|0;
          $$0$i$i1$i$i183 = $538;
         }
         $539 = ($$0$i$i1$i$i183|0)==(-1);
         if ($539) {
          HEAP32[$__e>>2] = 0;
          label = 207;
          break;
         } else {
          if ($935) {
           break;
          } else {
           break L208;
          }
         }
        }
       } while(0);
       if ((label|0) == 207) {
        label = 0;
        if ($935) {
         break;
        }
       }
       $540 = HEAP32[$__b>>2]|0;
       $541 = (($540) + 12|0);
       $542 = HEAP32[$541>>2]|0;
       $543 = (($540) + 16|0);
       $544 = HEAP32[$543>>2]|0;
       $545 = ($542|0)==($544|0);
       if ($545) {
        $546 = HEAP32[$540>>2]|0;
        $547 = (($546) + 36|0);
        $548 = HEAP32[$547>>2]|0;
        __THREW__ = 0;
        $549 = (invoke_ii($548|0,($540|0))|0);
        $550 = __THREW__; __THREW__ = 0;
        $551 = $550&1;
        if ($551) {
         $$ph$ph = $607;$free232$ph$ph = $free227;
         label = 20;
         break L3;
        } else {
         $$0$i$i173 = $549;
        }
       } else {
        $552 = HEAP32[$542>>2]|0;
        $$0$i$i173 = $552;
       }
       $553 = HEAP32[$__ct>>2]|0;
       $554 = (($553) + 12|0);
       $555 = HEAP32[$554>>2]|0;
       __THREW__ = 0;
       $556 = (invoke_iiii($555|0,($__ct|0),2048,($$0$i$i173|0))|0);
       $557 = __THREW__; __THREW__ = 0;
       $558 = $557&1;
       if ($558) {
        $$ph$ph = $607;$free232$ph$ph = $free227;
        label = 20;
        break L3;
       }
       if ($556) {
        $559 = HEAP32[$__wn>>2]|0;
        $560 = ($559|0)==($561|0);
        if ($560) {
         $562 = HEAP32[$15>>2]|0;
         $563 = ($562|0)!=(124|0);
         $564 = HEAP32[$__wb>>2]|0;
         $565 = $561;
         $566 = $564;
         $567 = (($565) - ($566))|0;
         $568 = ($567>>>0)<(2147483647);
         $569 = $567 << 1;
         $$$i159 = $568 ? $569 : -1;
         $570 = $567 >> 2;
         if ($563) {
          $571 = $564;
         } else {
          $571 = 0;
         }
         $572 = (_realloc($571,$$$i159)|0);
         $573 = ($572|0)==(0|0);
         if ($573) {
          __THREW__ = 0;
          invoke_v(4);
          $574 = __THREW__; __THREW__ = 0;
          $575 = $574&1;
          if ($575) {
           $$ph$ph = $607;$free232$ph$ph = $free227;
           label = 20;
           break L3;
          }
         }
         if ($563) {
          HEAP32[$__wb>>2] = $572;
          $584 = $572;
         } else {
          $$pr$i162 = HEAP32[$__wb>>2]|0;
          HEAP32[$__wb>>2] = $572;
          $576 = ($$pr$i162|0)==(0|0);
          if ($576) {
           $584 = $572;
          } else {
           $577 = HEAP32[$15>>2]|0;
           __THREW__ = 0;
           invoke_vi($577|0,($$pr$i162|0));
           $578 = __THREW__; __THREW__ = 0;
           $579 = $578&1;
           if ($579) {
            label = 224;
            break L3;
           }
           $$pre$i163 = HEAP32[$__wb>>2]|0;
           $584 = $$pre$i163;
          }
         }
         HEAP32[$15>>2] = 112;
         $582 = $$$i159 >>> 2;
         $583 = (($584) + ($570<<2)|0);
         HEAP32[$__wn>>2] = $583;
         $585 = HEAP32[$__wb>>2]|0;
         $586 = (($585) + ($582<<2)|0);
         $588 = $583;$936 = $586;
        } else {
         $588 = $559;$936 = $561;
        }
        $587 = (($588) + 4|0);
        HEAP32[$__wn>>2] = $587;
        HEAP32[$588>>2] = $$0$i$i173;
        $589 = (($__ng$0) + 1)|0;
        $937 = $936;$938 = $607;$939 = $602;$940 = $603;$__ng$1 = $589;$free = $free227;
       } else {
        $590 = HEAP8[$__grp]|0;
        $591 = $590 & 1;
        $592 = ($591<<24>>24)==(0);
        if ($592) {
         $594 = $590&255;
         $595 = $594 >>> 1;
         $597 = $595;
        } else {
         $593 = HEAP32[$16>>2]|0;
         $597 = $593;
        }
        $596 = ($597|0)==(0);
        $598 = ($__ng$0|0)==(0);
        $or$cond7 = $596 | $598;
        if ($or$cond7) {
         break;
        }
        $599 = HEAP32[$__ts>>2]|0;
        $600 = ($$0$i$i173|0)==($599|0);
        if (!($600)) {
         break;
        }
        $601 = ($602|0)==($603|0);
        if ($601) {
         $604 = ($free227|0)!=(124|0);
         $605 = $602;
         $606 = $607;
         $608 = (($605) - ($606))|0;
         $609 = ($608>>>0)<(2147483647);
         $610 = $608 << 1;
         $$$i149 = $609 ? $610 : -1;
         $611 = $608 >> 2;
         if ($604) {
          $612 = $607;
         } else {
          $612 = 0;
         }
         $613 = (_realloc($612,$$$i149)|0);
         $614 = ($613|0)==(0|0);
         if ($614) {
          __THREW__ = 0;
          invoke_v(4);
          $615 = __THREW__; __THREW__ = 0;
          $616 = $615&1;
          if ($616) {
           $$ph$ph = $607;$free232$ph$ph = $free227;
           label = 20;
           break L3;
          }
         }
         $617 = ($607|0)==(0|0);
         $or$cond247 = $604 | $617;
         if (!($or$cond247)) {
         }
         $618 = $$$i149 >>> 2;
         $619 = (($613) + ($611<<2)|0);
         $620 = (($613) + ($618<<2)|0);
         $622 = $619;$941 = $613;$942 = $620;$free226 = 112;
        } else {
         $622 = $602;$941 = $607;$942 = $603;$free226 = $free227;
        }
        $621 = (($622) + 4|0);
        HEAP32[$622>>2] = $__ng$0;
        $937 = $561;$938 = $941;$939 = $621;$940 = $942;$__ng$1 = 0;$free = $free226;
       }
       $623 = HEAP32[$__b>>2]|0;
       $624 = (($623) + 12|0);
       $625 = HEAP32[$624>>2]|0;
       $626 = (($623) + 16|0);
       $627 = HEAP32[$626>>2]|0;
       $628 = ($625|0)==($627|0);
       if ($628) {
        $629 = HEAP32[$623>>2]|0;
        $630 = (($629) + 40|0);
        $631 = HEAP32[$630>>2]|0;
        __THREW__ = 0;
        (invoke_ii($631|0,($623|0))|0);
        $632 = __THREW__; __THREW__ = 0;
        $633 = $632&1;
        if ($633) {
         $$ph$ph = $938;$free232$ph$ph = $free;
         label = 20;
         break L3;
        } else {
         $561 = $937;$602 = $939;$603 = $940;$607 = $938;$__ng$0 = $__ng$1;$free227 = $free;
         continue;
        }
       } else {
        $634 = (($625) + 4|0);
        HEAP32[$624>>2] = $634;
        $561 = $937;$602 = $939;$603 = $940;$607 = $938;$__ng$0 = $__ng$1;$free227 = $free;
        continue;
       }
      }
      $635 = ($607|0)==($602|0);
      $636 = ($__ng$0|0)==(0);
      $or$cond8 = $635 | $636;
      if ($or$cond8) {
       $932 = $607;$943 = $602;$944 = $603;$free230 = $free227;
      } else {
       $637 = ($602|0)==($603|0);
       if ($637) {
        $638 = ($free227|0)!=(124|0);
        $639 = $602;
        $640 = $607;
        $641 = (($639) - ($640))|0;
        $642 = ($641>>>0)<(2147483647);
        $643 = $641 << 1;
        $$$i138 = $642 ? $643 : -1;
        $644 = $641 >> 2;
        if ($638) {
         $645 = $607;
        } else {
         $645 = 0;
        }
        $646 = (_realloc($645,$$$i138)|0);
        $647 = ($646|0)==(0|0);
        if ($647) {
         __THREW__ = 0;
         invoke_v(4);
         $648 = __THREW__; __THREW__ = 0;
         $649 = $648&1;
         if ($649) {
          $$ph$ph251$ph$ph$ph$ph$ph = $607;$free232$ph$ph250$ph$ph$ph$ph$ph = $free227;
          label = 25;
          break L3;
         }
        }
        $650 = ($607|0)==(0|0);
        $or$cond248 = $638 | $650;
        if (!($or$cond248)) {
        }
        $651 = $$$i138 >>> 2;
        $652 = (($646) + ($644<<2)|0);
        $653 = (($646) + ($651<<2)|0);
        $655 = $652;$945 = $646;$946 = $653;$free231 = 112;
       } else {
        $655 = $602;$945 = $607;$946 = $603;$free231 = $free227;
       }
       $654 = (($655) + 4|0);
       HEAP32[$655>>2] = $__ng$0;
       $932 = $945;$943 = $654;$944 = $946;$free230 = $free231;
      }
      $656 = HEAP32[$__fd>>2]|0;
      $657 = ($656|0)>(0);
      if ($657) {
       $658 = HEAP32[$__b>>2]|0;
       $659 = ($658|0)==(0|0);
       do {
        if ($659) {
         $948 = 1;
        } else {
         $660 = (($658) + 12|0);
         $661 = HEAP32[$660>>2]|0;
         $662 = (($658) + 16|0);
         $663 = HEAP32[$662>>2]|0;
         $664 = ($661|0)==($663|0);
         if ($664) {
          $665 = HEAP32[$658>>2]|0;
          $666 = (($665) + 36|0);
          $667 = HEAP32[$666>>2]|0;
          __THREW__ = 0;
          $668 = (invoke_ii($667|0,($658|0))|0);
          $669 = __THREW__; __THREW__ = 0;
          $670 = $669&1;
          if ($670) {
           $$ph$ph251$ph$ph$ph$ph$ph = $932;$free232$ph$ph250$ph$ph$ph$ph$ph = $free230;
           label = 25;
           break L3;
          } else {
           $$0$i$i$i$i123 = $668;
          }
         } else {
          $671 = HEAP32[$661>>2]|0;
          $$0$i$i$i$i123 = $671;
         }
         $672 = ($$0$i$i$i$i123|0)==(-1);
         if ($672) {
          HEAP32[$__b>>2] = 0;
          $948 = 1;
          break;
         } else {
          $$pre$i$i$i125 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i126 = ($$pre$i$i$i125|0)==(0|0);
          $948 = $phitmp$i$i$i126;
          break;
         }
        }
       } while(0);
       $673 = HEAP32[$__e>>2]|0;
       $674 = ($673|0)==(0|0);
       do {
        if ($674) {
         label = 268;
        } else {
         $675 = (($673) + 12|0);
         $676 = HEAP32[$675>>2]|0;
         $677 = (($673) + 16|0);
         $678 = HEAP32[$677>>2]|0;
         $679 = ($676|0)==($678|0);
         if ($679) {
          $680 = HEAP32[$673>>2]|0;
          $681 = (($680) + 36|0);
          $682 = HEAP32[$681>>2]|0;
          __THREW__ = 0;
          $683 = (invoke_ii($682|0,($673|0))|0);
          $684 = __THREW__; __THREW__ = 0;
          $685 = $684&1;
          if ($685) {
           $$ph$ph251$ph$ph$ph$ph$ph = $932;$free232$ph$ph250$ph$ph$ph$ph$ph = $free230;
           label = 25;
           break L3;
          } else {
           $$0$i$i1$i$i129 = $683;
          }
         } else {
          $686 = HEAP32[$676>>2]|0;
          $$0$i$i1$i$i129 = $686;
         }
         $687 = ($$0$i$i1$i$i129|0)==(-1);
         if ($687) {
          HEAP32[$__e>>2] = 0;
          label = 268;
          break;
         } else {
          if ($948) {
           $949 = $673;
           break;
          } else {
           label = 274;
           break L3;
          }
         }
        }
       } while(0);
       if ((label|0) == 268) {
        label = 0;
        if ($948) {
         label = 274;
         break L3;
        } else {
         $949 = 0;
        }
       }
       $688 = HEAP32[$__b>>2]|0;
       $689 = (($688) + 12|0);
       $690 = HEAP32[$689>>2]|0;
       $691 = (($688) + 16|0);
       $692 = HEAP32[$691>>2]|0;
       $693 = ($690|0)==($692|0);
       if ($693) {
        $694 = HEAP32[$688>>2]|0;
        $695 = (($694) + 36|0);
        $696 = HEAP32[$695>>2]|0;
        __THREW__ = 0;
        $697 = (invoke_ii($696|0,($688|0))|0);
        $698 = __THREW__; __THREW__ = 0;
        $699 = $698&1;
        if ($699) {
         $$ph$ph251$ph$ph$ph$ph$ph = $932;$free232$ph$ph250$ph$ph$ph$ph$ph = $free230;
         label = 25;
         break L3;
        } else {
         $$0$i$i117 = $697;
        }
       } else {
        $700 = HEAP32[$690>>2]|0;
        $$0$i$i117 = $700;
       }
       $701 = HEAP32[$__dp>>2]|0;
       $702 = ($$0$i$i117|0)==($701|0);
       if (!($702)) {
        label = 274;
        break L3;
       }
       $705 = HEAP32[$__b>>2]|0;
       $706 = (($705) + 12|0);
       $707 = HEAP32[$706>>2]|0;
       $708 = (($705) + 16|0);
       $709 = HEAP32[$708>>2]|0;
       $710 = ($707|0)==($709|0);
       if ($710) {
        $711 = HEAP32[$705>>2]|0;
        $712 = (($711) + 40|0);
        $713 = HEAP32[$712>>2]|0;
        __THREW__ = 0;
        (invoke_ii($713|0,($705|0))|0);
        $714 = __THREW__; __THREW__ = 0;
        $715 = $714&1;
        if ($715) {
         $$ph$ph251$ph$ph$ph$ph$ph = $932;$free232$ph$ph250$ph$ph$ph$ph$ph = $free230;
         label = 25;
         break L3;
        } else {
         $$pre$i3$i$i97 = $949;$733 = $949;$771 = $561;$813 = $656;
        }
       } else {
        $716 = (($707) + 4|0);
        HEAP32[$706>>2] = $716;
        $$pre$i3$i$i97 = $949;$733 = $949;$771 = $561;$813 = $656;
       }
       while(1) {
        $717 = HEAP32[$__b>>2]|0;
        $718 = ($717|0)==(0|0);
        do {
         if ($718) {
          $747 = 1;
         } else {
          $719 = (($717) + 12|0);
          $720 = HEAP32[$719>>2]|0;
          $721 = (($717) + 16|0);
          $722 = HEAP32[$721>>2]|0;
          $723 = ($720|0)==($722|0);
          if ($723) {
           $724 = HEAP32[$717>>2]|0;
           $725 = (($724) + 36|0);
           $726 = HEAP32[$725>>2]|0;
           __THREW__ = 0;
           $727 = (invoke_ii($726|0,($717|0))|0);
           $728 = __THREW__; __THREW__ = 0;
           $729 = $728&1;
           if ($729) {
            label = 21;
            break L3;
           } else {
            $$0$i$i$i$i89 = $727;
           }
          } else {
           $730 = HEAP32[$720>>2]|0;
           $$0$i$i$i$i89 = $730;
          }
          $731 = ($$0$i$i$i$i89|0)==(-1);
          if ($731) {
           HEAP32[$__b>>2] = 0;
           $747 = 1;
           break;
          } else {
           $$pre$i$i$i91 = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i92 = ($$pre$i$i$i91|0)==(0|0);
           $747 = $phitmp$i$i$i92;
           break;
          }
         }
        } while(0);
        $732 = ($733|0)==(0|0);
        do {
         if ($732) {
          $$pre$i3$i$i97459$ph = $$pre$i3$i$i97;
          label = 291;
         } else {
          $734 = (($733) + 12|0);
          $735 = HEAP32[$734>>2]|0;
          $736 = (($733) + 16|0);
          $737 = HEAP32[$736>>2]|0;
          $738 = ($735|0)==($737|0);
          if ($738) {
           $739 = HEAP32[$733>>2]|0;
           $740 = (($739) + 36|0);
           $741 = HEAP32[$740>>2]|0;
           __THREW__ = 0;
           $742 = (invoke_ii($741|0,($733|0))|0);
           $743 = __THREW__; __THREW__ = 0;
           $744 = $743&1;
           if ($744) {
            label = 21;
            break L3;
           } else {
            $$0$i$i1$i$i95 = $742;
           }
          } else {
           $745 = HEAP32[$735>>2]|0;
           $$0$i$i1$i$i95 = $745;
          }
          $746 = ($$0$i$i1$i$i95|0)==(-1);
          if ($746) {
           HEAP32[$__e>>2] = 0;
           $$pre$i3$i$i97459$ph = 0;
           label = 291;
           break;
          } else {
           $phitmp$i4$i$i98 = ($$pre$i3$i$i97|0)==(0|0);
           $tmp$i$i100 = $747 ^ $phitmp$i4$i$i98;
           if ($tmp$i$i100) {
            $$pre$i3$i$i97459475 = $$pre$i3$i$i97;$950 = $$pre$i3$i$i97;
            break;
           } else {
            label = 298;
            break L3;
           }
          }
         }
        } while(0);
        if ((label|0) == 291) {
         label = 0;
         if ($747) {
          label = 298;
          break L3;
         } else {
          $$pre$i3$i$i97459475 = $$pre$i3$i$i97459$ph;$950 = 0;
         }
        }
        $748 = HEAP32[$__b>>2]|0;
        $749 = (($748) + 12|0);
        $750 = HEAP32[$749>>2]|0;
        $751 = (($748) + 16|0);
        $752 = HEAP32[$751>>2]|0;
        $753 = ($750|0)==($752|0);
        if ($753) {
         $754 = HEAP32[$748>>2]|0;
         $755 = (($754) + 36|0);
         $756 = HEAP32[$755>>2]|0;
         __THREW__ = 0;
         $757 = (invoke_ii($756|0,($748|0))|0);
         $758 = __THREW__; __THREW__ = 0;
         $759 = $758&1;
         if ($759) {
          label = 21;
          break L3;
         } else {
          $$0$i$i83 = $757;
         }
        } else {
         $760 = HEAP32[$750>>2]|0;
         $$0$i$i83 = $760;
        }
        $761 = HEAP32[$__ct>>2]|0;
        $762 = (($761) + 12|0);
        $763 = HEAP32[$762>>2]|0;
        __THREW__ = 0;
        $764 = (invoke_iiii($763|0,($__ct|0),2048,($$0$i$i83|0))|0);
        $765 = __THREW__; __THREW__ = 0;
        $766 = $765&1;
        if ($766) {
         label = 21;
         break L3;
        }
        if (!($764)) {
         label = 298;
         break L3;
        }
        $769 = HEAP32[$__wn>>2]|0;
        $770 = ($769|0)==($771|0);
        if ($770) {
         $772 = HEAP32[$15>>2]|0;
         $773 = ($772|0)!=(124|0);
         $774 = HEAP32[$__wb>>2]|0;
         $775 = $771;
         $776 = $774;
         $777 = (($775) - ($776))|0;
         $778 = ($777>>>0)<(2147483647);
         $779 = $777 << 1;
         $$$i = $778 ? $779 : -1;
         $780 = $777 >> 2;
         if ($773) {
          $781 = $774;
         } else {
          $781 = 0;
         }
         $782 = (_realloc($781,$$$i)|0);
         $783 = ($782|0)==(0|0);
         if ($783) {
          __THREW__ = 0;
          invoke_v(4);
          $784 = __THREW__; __THREW__ = 0;
          $785 = $784&1;
          if ($785) {
           label = 21;
           break L3;
          }
         }
         if ($773) {
          HEAP32[$__wb>>2] = $782;
          $794 = $782;
         } else {
          $$pr$i = HEAP32[$__wb>>2]|0;
          HEAP32[$__wb>>2] = $782;
          $786 = ($$pr$i|0)==(0|0);
          if ($786) {
           $794 = $782;
          } else {
           $787 = HEAP32[$15>>2]|0;
           __THREW__ = 0;
           invoke_vi($787|0,($$pr$i|0));
           $788 = __THREW__; __THREW__ = 0;
           $789 = $788&1;
           if ($789) {
            label = 309;
            break L3;
           }
           $$pre$i = HEAP32[$__wb>>2]|0;
           $794 = $$pre$i;
          }
         }
         HEAP32[$15>>2] = 112;
         $792 = $$$i >>> 2;
         $793 = (($794) + ($780<<2)|0);
         HEAP32[$__wn>>2] = $793;
         $795 = HEAP32[$__wb>>2]|0;
         $796 = (($795) + ($792<<2)|0);
         $951 = $793;$952 = $796;
        } else {
         $951 = $769;$952 = $771;
        }
        $797 = HEAP32[$__b>>2]|0;
        $798 = (($797) + 12|0);
        $799 = HEAP32[$798>>2]|0;
        $800 = (($797) + 16|0);
        $801 = HEAP32[$800>>2]|0;
        $802 = ($799|0)==($801|0);
        if ($802) {
         $803 = HEAP32[$797>>2]|0;
         $804 = (($803) + 36|0);
         $805 = HEAP32[$804>>2]|0;
         __THREW__ = 0;
         $806 = (invoke_ii($805|0,($797|0))|0);
         $807 = __THREW__; __THREW__ = 0;
         $808 = $807&1;
         if ($808) {
          label = 21;
          break L3;
         }
         $$pre470 = HEAP32[$__wn>>2]|0;
         $$0$i$i64 = $806;$811 = $$pre470;
        } else {
         $809 = HEAP32[$799>>2]|0;
         $$0$i$i64 = $809;$811 = $951;
        }
        $810 = (($811) + 4|0);
        HEAP32[$__wn>>2] = $810;
        HEAP32[$811>>2] = $$0$i$i64;
        $812 = (($813) + -1)|0;
        HEAP32[$__fd>>2] = $812;
        $814 = HEAP32[$__b>>2]|0;
        $815 = (($814) + 12|0);
        $816 = HEAP32[$815>>2]|0;
        $817 = (($814) + 16|0);
        $818 = HEAP32[$817>>2]|0;
        $819 = ($816|0)==($818|0);
        if ($819) {
         $820 = HEAP32[$814>>2]|0;
         $821 = (($820) + 40|0);
         $822 = HEAP32[$821>>2]|0;
         __THREW__ = 0;
         (invoke_ii($822|0,($814|0))|0);
         $823 = __THREW__; __THREW__ = 0;
         $824 = $823&1;
         if ($824) {
          label = 21;
          break L3;
         }
        } else {
         $826 = (($816) + 4|0);
         HEAP32[$815>>2] = $826;
        }
        $825 = ($812|0)>(0);
        if ($825) {
         $$pre$i3$i$i97 = $$pre$i3$i$i97459475;$733 = $950;$771 = $952;$813 = $812;
        } else {
         $947 = $952;
         break;
        }
       }
      } else {
       $947 = $561;
      }
      $827 = HEAP32[$__wn>>2]|0;
      $828 = HEAP32[$__wb>>2]|0;
      $829 = ($827|0)==($828|0);
      if ($829) {
       label = 320;
       break L3;
      } else {
       $928 = $947;$929 = $932;$930 = $943;$931 = $944;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free230;
      }
      break;
     }
     default: {
      $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
     }
     }
    } while(0);
    L380: do {
     if ((label|0) == 42) {
      label = 0;
      $109 = ($__p$0377|0)==(3);
      if ($109) {
       $$lcssa313 = $924;$$lcssa330 = $923;$__trailing_sign$0$lcssa = $__trailing_sign$0379;$free228$lcssa = $free228372;
       label = 322;
       break L3;
      } else {
       $$pre$i3$i$i47 = $927;$126 = $927;
      }
      while(1) {
       $110 = HEAP32[$__b>>2]|0;
       $111 = ($110|0)==(0|0);
       do {
        if ($111) {
         $140 = 1;
        } else {
         $112 = (($110) + 12|0);
         $113 = HEAP32[$112>>2]|0;
         $114 = (($110) + 16|0);
         $115 = HEAP32[$114>>2]|0;
         $116 = ($113|0)==($115|0);
         if ($116) {
          $117 = HEAP32[$110>>2]|0;
          $118 = (($117) + 36|0);
          $119 = HEAP32[$118>>2]|0;
          __THREW__ = 0;
          $120 = (invoke_ii($119|0,($110|0))|0);
          $121 = __THREW__; __THREW__ = 0;
          $122 = $121&1;
          if ($122) {
           label = 24;
           break L3;
          } else {
           $$0$i$i$i$i39 = $120;
          }
         } else {
          $123 = HEAP32[$113>>2]|0;
          $$0$i$i$i$i39 = $123;
         }
         $124 = ($$0$i$i$i$i39|0)==(-1);
         if ($124) {
          HEAP32[$__b>>2] = 0;
          $140 = 1;
          break;
         } else {
          $$pre$i$i$i41 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i42 = ($$pre$i$i$i41|0)==(0|0);
          $140 = $phitmp$i$i$i42;
          break;
         }
        }
       } while(0);
       $125 = ($126|0)==(0|0);
       do {
        if ($125) {
         $$pre$i3$i$i47452 = $$pre$i3$i$i47;
         label = 56;
        } else {
         $127 = (($126) + 12|0);
         $128 = HEAP32[$127>>2]|0;
         $129 = (($126) + 16|0);
         $130 = HEAP32[$129>>2]|0;
         $131 = ($128|0)==($130|0);
         if ($131) {
          $132 = HEAP32[$126>>2]|0;
          $133 = (($132) + 36|0);
          $134 = HEAP32[$133>>2]|0;
          __THREW__ = 0;
          $135 = (invoke_ii($134|0,($126|0))|0);
          $136 = __THREW__; __THREW__ = 0;
          $137 = $136&1;
          if ($137) {
           label = 24;
           break L3;
          } else {
           $$0$i$i1$i$i45 = $135;
          }
         } else {
          $138 = HEAP32[$128>>2]|0;
          $$0$i$i1$i$i45 = $138;
         }
         $139 = ($$0$i$i1$i$i45|0)==(-1);
         if ($139) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i47452 = 0;
          label = 56;
          break;
         } else {
          $phitmp$i4$i$i48 = ($$pre$i3$i$i47|0)==(0|0);
          $tmp$i$i50 = $140 ^ $phitmp$i4$i$i48;
          if ($tmp$i$i50) {
           $$pre$i3$i$i47454 = $$pre$i3$i$i47;$933 = $$pre$i3$i$i47;
           break;
          } else {
           $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
           break L380;
          }
         }
        }
       } while(0);
       if ((label|0) == 56) {
        label = 0;
        if ($140) {
         $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
         break L380;
        } else {
         $$pre$i3$i$i47454 = $$pre$i3$i$i47452;$933 = 0;
        }
       }
       $141 = HEAP32[$__b>>2]|0;
       $142 = (($141) + 12|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = (($141) + 16|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = ($143|0)==($145|0);
       if ($146) {
        $147 = HEAP32[$141>>2]|0;
        $148 = (($147) + 36|0);
        $149 = HEAP32[$148>>2]|0;
        __THREW__ = 0;
        $150 = (invoke_ii($149|0,($141|0))|0);
        $151 = __THREW__; __THREW__ = 0;
        $152 = $151&1;
        if ($152) {
         label = 24;
         break L3;
        } else {
         $$0$i$i54 = $150;
        }
       } else {
        $153 = HEAP32[$143>>2]|0;
        $$0$i$i54 = $153;
       }
       $154 = HEAP32[$__ct>>2]|0;
       $155 = (($154) + 12|0);
       $156 = HEAP32[$155>>2]|0;
       __THREW__ = 0;
       $157 = (invoke_iiii($156|0,($__ct|0),8192,($$0$i$i54|0))|0);
       $158 = __THREW__; __THREW__ = 0;
       $159 = $158&1;
       if ($159) {
        label = 24;
        break L3;
       }
       if (!($157)) {
        $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
        break L380;
       }
       $160 = HEAP32[$__b>>2]|0;
       $161 = (($160) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = (($160) + 16|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($162|0)==($164|0);
       if ($165) {
        $166 = HEAP32[$160>>2]|0;
        $167 = (($166) + 40|0);
        $168 = HEAP32[$167>>2]|0;
        __THREW__ = 0;
        $169 = (invoke_ii($168|0,($160|0))|0);
        $170 = __THREW__; __THREW__ = 0;
        $171 = $170&1;
        if ($171) {
         label = 24;
         break L3;
        } else {
         $$0$i$i59 = $169;
        }
       } else {
        $172 = (($162) + 4|0);
        HEAP32[$161>>2] = $172;
        $173 = HEAP32[$162>>2]|0;
        $$0$i$i59 = $173;
       }
       __THREW__ = 0;
       invoke_vii(51,($__spaces|0),($$0$i$i59|0));
       $174 = __THREW__; __THREW__ = 0;
       $175 = $174&1;
       if ($175) {
        label = 24;
        break L3;
       } else {
        $$pre$i3$i$i47 = $$pre$i3$i$i47454;$126 = $933;
       }
      }
     }
    } while(0);
    $832 = (($__p$0377) + 1)|0;
    $833 = ($832>>>0)<(4);
    if ($833) {
     $922 = $931;$923 = $930;$924 = $929;$925 = $928;$__p$0377 = $832;$__trailing_sign$0379 = $__trailing_sign$1;$free228372 = $free229;
    } else {
     $$lcssa313 = $929;$$lcssa330 = $930;$__trailing_sign$0$lcssa = $__trailing_sign$1;$free228$lcssa = $free229;
     label = 322;
     break;
    }
   }
   L417: do {
    if ((label|0) == 20) {
     $52 = ___cxa_find_matching_catch(-1,-1)|0;
     $53 = tempRet0;
     $67 = $$ph$ph;$free232 = $free232$ph$ph;$lpad$phi$index = $52;$lpad$phi$index8 = $53;
     break L1;
    }
    else if ((label|0) == 21) {
     $54 = ___cxa_find_matching_catch(-1,-1)|0;
     $55 = tempRet0;
     $67 = $932;$free232 = $free230;$lpad$phi$index = $54;$lpad$phi$index8 = $55;
     break L1;
    }
    else if ((label|0) == 22) {
     $56 = ___cxa_find_matching_catch(-1,-1)|0;
     $57 = tempRet0;
     $67 = $924;$free232 = $free228372;$lpad$phi$index = $56;$lpad$phi$index8 = $57;
     break L1;
    }
    else if ((label|0) == 23) {
     $58 = ___cxa_find_matching_catch(-1,-1)|0;
     $59 = tempRet0;
     $67 = $924;$free232 = $free228372;$lpad$phi$index = $58;$lpad$phi$index8 = $59;
     break L1;
    }
    else if ((label|0) == 24) {
     $60 = ___cxa_find_matching_catch(-1,-1)|0;
     $61 = tempRet0;
     $67 = $924;$free232 = $free228372;$lpad$phi$index = $60;$lpad$phi$index8 = $61;
     break L1;
    }
    else if ((label|0) == 25) {
     $62 = ___cxa_find_matching_catch(-1,-1)|0;
     $63 = tempRet0;
     $67 = $$ph$ph251$ph$ph$ph$ph$ph;$free232 = $free232$ph$ph250$ph$ph$ph$ph$ph;$lpad$phi$index = $62;$lpad$phi$index8 = $63;
     break L1;
    }
    else if ((label|0) == 41) {
     $107 = HEAP32[$__err>>2]|0;
     $108 = $107 | 4;
     HEAP32[$__err>>2] = $108;
     $$0 = 0;$917 = $924;$free234 = $free228372;
    }
    else if ((label|0) == 134) {
     $351 = HEAP32[$__err>>2]|0;
     $352 = $351 | 4;
     HEAP32[$__err>>2] = $352;
     $$0 = 0;$917 = $924;$free234 = $free228372;
    }
    else if ((label|0) == 193) {
     $508 = HEAP32[$__err>>2]|0;
     $509 = $508 | 4;
     HEAP32[$__err>>2] = $509;
     $$0 = 0;$917 = $924;$free234 = $free228372;
    }
    else if ((label|0) == 224) {
     $580 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $581 = tempRet0;
     ___clang_call_terminate($580);
     // unreachable;
    }
    else if ((label|0) == 274) {
     $703 = HEAP32[$__err>>2]|0;
     $704 = $703 | 4;
     HEAP32[$__err>>2] = $704;
     $$0 = 0;$917 = $932;$free234 = $free230;
    }
    else if ((label|0) == 298) {
     $767 = HEAP32[$__err>>2]|0;
     $768 = $767 | 4;
     HEAP32[$__err>>2] = $768;
     $$0 = 0;$917 = $932;$free234 = $free230;
    }
    else if ((label|0) == 309) {
     $790 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $791 = tempRet0;
     ___clang_call_terminate($790);
     // unreachable;
    }
    else if ((label|0) == 320) {
     $830 = HEAP32[$__err>>2]|0;
     $831 = $830 | 4;
     HEAP32[$__err>>2] = $831;
     $$0 = 0;$917 = $932;$free234 = $free230;
    }
    else if ((label|0) == 322) {
     $834 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L432: do {
      if (!($834)) {
       $835 = (($__trailing_sign$0$lcssa) + 4|0);
       $836 = (($__trailing_sign$0$lcssa) + 8|0);
       $__i$0 = 1;
       L434: while(1) {
        $837 = HEAP8[$__trailing_sign$0$lcssa]|0;
        $838 = $837 & 1;
        $839 = ($838<<24>>24)==(0);
        if ($839) {
         $841 = $837&255;
         $842 = $841 >>> 1;
         $844 = $842;
        } else {
         $840 = HEAP32[$835>>2]|0;
         $844 = $840;
        }
        $843 = ($__i$0>>>0)<($844>>>0);
        if (!($843)) {
         break L432;
        }
        $845 = HEAP32[$__b>>2]|0;
        $846 = ($845|0)==(0|0);
        do {
         if ($846) {
          $953 = 1;
         } else {
          $847 = (($845) + 12|0);
          $848 = HEAP32[$847>>2]|0;
          $849 = (($845) + 16|0);
          $850 = HEAP32[$849>>2]|0;
          $851 = ($848|0)==($850|0);
          if ($851) {
           $852 = HEAP32[$845>>2]|0;
           $853 = (($852) + 36|0);
           $854 = HEAP32[$853>>2]|0;
           __THREW__ = 0;
           $855 = (invoke_ii($854|0,($845|0))|0);
           $856 = __THREW__; __THREW__ = 0;
           $857 = $856&1;
           if ($857) {
            label = 19;
            break L434;
           } else {
            $$0$i$i$i$i = $855;
           }
          } else {
           $858 = HEAP32[$848>>2]|0;
           $$0$i$i$i$i = $858;
          }
          $859 = ($$0$i$i$i$i|0)==(-1);
          if ($859) {
           HEAP32[$__b>>2] = 0;
           $953 = 1;
           break;
          } else {
           $$pre$i$i$i = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
           $953 = $phitmp$i$i$i;
           break;
          }
         }
        } while(0);
        $860 = HEAP32[$__e>>2]|0;
        $861 = ($860|0)==(0|0);
        do {
         if ($861) {
          label = 341;
         } else {
          $862 = (($860) + 12|0);
          $863 = HEAP32[$862>>2]|0;
          $864 = (($860) + 16|0);
          $865 = HEAP32[$864>>2]|0;
          $866 = ($863|0)==($865|0);
          if ($866) {
           $867 = HEAP32[$860>>2]|0;
           $868 = (($867) + 36|0);
           $869 = HEAP32[$868>>2]|0;
           __THREW__ = 0;
           $870 = (invoke_ii($869|0,($860|0))|0);
           $871 = __THREW__; __THREW__ = 0;
           $872 = $871&1;
           if ($872) {
            label = 19;
            break L434;
           } else {
            $$0$i$i1$i$i = $870;
           }
          } else {
           $873 = HEAP32[$863>>2]|0;
           $$0$i$i1$i$i = $873;
          }
          $874 = ($$0$i$i1$i$i|0)==(-1);
          if ($874) {
           HEAP32[$__e>>2] = 0;
           label = 341;
           break;
          } else {
           if ($953) {
            break;
           } else {
            label = 349;
            break L434;
           }
          }
         }
        } while(0);
        if ((label|0) == 341) {
         label = 0;
         if ($953) {
          label = 349;
          break;
         }
        }
        $875 = HEAP32[$__b>>2]|0;
        $876 = (($875) + 12|0);
        $877 = HEAP32[$876>>2]|0;
        $878 = (($875) + 16|0);
        $879 = HEAP32[$878>>2]|0;
        $880 = ($877|0)==($879|0);
        if ($880) {
         $881 = HEAP32[$875>>2]|0;
         $882 = (($881) + 36|0);
         $883 = HEAP32[$882>>2]|0;
         __THREW__ = 0;
         $884 = (invoke_ii($883|0,($875|0))|0);
         $885 = __THREW__; __THREW__ = 0;
         $886 = $885&1;
         if ($886) {
          label = 19;
          break;
         } else {
          $$0$i$i = $884;
         }
        } else {
         $887 = HEAP32[$877>>2]|0;
         $$0$i$i = $887;
        }
        $888 = HEAP8[$__trailing_sign$0$lcssa]|0;
        $889 = $888 & 1;
        $890 = ($889<<24>>24)==(0);
        if ($890) {
         $893 = $835;
        } else {
         $891 = HEAP32[$836>>2]|0;
         $893 = $891;
        }
        $892 = (($893) + ($__i$0<<2)|0);
        $894 = HEAP32[$892>>2]|0;
        $895 = ($$0$i$i|0)==($894|0);
        if (!($895)) {
         label = 349;
         break;
        }
        $898 = (($__i$0) + 1)|0;
        $899 = HEAP32[$__b>>2]|0;
        $900 = (($899) + 12|0);
        $901 = HEAP32[$900>>2]|0;
        $902 = (($899) + 16|0);
        $903 = HEAP32[$902>>2]|0;
        $904 = ($901|0)==($903|0);
        if ($904) {
         $905 = HEAP32[$899>>2]|0;
         $906 = (($905) + 40|0);
         $907 = HEAP32[$906>>2]|0;
         __THREW__ = 0;
         (invoke_ii($907|0,($899|0))|0);
         $908 = __THREW__; __THREW__ = 0;
         $909 = $908&1;
         if ($909) {
          label = 19;
          break;
         } else {
          $__i$0 = $898;
          continue;
         }
        } else {
         $910 = (($901) + 4|0);
         HEAP32[$900>>2] = $910;
         $__i$0 = $898;
         continue;
        }
       }
       if ((label|0) == 19) {
        $50 = ___cxa_find_matching_catch(-1,-1)|0;
        $51 = tempRet0;
        $67 = $$lcssa313;$free232 = $free228$lcssa;$lpad$phi$index = $50;$lpad$phi$index8 = $51;
        break L1;
       }
       else if ((label|0) == 349) {
        $896 = HEAP32[$__err>>2]|0;
        $897 = $896 | 4;
        HEAP32[$__err>>2] = $897;
        $$0 = 0;$917 = $$lcssa313;$free234 = $free228$lcssa;
        break L417;
       }
      }
     } while(0);
     $911 = ($$lcssa313|0)==($$lcssa330|0);
     if ($911) {
      $$0 = 1;$917 = $$lcssa330;$free234 = $free228$lcssa;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$$lcssa313,$$lcssa330,$__et);
      $912 = HEAP32[$__et>>2]|0;
      $913 = ($912|0)==(0);
      if ($913) {
       $$0 = 1;$917 = $$lcssa313;$free234 = $free228$lcssa;
      } else {
       $914 = HEAP32[$__err>>2]|0;
       $915 = $914 | 4;
       HEAP32[$__err>>2] = $915;
       $$0 = 0;$917 = $$lcssa313;$free234 = $free228$lcssa;
      }
     }
    }
   } while(0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $916 = ($917|0)==(0|0);
   if ($916) {
    STACKTOP = sp;return ($$0|0);
   }
   __THREW__ = 0;
   invoke_vi($free234|0,($917|0));
   $918 = __THREW__; __THREW__ = 0;
   $919 = $918&1;
   if ($919) {
    $920 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $921 = tempRet0;
    ___clang_call_terminate($920);
    // unreachable;
   } else {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $66 = ($67|0)==(0|0);
 if ($66) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi($free232|0,($67|0));
 $68 = __THREW__; __THREW__ = 0;
 $69 = $68&1;
 if ($69) {
  $70 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $71 = tempRet0;
  ___clang_call_terminate($70);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0116 = 0, $$0117 = 0, $$018 = 0, $$019 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__p$i$i$i$i = 0, $__w$0$lcssa = 0, $__w$09 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0;
 $$byval_copy = sp + 436|0;
 $__p$i$i$i$i = sp;
 $__wbuf = sp + 16|0;
 $__wb = sp + 416|0;
 $__wn = sp + 424|0;
 $__loc = sp + 428|0;
 $__neg = sp + 440|0;
 $0 = sp + 432|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 124;
 $2 = (($__wbuf) + 400|0);
 __THREW__ = 0;
 invoke_vii(48,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $52 = ___cxa_find_matching_catch(-1,-1)|0;
  $53 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$0116 = $53;$$018 = $52;$115 = $__wbuf;
 } else {
  $5 = HEAP32[$__loc>>2]|0;
  $6 = HEAP32[18784>>2]|0;
  $7 = ($6|0)==(-1);
  if ($7) {
   label = 4;
  } else {
   HEAP32[$__p$i$i$i$i>>2] = 18784;
   $8 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$8>>2] = (121);
   $9 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$9>>2] = 0;
   __THREW__ = 0;
   invoke_viii(6,(18784|0),($__p$i$i$i$i|0),(122|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    label = 4;
   }
  }
  L6: do {
   if ((label|0) == 4) {
    $12 = HEAP32[((18784 + 4|0))>>2]|0;
    $13 = (($12) + -1)|0;
    $14 = (($5) + 12|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (($5) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $15;
    $19 = $17;
    $20 = (($18) - ($19))|0;
    $21 = $20 >> 2;
    $22 = ($21>>>0)>($13>>>0);
    if ($22) {
     $23 = (($17) + ($13<<2)|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(0|0);
     if (!($25)) {
      HEAP8[$__neg] = 0;
      $29 = HEAP32[$__e>>2]|0;
      HEAP32[$0>>2] = $29;
      $30 = (($__iob) + 4|0);
      $31 = HEAP32[$30>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
      $32 = (invoke_iiiiiiiiiiii(2,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($31|0),($__err|0),($__neg|0),($24|0),($__wb|0),($__wn|0),($2|0))|0);
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       break;
      }
      if ($32) {
       $35 = HEAP8[$__v]|0;
       $36 = $35 & 1;
       $37 = ($36<<24>>24)==(0);
       if ($37) {
        $41 = (($__v) + 4|0);
        HEAP32[$41>>2] = 0;
        HEAP8[$__v] = 0;
       } else {
        $38 = (($__v) + 8|0);
        $39 = HEAP32[$38>>2]|0;
        HEAP32[$39>>2] = 0;
        $40 = (($__v) + 4|0);
        HEAP32[$40>>2] = 0;
       }
       $42 = HEAP8[$__neg]|0;
       $43 = ($42<<24>>24)==(0);
       if (!($43)) {
        $44 = HEAP32[$24>>2]|0;
        $45 = (($44) + 44|0);
        $46 = HEAP32[$45>>2]|0;
        __THREW__ = 0;
        $47 = (invoke_iii($46|0,($24|0),45)|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         break;
        }
        __THREW__ = 0;
        invoke_vii(51,($__v|0),($47|0));
        $50 = __THREW__; __THREW__ = 0;
        $51 = $50&1;
        if ($51) {
         break;
        }
       }
       $54 = HEAP32[$24>>2]|0;
       $55 = (($54) + 44|0);
       $56 = HEAP32[$55>>2]|0;
       __THREW__ = 0;
       $57 = (invoke_iii($56|0,($24|0),48)|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        break;
       }
       $60 = HEAP32[$__wb>>2]|0;
       $61 = HEAP32[$__wn>>2]|0;
       $62 = (($61) + -4|0);
       $63 = ($60>>>0)<($62>>>0);
       L23: do {
        if ($63) {
         $__w$09 = $60;
         while(1) {
          $66 = HEAP32[$__w$09>>2]|0;
          $67 = ($66|0)==($57|0);
          $65 = (($__w$09) + 4|0);
          if (!($67)) {
           $__w$0$lcssa = $__w$09;
           break L23;
          }
          $64 = ($65>>>0)<($62>>>0);
          if ($64) {
           $__w$09 = $65;
          } else {
           $__w$0$lcssa = $65;
           break;
          }
         }
        } else {
         $__w$0$lcssa = $60;
        }
       } while(0);
       __THREW__ = 0;
       (invoke_iiii(28,($__v|0),($__w$0$lcssa|0),($61|0))|0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        break;
       }
      }
      $70 = HEAP32[$__b>>2]|0;
      $71 = ($70|0)==(0|0);
      do {
       if ($71) {
        $120 = 1;
       } else {
        $72 = (($70) + 12|0);
        $73 = HEAP32[$72>>2]|0;
        $74 = (($70) + 16|0);
        $75 = HEAP32[$74>>2]|0;
        $76 = ($73|0)==($75|0);
        if ($76) {
         $77 = HEAP32[$70>>2]|0;
         $78 = (($77) + 36|0);
         $79 = HEAP32[$78>>2]|0;
         __THREW__ = 0;
         $80 = (invoke_ii($79|0,($70|0))|0);
         $81 = __THREW__; __THREW__ = 0;
         $82 = $81&1;
         if ($82) {
          break L6;
         } else {
          $$0$i$i$i$i = $80;
         }
        } else {
         $83 = HEAP32[$73>>2]|0;
         $$0$i$i$i$i = $83;
        }
        $84 = ($$0$i$i$i$i|0)==(-1);
        if ($84) {
         HEAP32[$__b>>2] = 0;
         $120 = 1;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
         $120 = $phitmp$i$i$i;
         break;
        }
       }
      } while(0);
      $85 = ($29|0)==(0|0);
      do {
       if ($85) {
        label = 35;
       } else {
        $86 = (($29) + 12|0);
        $87 = HEAP32[$86>>2]|0;
        $88 = (($29) + 16|0);
        $89 = HEAP32[$88>>2]|0;
        $90 = ($87|0)==($89|0);
        if ($90) {
         $91 = HEAP32[$29>>2]|0;
         $92 = (($91) + 36|0);
         $93 = HEAP32[$92>>2]|0;
         __THREW__ = 0;
         $94 = (invoke_ii($93|0,($29|0))|0);
         $95 = __THREW__; __THREW__ = 0;
         $96 = $95&1;
         if ($96) {
          break L6;
         } else {
          $$0$i$i1$i$i = $94;
         }
        } else {
         $97 = HEAP32[$87>>2]|0;
         $$0$i$i1$i$i = $97;
        }
        $98 = ($$0$i$i1$i$i|0)==(-1);
        if ($98) {
         HEAP32[$__e>>2] = 0;
         label = 35;
         break;
        } else {
         if ($120) {
          break;
         } else {
          label = 37;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 35) {
       if ($120) {
        label = 37;
       }
      }
      if ((label|0) == 37) {
       $99 = HEAP32[$__err>>2]|0;
       $100 = $99 | 2;
       HEAP32[$__err>>2] = $100;
      }
      $101 = HEAP32[$__b>>2]|0;
      HEAP32[$agg$result>>2] = $101;
      $102 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($102)|0);
      $103 = HEAP32[$__wb>>2]|0;
      HEAP32[$__wb>>2] = 0;
      $104 = ($103|0)==(0|0);
      if ($104) {
       STACKTOP = sp;return;
      }
      $105 = HEAP32[$1>>2]|0;
      __THREW__ = 0;
      invoke_vi($105|0,($103|0));
      $106 = __THREW__; __THREW__ = 0;
      $107 = $106&1;
      if ($107) {
       $108 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $109 = tempRet0;
       ___clang_call_terminate($108);
       // unreachable;
      } else {
       STACKTOP = sp;return;
      }
     }
    }
    $26 = (___cxa_allocate_exception(4)|0);
    __ZNSt8bad_castC2Ev($26);
    __THREW__ = 0;
    invoke_viii(7,($26|0),(26752|0),(102|0));
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     // unreachable;
    }
   }
  } while(0);
  $110 = ___cxa_find_matching_catch(-1,-1)|0;
  $111 = tempRet0;
  $112 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($112)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $113 = ($$pre|0)==(0|0);
  if ($113) {
   $$0117 = $111;$$019 = $110;
   ___resumeException($$019|0);
   // unreachable;
  } else {
   $$0116 = $111;$$018 = $110;$115 = $$pre;
  }
 }
 $114 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi($114|0,($115|0));
 $116 = __THREW__; __THREW__ = 0;
 $117 = $116&1;
 if ($117) {
  $118 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $119 = tempRet0;
  ___clang_call_terminate($118);
  // unreachable;
 } else {
  $$0117 = $$0116;$$019 = $$018;
  ___resumeException($$019|0);
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$02 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep5 = 0, $uglygep = 0, $uglygep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $16 = 1;$17 = $5;$45 = $1;
 } else {
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $16 = $phitmp$i;$17 = $7;$45 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = $12 >> 2;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return ($this|0);
 }
 $15 = (($16) - ($17))|0;
 $18 = ($15>>>0)<($13>>>0);
 if ($18) {
  $19 = (($17) + ($13))|0;
  $20 = (($19) - ($16))|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$16,$20,$17,$17,0,0);
  $$pre = HEAP8[$this]|0;
  $22 = $$pre;
 } else {
  $22 = $45;
 }
 $21 = $22 & 1;
 $23 = ($21<<24>>24)==(0);
 if ($23) {
  $26 = (($this) + 4|0);
  $28 = $26;
 } else {
  $24 = (($this) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $28 = $25;
 }
 $27 = (($28) + ($17<<2)|0);
 $29 = ($__first|0)==($__last|0);
 if ($29) {
  $__p$0$lcssa = $27;
 } else {
  $scevgep = (($__last) + -4|0);
  $30 = (0 - ($0))|0;
  $uglygep = (($scevgep) + ($30)|0);
  $uglygep4 = $uglygep;
  $31 = $uglygep4 >>> 2;
  $32 = (($17) + ($31))|0;
  $33 = (($32) + 1)|0;
  $$01 = $__first;$__p$02 = $27;
  while(1) {
   $34 = HEAP32[$$01>>2]|0;
   HEAP32[$__p$02>>2] = $34;
   $35 = (($__p$02) + 4|0);
   $36 = (($$01) + 4|0);
   $37 = ($36|0)==($__last|0);
   if ($37) {
    break;
   } else {
    $$01 = $36;$__p$02 = $35;
   }
  }
  $scevgep5 = (($28) + ($33<<2)|0);
  $__p$0$lcssa = $scevgep5;
 }
 HEAP32[$__p$0$lcssa>>2] = 0;
 $38 = (($17) + ($13))|0;
 $39 = HEAP8[$this]|0;
 $40 = $39 & 1;
 $41 = ($40<<24>>24)==(0);
 if ($41) {
  $43 = $38 << 1;
  $44 = $43&255;
  HEAP8[$this] = $44;
  STACKTOP = sp;return ($this|0);
 } else {
  $42 = (($this) + 4|0);
  HEAP32[$42>>2] = $38;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i6 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $__p$i$i$i$i6 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 116|0;
 $1 = sp + 104|0;
 $2 = sp + 92|0;
 $3 = sp + 80|0;
 $4 = sp + 120|0;
 $5 = sp + 52|0;
 $6 = sp + 40|0;
 $7 = sp + 28|0;
 $8 = sp + 56|0;
 $9 = sp + 68|0;
 if ($__intl) {
  $10 = HEAP32[$__loc>>2]|0;
  $11 = HEAP32[18360>>2]|0;
  $12 = ($11|0)==(-1);
  if (!($12)) {
   HEAP32[$__p$i$i$i$i>>2] = 18360;
   $13 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$13>>2] = (121);
   $14 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$14>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(18360,$__p$i$i$i$i,122);
  }
  $15 = HEAP32[((18360 + 4|0))>>2]|0;
  $16 = (($15) + -1)|0;
  $17 = (($10) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($10) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $18;
  $22 = $20;
  $23 = (($21) - ($22))|0;
  $24 = $23 >> 2;
  $25 = ($24>>>0)>($16>>>0);
  if (!($25)) {
   $29 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($29);
   ___cxa_throw(($29|0),(26752|0),(102|0));
   // unreachable;
  }
  $26 = (($20) + ($16<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0|0);
  if ($28) {
   $29 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($29);
   ___cxa_throw(($29|0),(26752|0),(102|0));
   // unreachable;
  }
  $30 = HEAP32[$27>>2]|0;
  $31 = (($30) + 44|0);
  $32 = HEAP32[$31>>2]|0;
  FUNCTION_TABLE_vii[$32 & 63]($0,$27);
  $33 = HEAP32[$0>>2]|0;
  HEAP8[$__pat]=$33&255;HEAP8[$__pat+1|0]=($33>>8)&255;HEAP8[$__pat+2|0]=($33>>16)&255;HEAP8[$__pat+3|0]=$33>>24;
  $34 = HEAP32[$27>>2]|0;
  $35 = (($34) + 32|0);
  $36 = HEAP32[$35>>2]|0;
  FUNCTION_TABLE_vii[$36 & 63]($1,$27);
  $37 = HEAP8[$__nsn]|0;
  $38 = $37 & 1;
  $39 = ($38<<24>>24)==(0);
  if ($39) {
   $43 = (($__nsn) + 4|0);
   HEAP32[$43>>2] = 0;
   HEAP8[$__nsn] = 0;
  } else {
   $40 = (($__nsn) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   HEAP32[$41>>2] = 0;
   $42 = (($__nsn) + 4|0);
   HEAP32[$42>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(52,($__nsn|0),0);
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  if ($45) {
   $46 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $47 = tempRet0;
   ___clang_call_terminate($46);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
  $48 = HEAP32[$27>>2]|0;
  $49 = (($48) + 28|0);
  $50 = HEAP32[$49>>2]|0;
  FUNCTION_TABLE_vii[$50 & 63]($2,$27);
  $51 = HEAP8[$__psn]|0;
  $52 = $51 & 1;
  $53 = ($52<<24>>24)==(0);
  if ($53) {
   $57 = (($__psn) + 4|0);
   HEAP32[$57>>2] = 0;
   HEAP8[$__psn] = 0;
  } else {
   $54 = (($__psn) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   HEAP32[$55>>2] = 0;
   $56 = (($__psn) + 4|0);
   HEAP32[$56>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(52,($__psn|0),0);
  $58 = __THREW__; __THREW__ = 0;
  $59 = $58&1;
  if ($59) {
   $60 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $61 = tempRet0;
   ___clang_call_terminate($60);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
  $62 = HEAP32[$27>>2]|0;
  $63 = (($62) + 12|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (FUNCTION_TABLE_ii[$64 & 127]($27)|0);
  HEAP32[$__dp>>2] = $65;
  $66 = HEAP32[$27>>2]|0;
  $67 = (($66) + 16|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (FUNCTION_TABLE_ii[$68 & 127]($27)|0);
  HEAP32[$__ts>>2] = $69;
  $70 = HEAP32[$27>>2]|0;
  $71 = (($70) + 20|0);
  $72 = HEAP32[$71>>2]|0;
  FUNCTION_TABLE_vii[$72 & 63]($3,$27);
  $73 = HEAP8[$__grp]|0;
  $74 = $73 & 1;
  $75 = ($74<<24>>24)==(0);
  if ($75) {
   $79 = (($__grp) + 1|0);
   HEAP8[$79] = 0;
   HEAP8[$__grp] = 0;
  } else {
   $76 = (($__grp) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   HEAP8[$77] = 0;
   $78 = (($__grp) + 4|0);
   HEAP32[$78>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(50,($__grp|0),0);
  $80 = __THREW__; __THREW__ = 0;
  $81 = $80&1;
  if ($81) {
   $82 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $83 = tempRet0;
   ___clang_call_terminate($82);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  $84 = HEAP32[$27>>2]|0;
  $85 = (($84) + 24|0);
  $86 = HEAP32[$85>>2]|0;
  FUNCTION_TABLE_vii[$86 & 63]($4,$27);
  $87 = HEAP8[$__sym]|0;
  $88 = $87 & 1;
  $89 = ($88<<24>>24)==(0);
  if ($89) {
   $93 = (($__sym) + 4|0);
   HEAP32[$93>>2] = 0;
   HEAP8[$__sym] = 0;
  } else {
   $90 = (($__sym) + 8|0);
   $91 = HEAP32[$90>>2]|0;
   HEAP32[$91>>2] = 0;
   $92 = (($__sym) + 4|0);
   HEAP32[$92>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(52,($__sym|0),0);
  $94 = __THREW__; __THREW__ = 0;
  $95 = $94&1;
  if ($95) {
   $96 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $97 = tempRet0;
   ___clang_call_terminate($96);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($4);
  $98 = HEAP32[$27>>2]|0;
  $99 = (($98) + 36|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (FUNCTION_TABLE_ii[$100 & 127]($27)|0);
  $storemerge = $101;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $102 = HEAP32[$__loc>>2]|0;
  $103 = HEAP32[18296>>2]|0;
  $104 = ($103|0)==(-1);
  if (!($104)) {
   HEAP32[$__p$i$i$i$i6>>2] = 18296;
   $105 = (($__p$i$i$i$i6) + 4|0);
   HEAP32[$105>>2] = (121);
   $106 = (($__p$i$i$i$i6) + 8|0);
   HEAP32[$106>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(18296,$__p$i$i$i$i6,122);
  }
  $107 = HEAP32[((18296 + 4|0))>>2]|0;
  $108 = (($107) + -1)|0;
  $109 = (($102) + 12|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($102) + 8|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = $110;
  $114 = $112;
  $115 = (($113) - ($114))|0;
  $116 = $115 >> 2;
  $117 = ($116>>>0)>($108>>>0);
  if (!($117)) {
   $121 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($121);
   ___cxa_throw(($121|0),(26752|0),(102|0));
   // unreachable;
  }
  $118 = (($112) + ($108<<2)|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ($119|0)==(0|0);
  if ($120) {
   $121 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($121);
   ___cxa_throw(($121|0),(26752|0),(102|0));
   // unreachable;
  }
  $122 = HEAP32[$119>>2]|0;
  $123 = (($122) + 44|0);
  $124 = HEAP32[$123>>2]|0;
  FUNCTION_TABLE_vii[$124 & 63]($5,$119);
  $125 = HEAP32[$5>>2]|0;
  HEAP8[$__pat]=$125&255;HEAP8[$__pat+1|0]=($125>>8)&255;HEAP8[$__pat+2|0]=($125>>16)&255;HEAP8[$__pat+3|0]=$125>>24;
  $126 = HEAP32[$119>>2]|0;
  $127 = (($126) + 32|0);
  $128 = HEAP32[$127>>2]|0;
  FUNCTION_TABLE_vii[$128 & 63]($6,$119);
  $129 = HEAP8[$__nsn]|0;
  $130 = $129 & 1;
  $131 = ($130<<24>>24)==(0);
  if ($131) {
   $135 = (($__nsn) + 4|0);
   HEAP32[$135>>2] = 0;
   HEAP8[$__nsn] = 0;
  } else {
   $132 = (($__nsn) + 8|0);
   $133 = HEAP32[$132>>2]|0;
   HEAP32[$133>>2] = 0;
   $134 = (($__nsn) + 4|0);
   HEAP32[$134>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(52,($__nsn|0),0);
  $136 = __THREW__; __THREW__ = 0;
  $137 = $136&1;
  if ($137) {
   $138 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $139 = tempRet0;
   ___clang_call_terminate($138);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($6);
  $140 = HEAP32[$119>>2]|0;
  $141 = (($140) + 28|0);
  $142 = HEAP32[$141>>2]|0;
  FUNCTION_TABLE_vii[$142 & 63]($7,$119);
  $143 = HEAP8[$__psn]|0;
  $144 = $143 & 1;
  $145 = ($144<<24>>24)==(0);
  if ($145) {
   $149 = (($__psn) + 4|0);
   HEAP32[$149>>2] = 0;
   HEAP8[$__psn] = 0;
  } else {
   $146 = (($__psn) + 8|0);
   $147 = HEAP32[$146>>2]|0;
   HEAP32[$147>>2] = 0;
   $148 = (($__psn) + 4|0);
   HEAP32[$148>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(52,($__psn|0),0);
  $150 = __THREW__; __THREW__ = 0;
  $151 = $150&1;
  if ($151) {
   $152 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $153 = tempRet0;
   ___clang_call_terminate($152);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
  $154 = HEAP32[$119>>2]|0;
  $155 = (($154) + 12|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = (FUNCTION_TABLE_ii[$156 & 127]($119)|0);
  HEAP32[$__dp>>2] = $157;
  $158 = HEAP32[$119>>2]|0;
  $159 = (($158) + 16|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (FUNCTION_TABLE_ii[$160 & 127]($119)|0);
  HEAP32[$__ts>>2] = $161;
  $162 = HEAP32[$119>>2]|0;
  $163 = (($162) + 20|0);
  $164 = HEAP32[$163>>2]|0;
  FUNCTION_TABLE_vii[$164 & 63]($8,$119);
  $165 = HEAP8[$__grp]|0;
  $166 = $165 & 1;
  $167 = ($166<<24>>24)==(0);
  if ($167) {
   $171 = (($__grp) + 1|0);
   HEAP8[$171] = 0;
   HEAP8[$__grp] = 0;
  } else {
   $168 = (($__grp) + 8|0);
   $169 = HEAP32[$168>>2]|0;
   HEAP8[$169] = 0;
   $170 = (($__grp) + 4|0);
   HEAP32[$170>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(50,($__grp|0),0);
  $172 = __THREW__; __THREW__ = 0;
  $173 = $172&1;
  if ($173) {
   $174 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $175 = tempRet0;
   ___clang_call_terminate($174);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
  $176 = HEAP32[$119>>2]|0;
  $177 = (($176) + 24|0);
  $178 = HEAP32[$177>>2]|0;
  FUNCTION_TABLE_vii[$178 & 63]($9,$119);
  $179 = HEAP8[$__sym]|0;
  $180 = $179 & 1;
  $181 = ($180<<24>>24)==(0);
  if ($181) {
   $185 = (($__sym) + 4|0);
   HEAP32[$185>>2] = 0;
   HEAP8[$__sym] = 0;
  } else {
   $182 = (($__sym) + 8|0);
   $183 = HEAP32[$182>>2]|0;
   HEAP32[$183>>2] = 0;
   $184 = (($__sym) + 4|0);
   HEAP32[$184>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(52,($__sym|0),0);
  $186 = __THREW__; __THREW__ = 0;
  $187 = $186&1;
  if ($187) {
   $188 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $189 = tempRet0;
   ___clang_call_terminate($188);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
  $190 = HEAP32[$119>>2]|0;
  $191 = (($190) + 36|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = (FUNCTION_TABLE_ii[$192 & 127]($119)|0);
  $storemerge = $193;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0;
 var $vararg_buffer = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0;
 $$byval_copy = sp + 28|0;
 $vararg_buffer6 = sp;
 $vararg_buffer = sp + 8|0;
 $__p$i$i$i$i = sp + 16|0;
 $__buf = sp + 296|0;
 $__bb = sp + 92|0;
 $__digits = sp + 196|0;
 $__loc = sp + 88|0;
 $__pat = sp + 84|0;
 $__dp = sp + 396|0;
 $__ts = sp + 397|0;
 $__grp = sp + 64|0;
 $__sym = sp + 52|0;
 $__sn = sp + 40|0;
 $__fd = sp + 36|0;
 $__mbuf = sp + 96|0;
 $__mi = sp + 32|0;
 $__me = sp + 76|0;
 $0 = sp + 80|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $1 = (_snprintf(($__buf|0),100,(18544|0),($vararg_buffer|0))|0);
 $2 = ($1>>>0)>(99);
 L1: do {
  if ($2) {
   $3 = HEAP8[18688]|0;
   $4 = ($3<<24>>24)==(0);
   do {
    if ($4) {
     $5 = (___cxa_guard_acquire((18688|0))|0);
     $6 = ($5|0)==(0);
     if (!($6)) {
      __THREW__ = 0;
      $7 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
      $8 = __THREW__; __THREW__ = 0;
      $9 = $8&1;
      if ($9) {
       $10 = ___cxa_find_matching_catch(-1,-1)|0;
       $11 = tempRet0;
       ___cxa_guard_abort((18688|0));
       $146 = 0;$147 = 0;$eh$lpad$body$index2Z2D = $11;$eh$lpad$body$indexZ2D = $10;
       label = 12;
       break L1;
      } else {
       HEAP32[18680>>2] = $7;
       ___cxa_guard_release((18688|0));
       break;
      }
     }
    }
   } while(0);
   $12 = HEAP32[18680>>2]|0;
   __THREW__ = 0;
   HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer6>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer6+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $13 = (invoke_iiiii(13,($__bb|0),($12|0),(18544|0),($vararg_buffer6|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $148 = 0;$149 = 0;
    label = 11;
   } else {
    $16 = HEAP32[$__bb>>2]|0;
    $17 = ($16|0)==(0|0);
    if ($17) {
     __THREW__ = 0;
     invoke_v(4);
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $148 = 0;$149 = 0;
      label = 11;
      break;
     }
     $$pre = HEAP32[$__bb>>2]|0;
     $150 = $$pre;
    } else {
     $150 = $16;
    }
    $22 = (_malloc($13)|0);
    $23 = ($22|0)==(0|0);
    if ($23) {
     __THREW__ = 0;
     invoke_v(4);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      $148 = $150;$149 = 0;
      label = 11;
     } else {
      $138 = 0;$140 = $150;$__db$0 = 0;$__n$0 = $13;
      label = 15;
     }
    } else {
     $138 = $22;$140 = $150;$__db$0 = $22;$__n$0 = $13;
     label = 15;
    }
   }
  } else {
   $138 = 0;$140 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 15;
  }
 } while(0);
 if ((label|0) == 15) {
  __THREW__ = 0;
  invoke_vii(48,($__loc|0),($__iob|0));
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  if ($27) {
   $148 = $140;$149 = $138;
   label = 11;
  } else {
   $28 = HEAP32[$__loc>>2]|0;
   $29 = HEAP32[18792>>2]|0;
   $30 = ($29|0)==(-1);
   if ($30) {
    label = 18;
   } else {
    HEAP32[$__p$i$i$i$i>>2] = 18792;
    $31 = (($__p$i$i$i$i) + 4|0);
    HEAP32[$31>>2] = (121);
    $32 = (($__p$i$i$i$i) + 8|0);
    HEAP32[$32>>2] = 0;
    __THREW__ = 0;
    invoke_viii(6,(18792|0),($__p$i$i$i$i|0),(122|0));
    $33 = __THREW__; __THREW__ = 0;
    $34 = $33&1;
    if ($34) {
     label = 45;
    } else {
     label = 18;
    }
   }
   do {
    if ((label|0) == 18) {
     $35 = HEAP32[((18792 + 4|0))>>2]|0;
     $36 = (($35) + -1)|0;
     $37 = (($28) + 12|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (($28) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = $38;
     $42 = $40;
     $43 = (($41) - ($42))|0;
     $44 = $43 >> 2;
     $45 = ($44>>>0)>($36>>>0);
     if ($45) {
      $46 = (($40) + ($36<<2)|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0|0);
      if (!($48)) {
       $52 = HEAP32[$__bb>>2]|0;
       $53 = (($52) + ($__n$0)|0);
       $54 = HEAP32[$47>>2]|0;
       $55 = (($54) + 32|0);
       $56 = HEAP32[$55>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($56|0,($47|0),($52|0),($53|0),($__db$0|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        label = 45;
        break;
       }
       $59 = ($__n$0|0)==(0);
       if ($59) {
        $63 = 0;
       } else {
        $60 = HEAP32[$__bb>>2]|0;
        $61 = HEAP8[$60]|0;
        $62 = ($61<<24>>24)==(45);
        $63 = $62;
       }
       HEAP32[$__pat>>2] = 0;
       ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
       ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
       ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
       __THREW__ = 0;
       invoke_viiiiiiiiii(3,($__intl|0),($63|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
       $64 = __THREW__; __THREW__ = 0;
       $65 = $64&1;
       do {
        if ($65) {
         $117 = ___cxa_find_matching_catch(-1,-1)|0;
         $118 = tempRet0;
         $$0 = $117;$$01 = $118;
        } else {
         $66 = HEAP32[$__fd>>2]|0;
         $67 = ($__n$0|0)>($66|0);
         if ($67) {
          $68 = (($__n$0) - ($66))|0;
          $69 = $68 << 1;
          $70 = HEAP8[$__sn]|0;
          $71 = $70 & 1;
          $72 = ($71<<24>>24)==(0);
          if ($72) {
           $75 = $70&255;
           $76 = $75 >>> 1;
           $86 = $76;
          } else {
           $73 = (($__sn) + 4|0);
           $74 = HEAP32[$73>>2]|0;
           $86 = $74;
          }
          $77 = HEAP8[$__sym]|0;
          $78 = $77 & 1;
          $79 = ($78<<24>>24)==(0);
          if ($79) {
           $82 = $77&255;
           $83 = $82 >>> 1;
           $88 = $83;
          } else {
           $80 = (($__sym) + 4|0);
           $81 = HEAP32[$80>>2]|0;
           $88 = $81;
          }
          $84 = $69 | 1;
          $85 = (($86) + ($84))|0;
          $87 = (($85) + ($88))|0;
          $$pn = $87;
         } else {
          $89 = HEAP8[$__sn]|0;
          $90 = $89 & 1;
          $91 = ($90<<24>>24)==(0);
          if ($91) {
           $94 = $89&255;
           $95 = $94 >>> 1;
           $104 = $95;
          } else {
           $92 = (($__sn) + 4|0);
           $93 = HEAP32[$92>>2]|0;
           $104 = $93;
          }
          $96 = HEAP8[$__sym]|0;
          $97 = $96 & 1;
          $98 = ($97<<24>>24)==(0);
          if ($98) {
           $101 = $96&255;
           $102 = $101 >>> 1;
           $106 = $102;
          } else {
           $99 = (($__sym) + 4|0);
           $100 = HEAP32[$99>>2]|0;
           $106 = $100;
          }
          $103 = (($104) + 2)|0;
          $105 = (($103) + ($106))|0;
          $$pn = $105;
         }
         $107 = (($$pn) + ($66))|0;
         $108 = ($107>>>0)>(100);
         if ($108) {
          $109 = (_malloc($107)|0);
          $110 = ($109|0)==(0|0);
          if ($110) {
           __THREW__ = 0;
           invoke_v(4);
           $111 = __THREW__; __THREW__ = 0;
           $112 = $111&1;
           if ($112) {
            $113 = ___cxa_find_matching_catch(-1,-1)|0;
            $114 = tempRet0;
            $$0 = $113;$$01 = $114;
            break;
           } else {
            $122 = 0;$__mb$0 = 0;
           }
          } else {
           $122 = $109;$__mb$0 = $109;
          }
         } else {
          $122 = 0;$__mb$0 = $__mbuf;
         }
         $123 = (($__iob) + 4|0);
         $124 = HEAP32[$123>>2]|0;
         $125 = (($__db$0) + ($__n$0)|0);
         $126 = HEAP8[$__dp]|0;
         $127 = HEAP8[$__ts]|0;
         __THREW__ = 0;
         invoke_viiiiiiiiiiiiiii(1,($__mb$0|0),($__mi|0),($__me|0),($124|0),($__db$0|0),($125|0),($47|0),($63|0),($__pat|0),($126|0),($127|0),($__grp|0),($__sym|0),($__sn|0),($66|0));
         $128 = __THREW__; __THREW__ = 0;
         $129 = $128&1;
         if (!($129)) {
          $130 = HEAP32[$__s>>2]|0;
          HEAP32[$0>>2] = $130;
          $131 = HEAP32[$__mi>>2]|0;
          $132 = HEAP32[$__me>>2]|0;
          __THREW__ = 0;
          ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
          invoke_viiiiiii(42,($agg$result|0),($$byval_copy|0),($__mb$0|0),($131|0),($132|0),($__iob|0),($__fl|0));
          $133 = __THREW__; __THREW__ = 0;
          $134 = $133&1;
          if (!($134)) {
           $135 = ($122|0)==(0|0);
           if (!($135)) {
            _free($122);
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
           $136 = HEAP32[$__loc>>2]|0;
           (__ZNSt3__114__shared_count16__release_sharedEv($136)|0);
           $137 = ($138|0)==(0|0);
           if (!($137)) {
            _free($138);
           }
           $139 = ($140|0)==(0|0);
           if ($139) {
            STACKTOP = sp;return;
           }
           _free($140);
           STACKTOP = sp;return;
          }
         }
         $119 = ___cxa_find_matching_catch(-1,-1)|0;
         $120 = tempRet0;
         $121 = ($122|0)==(0|0);
         if ($121) {
          $$0 = $119;$$01 = $120;
         } else {
          _free($122);
          $$0 = $119;$$01 = $120;
         }
        }
       } while(0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
       $$1 = $$0;$$12 = $$01;
       break;
      }
     }
     $49 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($49);
     __THREW__ = 0;
     invoke_viii(7,($49|0),(26752|0),(102|0));
     $50 = __THREW__; __THREW__ = 0;
     $51 = $50&1;
     if ($51) {
      label = 45;
     } else {
      // unreachable;
     }
    }
   } while(0);
   if ((label|0) == 45) {
    $115 = ___cxa_find_matching_catch(-1,-1)|0;
    $116 = tempRet0;
    $$1 = $115;$$12 = $116;
   }
   $141 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($141)|0);
   $$2 = $$1;$$23 = $$12;$143 = $138;$145 = $140;
  }
 }
 if ((label|0) == 11) {
  $20 = ___cxa_find_matching_catch(-1,-1)|0;
  $21 = tempRet0;
  $146 = $148;$147 = $149;$eh$lpad$body$index2Z2D = $21;$eh$lpad$body$indexZ2D = $20;
  label = 12;
 }
 if ((label|0) == 12) {
  $$2 = $eh$lpad$body$indexZ2D;$$23 = $eh$lpad$body$index2Z2D;$143 = $147;$145 = $146;
 }
 $142 = ($143|0)==(0|0);
 if (!($142)) {
  _free($143);
 }
 $144 = ($145|0)==(0|0);
 if ($144) {
  ___resumeException($$2|0);
  // unreachable;
 }
 _free($145);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i10 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $__p$i$i$i$i10 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 124|0;
 $1 = sp + 112|0;
 $2 = sp + 108|0;
 $3 = sp + 96|0;
 $4 = sp + 84|0;
 $5 = sp + 128|0;
 $6 = sp + 56|0;
 $7 = sp + 44|0;
 $8 = sp + 40|0;
 $9 = sp + 28|0;
 $10 = sp + 60|0;
 $11 = sp + 72|0;
 $12 = HEAP32[$__loc>>2]|0;
 if ($__intl) {
  $13 = HEAP32[18232>>2]|0;
  $14 = ($13|0)==(-1);
  if (!($14)) {
   HEAP32[$__p$i$i$i$i>>2] = 18232;
   $15 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$15>>2] = (121);
   $16 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$16>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(18232,$__p$i$i$i$i,122);
  }
  $17 = HEAP32[((18232 + 4|0))>>2]|0;
  $18 = (($17) + -1)|0;
  $19 = (($12) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($12) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $20;
  $24 = $22;
  $25 = (($23) - ($24))|0;
  $26 = $25 >> 2;
  $27 = ($26>>>0)>($18>>>0);
  if (!($27)) {
   $31 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($31);
   ___cxa_throw(($31|0),(26752|0),(102|0));
   // unreachable;
  }
  $28 = (($22) + ($18<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $31 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($31);
   ___cxa_throw(($31|0),(26752|0),(102|0));
   // unreachable;
  }
  $32 = HEAP32[$29>>2]|0;
  do {
   if ($__neg) {
    $33 = (($32) + 44|0);
    $34 = HEAP32[$33>>2]|0;
    FUNCTION_TABLE_vii[$34 & 63]($0,$29);
    $35 = HEAP32[$0>>2]|0;
    HEAP8[$__pat]=$35&255;HEAP8[$__pat+1|0]=($35>>8)&255;HEAP8[$__pat+2|0]=($35>>16)&255;HEAP8[$__pat+3|0]=$35>>24;
    $36 = HEAP32[$29>>2]|0;
    $37 = (($36) + 32|0);
    $38 = HEAP32[$37>>2]|0;
    FUNCTION_TABLE_vii[$38 & 63]($1,$29);
    $39 = HEAP8[$__sn]|0;
    $40 = $39 & 1;
    $41 = ($40<<24>>24)==(0);
    if ($41) {
     $45 = (($__sn) + 1|0);
     HEAP8[$45] = 0;
     HEAP8[$__sn] = 0;
    } else {
     $42 = (($__sn) + 8|0);
     $43 = HEAP32[$42>>2]|0;
     HEAP8[$43] = 0;
     $44 = (($__sn) + 4|0);
     HEAP32[$44>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(50,($__sn|0),0);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if ($47) {
     $48 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $49 = tempRet0;
     ___clang_call_terminate($48);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
     break;
    }
   } else {
    $50 = (($32) + 40|0);
    $51 = HEAP32[$50>>2]|0;
    FUNCTION_TABLE_vii[$51 & 63]($2,$29);
    $52 = HEAP32[$2>>2]|0;
    HEAP8[$__pat]=$52&255;HEAP8[$__pat+1|0]=($52>>8)&255;HEAP8[$__pat+2|0]=($52>>16)&255;HEAP8[$__pat+3|0]=$52>>24;
    $53 = HEAP32[$29>>2]|0;
    $54 = (($53) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    FUNCTION_TABLE_vii[$55 & 63]($3,$29);
    $56 = HEAP8[$__sn]|0;
    $57 = $56 & 1;
    $58 = ($57<<24>>24)==(0);
    if ($58) {
     $62 = (($__sn) + 1|0);
     HEAP8[$62] = 0;
     HEAP8[$__sn] = 0;
    } else {
     $59 = (($__sn) + 8|0);
     $60 = HEAP32[$59>>2]|0;
     HEAP8[$60] = 0;
     $61 = (($__sn) + 4|0);
     HEAP32[$61>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(50,($__sn|0),0);
    $63 = __THREW__; __THREW__ = 0;
    $64 = $63&1;
    if ($64) {
     $65 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $66 = tempRet0;
     ___clang_call_terminate($65);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
     break;
    }
   }
  } while(0);
  $67 = HEAP32[$29>>2]|0;
  $68 = (($67) + 12|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (FUNCTION_TABLE_ii[$69 & 127]($29)|0);
  HEAP8[$__dp] = $70;
  $71 = HEAP32[$29>>2]|0;
  $72 = (($71) + 16|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (FUNCTION_TABLE_ii[$73 & 127]($29)|0);
  HEAP8[$__ts] = $74;
  $75 = HEAP32[$29>>2]|0;
  $76 = (($75) + 20|0);
  $77 = HEAP32[$76>>2]|0;
  FUNCTION_TABLE_vii[$77 & 63]($4,$29);
  $78 = HEAP8[$__grp]|0;
  $79 = $78 & 1;
  $80 = ($79<<24>>24)==(0);
  if ($80) {
   $84 = (($__grp) + 1|0);
   HEAP8[$84] = 0;
   HEAP8[$__grp] = 0;
  } else {
   $81 = (($__grp) + 8|0);
   $82 = HEAP32[$81>>2]|0;
   HEAP8[$82] = 0;
   $83 = (($__grp) + 4|0);
   HEAP32[$83>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(50,($__grp|0),0);
  $85 = __THREW__; __THREW__ = 0;
  $86 = $85&1;
  if ($86) {
   $87 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $88 = tempRet0;
   ___clang_call_terminate($87);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $89 = HEAP32[$29>>2]|0;
  $90 = (($89) + 24|0);
  $91 = HEAP32[$90>>2]|0;
  FUNCTION_TABLE_vii[$91 & 63]($5,$29);
  $92 = HEAP8[$__sym]|0;
  $93 = $92 & 1;
  $94 = ($93<<24>>24)==(0);
  if ($94) {
   $98 = (($__sym) + 1|0);
   HEAP8[$98] = 0;
   HEAP8[$__sym] = 0;
  } else {
   $95 = (($__sym) + 8|0);
   $96 = HEAP32[$95>>2]|0;
   HEAP8[$96] = 0;
   $97 = (($__sym) + 4|0);
   HEAP32[$97>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(50,($__sym|0),0);
  $99 = __THREW__; __THREW__ = 0;
  $100 = $99&1;
  if ($100) {
   $101 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $102 = tempRet0;
   ___clang_call_terminate($101);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
  $103 = HEAP32[$29>>2]|0;
  $104 = (($103) + 36|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (FUNCTION_TABLE_ii[$105 & 127]($29)|0);
  $storemerge = $106;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $107 = HEAP32[18168>>2]|0;
  $108 = ($107|0)==(-1);
  if (!($108)) {
   HEAP32[$__p$i$i$i$i10>>2] = 18168;
   $109 = (($__p$i$i$i$i10) + 4|0);
   HEAP32[$109>>2] = (121);
   $110 = (($__p$i$i$i$i10) + 8|0);
   HEAP32[$110>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(18168,$__p$i$i$i$i10,122);
  }
  $111 = HEAP32[((18168 + 4|0))>>2]|0;
  $112 = (($111) + -1)|0;
  $113 = (($12) + 12|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($12) + 8|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $114;
  $118 = $116;
  $119 = (($117) - ($118))|0;
  $120 = $119 >> 2;
  $121 = ($120>>>0)>($112>>>0);
  if (!($121)) {
   $125 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($125);
   ___cxa_throw(($125|0),(26752|0),(102|0));
   // unreachable;
  }
  $122 = (($116) + ($112<<2)|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ($123|0)==(0|0);
  if ($124) {
   $125 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($125);
   ___cxa_throw(($125|0),(26752|0),(102|0));
   // unreachable;
  }
  $126 = HEAP32[$123>>2]|0;
  do {
   if ($__neg) {
    $127 = (($126) + 44|0);
    $128 = HEAP32[$127>>2]|0;
    FUNCTION_TABLE_vii[$128 & 63]($6,$123);
    $129 = HEAP32[$6>>2]|0;
    HEAP8[$__pat]=$129&255;HEAP8[$__pat+1|0]=($129>>8)&255;HEAP8[$__pat+2|0]=($129>>16)&255;HEAP8[$__pat+3|0]=$129>>24;
    $130 = HEAP32[$123>>2]|0;
    $131 = (($130) + 32|0);
    $132 = HEAP32[$131>>2]|0;
    FUNCTION_TABLE_vii[$132 & 63]($7,$123);
    $133 = HEAP8[$__sn]|0;
    $134 = $133 & 1;
    $135 = ($134<<24>>24)==(0);
    if ($135) {
     $139 = (($__sn) + 1|0);
     HEAP8[$139] = 0;
     HEAP8[$__sn] = 0;
    } else {
     $136 = (($__sn) + 8|0);
     $137 = HEAP32[$136>>2]|0;
     HEAP8[$137] = 0;
     $138 = (($__sn) + 4|0);
     HEAP32[$138>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(50,($__sn|0),0);
    $140 = __THREW__; __THREW__ = 0;
    $141 = $140&1;
    if ($141) {
     $142 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $143 = tempRet0;
     ___clang_call_terminate($142);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
     ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
     break;
    }
   } else {
    $144 = (($126) + 40|0);
    $145 = HEAP32[$144>>2]|0;
    FUNCTION_TABLE_vii[$145 & 63]($8,$123);
    $146 = HEAP32[$8>>2]|0;
    HEAP8[$__pat]=$146&255;HEAP8[$__pat+1|0]=($146>>8)&255;HEAP8[$__pat+2|0]=($146>>16)&255;HEAP8[$__pat+3|0]=$146>>24;
    $147 = HEAP32[$123>>2]|0;
    $148 = (($147) + 28|0);
    $149 = HEAP32[$148>>2]|0;
    FUNCTION_TABLE_vii[$149 & 63]($9,$123);
    $150 = HEAP8[$__sn]|0;
    $151 = $150 & 1;
    $152 = ($151<<24>>24)==(0);
    if ($152) {
     $156 = (($__sn) + 1|0);
     HEAP8[$156] = 0;
     HEAP8[$__sn] = 0;
    } else {
     $153 = (($__sn) + 8|0);
     $154 = HEAP32[$153>>2]|0;
     HEAP8[$154] = 0;
     $155 = (($__sn) + 4|0);
     HEAP32[$155>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(50,($__sn|0),0);
    $157 = __THREW__; __THREW__ = 0;
    $158 = $157&1;
    if ($158) {
     $159 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $160 = tempRet0;
     ___clang_call_terminate($159);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
     ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
     break;
    }
   }
  } while(0);
  $161 = HEAP32[$123>>2]|0;
  $162 = (($161) + 12|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (FUNCTION_TABLE_ii[$163 & 127]($123)|0);
  HEAP8[$__dp] = $164;
  $165 = HEAP32[$123>>2]|0;
  $166 = (($165) + 16|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = (FUNCTION_TABLE_ii[$167 & 127]($123)|0);
  HEAP8[$__ts] = $168;
  $169 = HEAP32[$123>>2]|0;
  $170 = (($169) + 20|0);
  $171 = HEAP32[$170>>2]|0;
  FUNCTION_TABLE_vii[$171 & 63]($10,$123);
  $172 = HEAP8[$__grp]|0;
  $173 = $172 & 1;
  $174 = ($173<<24>>24)==(0);
  if ($174) {
   $178 = (($__grp) + 1|0);
   HEAP8[$178] = 0;
   HEAP8[$__grp] = 0;
  } else {
   $175 = (($__grp) + 8|0);
   $176 = HEAP32[$175>>2]|0;
   HEAP8[$176] = 0;
   $177 = (($__grp) + 4|0);
   HEAP32[$177>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(50,($__grp|0),0);
  $179 = __THREW__; __THREW__ = 0;
  $180 = $179&1;
  if ($180) {
   $181 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $182 = tempRet0;
   ___clang_call_terminate($181);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
  $183 = HEAP32[$123>>2]|0;
  $184 = (($183) + 24|0);
  $185 = HEAP32[$184>>2]|0;
  FUNCTION_TABLE_vii[$185 & 63]($11,$123);
  $186 = HEAP8[$__sym]|0;
  $187 = $186 & 1;
  $188 = ($187<<24>>24)==(0);
  if ($188) {
   $192 = (($__sym) + 1|0);
   HEAP8[$192] = 0;
   HEAP8[$__sym] = 0;
  } else {
   $189 = (($__sym) + 8|0);
   $190 = HEAP32[$189>>2]|0;
   HEAP8[$190] = 0;
   $191 = (($__sym) + 4|0);
   HEAP32[$191>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(50,($__sym|0),0);
  $193 = __THREW__; __THREW__ = 0;
  $194 = $193&1;
  if ($194) {
   $195 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $196 = tempRet0;
   ___clang_call_terminate($195);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11);
  $197 = HEAP32[$123>>2]|0;
  $198 = (($197) + 36|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = (FUNCTION_TABLE_ii[$199 & 127]($123)|0);
  $storemerge = $200;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i17 = 0, $$01$i$i = 0, $$01$i$i15 = 0, $$012$i$i = 0, $$050 = 0, $$2 = 0, $$lcssa38 = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$0$lcssa58 = 0, $__d$029 = 0, $__d$1$lcssa73 = 0, $__d$1$lcssa74 = 0, $__d$132 = 0, $__d$2 = 0, $__d$343 = 0, $__f$0$lcssa71 = 0, $__f$0$lcssa72 = 0;
 var $__f$033 = 0, $__f$139 = 0, $__gl$046 = 0, $__gl$1 = 0, $__ig$045 = 0, $__ig$1 = 0, $__ng$044 = 0, $__ng$1 = 0, $__p$049 = 0, $brmerge = 0, $exitcond = 0, $isascii1$i = 0, $or$cond = 0, $scevgep = 0, $scevgep59 = 0, $scevgep61 = 0, $scevgep6162 = 0, $scevgep63 = 0, $umax = 0, $umax60 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 1|0);
 $1 = (($__sn) + 8|0);
 $2 = (($__sn) + 4|0);
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 $5 = (($__sym) + 1|0);
 $6 = (($__sym) + 8|0);
 $7 = (($__sym) + 4|0);
 $8 = ($__fd|0)>(0);
 $9 = (($__grp) + 1|0);
 $10 = (($__grp) + 8|0);
 $11 = (($__grp) + 4|0);
 $12 = (($__ct) + 8|0);
 $13 = (0 - ($__fd))|0;
 $$050 = $__db;$__p$049 = 0;
 while(1) {
  $14 = (($__pat) + ($__p$049)|0);
  $15 = HEAP8[$14]|0;
  $16 = $15 << 24 >> 24;
  switch ($16|0) {
  case 3:  {
   $25 = HEAP8[$__sn]|0;
   $26 = $25 & 1;
   $27 = ($26<<24>>24)==(0);
   if ($27) {
    $29 = $25&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $28 = HEAP32[$2>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    $$2 = $$050;
   } else {
    if ($27) {
     $35 = $0;
    } else {
     $33 = HEAP32[$1>>2]|0;
     $35 = $33;
    }
    $34 = HEAP8[$35]|0;
    $36 = HEAP32[$__me>>2]|0;
    $37 = (($36) + 1|0);
    HEAP32[$__me>>2] = $37;
    HEAP8[$36] = $34;
    $$2 = $$050;
   }
   break;
  }
  case 1:  {
   $18 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $18;
   $19 = HEAP32[$__ct>>2]|0;
   $20 = (($19) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (FUNCTION_TABLE_iii[$21 & 31]($__ct,32)|0);
   $23 = HEAP32[$__me>>2]|0;
   $24 = (($23) + 1|0);
   HEAP32[$__me>>2] = $24;
   HEAP8[$23] = $22;
   $$2 = $$050;
   break;
  }
  case 2:  {
   $38 = HEAP8[$__sym]|0;
   $39 = $38 & 1;
   $40 = ($39<<24>>24)==(0);
   if ($40) {
    $42 = $38&255;
    $43 = $42 >>> 1;
    $45 = $43;
   } else {
    $41 = HEAP32[$7>>2]|0;
    $45 = $41;
   }
   $44 = ($45|0)==(0);
   $brmerge = $44 | $4;
   if ($brmerge) {
    $$2 = $$050;
   } else {
    if ($40) {
     $48 = $38&255;
     $49 = $48 >>> 1;
     $51 = $5;$52 = $49;$55 = $5;
    } else {
     $46 = HEAP32[$6>>2]|0;
     $47 = HEAP32[$7>>2]|0;
     $51 = $46;$52 = $47;$55 = $46;
    }
    $50 = (($51) + ($52)|0);
    $53 = HEAP32[$__me>>2]|0;
    $54 = ($55|0)==($50|0);
    if ($54) {
     $$0$lcssa$i$i17 = $53;
    } else {
     $$01$i$i15 = $53;$57 = $55;
     while(1) {
      $56 = HEAP8[$57]|0;
      HEAP8[$$01$i$i15] = $56;
      $58 = (($57) + 1|0);
      $59 = (($$01$i$i15) + 1|0);
      $60 = ($58|0)==($50|0);
      if ($60) {
       $$0$lcssa$i$i17 = $59;
       break;
      } else {
       $$01$i$i15 = $59;$57 = $58;
      }
     }
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i17;
    $$2 = $$050;
   }
   break;
  }
  case 0:  {
   $17 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $17;
   $$2 = $$050;
   break;
  }
  case 4:  {
   $61 = HEAP32[$__me>>2]|0;
   $62 = (($$050) + 1|0);
   $$$0 = $__neg ? $62 : $$050;
   $63 = ($$$0>>>0)<($__de>>>0);
   L30: do {
    if ($63) {
     $__d$029 = $$$0;
     while(1) {
      $66 = HEAP8[$__d$029]|0;
      $isascii1$i = ($66<<24>>24)>(-1);
      if (!($isascii1$i)) {
       $__d$0$lcssa = $__d$029;
       break L30;
      }
      $67 = $66 << 24 >> 24;
      $68 = HEAP32[$12>>2]|0;
      $69 = (($68) + ($67<<1)|0);
      $70 = HEAP16[$69>>1]|0;
      $71 = $70 & 2048;
      $72 = ($71<<16>>16)==(0);
      $65 = (($__d$029) + 1|0);
      if ($72) {
       $__d$0$lcssa = $__d$029;
       break L30;
      }
      $64 = ($65>>>0)<($__de>>>0);
      if ($64) {
       $__d$029 = $65;
      } else {
       $__d$0$lcssa = $65;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   $__d$0$lcssa58 = $__d$0$lcssa;
   if ($8) {
    $73 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($73) {
     $74 = (0 - ($__d$0$lcssa58))|0;
     $scevgep = (($$$0) + ($74)|0);
     $scevgep59 = $scevgep;
     $75 = ($scevgep59>>>0)<($13>>>0);
     $umax = $75 ? $13 : $scevgep59;
     $umax60 = $umax;
     $scevgep61 = (($umax60) + ($__fd)|0);
     $scevgep6162 = $scevgep61;
     $79 = $61;$__d$132 = $__d$0$lcssa;$__f$033 = $__fd;
     while(1) {
      $76 = (($__d$132) + -1|0);
      $77 = HEAP8[$76]|0;
      $78 = (($79) + 1|0);
      HEAP32[$__me>>2] = $78;
      HEAP8[$79] = $77;
      $80 = (($__f$033) + -1)|0;
      $81 = ($76>>>0)>($$$0>>>0);
      $82 = ($80|0)>(0);
      $or$cond = $81 & $82;
      if (!($or$cond)) {
       break;
      }
      $$pre = HEAP32[$__me>>2]|0;
      $79 = $$pre;$__d$132 = $76;$__f$033 = $80;
     }
     $scevgep63 = (($__d$0$lcssa) + ($umax)|0);
     if ($82) {
      $__d$1$lcssa74 = $scevgep63;$__f$0$lcssa72 = $scevgep6162;
      label = 32;
     } else {
      $90 = 0;$__d$1$lcssa73 = $scevgep63;$__f$0$lcssa71 = $scevgep6162;
     }
    } else {
     $__d$1$lcssa74 = $__d$0$lcssa;$__f$0$lcssa72 = $__fd;
     label = 32;
    }
    if ((label|0) == 32) {
     label = 0;
     $83 = HEAP32[$__ct>>2]|0;
     $84 = (($83) + 28|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = (FUNCTION_TABLE_iii[$85 & 31]($__ct,48)|0);
     $90 = $86;$__d$1$lcssa73 = $__d$1$lcssa74;$__f$0$lcssa71 = $__f$0$lcssa72;
    }
    $87 = ($__f$0$lcssa71|0)>(0);
    $88 = HEAP32[$__me>>2]|0;
    $89 = (($88) + 1|0);
    HEAP32[$__me>>2] = $89;
    if ($87) {
     $91 = $88;$__f$139 = $__f$0$lcssa71;
     while(1) {
      HEAP8[$91] = $90;
      $92 = (($__f$139) + -1)|0;
      $93 = ($92|0)>(0);
      $94 = HEAP32[$__me>>2]|0;
      $95 = (($94) + 1|0);
      HEAP32[$__me>>2] = $95;
      if ($93) {
       $91 = $94;$__f$139 = $92;
      } else {
       $$lcssa38 = $94;
       break;
      }
     }
    } else {
     $$lcssa38 = $88;
    }
    HEAP8[$$lcssa38] = $__dp;
    $__d$2 = $__d$1$lcssa73;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $96 = ($__d$2|0)==($$$0|0);
   if ($96) {
    $97 = HEAP32[$__ct>>2]|0;
    $98 = (($97) + 28|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = (FUNCTION_TABLE_iii[$99 & 31]($__ct,48)|0);
    $101 = HEAP32[$__me>>2]|0;
    $102 = (($101) + 1|0);
    HEAP32[$__me>>2] = $102;
    HEAP8[$101] = $100;
   } else {
    $103 = HEAP8[$__grp]|0;
    $104 = $103 & 1;
    $105 = ($104<<24>>24)==(0);
    if ($105) {
     $107 = $103&255;
     $108 = $107 >>> 1;
     $110 = $108;
    } else {
     $106 = HEAP32[$11>>2]|0;
     $110 = $106;
    }
    $109 = ($110|0)==(0);
    if ($109) {
     $__d$343 = $__d$2;$__gl$046 = -1;$__ig$045 = 0;$__ng$044 = 0;
    } else {
     if ($105) {
      $113 = $9;
     } else {
      $111 = HEAP32[$10>>2]|0;
      $113 = $111;
     }
     $112 = HEAP8[$113]|0;
     $114 = $112 << 24 >> 24;
     $__d$343 = $__d$2;$__gl$046 = $114;$__ig$045 = 0;$__ng$044 = 0;
    }
    while(1) {
     $115 = ($__ng$044|0)==($__gl$046|0);
     if ($115) {
      $116 = HEAP32[$__me>>2]|0;
      $117 = (($116) + 1|0);
      HEAP32[$__me>>2] = $117;
      HEAP8[$116] = $__ts;
      $118 = (($__ig$045) + 1)|0;
      $119 = HEAP8[$__grp]|0;
      $120 = $119 & 1;
      $121 = ($120<<24>>24)==(0);
      if ($121) {
       $123 = $119&255;
       $124 = $123 >>> 1;
       $126 = $124;
      } else {
       $122 = HEAP32[$11>>2]|0;
       $126 = $122;
      }
      $125 = ($118>>>0)<($126>>>0);
      if ($125) {
       if ($121) {
        $129 = $9;
       } else {
        $127 = HEAP32[$10>>2]|0;
        $129 = $127;
       }
       $128 = (($129) + ($118)|0);
       $130 = HEAP8[$128]|0;
       $131 = ($130<<24>>24)==(127);
       if ($131) {
        $__gl$1 = -1;$__ig$1 = $118;$__ng$1 = 0;
       } else {
        if ($121) {
         $134 = $9;
        } else {
         $132 = HEAP32[$10>>2]|0;
         $134 = $132;
        }
        $133 = (($134) + ($118)|0);
        $135 = HEAP8[$133]|0;
        $136 = $135 << 24 >> 24;
        $__gl$1 = $136;$__ig$1 = $118;$__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$046;$__ig$1 = $118;$__ng$1 = 0;
      }
     } else {
      $__gl$1 = $__gl$046;$__ig$1 = $__ig$045;$__ng$1 = $__ng$044;
     }
     $137 = (($__d$343) + -1|0);
     $138 = HEAP8[$137]|0;
     $139 = HEAP32[$__me>>2]|0;
     $140 = (($139) + 1|0);
     HEAP32[$__me>>2] = $140;
     HEAP8[$139] = $138;
     $141 = (($__ng$1) + 1)|0;
     $142 = ($137|0)==($$$0|0);
     if ($142) {
      break;
     } else {
      $__d$343 = $137;$__gl$046 = $__gl$1;$__ig$045 = $__ig$1;$__ng$044 = $141;
     }
    }
   }
   $143 = HEAP32[$__me>>2]|0;
   $144 = ($61|0)==($143|0);
   if ($144) {
    $$2 = $$$0;
   } else {
    $145 = (($143) + -1|0);
    $146 = ($145>>>0)>($61>>>0);
    if ($146) {
     $$012$i$i = $61;$149 = $145;
     while(1) {
      $147 = HEAP8[$$012$i$i]|0;
      $148 = HEAP8[$149]|0;
      HEAP8[$$012$i$i] = $148;
      HEAP8[$149] = $147;
      $150 = (($$012$i$i) + 1|0);
      $151 = (($149) + -1|0);
      $152 = ($150>>>0)<($151>>>0);
      if ($152) {
       $$012$i$i = $150;$149 = $151;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  default: {
   $$2 = $$050;
  }
  }
  $153 = (($__p$049) + 1)|0;
  $exitcond = ($153|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$050 = $$2;$__p$049 = $153;
  }
 }
 $154 = HEAP8[$__sn]|0;
 $155 = $154 & 1;
 $156 = ($155<<24>>24)==(0);
 if ($156) {
  $158 = $154&255;
  $159 = $158 >>> 1;
  $161 = $159;
 } else {
  $157 = HEAP32[$2>>2]|0;
  $161 = $157;
 }
 $160 = ($161>>>0)>(1);
 if ($160) {
  if ($156) {
   $164 = $154&255;
   $165 = $164 >>> 1;
   $$pn = $0;$168 = $0;$169 = $165;
  } else {
   $162 = HEAP32[$1>>2]|0;
   $163 = HEAP32[$2>>2]|0;
   $$pn = $162;$168 = $162;$169 = $163;
  }
  $166 = (($$pn) + 1|0);
  $167 = (($168) + ($169)|0);
  $170 = HEAP32[$__me>>2]|0;
  $171 = ($166|0)==($167|0);
  if ($171) {
   $$0$lcssa$i$i = $170;
  } else {
   $$01$i$i = $170;$173 = $166;
   while(1) {
    $172 = HEAP8[$173]|0;
    HEAP8[$$01$i$i] = $172;
    $174 = (($173) + 1|0);
    $175 = (($$01$i$i) + 1|0);
    $176 = ($174|0)==($167|0);
    if ($176) {
     $$0$lcssa$i$i = $175;
     break;
    } else {
     $$01$i$i = $175;$173 = $174;
    }
   }
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $177 = $__flags & 176;
 if ((($177|0) == 32)) {
  $178 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $178;
  STACKTOP = sp;return;
 } else if ((($177|0) == 16)) {
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0;
 var $__mi = 0, $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $$byval_copy = sp + 72|0;
 $__p$i$i$i$i = sp;
 $__loc = sp + 64|0;
 $__pat = sp + 68|0;
 $__dp = sp + 176|0;
 $__ts = sp + 177|0;
 $__grp = sp + 52|0;
 $__sym = sp + 40|0;
 $__sn = sp + 24|0;
 $__fd = sp + 20|0;
 $__mbuf = sp + 76|0;
 $__mi = sp + 16|0;
 $__me = sp + 12|0;
 $0 = sp + 36|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $1 = HEAP32[$__loc>>2]|0;
 $2 = HEAP32[18792>>2]|0;
 $3 = ($2|0)==(-1);
 if ($3) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 18792;
  $4 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$4>>2] = (121);
  $5 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$5>>2] = 0;
  __THREW__ = 0;
  invoke_viii(6,(18792|0),($__p$i$i$i$i|0),(122|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $8 = HEAP32[((18792 + 4|0))>>2]|0;
   $9 = (($8) + -1)|0;
   $10 = (($1) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($1) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $11;
   $15 = $13;
   $16 = (($14) - ($15))|0;
   $17 = $16 >> 2;
   $18 = ($17>>>0)>($9>>>0);
   if ($18) {
    $19 = (($13) + ($9<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0|0);
    if (!($21)) {
     $25 = HEAP8[$__digits]|0;
     $26 = $25 & 1;
     $27 = ($26<<24>>24)==(0);
     if ($27) {
      $30 = $25&255;
      $31 = $30 >>> 1;
      $33 = $31;
     } else {
      $28 = (($__digits) + 4|0);
      $29 = HEAP32[$28>>2]|0;
      $33 = $29;
     }
     $32 = ($33|0)==(0);
     if ($32) {
      $46 = 0;
     } else {
      if ($27) {
       $36 = (($__digits) + 1|0);
       $38 = $36;
      } else {
       $34 = (($__digits) + 8|0);
       $35 = HEAP32[$34>>2]|0;
       $38 = $35;
      }
      $37 = HEAP8[$38]|0;
      $39 = HEAP32[$20>>2]|0;
      $40 = (($39) + 28|0);
      $41 = HEAP32[$40>>2]|0;
      __THREW__ = 0;
      $42 = (invoke_iii($41|0,($20|0),45)|0);
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       break;
      }
      $45 = ($37<<24>>24)==($42<<24>>24);
      $46 = $45;
     }
     HEAP32[$__pat>>2] = 0;
     ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
     ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
     ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(3,($__intl|0),($46|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     L20: do {
      if ($48) {
       $113 = ___cxa_find_matching_catch(-1,-1)|0;
       $114 = tempRet0;
       $$0 = $113;$$01 = $114;
      } else {
       $49 = HEAP8[$__digits]|0;
       $50 = $49 & 1;
       $51 = ($50<<24>>24)==(0);
       if ($51) {
        $54 = $49&255;
        $55 = $54 >>> 1;
        $58 = $55;
       } else {
        $52 = (($__digits) + 4|0);
        $53 = HEAP32[$52>>2]|0;
        $58 = $53;
       }
       $56 = HEAP32[$__fd>>2]|0;
       $57 = ($58|0)>($56|0);
       if ($57) {
        if ($51) {
         $61 = $49&255;
         $62 = $61 >>> 1;
         $64 = $62;
        } else {
         $59 = (($__digits) + 4|0);
         $60 = HEAP32[$59>>2]|0;
         $64 = $60;
        }
        $63 = (($64) - ($56))|0;
        $65 = $63 << 1;
        $66 = HEAP8[$__sn]|0;
        $67 = $66 & 1;
        $68 = ($67<<24>>24)==(0);
        if ($68) {
         $71 = $66&255;
         $72 = $71 >>> 1;
         $82 = $72;
        } else {
         $69 = (($__sn) + 4|0);
         $70 = HEAP32[$69>>2]|0;
         $82 = $70;
        }
        $73 = HEAP8[$__sym]|0;
        $74 = $73 & 1;
        $75 = ($74<<24>>24)==(0);
        if ($75) {
         $78 = $73&255;
         $79 = $78 >>> 1;
         $84 = $79;
        } else {
         $76 = (($__sym) + 4|0);
         $77 = HEAP32[$76>>2]|0;
         $84 = $77;
        }
        $80 = $65 | 1;
        $81 = (($82) + ($80))|0;
        $83 = (($81) + ($84))|0;
        $$pn = $83;
       } else {
        $85 = HEAP8[$__sn]|0;
        $86 = $85 & 1;
        $87 = ($86<<24>>24)==(0);
        if ($87) {
         $90 = $85&255;
         $91 = $90 >>> 1;
         $100 = $91;
        } else {
         $88 = (($__sn) + 4|0);
         $89 = HEAP32[$88>>2]|0;
         $100 = $89;
        }
        $92 = HEAP8[$__sym]|0;
        $93 = $92 & 1;
        $94 = ($93<<24>>24)==(0);
        if ($94) {
         $97 = $92&255;
         $98 = $97 >>> 1;
         $102 = $98;
        } else {
         $95 = (($__sym) + 4|0);
         $96 = HEAP32[$95>>2]|0;
         $102 = $96;
        }
        $99 = (($100) + 2)|0;
        $101 = (($99) + ($102))|0;
        $$pn = $101;
       }
       $103 = (($$pn) + ($56))|0;
       $104 = ($103>>>0)>(100);
       do {
        if ($104) {
         $105 = (_malloc($103)|0);
         $106 = ($105|0)==(0|0);
         if ($106) {
          __THREW__ = 0;
          invoke_v(4);
          $107 = __THREW__; __THREW__ = 0;
          $108 = $107&1;
          if ($108) {
           $109 = ___cxa_find_matching_catch(-1,-1)|0;
           $110 = tempRet0;
           $$0 = $109;$$01 = $110;
           break L20;
          } else {
           $$pre = HEAP8[$__digits]|0;
           $118 = 0;$122 = $$pre;$__mb$0 = 0;
           break;
          }
         } else {
          $118 = $105;$122 = $49;$__mb$0 = $105;
         }
        } else {
         $118 = 0;$122 = $49;$__mb$0 = $__mbuf;
        }
       } while(0);
       $119 = (($__iob) + 4|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = $122 & 1;
       $123 = ($121<<24>>24)==(0);
       if ($123) {
        $128 = (($__digits) + 1|0);
        $129 = $122&255;
        $130 = $129 >>> 1;
        $132 = $128;$133 = $130;
       } else {
        $124 = (($__digits) + 8|0);
        $125 = HEAP32[$124>>2]|0;
        $126 = (($__digits) + 4|0);
        $127 = HEAP32[$126>>2]|0;
        $132 = $125;$133 = $127;
       }
       $131 = (($132) + ($133)|0);
       $134 = HEAP8[$__dp]|0;
       $135 = HEAP8[$__ts]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(1,($__mb$0|0),($__mi|0),($__me|0),($120|0),($132|0),($131|0),($20|0),($46|0),($__pat|0),($134|0),($135|0),($__grp|0),($__sym|0),($__sn|0),($56|0));
       $136 = __THREW__; __THREW__ = 0;
       $137 = $136&1;
       if (!($137)) {
        $138 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $138;
        $139 = HEAP32[$__mi>>2]|0;
        $140 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
        invoke_viiiiiii(42,($agg$result|0),($$byval_copy|0),($__mb$0|0),($139|0),($140|0),($__iob|0),($__fl|0));
        $141 = __THREW__; __THREW__ = 0;
        $142 = $141&1;
        if (!($142)) {
         $143 = ($118|0)==(0|0);
         if ($143) {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
          $144 = HEAP32[$__loc>>2]|0;
          (__ZNSt3__114__shared_count16__release_sharedEv($144)|0);
          STACKTOP = sp;return;
         }
         _free($118);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
         $144 = HEAP32[$__loc>>2]|0;
         (__ZNSt3__114__shared_count16__release_sharedEv($144)|0);
         STACKTOP = sp;return;
        }
       }
       $115 = ___cxa_find_matching_catch(-1,-1)|0;
       $116 = tempRet0;
       $117 = ($118|0)==(0|0);
       if ($117) {
        $$0 = $115;$$01 = $116;
       } else {
        _free($118);
        $$0 = $115;$$01 = $116;
       }
      }
     } while(0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
     $$1 = $$0;$$12 = $$01;
     $145 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($145)|0);
     ___resumeException($$1|0);
     // unreachable;
    }
   }
   $22 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($22);
   __THREW__ = 0;
   invoke_viii(7,($22|0),(26752|0),(102|0));
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if (!($24)) {
    // unreachable;
   }
  }
 } while(0);
 $111 = ___cxa_find_matching_catch(-1,-1)|0;
 $112 = tempRet0;
 $$1 = $111;$$12 = $112;
 $145 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($145)|0);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0;
 var $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0;
 $$byval_copy = sp + 908|0;
 $vararg_buffer6 = sp;
 $vararg_buffer = sp + 8|0;
 $__p$i$i$i$i = sp + 16|0;
 $__buf = sp + 912|0;
 $__bb = sp + 904|0;
 $__digits = sp + 504|0;
 $__loc = sp + 496|0;
 $__pat = sp + 492|0;
 $__dp = sp + 452|0;
 $__ts = sp + 40|0;
 $__grp = sp + 456|0;
 $__sym = sp + 468|0;
 $__sn = sp + 28|0;
 $__fd = sp + 448|0;
 $__mbuf = sp + 48|0;
 $__mi = sp + 480|0;
 $__me = sp + 484|0;
 $0 = sp + 488|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $1 = (_snprintf(($__buf|0),100,(18544|0),($vararg_buffer|0))|0);
 $2 = ($1>>>0)>(99);
 L1: do {
  if ($2) {
   $3 = HEAP8[18688]|0;
   $4 = ($3<<24>>24)==(0);
   do {
    if ($4) {
     $5 = (___cxa_guard_acquire((18688|0))|0);
     $6 = ($5|0)==(0);
     if (!($6)) {
      __THREW__ = 0;
      $7 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
      $8 = __THREW__; __THREW__ = 0;
      $9 = $8&1;
      if ($9) {
       $10 = ___cxa_find_matching_catch(-1,-1)|0;
       $11 = tempRet0;
       ___cxa_guard_abort((18688|0));
       $148 = 0;$149 = 0;$eh$lpad$body$index2Z2D = $11;$eh$lpad$body$indexZ2D = $10;
       label = 12;
       break L1;
      } else {
       HEAP32[18680>>2] = $7;
       ___cxa_guard_release((18688|0));
       break;
      }
     }
    }
   } while(0);
   $12 = HEAP32[18680>>2]|0;
   __THREW__ = 0;
   HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer6>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer6+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $13 = (invoke_iiiii(13,($__bb|0),($12|0),(18544|0),($vararg_buffer6|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $150 = 0;$151 = 0;
    label = 11;
   } else {
    $16 = HEAP32[$__bb>>2]|0;
    $17 = ($16|0)==(0|0);
    if ($17) {
     __THREW__ = 0;
     invoke_v(4);
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $150 = 0;$151 = 0;
      label = 11;
      break;
     }
     $$pre = HEAP32[$__bb>>2]|0;
     $152 = $$pre;
    } else {
     $152 = $16;
    }
    $22 = $13 << 2;
    $23 = (_malloc($22)|0);
    $24 = ($23|0)==(0|0);
    if ($24) {
     __THREW__ = 0;
     invoke_v(4);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      $150 = $152;$151 = 0;
      label = 11;
     } else {
      $140 = 0;$142 = $152;$__db$0 = 0;$__n$0 = $13;
      label = 15;
     }
    } else {
     $140 = $23;$142 = $152;$__db$0 = $23;$__n$0 = $13;
     label = 15;
    }
   }
  } else {
   $140 = 0;$142 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 15;
  }
 } while(0);
 if ((label|0) == 15) {
  __THREW__ = 0;
  invoke_vii(48,($__loc|0),($__iob|0));
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if ($28) {
   $150 = $142;$151 = $140;
   label = 11;
  } else {
   $29 = HEAP32[$__loc>>2]|0;
   $30 = HEAP32[18784>>2]|0;
   $31 = ($30|0)==(-1);
   if ($31) {
    label = 18;
   } else {
    HEAP32[$__p$i$i$i$i>>2] = 18784;
    $32 = (($__p$i$i$i$i) + 4|0);
    HEAP32[$32>>2] = (121);
    $33 = (($__p$i$i$i$i) + 8|0);
    HEAP32[$33>>2] = 0;
    __THREW__ = 0;
    invoke_viii(6,(18784|0),($__p$i$i$i$i|0),(122|0));
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     label = 45;
    } else {
     label = 18;
    }
   }
   do {
    if ((label|0) == 18) {
     $36 = HEAP32[((18784 + 4|0))>>2]|0;
     $37 = (($36) + -1)|0;
     $38 = (($29) + 12|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (($29) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $39;
     $43 = $41;
     $44 = (($42) - ($43))|0;
     $45 = $44 >> 2;
     $46 = ($45>>>0)>($37>>>0);
     if ($46) {
      $47 = (($41) + ($37<<2)|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $53 = HEAP32[$__bb>>2]|0;
       $54 = (($53) + ($__n$0)|0);
       $55 = HEAP32[$48>>2]|0;
       $56 = (($55) + 48|0);
       $57 = HEAP32[$56>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($57|0,($48|0),($53|0),($54|0),($__db$0|0))|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        label = 45;
        break;
       }
       $60 = ($__n$0|0)==(0);
       if ($60) {
        $64 = 0;
       } else {
        $61 = HEAP32[$__bb>>2]|0;
        $62 = HEAP8[$61]|0;
        $63 = ($62<<24>>24)==(45);
        $64 = $63;
       }
       HEAP32[$__pat>>2] = 0;
       ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
       ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
       ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
       __THREW__ = 0;
       invoke_viiiiiiiiii(4,($__intl|0),($64|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
       $65 = __THREW__; __THREW__ = 0;
       $66 = $65&1;
       do {
        if ($66) {
         $119 = ___cxa_find_matching_catch(-1,-1)|0;
         $120 = tempRet0;
         $$0 = $119;$$01 = $120;
        } else {
         $67 = HEAP32[$__fd>>2]|0;
         $68 = ($__n$0|0)>($67|0);
         if ($68) {
          $69 = (($__n$0) - ($67))|0;
          $70 = $69 << 1;
          $71 = HEAP8[$__sn]|0;
          $72 = $71 & 1;
          $73 = ($72<<24>>24)==(0);
          if ($73) {
           $76 = $71&255;
           $77 = $76 >>> 1;
           $87 = $77;
          } else {
           $74 = (($__sn) + 4|0);
           $75 = HEAP32[$74>>2]|0;
           $87 = $75;
          }
          $78 = HEAP8[$__sym]|0;
          $79 = $78 & 1;
          $80 = ($79<<24>>24)==(0);
          if ($80) {
           $83 = $78&255;
           $84 = $83 >>> 1;
           $89 = $84;
          } else {
           $81 = (($__sym) + 4|0);
           $82 = HEAP32[$81>>2]|0;
           $89 = $82;
          }
          $85 = $70 | 1;
          $86 = (($87) + ($85))|0;
          $88 = (($86) + ($89))|0;
          $$pn = $88;
         } else {
          $90 = HEAP8[$__sn]|0;
          $91 = $90 & 1;
          $92 = ($91<<24>>24)==(0);
          if ($92) {
           $95 = $90&255;
           $96 = $95 >>> 1;
           $105 = $96;
          } else {
           $93 = (($__sn) + 4|0);
           $94 = HEAP32[$93>>2]|0;
           $105 = $94;
          }
          $97 = HEAP8[$__sym]|0;
          $98 = $97 & 1;
          $99 = ($98<<24>>24)==(0);
          if ($99) {
           $102 = $97&255;
           $103 = $102 >>> 1;
           $107 = $103;
          } else {
           $100 = (($__sym) + 4|0);
           $101 = HEAP32[$100>>2]|0;
           $107 = $101;
          }
          $104 = (($105) + 2)|0;
          $106 = (($104) + ($107))|0;
          $$pn = $106;
         }
         $108 = (($$pn) + ($67))|0;
         $109 = ($108>>>0)>(100);
         if ($109) {
          $110 = $108 << 2;
          $111 = (_malloc($110)|0);
          $112 = ($111|0)==(0|0);
          if ($112) {
           __THREW__ = 0;
           invoke_v(4);
           $113 = __THREW__; __THREW__ = 0;
           $114 = $113&1;
           if ($114) {
            $115 = ___cxa_find_matching_catch(-1,-1)|0;
            $116 = tempRet0;
            $$0 = $115;$$01 = $116;
            break;
           } else {
            $124 = 0;$__mb$0 = 0;
           }
          } else {
           $124 = $111;$__mb$0 = $111;
          }
         } else {
          $124 = 0;$__mb$0 = $__mbuf;
         }
         $125 = (($__iob) + 4|0);
         $126 = HEAP32[$125>>2]|0;
         $127 = (($__db$0) + ($__n$0<<2)|0);
         $128 = HEAP32[$__dp>>2]|0;
         $129 = HEAP32[$__ts>>2]|0;
         __THREW__ = 0;
         invoke_viiiiiiiiiiiiiii(2,($__mb$0|0),($__mi|0),($__me|0),($126|0),($__db$0|0),($127|0),($48|0),($64|0),($__pat|0),($128|0),($129|0),($__grp|0),($__sym|0),($__sn|0),($67|0));
         $130 = __THREW__; __THREW__ = 0;
         $131 = $130&1;
         if (!($131)) {
          $132 = HEAP32[$__s>>2]|0;
          HEAP32[$0>>2] = $132;
          $133 = HEAP32[$__mi>>2]|0;
          $134 = HEAP32[$__me>>2]|0;
          __THREW__ = 0;
          ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
          invoke_viiiiiii(45,($agg$result|0),($$byval_copy|0),($__mb$0|0),($133|0),($134|0),($__iob|0),($__fl|0));
          $135 = __THREW__; __THREW__ = 0;
          $136 = $135&1;
          if (!($136)) {
           $137 = ($124|0)==(0|0);
           if (!($137)) {
            _free($124);
           }
           __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
           __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
           $138 = HEAP32[$__loc>>2]|0;
           (__ZNSt3__114__shared_count16__release_sharedEv($138)|0);
           $139 = ($140|0)==(0|0);
           if (!($139)) {
            _free($140);
           }
           $141 = ($142|0)==(0|0);
           if ($141) {
            STACKTOP = sp;return;
           }
           _free($142);
           STACKTOP = sp;return;
          }
         }
         $121 = ___cxa_find_matching_catch(-1,-1)|0;
         $122 = tempRet0;
         $123 = ($124|0)==(0|0);
         if ($123) {
          $$0 = $121;$$01 = $122;
         } else {
          _free($124);
          $$0 = $121;$$01 = $122;
         }
        }
       } while(0);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
       $$1 = $$0;$$12 = $$01;
       break;
      }
     }
     $50 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($50);
     __THREW__ = 0;
     invoke_viii(7,($50|0),(26752|0),(102|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      label = 45;
     } else {
      // unreachable;
     }
    }
   } while(0);
   if ((label|0) == 45) {
    $117 = ___cxa_find_matching_catch(-1,-1)|0;
    $118 = tempRet0;
    $$1 = $117;$$12 = $118;
   }
   $143 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($143)|0);
   $$2 = $$1;$$23 = $$12;$145 = $140;$147 = $142;
  }
 }
 if ((label|0) == 11) {
  $20 = ___cxa_find_matching_catch(-1,-1)|0;
  $21 = tempRet0;
  $148 = $150;$149 = $151;$eh$lpad$body$index2Z2D = $21;$eh$lpad$body$indexZ2D = $20;
  label = 12;
 }
 if ((label|0) == 12) {
  $$2 = $eh$lpad$body$indexZ2D;$$23 = $eh$lpad$body$index2Z2D;$145 = $149;$147 = $148;
 }
 $144 = ($145|0)==(0|0);
 if (!($144)) {
  _free($145);
 }
 $146 = ($147|0)==(0|0);
 if ($146) {
  ___resumeException($$2|0);
  // unreachable;
 }
 _free($147);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i8 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $__p$i$i$i$i8 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 124|0;
 $1 = sp + 112|0;
 $2 = sp + 108|0;
 $3 = sp + 96|0;
 $4 = sp + 84|0;
 $5 = sp + 128|0;
 $6 = sp + 56|0;
 $7 = sp + 44|0;
 $8 = sp + 40|0;
 $9 = sp + 28|0;
 $10 = sp + 60|0;
 $11 = sp + 72|0;
 $12 = HEAP32[$__loc>>2]|0;
 if ($__intl) {
  $13 = HEAP32[18360>>2]|0;
  $14 = ($13|0)==(-1);
  if (!($14)) {
   HEAP32[$__p$i$i$i$i>>2] = 18360;
   $15 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$15>>2] = (121);
   $16 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$16>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(18360,$__p$i$i$i$i,122);
  }
  $17 = HEAP32[((18360 + 4|0))>>2]|0;
  $18 = (($17) + -1)|0;
  $19 = (($12) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($12) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $20;
  $24 = $22;
  $25 = (($23) - ($24))|0;
  $26 = $25 >> 2;
  $27 = ($26>>>0)>($18>>>0);
  if (!($27)) {
   $31 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($31);
   ___cxa_throw(($31|0),(26752|0),(102|0));
   // unreachable;
  }
  $28 = (($22) + ($18<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $31 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($31);
   ___cxa_throw(($31|0),(26752|0),(102|0));
   // unreachable;
  }
  $32 = HEAP32[$29>>2]|0;
  do {
   if ($__neg) {
    $33 = (($32) + 44|0);
    $34 = HEAP32[$33>>2]|0;
    FUNCTION_TABLE_vii[$34 & 63]($0,$29);
    $35 = HEAP32[$0>>2]|0;
    HEAP8[$__pat]=$35&255;HEAP8[$__pat+1|0]=($35>>8)&255;HEAP8[$__pat+2|0]=($35>>16)&255;HEAP8[$__pat+3|0]=$35>>24;
    $36 = HEAP32[$29>>2]|0;
    $37 = (($36) + 32|0);
    $38 = HEAP32[$37>>2]|0;
    FUNCTION_TABLE_vii[$38 & 63]($1,$29);
    $39 = HEAP8[$__sn]|0;
    $40 = $39 & 1;
    $41 = ($40<<24>>24)==(0);
    if ($41) {
     $45 = (($__sn) + 4|0);
     HEAP32[$45>>2] = 0;
     HEAP8[$__sn] = 0;
    } else {
     $42 = (($__sn) + 8|0);
     $43 = HEAP32[$42>>2]|0;
     HEAP32[$43>>2] = 0;
     $44 = (($__sn) + 4|0);
     HEAP32[$44>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(52,($__sn|0),0);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if ($47) {
     $48 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $49 = tempRet0;
     ___clang_call_terminate($48);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
     break;
    }
   } else {
    $50 = (($32) + 40|0);
    $51 = HEAP32[$50>>2]|0;
    FUNCTION_TABLE_vii[$51 & 63]($2,$29);
    $52 = HEAP32[$2>>2]|0;
    HEAP8[$__pat]=$52&255;HEAP8[$__pat+1|0]=($52>>8)&255;HEAP8[$__pat+2|0]=($52>>16)&255;HEAP8[$__pat+3|0]=$52>>24;
    $53 = HEAP32[$29>>2]|0;
    $54 = (($53) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    FUNCTION_TABLE_vii[$55 & 63]($3,$29);
    $56 = HEAP8[$__sn]|0;
    $57 = $56 & 1;
    $58 = ($57<<24>>24)==(0);
    if ($58) {
     $62 = (($__sn) + 4|0);
     HEAP32[$62>>2] = 0;
     HEAP8[$__sn] = 0;
    } else {
     $59 = (($__sn) + 8|0);
     $60 = HEAP32[$59>>2]|0;
     HEAP32[$60>>2] = 0;
     $61 = (($__sn) + 4|0);
     HEAP32[$61>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(52,($__sn|0),0);
    $63 = __THREW__; __THREW__ = 0;
    $64 = $63&1;
    if ($64) {
     $65 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $66 = tempRet0;
     ___clang_call_terminate($65);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($3);
     break;
    }
   }
  } while(0);
  $67 = HEAP32[$29>>2]|0;
  $68 = (($67) + 12|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (FUNCTION_TABLE_ii[$69 & 127]($29)|0);
  HEAP32[$__dp>>2] = $70;
  $71 = HEAP32[$29>>2]|0;
  $72 = (($71) + 16|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (FUNCTION_TABLE_ii[$73 & 127]($29)|0);
  HEAP32[$__ts>>2] = $74;
  $75 = HEAP32[$29>>2]|0;
  $76 = (($75) + 20|0);
  $77 = HEAP32[$76>>2]|0;
  FUNCTION_TABLE_vii[$77 & 63]($4,$29);
  $78 = HEAP8[$__grp]|0;
  $79 = $78 & 1;
  $80 = ($79<<24>>24)==(0);
  if ($80) {
   $84 = (($__grp) + 1|0);
   HEAP8[$84] = 0;
   HEAP8[$__grp] = 0;
  } else {
   $81 = (($__grp) + 8|0);
   $82 = HEAP32[$81>>2]|0;
   HEAP8[$82] = 0;
   $83 = (($__grp) + 4|0);
   HEAP32[$83>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(50,($__grp|0),0);
  $85 = __THREW__; __THREW__ = 0;
  $86 = $85&1;
  if ($86) {
   $87 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $88 = tempRet0;
   ___clang_call_terminate($87);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $89 = HEAP32[$29>>2]|0;
  $90 = (($89) + 24|0);
  $91 = HEAP32[$90>>2]|0;
  FUNCTION_TABLE_vii[$91 & 63]($5,$29);
  $92 = HEAP8[$__sym]|0;
  $93 = $92 & 1;
  $94 = ($93<<24>>24)==(0);
  if ($94) {
   $98 = (($__sym) + 4|0);
   HEAP32[$98>>2] = 0;
   HEAP8[$__sym] = 0;
  } else {
   $95 = (($__sym) + 8|0);
   $96 = HEAP32[$95>>2]|0;
   HEAP32[$96>>2] = 0;
   $97 = (($__sym) + 4|0);
   HEAP32[$97>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(52,($__sym|0),0);
  $99 = __THREW__; __THREW__ = 0;
  $100 = $99&1;
  if ($100) {
   $101 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $102 = tempRet0;
   ___clang_call_terminate($101);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($5);
  $103 = HEAP32[$29>>2]|0;
  $104 = (($103) + 36|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (FUNCTION_TABLE_ii[$105 & 127]($29)|0);
  $storemerge = $106;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $107 = HEAP32[18296>>2]|0;
  $108 = ($107|0)==(-1);
  if (!($108)) {
   HEAP32[$__p$i$i$i$i8>>2] = 18296;
   $109 = (($__p$i$i$i$i8) + 4|0);
   HEAP32[$109>>2] = (121);
   $110 = (($__p$i$i$i$i8) + 8|0);
   HEAP32[$110>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(18296,$__p$i$i$i$i8,122);
  }
  $111 = HEAP32[((18296 + 4|0))>>2]|0;
  $112 = (($111) + -1)|0;
  $113 = (($12) + 12|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($12) + 8|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $114;
  $118 = $116;
  $119 = (($117) - ($118))|0;
  $120 = $119 >> 2;
  $121 = ($120>>>0)>($112>>>0);
  if (!($121)) {
   $125 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($125);
   ___cxa_throw(($125|0),(26752|0),(102|0));
   // unreachable;
  }
  $122 = (($116) + ($112<<2)|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ($123|0)==(0|0);
  if ($124) {
   $125 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($125);
   ___cxa_throw(($125|0),(26752|0),(102|0));
   // unreachable;
  }
  $126 = HEAP32[$123>>2]|0;
  do {
   if ($__neg) {
    $127 = (($126) + 44|0);
    $128 = HEAP32[$127>>2]|0;
    FUNCTION_TABLE_vii[$128 & 63]($6,$123);
    $129 = HEAP32[$6>>2]|0;
    HEAP8[$__pat]=$129&255;HEAP8[$__pat+1|0]=($129>>8)&255;HEAP8[$__pat+2|0]=($129>>16)&255;HEAP8[$__pat+3|0]=$129>>24;
    $130 = HEAP32[$123>>2]|0;
    $131 = (($130) + 32|0);
    $132 = HEAP32[$131>>2]|0;
    FUNCTION_TABLE_vii[$132 & 63]($7,$123);
    $133 = HEAP8[$__sn]|0;
    $134 = $133 & 1;
    $135 = ($134<<24>>24)==(0);
    if ($135) {
     $139 = (($__sn) + 4|0);
     HEAP32[$139>>2] = 0;
     HEAP8[$__sn] = 0;
    } else {
     $136 = (($__sn) + 8|0);
     $137 = HEAP32[$136>>2]|0;
     HEAP32[$137>>2] = 0;
     $138 = (($__sn) + 4|0);
     HEAP32[$138>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(52,($__sn|0),0);
    $140 = __THREW__; __THREW__ = 0;
    $141 = $140&1;
    if ($141) {
     $142 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $143 = tempRet0;
     ___clang_call_terminate($142);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
     ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
     break;
    }
   } else {
    $144 = (($126) + 40|0);
    $145 = HEAP32[$144>>2]|0;
    FUNCTION_TABLE_vii[$145 & 63]($8,$123);
    $146 = HEAP32[$8>>2]|0;
    HEAP8[$__pat]=$146&255;HEAP8[$__pat+1|0]=($146>>8)&255;HEAP8[$__pat+2|0]=($146>>16)&255;HEAP8[$__pat+3|0]=$146>>24;
    $147 = HEAP32[$123>>2]|0;
    $148 = (($147) + 28|0);
    $149 = HEAP32[$148>>2]|0;
    FUNCTION_TABLE_vii[$149 & 63]($9,$123);
    $150 = HEAP8[$__sn]|0;
    $151 = $150 & 1;
    $152 = ($151<<24>>24)==(0);
    if ($152) {
     $156 = (($__sn) + 4|0);
     HEAP32[$156>>2] = 0;
     HEAP8[$__sn] = 0;
    } else {
     $153 = (($__sn) + 8|0);
     $154 = HEAP32[$153>>2]|0;
     HEAP32[$154>>2] = 0;
     $155 = (($__sn) + 4|0);
     HEAP32[$155>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(52,($__sn|0),0);
    $157 = __THREW__; __THREW__ = 0;
    $158 = $157&1;
    if ($158) {
     $159 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $160 = tempRet0;
     ___clang_call_terminate($159);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
     ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
     break;
    }
   }
  } while(0);
  $161 = HEAP32[$123>>2]|0;
  $162 = (($161) + 12|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (FUNCTION_TABLE_ii[$163 & 127]($123)|0);
  HEAP32[$__dp>>2] = $164;
  $165 = HEAP32[$123>>2]|0;
  $166 = (($165) + 16|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = (FUNCTION_TABLE_ii[$167 & 127]($123)|0);
  HEAP32[$__ts>>2] = $168;
  $169 = HEAP32[$123>>2]|0;
  $170 = (($169) + 20|0);
  $171 = HEAP32[$170>>2]|0;
  FUNCTION_TABLE_vii[$171 & 63]($10,$123);
  $172 = HEAP8[$__grp]|0;
  $173 = $172 & 1;
  $174 = ($173<<24>>24)==(0);
  if ($174) {
   $178 = (($__grp) + 1|0);
   HEAP8[$178] = 0;
   HEAP8[$__grp] = 0;
  } else {
   $175 = (($__grp) + 8|0);
   $176 = HEAP32[$175>>2]|0;
   HEAP8[$176] = 0;
   $177 = (($__grp) + 4|0);
   HEAP32[$177>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(50,($__grp|0),0);
  $179 = __THREW__; __THREW__ = 0;
  $180 = $179&1;
  if ($180) {
   $181 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $182 = tempRet0;
   ___clang_call_terminate($181);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
  $183 = HEAP32[$123>>2]|0;
  $184 = (($183) + 24|0);
  $185 = HEAP32[$184>>2]|0;
  FUNCTION_TABLE_vii[$185 & 63]($11,$123);
  $186 = HEAP8[$__sym]|0;
  $187 = $186 & 1;
  $188 = ($187<<24>>24)==(0);
  if ($188) {
   $192 = (($__sym) + 4|0);
   HEAP32[$192>>2] = 0;
   HEAP8[$__sym] = 0;
  } else {
   $189 = (($__sym) + 8|0);
   $190 = HEAP32[$189>>2]|0;
   HEAP32[$190>>2] = 0;
   $191 = (($__sym) + 4|0);
   HEAP32[$191>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(52,($__sym|0),0);
  $193 = __THREW__; __THREW__ = 0;
  $194 = $193&1;
  if ($194) {
   $195 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $196 = tempRet0;
   ___clang_call_terminate($195);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($11);
  $197 = HEAP32[$123>>2]|0;
  $198 = (($197) + 36|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = (FUNCTION_TABLE_ii[$199 & 127]($123)|0);
  $storemerge = $200;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i22 = 0, $$01$i$i = 0, $$01$i$i19 = 0, $$012$i$i = 0, $$059 = 0, $$2 = 0, $$lcssa44 = 0, $$pn = 0, $$promoted4$i$i = 0, $$promoted4$i$i13 = 0, $$sum = 0, $$sum33 = 0, $$sum75 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $87$phi = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$034 = 0, $__d$1$lcssa7880 = 0, $__d$1$lcssa79 = 0, $__d$137 = 0, $__d$2 = 0;
 var $__d$353 = 0, $__f$0$lcssa77 = 0, $__f$038 = 0, $__f$145 = 0, $__gl$056 = 0, $__gl$1 = 0, $__ig$055 = 0, $__ig$1 = 0, $__me$promoted = 0, $__ng$054 = 0, $__ng$1 = 0, $__p$058 = 0, $brmerge = 0, $exitcond = 0, $or$cond = 0, $scevgep = 0, $scevgep$i$i = 0, $scevgep$i$i14 = 0, $scevgep6$i$i = 0, $scevgep6$i$i20 = 0;
 var $scevgep70 = 0, $uglygep$i$i = 0, $uglygep$i$i16 = 0, $uglygep5$i$i = 0, $uglygep5$i$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 4|0);
 $1 = (($__sn) + 8|0);
 $2 = $__flags & 512;
 $3 = ($2|0)==(0);
 $4 = (($__sym) + 4|0);
 $5 = (($__sym) + 8|0);
 $6 = ($__fd|0)>(0);
 $7 = (($__grp) + 1|0);
 $8 = (($__grp) + 8|0);
 $9 = (($__grp) + 4|0);
 $$059 = $__db;$__p$058 = 0;
 while(1) {
  $10 = (($__pat) + ($__p$058)|0);
  $11 = HEAP8[$10]|0;
  $12 = $11 << 24 >> 24;
  switch ($12|0) {
  case 3:  {
   $21 = HEAP8[$__sn]|0;
   $22 = $21 & 1;
   $23 = ($22<<24>>24)==(0);
   if ($23) {
    $25 = $21&255;
    $26 = $25 >>> 1;
    $28 = $26;
   } else {
    $24 = HEAP32[$0>>2]|0;
    $28 = $24;
   }
   $27 = ($28|0)==(0);
   if ($27) {
    $$2 = $$059;
   } else {
    if ($23) {
     $31 = $0;
    } else {
     $29 = HEAP32[$1>>2]|0;
     $31 = $29;
    }
    $30 = HEAP32[$31>>2]|0;
    $32 = HEAP32[$__me>>2]|0;
    $33 = (($32) + 4|0);
    HEAP32[$__me>>2] = $33;
    HEAP32[$32>>2] = $30;
    $$2 = $$059;
   }
   break;
  }
  case 4:  {
   $60 = HEAP32[$__me>>2]|0;
   $61 = (($$059) + 4|0);
   $$$0 = $__neg ? $61 : $$059;
   $62 = ($$$0>>>0)<($__de>>>0);
   L14: do {
    if ($62) {
     $__d$034 = $$$0;
     while(1) {
      $65 = HEAP32[$__d$034>>2]|0;
      $66 = HEAP32[$__ct>>2]|0;
      $67 = (($66) + 12|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (FUNCTION_TABLE_iiii[$68 & 31]($__ct,2048,$65)|0);
      $64 = (($__d$034) + 4|0);
      if (!($69)) {
       $__d$0$lcssa = $__d$034;
       break L14;
      }
      $63 = ($64>>>0)<($__de>>>0);
      if ($63) {
       $__d$034 = $64;
      } else {
       $__d$0$lcssa = $64;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   if ($6) {
    $70 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($70) {
     $__me$promoted = HEAP32[$__me>>2]|0;
     $74 = $__me$promoted;$__d$137 = $__d$0$lcssa;$__f$038 = $__fd;
     while(1) {
      $71 = (($__d$137) + -4|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = (($74) + 4|0);
      HEAP32[$74>>2] = $72;
      $75 = (($__f$038) + -1)|0;
      $76 = ($71>>>0)>($$$0>>>0);
      $77 = ($75|0)>(0);
      $or$cond = $76 & $77;
      if ($or$cond) {
       $74 = $73;$__d$137 = $71;$__f$038 = $75;
      } else {
       break;
      }
     }
     HEAP32[$__me>>2] = $73;
     if ($77) {
      $__d$1$lcssa79 = $71;$__f$0$lcssa77 = $75;
      label = 34;
     } else {
      $78 = HEAP32[$__me>>2]|0;
      $79 = (($78) + 4|0);
      HEAP32[$__me>>2] = $79;
      $$lcssa44 = $78;$__d$1$lcssa7880 = $71;
     }
    } else {
     $__d$1$lcssa79 = $__d$0$lcssa;$__f$0$lcssa77 = $__fd;
     label = 34;
    }
    if ((label|0) == 34) {
     label = 0;
     $80 = HEAP32[$__ct>>2]|0;
     $81 = (($80) + 44|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (FUNCTION_TABLE_iii[$82 & 31]($__ct,48)|0);
     $84 = ($__f$0$lcssa77|0)>(0);
     $85 = HEAP32[$__me>>2]|0;
     $86 = (($85) + 4|0);
     HEAP32[$__me>>2] = $86;
     if ($84) {
      $87 = $85;$91 = $86;$__f$145 = $__f$0$lcssa77;
      while(1) {
       HEAP32[$87>>2] = $83;
       $88 = (($__f$145) + -1)|0;
       $89 = ($88|0)>(0);
       $90 = (($91) + 4|0);
       if ($89) {
        $87$phi = $91;$91 = $90;$__f$145 = $88;$87 = $87$phi;
       } else {
        break;
       }
      }
      $$sum75 = (($__f$0$lcssa77) + 1)|0;
      $scevgep = (($85) + ($$sum75<<2)|0);
      $scevgep70 = (($85) + ($__f$0$lcssa77<<2)|0);
      HEAP32[$__me>>2] = $scevgep;
      $$lcssa44 = $scevgep70;$__d$1$lcssa7880 = $__d$1$lcssa79;
     } else {
      $$lcssa44 = $85;$__d$1$lcssa7880 = $__d$1$lcssa79;
     }
    }
    HEAP32[$$lcssa44>>2] = $__dp;
    $__d$2 = $__d$1$lcssa7880;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $92 = ($__d$2|0)==($$$0|0);
   if ($92) {
    $93 = HEAP32[$__ct>>2]|0;
    $94 = (($93) + 44|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (FUNCTION_TABLE_iii[$95 & 31]($__ct,48)|0);
    $97 = HEAP32[$__me>>2]|0;
    $98 = (($97) + 4|0);
    HEAP32[$__me>>2] = $98;
    HEAP32[$97>>2] = $96;
    $140 = $98;
   } else {
    $99 = HEAP8[$__grp]|0;
    $100 = $99 & 1;
    $101 = ($100<<24>>24)==(0);
    if ($101) {
     $103 = $99&255;
     $104 = $103 >>> 1;
     $106 = $104;
    } else {
     $102 = HEAP32[$9>>2]|0;
     $106 = $102;
    }
    $105 = ($106|0)==(0);
    if ($105) {
     $__d$353 = $__d$2;$__gl$056 = -1;$__ig$055 = 0;$__ng$054 = 0;
    } else {
     if ($101) {
      $109 = $7;
     } else {
      $107 = HEAP32[$8>>2]|0;
      $109 = $107;
     }
     $108 = HEAP8[$109]|0;
     $110 = $108 << 24 >> 24;
     $__d$353 = $__d$2;$__gl$056 = $110;$__ig$055 = 0;$__ng$054 = 0;
    }
    while(1) {
     $111 = ($__ng$054|0)==($__gl$056|0);
     $112 = HEAP32[$__me>>2]|0;
     if ($111) {
      $113 = (($112) + 4|0);
      HEAP32[$__me>>2] = $113;
      HEAP32[$112>>2] = $__ts;
      $114 = (($__ig$055) + 1)|0;
      $115 = HEAP8[$__grp]|0;
      $116 = $115 & 1;
      $117 = ($116<<24>>24)==(0);
      if ($117) {
       $119 = $115&255;
       $120 = $119 >>> 1;
       $122 = $120;
      } else {
       $118 = HEAP32[$9>>2]|0;
       $122 = $118;
      }
      $121 = ($114>>>0)<($122>>>0);
      if ($121) {
       if ($117) {
        $125 = $7;
       } else {
        $123 = HEAP32[$8>>2]|0;
        $125 = $123;
       }
       $124 = (($125) + ($114)|0);
       $126 = HEAP8[$124]|0;
       $127 = ($126<<24>>24)==(127);
       if ($127) {
        $136 = $113;$__gl$1 = -1;$__ig$1 = $114;$__ng$1 = 0;
       } else {
        if ($117) {
         $130 = $7;
        } else {
         $128 = HEAP32[$8>>2]|0;
         $130 = $128;
        }
        $129 = (($130) + ($114)|0);
        $131 = HEAP8[$129]|0;
        $132 = $131 << 24 >> 24;
        $136 = $113;$__gl$1 = $132;$__ig$1 = $114;$__ng$1 = 0;
       }
      } else {
       $136 = $113;$__gl$1 = $__gl$056;$__ig$1 = $114;$__ng$1 = 0;
      }
     } else {
      $136 = $112;$__gl$1 = $__gl$056;$__ig$1 = $__ig$055;$__ng$1 = $__ng$054;
     }
     $133 = (($__d$353) + -4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = (($136) + 4|0);
     HEAP32[$__me>>2] = $135;
     HEAP32[$136>>2] = $134;
     $137 = (($__ng$1) + 1)|0;
     $138 = ($133|0)==($$$0|0);
     if ($138) {
      $140 = $135;
      break;
     } else {
      $__d$353 = $133;$__gl$056 = $__gl$1;$__ig$055 = $__ig$1;$__ng$054 = $137;
     }
    }
   }
   $139 = ($60|0)==($140|0);
   if ($139) {
    $$2 = $$$0;
   } else {
    $141 = (($140) + -4|0);
    $142 = ($141>>>0)>($60>>>0);
    if ($142) {
     $$012$i$i = $60;$145 = $141;
     while(1) {
      $143 = HEAP32[$$012$i$i>>2]|0;
      $144 = HEAP32[$145>>2]|0;
      HEAP32[$$012$i$i>>2] = $144;
      HEAP32[$145>>2] = $143;
      $146 = (($$012$i$i) + 4|0);
      $147 = (($145) + -4|0);
      $148 = ($146>>>0)<($147>>>0);
      if ($148) {
       $$012$i$i = $146;$145 = $147;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  case 2:  {
   $34 = HEAP8[$__sym]|0;
   $35 = $34 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $38 = $34&255;
    $39 = $38 >>> 1;
    $41 = $39;
   } else {
    $37 = HEAP32[$4>>2]|0;
    $41 = $37;
   }
   $40 = ($41|0)==(0);
   $brmerge = $40 | $3;
   if ($brmerge) {
    $$2 = $$059;
   } else {
    if ($36) {
     $44 = $34&255;
     $45 = $44 >>> 1;
     $47 = $4;$48 = $45;$51 = $4;
    } else {
     $42 = HEAP32[$5>>2]|0;
     $43 = HEAP32[$4>>2]|0;
     $47 = $42;$48 = $43;$51 = $42;
    }
    $46 = (($47) + ($48<<2)|0);
    $49 = HEAP32[$__me>>2]|0;
    $50 = ($51|0)==($46|0);
    if ($50) {
     $$0$lcssa$i$i22 = $49;
    } else {
     $$promoted4$i$i13 = $51;
     $$sum33 = (($48) + -1)|0;
     $scevgep$i$i14 = (($47) + ($$sum33<<2)|0);
     $52 = (0 - ($$promoted4$i$i13))|0;
     $uglygep$i$i16 = (($scevgep$i$i14) + ($52)|0);
     $uglygep5$i$i17 = $uglygep$i$i16;
     $53 = $uglygep5$i$i17 >>> 2;
     $$01$i$i19 = $49;$55 = $51;
     while(1) {
      $54 = HEAP32[$55>>2]|0;
      HEAP32[$$01$i$i19>>2] = $54;
      $56 = (($55) + 4|0);
      $57 = ($56|0)==($46|0);
      if ($57) {
       break;
      }
      $58 = (($$01$i$i19) + 4|0);
      $$01$i$i19 = $58;$55 = $56;
     }
     $59 = (($53) + 1)|0;
     $scevgep6$i$i20 = (($49) + ($59<<2)|0);
     $$0$lcssa$i$i22 = $scevgep6$i$i20;
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i22;
    $$2 = $$059;
   }
   break;
  }
  case 1:  {
   $14 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $14;
   $15 = HEAP32[$__ct>>2]|0;
   $16 = (($15) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iii[$17 & 31]($__ct,32)|0);
   $19 = HEAP32[$__me>>2]|0;
   $20 = (($19) + 4|0);
   HEAP32[$__me>>2] = $20;
   HEAP32[$19>>2] = $18;
   $$2 = $$059;
   break;
  }
  case 0:  {
   $13 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $13;
   $$2 = $$059;
   break;
  }
  default: {
   $$2 = $$059;
  }
  }
  $149 = (($__p$058) + 1)|0;
  $exitcond = ($149|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$059 = $$2;$__p$058 = $149;
  }
 }
 $150 = HEAP8[$__sn]|0;
 $151 = $150 & 1;
 $152 = ($151<<24>>24)==(0);
 if ($152) {
  $154 = $150&255;
  $155 = $154 >>> 1;
  $157 = $155;
 } else {
  $153 = HEAP32[$0>>2]|0;
  $157 = $153;
 }
 $156 = ($157>>>0)>(1);
 if ($156) {
  if ($152) {
   $160 = $150&255;
   $161 = $160 >>> 1;
   $$pn = $0;$164 = $0;$165 = $161;
  } else {
   $158 = HEAP32[$1>>2]|0;
   $159 = HEAP32[$0>>2]|0;
   $$pn = $158;$164 = $158;$165 = $159;
  }
  $162 = (($$pn) + 4|0);
  $163 = (($164) + ($165<<2)|0);
  $166 = HEAP32[$__me>>2]|0;
  $167 = ($162|0)==($163|0);
  if ($167) {
   $$0$lcssa$i$i = $166;
  } else {
   $$promoted4$i$i = $162;
   $$sum = (($165) + -1)|0;
   $scevgep$i$i = (($164) + ($$sum<<2)|0);
   $168 = (0 - ($$promoted4$i$i))|0;
   $uglygep$i$i = (($scevgep$i$i) + ($168)|0);
   $uglygep5$i$i = $uglygep$i$i;
   $169 = $uglygep5$i$i >>> 2;
   $$01$i$i = $166;$171 = $162;
   while(1) {
    $170 = HEAP32[$171>>2]|0;
    HEAP32[$$01$i$i>>2] = $170;
    $172 = (($171) + 4|0);
    $173 = (($$01$i$i) + 4|0);
    $174 = ($172|0)==($163|0);
    if ($174) {
     break;
    } else {
     $$01$i$i = $173;$171 = $172;
    }
   }
   $175 = (($169) + 1)|0;
   $scevgep6$i$i = (($166) + ($175<<2)|0);
   $$0$lcssa$i$i = $scevgep6$i$i;
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $176 = $__flags & 176;
 if ((($176|0) == 32)) {
  $177 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $177;
  STACKTOP = sp;return;
 } else if ((($176|0) == 16)) {
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0;
 var $__me = 0, $__mi = 0, $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0;
 $$byval_copy = sp + 484|0;
 $__p$i$i$i$i = sp;
 $__loc = sp + 480|0;
 $__pat = sp + 476|0;
 $__dp = sp + 472|0;
 $__ts = sp + 468|0;
 $__grp = sp + 456|0;
 $__sym = sp + 444|0;
 $__sn = sp + 428|0;
 $__fd = sp + 424|0;
 $__mbuf = sp + 24|0;
 $__mi = sp + 16|0;
 $__me = sp + 12|0;
 $0 = sp + 440|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $1 = HEAP32[$__loc>>2]|0;
 $2 = HEAP32[18784>>2]|0;
 $3 = ($2|0)==(-1);
 if ($3) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 18784;
  $4 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$4>>2] = (121);
  $5 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$5>>2] = 0;
  __THREW__ = 0;
  invoke_viii(6,(18784|0),($__p$i$i$i$i|0),(122|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $8 = HEAP32[((18784 + 4|0))>>2]|0;
   $9 = (($8) + -1)|0;
   $10 = (($1) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($1) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $11;
   $15 = $13;
   $16 = (($14) - ($15))|0;
   $17 = $16 >> 2;
   $18 = ($17>>>0)>($9>>>0);
   if ($18) {
    $19 = (($13) + ($9<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0|0);
    if (!($21)) {
     $25 = HEAP8[$__digits]|0;
     $26 = $25 & 1;
     $27 = ($26<<24>>24)==(0);
     if ($27) {
      $30 = $25&255;
      $31 = $30 >>> 1;
      $33 = $31;
     } else {
      $28 = (($__digits) + 4|0);
      $29 = HEAP32[$28>>2]|0;
      $33 = $29;
     }
     $32 = ($33|0)==(0);
     if ($32) {
      $46 = 0;
     } else {
      if ($27) {
       $36 = (($__digits) + 4|0);
       $38 = $36;
      } else {
       $34 = (($__digits) + 8|0);
       $35 = HEAP32[$34>>2]|0;
       $38 = $35;
      }
      $37 = HEAP32[$38>>2]|0;
      $39 = HEAP32[$20>>2]|0;
      $40 = (($39) + 44|0);
      $41 = HEAP32[$40>>2]|0;
      __THREW__ = 0;
      $42 = (invoke_iii($41|0,($20|0),45)|0);
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       break;
      }
      $45 = ($37|0)==($42|0);
      $46 = $45;
     }
     HEAP32[$__pat>>2] = 0;
     ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
     ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
     ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(4,($__intl|0),($46|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     L20: do {
      if ($48) {
       $114 = ___cxa_find_matching_catch(-1,-1)|0;
       $115 = tempRet0;
       $$0 = $114;$$01 = $115;
      } else {
       $49 = HEAP8[$__digits]|0;
       $50 = $49 & 1;
       $51 = ($50<<24>>24)==(0);
       if ($51) {
        $54 = $49&255;
        $55 = $54 >>> 1;
        $58 = $55;
       } else {
        $52 = (($__digits) + 4|0);
        $53 = HEAP32[$52>>2]|0;
        $58 = $53;
       }
       $56 = HEAP32[$__fd>>2]|0;
       $57 = ($58|0)>($56|0);
       if ($57) {
        if ($51) {
         $61 = $49&255;
         $62 = $61 >>> 1;
         $64 = $62;
        } else {
         $59 = (($__digits) + 4|0);
         $60 = HEAP32[$59>>2]|0;
         $64 = $60;
        }
        $63 = (($64) - ($56))|0;
        $65 = $63 << 1;
        $66 = HEAP8[$__sn]|0;
        $67 = $66 & 1;
        $68 = ($67<<24>>24)==(0);
        if ($68) {
         $71 = $66&255;
         $72 = $71 >>> 1;
         $82 = $72;
        } else {
         $69 = (($__sn) + 4|0);
         $70 = HEAP32[$69>>2]|0;
         $82 = $70;
        }
        $73 = HEAP8[$__sym]|0;
        $74 = $73 & 1;
        $75 = ($74<<24>>24)==(0);
        if ($75) {
         $78 = $73&255;
         $79 = $78 >>> 1;
         $84 = $79;
        } else {
         $76 = (($__sym) + 4|0);
         $77 = HEAP32[$76>>2]|0;
         $84 = $77;
        }
        $80 = $65 | 1;
        $81 = (($82) + ($80))|0;
        $83 = (($81) + ($84))|0;
        $$pn = $83;
       } else {
        $85 = HEAP8[$__sn]|0;
        $86 = $85 & 1;
        $87 = ($86<<24>>24)==(0);
        if ($87) {
         $90 = $85&255;
         $91 = $90 >>> 1;
         $100 = $91;
        } else {
         $88 = (($__sn) + 4|0);
         $89 = HEAP32[$88>>2]|0;
         $100 = $89;
        }
        $92 = HEAP8[$__sym]|0;
        $93 = $92 & 1;
        $94 = ($93<<24>>24)==(0);
        if ($94) {
         $97 = $92&255;
         $98 = $97 >>> 1;
         $102 = $98;
        } else {
         $95 = (($__sym) + 4|0);
         $96 = HEAP32[$95>>2]|0;
         $102 = $96;
        }
        $99 = (($100) + 2)|0;
        $101 = (($99) + ($102))|0;
        $$pn = $101;
       }
       $103 = (($$pn) + ($56))|0;
       $104 = ($103>>>0)>(100);
       do {
        if ($104) {
         $105 = $103 << 2;
         $106 = (_malloc($105)|0);
         $107 = ($106|0)==(0|0);
         if ($107) {
          __THREW__ = 0;
          invoke_v(4);
          $108 = __THREW__; __THREW__ = 0;
          $109 = $108&1;
          if ($109) {
           $110 = ___cxa_find_matching_catch(-1,-1)|0;
           $111 = tempRet0;
           $$0 = $110;$$01 = $111;
           break L20;
          } else {
           $$pre = HEAP8[$__digits]|0;
           $119 = 0;$123 = $$pre;$__mb$0 = 0;
           break;
          }
         } else {
          $119 = $106;$123 = $49;$__mb$0 = $106;
         }
        } else {
         $119 = 0;$123 = $49;$__mb$0 = $__mbuf;
        }
       } while(0);
       $120 = (($__iob) + 4|0);
       $121 = HEAP32[$120>>2]|0;
       $122 = $123 & 1;
       $124 = ($122<<24>>24)==(0);
       if ($124) {
        $129 = (($__digits) + 4|0);
        $130 = $123&255;
        $131 = $130 >>> 1;
        $133 = $129;$134 = $131;
       } else {
        $125 = (($__digits) + 8|0);
        $126 = HEAP32[$125>>2]|0;
        $127 = (($__digits) + 4|0);
        $128 = HEAP32[$127>>2]|0;
        $133 = $126;$134 = $128;
       }
       $132 = (($133) + ($134<<2)|0);
       $135 = HEAP32[$__dp>>2]|0;
       $136 = HEAP32[$__ts>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(2,($__mb$0|0),($__mi|0),($__me|0),($121|0),($133|0),($132|0),($20|0),($46|0),($__pat|0),($135|0),($136|0),($__grp|0),($__sym|0),($__sn|0),($56|0));
       $137 = __THREW__; __THREW__ = 0;
       $138 = $137&1;
       if (!($138)) {
        $139 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $139;
        $140 = HEAP32[$__mi>>2]|0;
        $141 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
        invoke_viiiiiii(45,($agg$result|0),($$byval_copy|0),($__mb$0|0),($140|0),($141|0),($__iob|0),($__fl|0));
        $142 = __THREW__; __THREW__ = 0;
        $143 = $142&1;
        if (!($143)) {
         $144 = ($119|0)==(0|0);
         if ($144) {
          __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
          __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
          $145 = HEAP32[$__loc>>2]|0;
          (__ZNSt3__114__shared_count16__release_sharedEv($145)|0);
          STACKTOP = sp;return;
         }
         _free($119);
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
         $145 = HEAP32[$__loc>>2]|0;
         (__ZNSt3__114__shared_count16__release_sharedEv($145)|0);
         STACKTOP = sp;return;
        }
       }
       $116 = ___cxa_find_matching_catch(-1,-1)|0;
       $117 = tempRet0;
       $118 = ($119|0)==(0|0);
       if ($118) {
        $$0 = $116;$$01 = $117;
       } else {
        _free($119);
        $$0 = $116;$$01 = $117;
       }
      }
     } while(0);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
     $$1 = $$0;$$12 = $$01;
     $146 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($146)|0);
     ___resumeException($$1|0);
     // unreachable;
    }
   }
   $22 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($22);
   __THREW__ = 0;
   invoke_viii(7,($22|0),(26752|0),(102|0));
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if (!($24)) {
    // unreachable;
   }
  }
 } while(0);
 $112 = ___cxa_find_matching_catch(-1,-1)|0;
 $113 = tempRet0;
 $$1 = $112;$$12 = $113;
 $146 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($146)|0);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$01 = 0, $$01$i = 0, $$01$i7 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ndflt = 0, $exitcond$i = 0, $exitcond$i8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0;
 var $phitmp = 0, $phitmp18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__ndflt = sp;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $0 = HEAP8[$__dflt]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = (($__dflt) + 1|0);
  $8 = (($__dflt) + 1|0);
  $9 = $0&255;
  $10 = $9 >>> 1;
  $12 = $8;$13 = $10;$15 = $7;
 } else {
  $3 = (($__dflt) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($__dflt) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $12 = $4;$13 = $6;$15 = $4;
 }
 $11 = (($12) + ($13)|0);
 $14 = ($15>>>0)<($11>>>0);
 do {
  if ($14) {
   $$01$i7 = $15;
   while(1) {
    $20 = HEAP8[$$01$i7]|0;
    __THREW__ = 0;
    invoke_vii(49,($__ndflt|0),($20|0));
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     label = 12;
     break;
    }
    $23 = (($$01$i7) + 1|0);
    $exitcond$i8 = ($23|0)==($11|0);
    if ($exitcond$i8) {
     break;
    } else {
     $$01$i7 = $23;
    }
   }
   if ((label|0) == 12) {
    $36 = ___cxa_find_matching_catch(-1,-1)|0;
    $37 = tempRet0;
    $lpad$phi$index = $36;$lpad$phi$index2 = $37;
    break;
   }
   $$pre = HEAP8[$__ndflt]|0;
   $phitmp = $$pre & 1;
   $phitmp18 = ($phitmp<<24>>24)==(0);
   $24 = ($__c|0)==(-1);
   $25 = $__c << 1;
   $26 = $25;
   $27 = $24 ? (-1) : $26;
   if ($phitmp18) {
    $49 = $27;
    label = 10;
   } else {
    $28 = (($__ndflt) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    $31 = $27;$32 = $29;
    label = 11;
   }
  } else {
   $16 = ($__c|0)==(-1);
   $17 = $__c << 1;
   $18 = $17;
   $19 = $16 ? (-1) : $18;
   $49 = $19;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $30 = (($__ndflt) + 1|0);
  $31 = $49;$32 = $30;
  label = 11;
 }
 do {
  if ((label|0) == 11) {
   __THREW__ = 0;
   $33 = (invoke_iiiii(15,($31|0),($__set|0),($__msgid|0),($32|0))|0);
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if ($35) {
    $38 = ___cxa_find_matching_catch(-1,-1)|0;
    $39 = tempRet0;
    $lpad$phi$index = $38;$lpad$phi$index2 = $39;
    break;
   }
   ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
   $40 = (_strlen(($33|0))|0);
   $41 = (($33) + ($40)|0);
   $42 = ($40|0)>(0);
   if ($42) {
    $$01$i = $33;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
    STACKTOP = sp;return;
   }
   while(1) {
    $43 = HEAP8[$$01$i]|0;
    __THREW__ = 0;
    invoke_vii(49,($agg$result|0),($43|0));
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     break;
    }
    $46 = (($$01$i) + 1|0);
    $exitcond$i = ($46|0)==($41|0);
    if ($exitcond$i) {
     label = 19;
     break;
    } else {
     $$01$i = $46;
    }
   }
   if ((label|0) == 19) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
    STACKTOP = sp;return;
   }
   $47 = ___cxa_find_matching_catch(-1,-1)|0;
   $48 = tempRet0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg$result);
   $$01 = $47;$$02 = $48;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   ___resumeException($$01|0);
   // unreachable;
  }
 } while(0);
 $$01 = $lpad$phi$index;$$02 = $lpad$phi$index2;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$04$i = 0, $$04$i16 = 0, $$1 = 0, $$13 = 0, $$pre = 0, $$pre$i = 0, $$pre$i21 = 0, $$pre44 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bn$i = 0, $__bn$i14 = 0, $__buf$i = 0;
 var $__buf$i13 = 0, $__mb$i = 0, $__mb$i11 = 0, $__ndflt = 0, $__nn$i = 0, $__p$03$i = 0, $__p$03$i20 = 0, $__wn$i = 0, $lpad$phi$index = 0, $lpad$phi$index10 = 0, $lpad$phi38$index = 0, $lpad$phi38$index3 = 0, $or$cond2$i = 0, $or$cond2$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__mb$i11 = sp + 8|0;
 $__buf$i13 = sp + 192|0;
 $__bn$i14 = sp + 60|0;
 $__wn$i = sp + 56|0;
 $__mb$i = sp;
 $__buf$i = sp + 64|0;
 $__bn$i = sp + 40|0;
 $__nn$i = sp + 16|0;
 $__ndflt = sp + 20|0;
 $0 = sp + 48|0;
 $1 = sp + 32|0;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $2 = (($0) + 4|0);
 HEAP32[$2>>2] = 0;
 HEAP32[$0>>2] = ((20440 + 8|0));
 $3 = HEAP8[$__dflt]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $10 = (($__dflt) + 4|0);
  $11 = (($__dflt) + 4|0);
  $12 = $3&255;
  $13 = $12 >>> 1;
  $15 = $11;$16 = $13;$22 = $10;
 } else {
  $6 = (($__dflt) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($__dflt) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $15 = $7;$16 = $9;$22 = $7;
 }
 $14 = (($15) + ($16<<2)|0);
 $17 = $__mb$i11;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = 0;
 $21 = ($22>>>0)<($14>>>0);
 L5: do {
  if ($21) {
   $23 = (($__buf$i13) + 32|0);
   $$04$i16 = $22;$25 = ((20440 + 8|0));
   L7: while(1) {
    HEAP32[$__wn$i>>2] = $$04$i16;
    $24 = (($25) + 12|0);
    $26 = HEAP32[$24>>2]|0;
    __THREW__ = 0;
    $27 = (invoke_iiiiiiiii($26|0,($0|0),($__mb$i11|0),($$04$i16|0),($14|0),($__wn$i|0),($__buf$i13|0),($23|0),($__bn$i14|0))|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if ($29) {
     label = 22;
     break;
    }
    $30 = ($27|0)==(2);
    $31 = HEAP32[$__wn$i>>2]|0;
    $32 = ($31|0)==($$04$i16|0);
    $or$cond2$i17 = $30 | $32;
    if ($or$cond2$i17) {
     label = 9;
     break;
    }
    $33 = HEAP32[$__bn$i14>>2]|0;
    $34 = ($__buf$i13>>>0)<($33>>>0);
    if ($34) {
     $__p$03$i20 = $__buf$i13;
     while(1) {
      $37 = HEAP8[$__p$03$i20]|0;
      __THREW__ = 0;
      invoke_vii(49,($__ndflt|0),($37|0));
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 21;
       break L7;
      }
      $40 = (($__p$03$i20) + 1|0);
      $41 = HEAP32[$__bn$i14>>2]|0;
      $42 = ($40>>>0)<($41>>>0);
      if ($42) {
       $__p$03$i20 = $40;
      } else {
       break;
      }
     }
     $$pre$i21 = HEAP32[$__wn$i>>2]|0;
     $44 = $$pre$i21;
    } else {
     $44 = $31;
    }
    $43 = ($44>>>0)<($14>>>0);
    if (!($43)) {
     break L5;
    }
    $$pre = HEAP32[$0>>2]|0;
    $$04$i16 = $44;$25 = $$pre;
   }
   do {
    if ((label|0) == 9) {
     __THREW__ = 0;
     invoke_vi(119,(19672|0));
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if ($36) {
      $65 = ___cxa_find_matching_catch(-1,-1)|0;
      $66 = tempRet0;
      $lpad$phi38$index = $65;$lpad$phi38$index3 = $66;
      break;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 21) {
     $61 = ___cxa_find_matching_catch(-1,-1)|0;
     $62 = tempRet0;
     $lpad$phi38$index = $61;$lpad$phi38$index3 = $62;
    }
    else if ((label|0) == 22) {
     $63 = ___cxa_find_matching_catch(-1,-1)|0;
     $64 = tempRet0;
     $lpad$phi38$index = $63;$lpad$phi38$index3 = $64;
    }
   } while(0);
   $$1 = $lpad$phi38$index;$$13 = $lpad$phi38$index3;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   ___resumeException($$1|0);
   // unreachable;
  }
 } while(0);
 $45 = ($__c|0)==(-1);
 $46 = $__c << 1;
 $47 = $46;
 $48 = $45 ? (-1) : $47;
 $49 = HEAP8[$__ndflt]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 if ($51) {
  $54 = (($__ndflt) + 1|0);
  $55 = $54;
 } else {
  $52 = (($__ndflt) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $55 = $53;
 }
 __THREW__ = 0;
 $56 = (invoke_iiiii(15,($48|0),($__set|0),($__msgid|0),($55|0))|0);
 $57 = __THREW__; __THREW__ = 0;
 $58 = $57&1;
 if ($58) {
  $59 = ___cxa_find_matching_catch(-1,-1)|0;
  $60 = tempRet0;
  $$1 = $59;$$13 = $60;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  ___resumeException($$1|0);
  // unreachable;
 }
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $67 = (($1) + 4|0);
 HEAP32[$67>>2] = 0;
 HEAP32[$1>>2] = ((20544 + 8|0));
 $68 = (_strlen(($56|0))|0);
 $69 = (($56) + ($68)|0);
 $70 = $__mb$i;
 $71 = $70;
 HEAP32[$71>>2] = 0;
 $72 = (($70) + 4)|0;
 $73 = $72;
 HEAP32[$73>>2] = 0;
 $74 = ($68|0)>(0);
 if (!($74)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  STACKTOP = sp;return;
 }
 $75 = $69;
 $76 = (($__buf$i) + 128|0);
 $$04$i = $56;$78 = ((20544 + 8|0));
 L39: while(1) {
  HEAP32[$__nn$i>>2] = $$04$i;
  $77 = (($78) + 16|0);
  $79 = HEAP32[$77>>2]|0;
  $80 = $$04$i;
  $81 = (($75) - ($80))|0;
  $82 = ($81|0)>(32);
  $83 = (($$04$i) + 32|0);
  $84 = $82 ? $83 : $69;
  __THREW__ = 0;
  $85 = (invoke_iiiiiiiii($79|0,($1|0),($__mb$i|0),($$04$i|0),($84|0),($__nn$i|0),($__buf$i|0),($76|0),($__bn$i|0))|0);
  $86 = __THREW__; __THREW__ = 0;
  $87 = $86&1;
  if ($87) {
   label = 39;
   break;
  }
  $88 = ($85|0)==(2);
  $89 = HEAP32[$__nn$i>>2]|0;
  $90 = ($89|0)==($$04$i|0);
  $or$cond2$i = $88 | $90;
  if ($or$cond2$i) {
   label = 30;
   break;
  }
  $91 = HEAP32[$__bn$i>>2]|0;
  $92 = ($__buf$i>>>0)<($91>>>0);
  if ($92) {
   $__p$03$i = $__buf$i;
   while(1) {
    $95 = HEAP32[$__p$03$i>>2]|0;
    __THREW__ = 0;
    invoke_vii(51,($agg$result|0),($95|0));
    $96 = __THREW__; __THREW__ = 0;
    $97 = $96&1;
    if ($97) {
     label = 38;
     break L39;
    }
    $98 = (($__p$03$i) + 4|0);
    $99 = HEAP32[$__bn$i>>2]|0;
    $100 = ($98>>>0)<($99>>>0);
    if ($100) {
     $__p$03$i = $98;
    } else {
     break;
    }
   }
   $$pre$i = HEAP32[$__nn$i>>2]|0;
   $102 = $$pre$i;
  } else {
   $102 = $89;
  }
  $101 = ($102>>>0)<($69>>>0);
  if (!($101)) {
   label = 37;
   break;
  }
  $$pre44 = HEAP32[$1>>2]|0;
  $$04$i = $102;$78 = $$pre44;
 }
 do {
  if ((label|0) == 30) {
   __THREW__ = 0;
   invoke_vi(119,(19672|0));
   $93 = __THREW__; __THREW__ = 0;
   $94 = $93&1;
   if ($94) {
    $107 = ___cxa_find_matching_catch(-1,-1)|0;
    $108 = tempRet0;
    $lpad$phi$index = $107;$lpad$phi$index10 = $108;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 37) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   STACKTOP = sp;return;
  }
  else if ((label|0) == 38) {
   $103 = ___cxa_find_matching_catch(-1,-1)|0;
   $104 = tempRet0;
   $lpad$phi$index = $103;$lpad$phi$index10 = $104;
  }
  else if ((label|0) == 39) {
   $105 = ___cxa_find_matching_catch(-1,-1)|0;
   $106 = tempRet0;
   $lpad$phi$index = $105;$lpad$phi$index10 = $106;
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($agg$result);
 $$1 = $lpad$phi$index;$$13 = $lpad$phi$index10;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((18872 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[18688]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((18688|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if (!($8)) {
     HEAP32[18680>>2] = $6;
     ___cxa_guard_release((18688|0));
     break;
    }
    $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $10 = tempRet0;
    ___cxa_guard_abort((18688|0));
    __ZSt9terminatev();
    // unreachable;
   }
  }
 } while(0);
 $11 = HEAP32[18680>>2]|0;
 $12 = ($1|0)==($11|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi(123,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $17 = tempRet0;
 __ZSt9terminatev();
 // unreachable;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(46,($0|0),(18672|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1)|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = ((15240 + 8|0));
  ___cxa_throw(($0|0),(15288|0),(9|0));
  // unreachable;
 }
}
function __ZNSt3__16locale5__impC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$pre1$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__new_last2$i$i$i = 0, $__new_last2$i$i$i$i$i = 0, $__p$i$i$i = 0, $__p$i$i$i102 = 0, $__p$i$i$i109 = 0, $__p$i$i$i113 = 0;
 var $__p$i$i$i12 = 0, $__p$i$i$i16 = 0, $__p$i$i$i20 = 0, $__p$i$i$i24 = 0, $__p$i$i$i28 = 0, $__p$i$i$i32 = 0, $__p$i$i$i36 = 0, $__p$i$i$i4 = 0, $__p$i$i$i40 = 0, $__p$i$i$i44 = 0, $__p$i$i$i48 = 0, $__p$i$i$i52 = 0, $__p$i$i$i56 = 0, $__p$i$i$i60 = 0, $__p$i$i$i64 = 0, $__p$i$i$i68 = 0, $__p$i$i$i72 = 0, $__p$i$i$i76 = 0, $__p$i$i$i8 = 0, $__p$i$i$i80 = 0;
 var $__p$i$i$i84 = 0, $__p$i$i$i88 = 0, $__p$i$i$i92 = 0, $__p$i$i$i96 = 0, $eh$lpad$body$index4Z2D = 0, $eh$lpad$body$indexZ2D = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i$i$i = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep$i$i$i$i$i = 0, $uglygep3$i$i$i = 0, $uglygep3$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0;
 $__p$i$i$i113 = sp + 432|0;
 $__p$i$i$i109 = sp + 416|0;
 $__p$i$i$i102 = sp + 400|0;
 $__p$i$i$i96 = sp + 384|0;
 $__p$i$i$i92 = sp + 368|0;
 $__p$i$i$i88 = sp + 352|0;
 $__p$i$i$i84 = sp + 336|0;
 $__p$i$i$i80 = sp + 320|0;
 $__p$i$i$i76 = sp + 304|0;
 $__p$i$i$i72 = sp + 288|0;
 $__p$i$i$i68 = sp + 272|0;
 $__p$i$i$i64 = sp + 256|0;
 $__p$i$i$i60 = sp + 240|0;
 $__p$i$i$i56 = sp + 224|0;
 $__p$i$i$i52 = sp + 208|0;
 $__p$i$i$i48 = sp + 80|0;
 $__p$i$i$i44 = sp;
 $__p$i$i$i40 = sp + 16|0;
 $__p$i$i$i36 = sp + 32|0;
 $__p$i$i$i32 = sp + 48|0;
 $__p$i$i$i28 = sp + 64|0;
 $__p$i$i$i24 = sp + 96|0;
 $__p$i$i$i20 = sp + 112|0;
 $__p$i$i$i16 = sp + 128|0;
 $__p$i$i$i12 = sp + 144|0;
 $__p$i$i$i8 = sp + 160|0;
 $__p$i$i$i4 = sp + 176|0;
 $__p$i$i$i = sp + 192|0;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((18704 + 8|0));
 $2 = (($this) + 8|0);
 $3 = (($this) + 12|0);
 $4 = (($this) + 16|0);
 $5 = (($this) + 136|0);
 $6 = (($this) + 24|0);
 HEAP8[$5] = 1;
 HEAP32[$3>>2] = $6;
 HEAP32[$2>>2] = $6;
 HEAP32[$4>>2] = $5;
 $$0$i$i = 28;$8 = $6;
 while(1) {
  $7 = ($8|0)==(0|0);
  if ($7) {
   $10 = 0;
  } else {
   HEAP32[$8>>2] = 0;
   $$pre1$i$i = HEAP32[$3>>2]|0;
   $10 = $$pre1$i$i;
  }
  $9 = (($10) + 4|0);
  HEAP32[$3>>2] = $9;
  $11 = (($$0$i$i) + -1)|0;
  $12 = ($11|0)==(0);
  if ($12) {
   break;
  } else {
   $$0$i$i = $11;$8 = $9;
  }
 }
 $13 = (($this) + 144|0);
 __THREW__ = 0;
 invoke_viii(9,($13|0),(18696|0),1);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $338 = ___cxa_find_matching_catch(-1,-1)|0;
  $339 = tempRet0;
  $$0 = $339;$$01 = $338;
 } else {
  $16 = HEAP32[$2>>2]|0;
  $17 = HEAP32[$3>>2]|0;
  $18 = ($17|0)==($16|0);
  if (!($18)) {
   $__new_last2$i$i$i = $16;
   $scevgep$i$i$i = (($17) + -4|0);
   $19 = (0 - ($__new_last2$i$i$i))|0;
   $uglygep$i$i$i = (($scevgep$i$i$i) + ($19)|0);
   $uglygep3$i$i$i = $uglygep$i$i$i;
   $20 = $uglygep3$i$i$i >>> 2;
   $21 = $20 ^ -1;
   $scevgep4$i$i$i = (($17) + ($21<<2)|0);
   HEAP32[$3>>2] = $scevgep4$i$i$i;
  }
  HEAP32[((23600 + 4|0))>>2] = 0;
  HEAP32[23600>>2] = ((17184 + 8|0));
  $22 = HEAP32[17216>>2]|0;
  $23 = ($22|0)==(-1);
  if ($23) {
   label = 10;
  } else {
   HEAP32[$__p$i$i$i4>>2] = 17216;
   $24 = (($__p$i$i$i4) + 4|0);
   HEAP32[$24>>2] = (121);
   $25 = (($__p$i$i$i4) + 8|0);
   HEAP32[$25>>2] = 0;
   __THREW__ = 0;
   invoke_viii(6,(17216|0),($__p$i$i$i4|0),(122|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    label = 111;
   } else {
    label = 10;
   }
  }
  L14: do {
   if ((label|0) == 10) {
    $28 = HEAP32[((17216 + 4|0))>>2]|0;
    $29 = (($28) + -1)|0;
    __THREW__ = 0;
    invoke_viii(10,($this|0),(23600|0),($29|0));
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if ($31) {
     label = 111;
    } else {
     HEAP32[((23592 + 4|0))>>2] = 0;
     HEAP32[23592>>2] = ((17224 + 8|0));
     $32 = HEAP32[17256>>2]|0;
     $33 = ($32|0)==(-1);
     if (!($33)) {
      HEAP32[$__p$i$i$i8>>2] = 17256;
      $34 = (($__p$i$i$i8) + 4|0);
      HEAP32[$34>>2] = (121);
      $35 = (($__p$i$i$i8) + 8|0);
      HEAP32[$35>>2] = 0;
      __THREW__ = 0;
      invoke_viii(6,(17256|0),($__p$i$i$i8|0),(122|0));
      $36 = __THREW__; __THREW__ = 0;
      $37 = $36&1;
      if ($37) {
       label = 111;
       break;
      }
     }
     $38 = HEAP32[((17256 + 4|0))>>2]|0;
     $39 = (($38) + -1)|0;
     __THREW__ = 0;
     invoke_viii(10,($this|0),(23592|0),($39|0));
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if ($41) {
      label = 111;
     } else {
      HEAP32[((23576 + 4|0))>>2] = 0;
      HEAP32[23576>>2] = ((18800 + 8|0));
      HEAP32[((23576 + 8|0))>>2] = 0;
      HEAP8[((23576 + 12|0))] = 0;
      __THREW__ = 0;
      $42 = (invoke_i(3)|0);
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       $45 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $46 = tempRet0;
       ___clang_call_terminate($45);
       // unreachable;
      }
      $47 = HEAP32[$42>>2]|0;
      HEAP32[((23576 + 8|0))>>2] = $47;
      $48 = HEAP32[18792>>2]|0;
      $49 = ($48|0)==(-1);
      if (!($49)) {
       HEAP32[$__p$i$i$i12>>2] = 18792;
       $50 = (($__p$i$i$i12) + 4|0);
       HEAP32[$50>>2] = (121);
       $51 = (($__p$i$i$i12) + 8|0);
       HEAP32[$51>>2] = 0;
       __THREW__ = 0;
       invoke_viii(6,(18792|0),($__p$i$i$i12|0),(122|0));
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if ($53) {
        label = 111;
        break;
       }
      }
      $54 = HEAP32[((18792 + 4|0))>>2]|0;
      $55 = (($54) + -1)|0;
      __THREW__ = 0;
      invoke_viii(10,($this|0),(23576|0),($55|0));
      $56 = __THREW__; __THREW__ = 0;
      $57 = $56&1;
      if ($57) {
       label = 111;
      } else {
       HEAP32[((23568 + 4|0))>>2] = 0;
       HEAP32[23568>>2] = ((19760 + 8|0));
       $58 = HEAP32[18784>>2]|0;
       $59 = ($58|0)==(-1);
       if (!($59)) {
        HEAP32[$__p$i$i$i16>>2] = 18784;
        $60 = (($__p$i$i$i16) + 4|0);
        HEAP32[$60>>2] = (121);
        $61 = (($__p$i$i$i16) + 8|0);
        HEAP32[$61>>2] = 0;
        __THREW__ = 0;
        invoke_viii(6,(18784|0),($__p$i$i$i16|0),(122|0));
        $62 = __THREW__; __THREW__ = 0;
        $63 = $62&1;
        if ($63) {
         label = 111;
         break;
        }
       }
       $64 = HEAP32[((18784 + 4|0))>>2]|0;
       $65 = (($64) + -1)|0;
       __THREW__ = 0;
       invoke_viii(10,($this|0),(23568|0),($65|0));
       $66 = __THREW__; __THREW__ = 0;
       $67 = $66&1;
       if ($67) {
        label = 111;
       } else {
        HEAP32[((23560 + 4|0))>>2] = 0;
        HEAP32[23560>>2] = ((19976 + 8|0));
        $68 = HEAP32[18856>>2]|0;
        $69 = ($68|0)==(-1);
        if (!($69)) {
         HEAP32[$__p$i$i$i20>>2] = 18856;
         $70 = (($__p$i$i$i20) + 4|0);
         HEAP32[$70>>2] = (121);
         $71 = (($__p$i$i$i20) + 8|0);
         HEAP32[$71>>2] = 0;
         __THREW__ = 0;
         invoke_viii(6,(18856|0),($__p$i$i$i20|0),(122|0));
         $72 = __THREW__; __THREW__ = 0;
         $73 = $72&1;
         if ($73) {
          label = 111;
          break;
         }
        }
        $74 = HEAP32[((18856 + 4|0))>>2]|0;
        $75 = (($74) + -1)|0;
        __THREW__ = 0;
        invoke_viii(10,($this|0),(23560|0),($75|0));
        $76 = __THREW__; __THREW__ = 0;
        $77 = $76&1;
        if ($77) {
         label = 111;
        } else {
         HEAP32[((23544 + 4|0))>>2] = 0;
         HEAP32[23544>>2] = ((18872 + 8|0));
         $78 = HEAP8[18688]|0;
         $79 = ($78<<24>>24)==(0);
         do {
          if ($79) {
           $80 = (___cxa_guard_acquire((18688|0))|0);
           $81 = ($80|0)==(0);
           if (!($81)) {
            __THREW__ = 0;
            $82 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
            $83 = __THREW__; __THREW__ = 0;
            $84 = $83&1;
            if ($84) {
             $85 = ___cxa_find_matching_catch(-1,-1)|0;
             $86 = tempRet0;
             ___cxa_guard_abort((18688|0));
             $eh$lpad$body$index4Z2D = $86;$eh$lpad$body$indexZ2D = $85;
             break L14;
            } else {
             HEAP32[18680>>2] = $82;
             ___cxa_guard_release((18688|0));
             break;
            }
           }
          }
         } while(0);
         $87 = HEAP32[18680>>2]|0;
         HEAP32[((23544 + 8|0))>>2] = $87;
         $88 = HEAP32[18864>>2]|0;
         $89 = ($88|0)==(-1);
         if (!($89)) {
          HEAP32[$__p$i$i$i24>>2] = 18864;
          $90 = (($__p$i$i$i24) + 4|0);
          HEAP32[$90>>2] = (121);
          $91 = (($__p$i$i$i24) + 8|0);
          HEAP32[$91>>2] = 0;
          __THREW__ = 0;
          invoke_viii(6,(18864|0),($__p$i$i$i24|0),(122|0));
          $92 = __THREW__; __THREW__ = 0;
          $93 = $92&1;
          if ($93) {
           label = 111;
           break;
          }
         }
         $94 = HEAP32[((18864 + 4|0))>>2]|0;
         $95 = (($94) + -1)|0;
         __THREW__ = 0;
         invoke_viii(10,($this|0),(23544|0),($95|0));
         $96 = __THREW__; __THREW__ = 0;
         $97 = $96&1;
         if ($97) {
          label = 111;
         } else {
          HEAP32[((23536 + 4|0))>>2] = 0;
          HEAP32[23536>>2] = ((20200 + 8|0));
          $98 = HEAP32[18920>>2]|0;
          $99 = ($98|0)==(-1);
          if (!($99)) {
           HEAP32[$__p$i$i$i28>>2] = 18920;
           $100 = (($__p$i$i$i28) + 4|0);
           HEAP32[$100>>2] = (121);
           $101 = (($__p$i$i$i28) + 8|0);
           HEAP32[$101>>2] = 0;
           __THREW__ = 0;
           invoke_viii(6,(18920|0),($__p$i$i$i28|0),(122|0));
           $102 = __THREW__; __THREW__ = 0;
           $103 = $102&1;
           if ($103) {
            label = 111;
            break;
           }
          }
          $104 = HEAP32[((18920 + 4|0))>>2]|0;
          $105 = (($104) + -1)|0;
          __THREW__ = 0;
          invoke_viii(10,($this|0),(23536|0),($105|0));
          $106 = __THREW__; __THREW__ = 0;
          $107 = $106&1;
          if ($107) {
           label = 111;
          } else {
           HEAP32[((23528 + 4|0))>>2] = 0;
           HEAP32[23528>>2] = ((20320 + 8|0));
           $108 = HEAP32[18928>>2]|0;
           $109 = ($108|0)==(-1);
           if (!($109)) {
            HEAP32[$__p$i$i$i32>>2] = 18928;
            $110 = (($__p$i$i$i32) + 4|0);
            HEAP32[$110>>2] = (121);
            $111 = (($__p$i$i$i32) + 8|0);
            HEAP32[$111>>2] = 0;
            __THREW__ = 0;
            invoke_viii(6,(18928|0),($__p$i$i$i32|0),(122|0));
            $112 = __THREW__; __THREW__ = 0;
            $113 = $112&1;
            if ($113) {
             label = 111;
             break;
            }
           }
           $114 = HEAP32[((18928 + 4|0))>>2]|0;
           $115 = (($114) + -1)|0;
           __THREW__ = 0;
           invoke_viii(10,($this|0),(23528|0),($115|0));
           $116 = __THREW__; __THREW__ = 0;
           $117 = $116&1;
           if ($117) {
            label = 111;
           } else {
            HEAP32[((23504 + 4|0))>>2] = 0;
            HEAP32[23504>>2] = ((18952 + 8|0));
            HEAP8[((23504 + 8|0))] = 46;
            HEAP8[((23504 + 9|0))] = 44;
            ;HEAP32[((23504 + 12|0))+0>>2]=0|0;HEAP32[((23504 + 12|0))+4>>2]=0|0;HEAP32[((23504 + 12|0))+8>>2]=0|0;
            $118 = HEAP32[18936>>2]|0;
            $119 = ($118|0)==(-1);
            if (!($119)) {
             HEAP32[$__p$i$i$i36>>2] = 18936;
             $120 = (($__p$i$i$i36) + 4|0);
             HEAP32[$120>>2] = (121);
             $121 = (($__p$i$i$i36) + 8|0);
             HEAP32[$121>>2] = 0;
             __THREW__ = 0;
             invoke_viii(6,(18936|0),($__p$i$i$i36|0),(122|0));
             $122 = __THREW__; __THREW__ = 0;
             $123 = $122&1;
             if ($123) {
              label = 111;
              break;
             }
            }
            $124 = HEAP32[((18936 + 4|0))>>2]|0;
            $125 = (($124) + -1)|0;
            __THREW__ = 0;
            invoke_viii(10,($this|0),(23504|0),($125|0));
            $126 = __THREW__; __THREW__ = 0;
            $127 = $126&1;
            if ($127) {
             label = 111;
            } else {
             HEAP32[((23472 + 4|0))>>2] = 0;
             HEAP32[23472>>2] = ((18992 + 8|0));
             HEAP32[((23472 + 8|0))>>2] = 46;
             HEAP32[((23472 + 12|0))>>2] = 44;
             ;HEAP32[((23472 + 16|0))+0>>2]=0|0;HEAP32[((23472 + 16|0))+4>>2]=0|0;HEAP32[((23472 + 16|0))+8>>2]=0|0;
             $128 = HEAP32[18944>>2]|0;
             $129 = ($128|0)==(-1);
             if (!($129)) {
              HEAP32[$__p$i$i$i40>>2] = 18944;
              $130 = (($__p$i$i$i40) + 4|0);
              HEAP32[$130>>2] = (121);
              $131 = (($__p$i$i$i40) + 8|0);
              HEAP32[$131>>2] = 0;
              __THREW__ = 0;
              invoke_viii(6,(18944|0),($__p$i$i$i40|0),(122|0));
              $132 = __THREW__; __THREW__ = 0;
              $133 = $132&1;
              if ($133) {
               label = 111;
               break;
              }
             }
             $134 = HEAP32[((18944 + 4|0))>>2]|0;
             $135 = (($134) + -1)|0;
             __THREW__ = 0;
             invoke_viii(10,($this|0),(23472|0),($135|0));
             $136 = __THREW__; __THREW__ = 0;
             $137 = $136&1;
             if ($137) {
              label = 111;
             } else {
              HEAP32[((23464 + 4|0))>>2] = 0;
              HEAP32[23464>>2] = ((17264 + 8|0));
              $138 = HEAP32[17328>>2]|0;
              $139 = ($138|0)==(-1);
              if (!($139)) {
               HEAP32[$__p$i$i$i44>>2] = 17328;
               $140 = (($__p$i$i$i44) + 4|0);
               HEAP32[$140>>2] = (121);
               $141 = (($__p$i$i$i44) + 8|0);
               HEAP32[$141>>2] = 0;
               __THREW__ = 0;
               invoke_viii(6,(17328|0),($__p$i$i$i44|0),(122|0));
               $142 = __THREW__; __THREW__ = 0;
               $143 = $142&1;
               if ($143) {
                label = 111;
                break;
               }
              }
              $144 = HEAP32[((17328 + 4|0))>>2]|0;
              $145 = (($144) + -1)|0;
              __THREW__ = 0;
              invoke_viii(10,($this|0),(23464|0),($145|0));
              $146 = __THREW__; __THREW__ = 0;
              $147 = $146&1;
              if ($147) {
               label = 111;
              } else {
               HEAP32[((23456 + 4|0))>>2] = 0;
               HEAP32[23456>>2] = ((17384 + 8|0));
               $148 = HEAP32[17448>>2]|0;
               $149 = ($148|0)==(-1);
               if (!($149)) {
                HEAP32[$__p$i$i$i48>>2] = 17448;
                $150 = (($__p$i$i$i48) + 4|0);
                HEAP32[$150>>2] = (121);
                $151 = (($__p$i$i$i48) + 8|0);
                HEAP32[$151>>2] = 0;
                __THREW__ = 0;
                invoke_viii(6,(17448|0),($__p$i$i$i48|0),(122|0));
                $152 = __THREW__; __THREW__ = 0;
                $153 = $152&1;
                if ($153) {
                 label = 111;
                 break;
                }
               }
               $154 = HEAP32[((17448 + 4|0))>>2]|0;
               $155 = (($154) + -1)|0;
               __THREW__ = 0;
               invoke_viii(10,($this|0),(23456|0),($155|0));
               $156 = __THREW__; __THREW__ = 0;
               $157 = $156&1;
               if ($157) {
                label = 111;
               } else {
                HEAP32[((23448 + 4|0))>>2] = 0;
                HEAP32[23448>>2] = ((17456 + 8|0));
                $158 = HEAP32[17512>>2]|0;
                $159 = ($158|0)==(-1);
                if (!($159)) {
                 HEAP32[$__p$i$i$i52>>2] = 17512;
                 $160 = (($__p$i$i$i52) + 4|0);
                 HEAP32[$160>>2] = (121);
                 $161 = (($__p$i$i$i52) + 8|0);
                 HEAP32[$161>>2] = 0;
                 __THREW__ = 0;
                 invoke_viii(6,(17512|0),($__p$i$i$i52|0),(122|0));
                 $162 = __THREW__; __THREW__ = 0;
                 $163 = $162&1;
                 if ($163) {
                  label = 111;
                  break;
                 }
                }
                $164 = HEAP32[((17512 + 4|0))>>2]|0;
                $165 = (($164) + -1)|0;
                __THREW__ = 0;
                invoke_viii(10,($this|0),(23448|0),($165|0));
                $166 = __THREW__; __THREW__ = 0;
                $167 = $166&1;
                if ($167) {
                 label = 111;
                } else {
                 HEAP32[((23440 + 4|0))>>2] = 0;
                 HEAP32[23440>>2] = ((17520 + 8|0));
                 $168 = HEAP32[17576>>2]|0;
                 $169 = ($168|0)==(-1);
                 if (!($169)) {
                  HEAP32[$__p$i$i$i56>>2] = 17576;
                  $170 = (($__p$i$i$i56) + 4|0);
                  HEAP32[$170>>2] = (121);
                  $171 = (($__p$i$i$i56) + 8|0);
                  HEAP32[$171>>2] = 0;
                  __THREW__ = 0;
                  invoke_viii(6,(17576|0),($__p$i$i$i56|0),(122|0));
                  $172 = __THREW__; __THREW__ = 0;
                  $173 = $172&1;
                  if ($173) {
                   label = 111;
                   break;
                  }
                 }
                 $174 = HEAP32[((17576 + 4|0))>>2]|0;
                 $175 = (($174) + -1)|0;
                 __THREW__ = 0;
                 invoke_viii(10,($this|0),(23440|0),($175|0));
                 $176 = __THREW__; __THREW__ = 0;
                 $177 = $176&1;
                 if ($177) {
                  label = 111;
                 } else {
                  HEAP32[((23432 + 4|0))>>2] = 0;
                  HEAP32[23432>>2] = ((18112 + 8|0));
                  $178 = HEAP32[18168>>2]|0;
                  $179 = ($178|0)==(-1);
                  if (!($179)) {
                   HEAP32[$__p$i$i$i60>>2] = 18168;
                   $180 = (($__p$i$i$i60) + 4|0);
                   HEAP32[$180>>2] = (121);
                   $181 = (($__p$i$i$i60) + 8|0);
                   HEAP32[$181>>2] = 0;
                   __THREW__ = 0;
                   invoke_viii(6,(18168|0),($__p$i$i$i60|0),(122|0));
                   $182 = __THREW__; __THREW__ = 0;
                   $183 = $182&1;
                   if ($183) {
                    label = 111;
                    break;
                   }
                  }
                  $184 = HEAP32[((18168 + 4|0))>>2]|0;
                  $185 = (($184) + -1)|0;
                  __THREW__ = 0;
                  invoke_viii(10,($this|0),(23432|0),($185|0));
                  $186 = __THREW__; __THREW__ = 0;
                  $187 = $186&1;
                  if ($187) {
                   label = 111;
                  } else {
                   HEAP32[((23424 + 4|0))>>2] = 0;
                   HEAP32[23424>>2] = ((18176 + 8|0));
                   $188 = HEAP32[18232>>2]|0;
                   $189 = ($188|0)==(-1);
                   if (!($189)) {
                    HEAP32[$__p$i$i$i64>>2] = 18232;
                    $190 = (($__p$i$i$i64) + 4|0);
                    HEAP32[$190>>2] = (121);
                    $191 = (($__p$i$i$i64) + 8|0);
                    HEAP32[$191>>2] = 0;
                    __THREW__ = 0;
                    invoke_viii(6,(18232|0),($__p$i$i$i64|0),(122|0));
                    $192 = __THREW__; __THREW__ = 0;
                    $193 = $192&1;
                    if ($193) {
                     label = 111;
                     break;
                    }
                   }
                   $194 = HEAP32[((18232 + 4|0))>>2]|0;
                   $195 = (($194) + -1)|0;
                   __THREW__ = 0;
                   invoke_viii(10,($this|0),(23424|0),($195|0));
                   $196 = __THREW__; __THREW__ = 0;
                   $197 = $196&1;
                   if ($197) {
                    label = 111;
                   } else {
                    HEAP32[((23416 + 4|0))>>2] = 0;
                    HEAP32[23416>>2] = ((18240 + 8|0));
                    $198 = HEAP32[18296>>2]|0;
                    $199 = ($198|0)==(-1);
                    if (!($199)) {
                     HEAP32[$__p$i$i$i68>>2] = 18296;
                     $200 = (($__p$i$i$i68) + 4|0);
                     HEAP32[$200>>2] = (121);
                     $201 = (($__p$i$i$i68) + 8|0);
                     HEAP32[$201>>2] = 0;
                     __THREW__ = 0;
                     invoke_viii(6,(18296|0),($__p$i$i$i68|0),(122|0));
                     $202 = __THREW__; __THREW__ = 0;
                     $203 = $202&1;
                     if ($203) {
                      label = 111;
                      break;
                     }
                    }
                    $204 = HEAP32[((18296 + 4|0))>>2]|0;
                    $205 = (($204) + -1)|0;
                    __THREW__ = 0;
                    invoke_viii(10,($this|0),(23416|0),($205|0));
                    $206 = __THREW__; __THREW__ = 0;
                    $207 = $206&1;
                    if ($207) {
                     label = 111;
                    } else {
                     HEAP32[((23408 + 4|0))>>2] = 0;
                     HEAP32[23408>>2] = ((18304 + 8|0));
                     $208 = HEAP32[18360>>2]|0;
                     $209 = ($208|0)==(-1);
                     if (!($209)) {
                      HEAP32[$__p$i$i$i72>>2] = 18360;
                      $210 = (($__p$i$i$i72) + 4|0);
                      HEAP32[$210>>2] = (121);
                      $211 = (($__p$i$i$i72) + 8|0);
                      HEAP32[$211>>2] = 0;
                      __THREW__ = 0;
                      invoke_viii(6,(18360|0),($__p$i$i$i72|0),(122|0));
                      $212 = __THREW__; __THREW__ = 0;
                      $213 = $212&1;
                      if ($213) {
                       label = 111;
                       break;
                      }
                     }
                     $214 = HEAP32[((18360 + 4|0))>>2]|0;
                     $215 = (($214) + -1)|0;
                     __THREW__ = 0;
                     invoke_viii(10,($this|0),(23408|0),($215|0));
                     $216 = __THREW__; __THREW__ = 0;
                     $217 = $216&1;
                     if ($217) {
                      label = 111;
                     } else {
                      HEAP32[((23400 + 4|0))>>2] = 0;
                      HEAP32[23400>>2] = ((18368 + 8|0));
                      $218 = HEAP32[18400>>2]|0;
                      $219 = ($218|0)==(-1);
                      if (!($219)) {
                       HEAP32[$__p$i$i$i76>>2] = 18400;
                       $220 = (($__p$i$i$i76) + 4|0);
                       HEAP32[$220>>2] = (121);
                       $221 = (($__p$i$i$i76) + 8|0);
                       HEAP32[$221>>2] = 0;
                       __THREW__ = 0;
                       invoke_viii(6,(18400|0),($__p$i$i$i76|0),(122|0));
                       $222 = __THREW__; __THREW__ = 0;
                       $223 = $222&1;
                       if ($223) {
                        label = 111;
                        break;
                       }
                      }
                      $224 = HEAP32[((18400 + 4|0))>>2]|0;
                      $225 = (($224) + -1)|0;
                      __THREW__ = 0;
                      invoke_viii(10,($this|0),(23400|0),($225|0));
                      $226 = __THREW__; __THREW__ = 0;
                      $227 = $226&1;
                      if ($227) {
                       label = 111;
                      } else {
                       HEAP32[((23392 + 4|0))>>2] = 0;
                       HEAP32[23392>>2] = ((18448 + 8|0));
                       $228 = HEAP32[18480>>2]|0;
                       $229 = ($228|0)==(-1);
                       if (!($229)) {
                        HEAP32[$__p$i$i$i80>>2] = 18480;
                        $230 = (($__p$i$i$i80) + 4|0);
                        HEAP32[$230>>2] = (121);
                        $231 = (($__p$i$i$i80) + 8|0);
                        HEAP32[$231>>2] = 0;
                        __THREW__ = 0;
                        invoke_viii(6,(18480|0),($__p$i$i$i80|0),(122|0));
                        $232 = __THREW__; __THREW__ = 0;
                        $233 = $232&1;
                        if ($233) {
                         label = 111;
                         break;
                        }
                       }
                       $234 = HEAP32[((18480 + 4|0))>>2]|0;
                       $235 = (($234) + -1)|0;
                       __THREW__ = 0;
                       invoke_viii(10,($this|0),(23392|0),($235|0));
                       $236 = __THREW__; __THREW__ = 0;
                       $237 = $236&1;
                       if ($237) {
                        label = 111;
                       } else {
                        HEAP32[((23384 + 4|0))>>2] = 0;
                        HEAP32[23384>>2] = ((18504 + 8|0));
                        $238 = HEAP32[18536>>2]|0;
                        $239 = ($238|0)==(-1);
                        if (!($239)) {
                         HEAP32[$__p$i$i$i84>>2] = 18536;
                         $240 = (($__p$i$i$i84) + 4|0);
                         HEAP32[$240>>2] = (121);
                         $241 = (($__p$i$i$i84) + 8|0);
                         HEAP32[$241>>2] = 0;
                         __THREW__ = 0;
                         invoke_viii(6,(18536|0),($__p$i$i$i84|0),(122|0));
                         $242 = __THREW__; __THREW__ = 0;
                         $243 = $242&1;
                         if ($243) {
                          label = 111;
                          break;
                         }
                        }
                        $244 = HEAP32[((18536 + 4|0))>>2]|0;
                        $245 = (($244) + -1)|0;
                        __THREW__ = 0;
                        invoke_viii(10,($this|0),(23384|0),($245|0));
                        $246 = __THREW__; __THREW__ = 0;
                        $247 = $246&1;
                        if ($247) {
                         label = 111;
                        } else {
                         HEAP32[((23376 + 4|0))>>2] = 0;
                         HEAP32[23376>>2] = ((18552 + 8|0));
                         $248 = HEAP32[18584>>2]|0;
                         $249 = ($248|0)==(-1);
                         if (!($249)) {
                          HEAP32[$__p$i$i$i88>>2] = 18584;
                          $250 = (($__p$i$i$i88) + 4|0);
                          HEAP32[$250>>2] = (121);
                          $251 = (($__p$i$i$i88) + 8|0);
                          HEAP32[$251>>2] = 0;
                          __THREW__ = 0;
                          invoke_viii(6,(18584|0),($__p$i$i$i88|0),(122|0));
                          $252 = __THREW__; __THREW__ = 0;
                          $253 = $252&1;
                          if ($253) {
                           label = 111;
                           break;
                          }
                         }
                         $254 = HEAP32[((18584 + 4|0))>>2]|0;
                         $255 = (($254) + -1)|0;
                         __THREW__ = 0;
                         invoke_viii(10,($this|0),(23376|0),($255|0));
                         $256 = __THREW__; __THREW__ = 0;
                         $257 = $256&1;
                         if ($257) {
                          label = 111;
                         } else {
                          HEAP32[((23360 + 4|0))>>2] = 0;
                          HEAP32[23360>>2] = ((17600 + 8|0));
                          HEAP32[((23360 + 8|0))>>2] = ((17600 + 56|0));
                          $258 = HEAP32[17688>>2]|0;
                          $259 = ($258|0)==(-1);
                          if (!($259)) {
                           HEAP32[$__p$i$i$i92>>2] = 17688;
                           $260 = (($__p$i$i$i92) + 4|0);
                           HEAP32[$260>>2] = (121);
                           $261 = (($__p$i$i$i92) + 8|0);
                           HEAP32[$261>>2] = 0;
                           __THREW__ = 0;
                           invoke_viii(6,(17688|0),($__p$i$i$i92|0),(122|0));
                           $262 = __THREW__; __THREW__ = 0;
                           $263 = $262&1;
                           if ($263) {
                            label = 111;
                            break;
                           }
                          }
                          $264 = HEAP32[((17688 + 4|0))>>2]|0;
                          $265 = (($264) + -1)|0;
                          __THREW__ = 0;
                          invoke_viii(10,($this|0),(23360|0),($265|0));
                          $266 = __THREW__; __THREW__ = 0;
                          $267 = $266&1;
                          if ($267) {
                           label = 111;
                          } else {
                           HEAP32[((23344 + 4|0))>>2] = 0;
                           HEAP32[23344>>2] = ((17752 + 8|0));
                           HEAP32[((23344 + 8|0))>>2] = ((17752 + 56|0));
                           $268 = HEAP32[17840>>2]|0;
                           $269 = ($268|0)==(-1);
                           if (!($269)) {
                            HEAP32[$__p$i$i$i96>>2] = 17840;
                            $270 = (($__p$i$i$i96) + 4|0);
                            HEAP32[$270>>2] = (121);
                            $271 = (($__p$i$i$i96) + 8|0);
                            HEAP32[$271>>2] = 0;
                            __THREW__ = 0;
                            invoke_viii(6,(17840|0),($__p$i$i$i96|0),(122|0));
                            $272 = __THREW__; __THREW__ = 0;
                            $273 = $272&1;
                            if ($273) {
                             label = 111;
                             break;
                            }
                           }
                           $274 = HEAP32[((17840 + 4|0))>>2]|0;
                           $275 = (($274) + -1)|0;
                           __THREW__ = 0;
                           invoke_viii(10,($this|0),(23344|0),($275|0));
                           $276 = __THREW__; __THREW__ = 0;
                           $277 = $276&1;
                           if ($277) {
                            label = 111;
                           } else {
                            HEAP32[((23328 + 4|0))>>2] = 0;
                            HEAP32[23328>>2] = ((19696 + 8|0));
                            $278 = HEAP8[18688]|0;
                            $279 = ($278<<24>>24)==(0);
                            do {
                             if ($279) {
                              $280 = (___cxa_guard_acquire((18688|0))|0);
                              $281 = ($280|0)==(0);
                              if (!($281)) {
                               __THREW__ = 0;
                               $282 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
                               $283 = __THREW__; __THREW__ = 0;
                               $284 = $283&1;
                               if ($284) {
                                $285 = ___cxa_find_matching_catch(-1,-1)|0;
                                $286 = tempRet0;
                                ___cxa_guard_abort((18688|0));
                                $eh$lpad$body$index4Z2D = $286;$eh$lpad$body$indexZ2D = $285;
                                break L14;
                               } else {
                                HEAP32[18680>>2] = $282;
                                ___cxa_guard_release((18688|0));
                                break;
                               }
                              }
                             }
                            } while(0);
                            $287 = HEAP32[18680>>2]|0;
                            HEAP32[((23328 + 8|0))>>2] = $287;
                            HEAP32[23328>>2] = ((18048 + 8|0));
                            $288 = HEAP32[18072>>2]|0;
                            $289 = ($288|0)==(-1);
                            if (!($289)) {
                             HEAP32[$__p$i$i$i102>>2] = 18072;
                             $290 = (($__p$i$i$i102) + 4|0);
                             HEAP32[$290>>2] = (121);
                             $291 = (($__p$i$i$i102) + 8|0);
                             HEAP32[$291>>2] = 0;
                             __THREW__ = 0;
                             invoke_viii(6,(18072|0),($__p$i$i$i102|0),(122|0));
                             $292 = __THREW__; __THREW__ = 0;
                             $293 = $292&1;
                             if ($293) {
                              label = 111;
                              break;
                             }
                            }
                            $294 = HEAP32[((18072 + 4|0))>>2]|0;
                            $295 = (($294) + -1)|0;
                            __THREW__ = 0;
                            invoke_viii(10,($this|0),(23328|0),($295|0));
                            $296 = __THREW__; __THREW__ = 0;
                            $297 = $296&1;
                            if ($297) {
                             label = 111;
                            } else {
                             HEAP32[((23312 + 4|0))>>2] = 0;
                             HEAP32[23312>>2] = ((19696 + 8|0));
                             $298 = HEAP8[18688]|0;
                             $299 = ($298<<24>>24)==(0);
                             do {
                              if ($299) {
                               $300 = (___cxa_guard_acquire((18688|0))|0);
                               $301 = ($300|0)==(0);
                               if (!($301)) {
                                __THREW__ = 0;
                                $302 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
                                $303 = __THREW__; __THREW__ = 0;
                                $304 = $303&1;
                                if ($304) {
                                 $305 = ___cxa_find_matching_catch(-1,-1)|0;
                                 $306 = tempRet0;
                                 ___cxa_guard_abort((18688|0));
                                 $eh$lpad$body$index4Z2D = $306;$eh$lpad$body$indexZ2D = $305;
                                 break L14;
                                } else {
                                 HEAP32[18680>>2] = $302;
                                 ___cxa_guard_release((18688|0));
                                 break;
                                }
                               }
                              }
                             } while(0);
                             $307 = HEAP32[18680>>2]|0;
                             HEAP32[((23312 + 8|0))>>2] = $307;
                             HEAP32[23312>>2] = ((18080 + 8|0));
                             $308 = HEAP32[18104>>2]|0;
                             $309 = ($308|0)==(-1);
                             if (!($309)) {
                              HEAP32[$__p$i$i$i109>>2] = 18104;
                              $310 = (($__p$i$i$i109) + 4|0);
                              HEAP32[$310>>2] = (121);
                              $311 = (($__p$i$i$i109) + 8|0);
                              HEAP32[$311>>2] = 0;
                              __THREW__ = 0;
                              invoke_viii(6,(18104|0),($__p$i$i$i109|0),(122|0));
                              $312 = __THREW__; __THREW__ = 0;
                              $313 = $312&1;
                              if ($313) {
                               label = 111;
                               break;
                              }
                             }
                             $314 = HEAP32[((18104 + 4|0))>>2]|0;
                             $315 = (($314) + -1)|0;
                             __THREW__ = 0;
                             invoke_viii(10,($this|0),(23312|0),($315|0));
                             $316 = __THREW__; __THREW__ = 0;
                             $317 = $316&1;
                             if ($317) {
                              label = 111;
                             } else {
                              HEAP32[((23304 + 4|0))>>2] = 0;
                              HEAP32[23304>>2] = ((18592 + 8|0));
                              $318 = HEAP32[18624>>2]|0;
                              $319 = ($318|0)==(-1);
                              if (!($319)) {
                               HEAP32[$__p$i$i$i113>>2] = 18624;
                               $320 = (($__p$i$i$i113) + 4|0);
                               HEAP32[$320>>2] = (121);
                               $321 = (($__p$i$i$i113) + 8|0);
                               HEAP32[$321>>2] = 0;
                               __THREW__ = 0;
                               invoke_viii(6,(18624|0),($__p$i$i$i113|0),(122|0));
                               $322 = __THREW__; __THREW__ = 0;
                               $323 = $322&1;
                               if ($323) {
                                label = 111;
                                break;
                               }
                              }
                              $324 = HEAP32[((18624 + 4|0))>>2]|0;
                              $325 = (($324) + -1)|0;
                              __THREW__ = 0;
                              invoke_viii(10,($this|0),(23304|0),($325|0));
                              $326 = __THREW__; __THREW__ = 0;
                              $327 = $326&1;
                              if ($327) {
                               label = 111;
                              } else {
                               HEAP32[((23296 + 4|0))>>2] = 0;
                               HEAP32[23296>>2] = ((18632 + 8|0));
                               $328 = HEAP32[18664>>2]|0;
                               $329 = ($328|0)==(-1);
                               if (!($329)) {
                                HEAP32[$__p$i$i$i>>2] = 18664;
                                $330 = (($__p$i$i$i) + 4|0);
                                HEAP32[$330>>2] = (121);
                                $331 = (($__p$i$i$i) + 8|0);
                                HEAP32[$331>>2] = 0;
                                __THREW__ = 0;
                                invoke_viii(6,(18664|0),($__p$i$i$i|0),(122|0));
                                $332 = __THREW__; __THREW__ = 0;
                                $333 = $332&1;
                                if ($333) {
                                 label = 111;
                                 break;
                                }
                               }
                               $334 = HEAP32[((18664 + 4|0))>>2]|0;
                               $335 = (($334) + -1)|0;
                               __THREW__ = 0;
                               invoke_viii(10,($this|0),(23296|0),($335|0));
                               $336 = __THREW__; __THREW__ = 0;
                               $337 = $336&1;
                               if ($337) {
                                label = 111;
                               } else {
                                STACKTOP = sp;return;
                               }
                              }
                             }
                            }
                           }
                          }
                         }
                        }
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 111) {
   $340 = ___cxa_find_matching_catch(-1,-1)|0;
   $341 = tempRet0;
   $eh$lpad$body$index4Z2D = $341;$eh$lpad$body$indexZ2D = $340;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($13);
  $$0 = $eh$lpad$body$index4Z2D;$$01 = $eh$lpad$body$indexZ2D;
 }
 $342 = HEAP32[$2>>2]|0;
 $343 = ($342|0)==(0|0);
 if ($343) {
  ___resumeException($$01|0);
  // unreachable;
 }
 $344 = HEAP32[$3>>2]|0;
 $345 = ($344|0)==($342|0);
 if (!($345)) {
  $__new_last2$i$i$i$i$i = $342;
  $scevgep$i$i$i$i$i = (($344) + -4|0);
  $346 = (0 - ($__new_last2$i$i$i$i$i))|0;
  $uglygep$i$i$i$i$i = (($scevgep$i$i$i$i$i) + ($346)|0);
  $uglygep3$i$i$i$i$i = $uglygep$i$i$i$i$i;
  $347 = $uglygep3$i$i$i$i$i >>> 2;
  $348 = $347 ^ -1;
  $scevgep4$i$i$i$i$i = (($344) + ($348<<2)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i$i$i;
 }
 $349 = ($6|0)==($342|0);
 if ($349) {
  HEAP8[$5] = 0;
  ___resumeException($$01|0);
  // unreachable;
 } else {
  __ZdlPv($342);
  ___resumeException($$01|0);
  // unreachable;
 }
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep3$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_count12__add_sharedEv($f);
 $0 = (($this) + 8|0);
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($id>>>0);
 do {
  if ($8) {
   $24 = $3;
  } else {
   $9 = (($id) + 1)|0;
   $10 = ($7>>>0)<($9>>>0);
   if (!($10)) {
    $14 = ($7>>>0)>($9>>>0);
    if (!($14)) {
     $24 = $3;
     break;
    }
    $15 = (($3) + ($9<<2)|0);
    $16 = ($2|0)==($15|0);
    if ($16) {
     $24 = $3;
     break;
    }
    $__new_last2$i$i$i = $15;
    $scevgep$i$i$i = (($2) + -4|0);
    $17 = (0 - ($__new_last2$i$i$i))|0;
    $uglygep$i$i$i = (($scevgep$i$i$i) + ($17)|0);
    $uglygep3$i$i$i = $uglygep$i$i$i;
    $18 = $uglygep3$i$i$i >>> 2;
    $19 = $18 ^ -1;
    $scevgep4$i$i$i = (($2) + ($19<<2)|0);
    HEAP32[$1>>2] = $scevgep4$i$i$i;
    $24 = $3;
    break;
   }
   $11 = (($9) - ($7))|0;
   __THREW__ = 0;
   invoke_vii(53,($0|0),($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    $$pre2 = HEAP32[$0>>2]|0;
    $24 = $$pre2;
    break;
   }
   $20 = ___cxa_find_matching_catch(-1,-1)|0;
   $21 = tempRet0;
   $22 = ($f|0)==(0|0);
   if ($22) {
    ___resumeException($20|0);
    // unreachable;
   }
   (__ZNSt3__114__shared_count16__release_sharedEv($f)|0);
   ___resumeException($20|0);
   // unreachable;
  }
 } while(0);
 $23 = (($24) + ($id<<2)|0);
 $25 = HEAP32[$23>>2]|0;
 $26 = ($25|0)==(0|0);
 if ($26) {
  $28 = $24;
  $27 = (($28) + ($id<<2)|0);
  HEAP32[$27>>2] = $f;
  STACKTOP = sp;return;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($25)|0);
 $$pre = HEAP32[$0>>2]|0;
 $28 = $$pre;
 $27 = (($28) + ($id<<2)|0);
 HEAP32[$27>>2] = $f;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i$i$i = 0, $i$02 = 0, $scevgep$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i = 0, $uglygep$i$i$i$i$i = 0, $uglygep3$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((18704 + 8|0));
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if (!($4)) {
  $28 = $1;$6 = $3;$i$02 = 0;
  while(1) {
   $5 = (($6) + ($i$02<<2)|0);
   $7 = HEAP32[$5>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $11 = $28;$13 = $6;
   } else {
    (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
    $$pre = HEAP32[$0>>2]|0;
    $$pre4 = HEAP32[$2>>2]|0;
    $11 = $$pre;$13 = $$pre4;
   }
   $9 = (($i$02) + 1)|0;
   $10 = $11;
   $12 = $13;
   $14 = (($10) - ($12))|0;
   $15 = $14 >> 2;
   $16 = ($9>>>0)<($15>>>0);
   if ($16) {
    $28 = $11;$6 = $13;$i$02 = $9;
   } else {
    break;
   }
  }
 }
 $17 = (($this) + 144|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
 $18 = HEAP32[$2>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = HEAP32[$0>>2]|0;
 $21 = ($20|0)==($18|0);
 if (!($21)) {
  $__new_last2$i$i$i$i$i = $18;
  $scevgep$i$i$i$i$i = (($20) + -4|0);
  $22 = (0 - ($__new_last2$i$i$i$i$i))|0;
  $uglygep$i$i$i$i$i = (($scevgep$i$i$i$i$i) + ($22)|0);
  $uglygep3$i$i$i$i$i = $uglygep$i$i$i$i$i;
  $23 = $uglygep3$i$i$i$i$i >>> 2;
  $24 = $23 ^ -1;
  $scevgep4$i$i$i$i$i = (($20) + ($24<<2)|0);
  HEAP32[$0>>2] = $scevgep4$i$i$i$i$i;
 }
 $25 = (($this) + 24|0);
 $26 = ($25|0)==($18|0);
 if ($26) {
  $27 = (($this) + 136|0);
  HEAP8[$27] = 0;
  STACKTOP = sp;return;
 } else {
  __ZdlPv($18);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16locale8__globalEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[18768]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $12 = HEAP32[18760>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $2 = (___cxa_guard_acquire((18768|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $12 = HEAP32[18760>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $4 = HEAP8[18744]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $6 = (___cxa_guard_acquire((18744|0))|0);
   $7 = ($6|0)==(0);
   if (!($7)) {
    __THREW__ = 0;
    invoke_vii(54,(23136|0),1);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $13 = ___cxa_find_matching_catch(-1,-1)|0;
     $14 = tempRet0;
     ___cxa_guard_abort((18744|0));
     ___cxa_guard_abort((18768|0));
     ___resumeException($13|0);
     // unreachable;
    } else {
     HEAP32[18728>>2] = 23136;
     HEAP32[18736>>2] = 18728;
     ___cxa_guard_release((18744|0));
     break;
    }
   }
  }
 } while(0);
 $10 = HEAP32[18736>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 HEAP32[18752>>2] = $11;
 __ZNSt3__114__shared_count12__add_sharedEv($11);
 HEAP32[18760>>2] = 18752;
 ___cxa_guard_release((18768|0));
 $12 = HEAP32[18760>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(4)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  HEAP32[$this>>2] = $3;
  __ZNSt3__114__shared_count12__add_sharedEv($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16localeC2ERKS0_($this,$l) {
 $this = $this|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 HEAP32[$this>>2] = $0;
 __ZNSt3__114__shared_count12__add_sharedEv($0);
 STACKTOP = sp;return;
}
function __ZNSt3__16localeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 STACKTOP = sp;return;
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p$i$i = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = HEAP32[$x>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i>>2] = $x;
  $3 = (($__p$i$i) + 4|0);
  HEAP32[$3>>2] = (121);
  $4 = (($__p$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($x,$__p$i$i,122);
 }
 $5 = (($x) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -1)|0;
 $8 = (($0) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($0) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $9;
 $13 = $11;
 $14 = (($12) - ($13))|0;
 $15 = $14 >> 2;
 $16 = ($15>>>0)>($7>>>0);
 if (!($16)) {
  $20 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw(($20|0),(26752|0),(102|0));
  // unreachable;
 }
 $17 = (($11) + ($7<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw(($20|0),(26752|0),(102|0));
  // unreachable;
 } else {
  STACKTOP = sp;return ($18|0);
 }
 return 0|0;
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 255]($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[18776>>2]|0;HEAP32[18776>>2] = (($0+1)|0);
 $1 = (($0) + 1)|0;
 $2 = (($this) + 4|0);
 HEAP32[$2>>2] = $1;
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $10 = 0;
  STACKTOP = sp;return ($10|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(3)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + ($c<<1)|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & $m;
 $9 = ($8<<16>>16)!=(0);
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$013 = $low;$$04 = $vec;
 }
 while(1) {
  $1 = HEAP32[$$013>>2]|0;
  $isascii = ($1>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $2 = (invoke_i(3)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = HEAP32[$2>>2]|0;
   $8 = (($7) + ($1<<1)|0);
   $9 = HEAP16[$8>>1]|0;
   $10 = $9;
  } else {
   $10 = 0;
  }
  HEAP16[$$04>>1] = $10;
  $11 = (($$013) + 4|0);
  $12 = (($$04) + 2|0);
  $13 = ($11|0)==($high|0);
  if ($13) {
   $$01$lcssa = $high;
   label = 7;
   break;
  } else {
   $$013 = $11;$$04 = $12;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$01$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP32[$$02>>2]|0;
  $isascii = ($1>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $2 = (invoke_i(3)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = HEAP32[$2>>2]|0;
   $8 = (($7) + ($1<<1)|0);
   $9 = HEAP16[$8>>1]|0;
   $10 = $9 & $m;
   $11 = ($10<<16>>16)==(0);
   if (!($11)) {
    $$0$lcssa = $$02;
    label = 7;
    break;
   }
  }
  $12 = (($$02) + 4|0);
  $13 = ($12|0)==($high|0);
  if ($13) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$02 = $12;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 L1: do {
  if ($0) {
   $$0$lcssa = $low;
  } else {
   $$02 = $low;
   while(1) {
    $3 = HEAP32[$$02>>2]|0;
    $isascii = ($3>>>0)<(128);
    if (!($isascii)) {
     $$0$lcssa = $$02;
     break L1;
    }
    __THREW__ = 0;
    $4 = (invoke_i(3)|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     break;
    }
    $9 = HEAP32[$4>>2]|0;
    $10 = (($9) + ($3<<1)|0);
    $11 = HEAP16[$10>>1]|0;
    $12 = $11 & $m;
    $13 = ($12<<16>>16)==(0);
    $2 = (($$02) + 4|0);
    if ($13) {
     $$0$lcssa = $$02;
     break L1;
    }
    $1 = ($2|0)==($high|0);
    if ($1) {
     $$0$lcssa = $high;
     break L1;
    } else {
     $$02 = $2;
    }
   }
   $7 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $8 = tempRet0;
   ___clang_call_terminate($7);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $8 = $c;
  STACKTOP = sp;return ($8|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(5)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + ($c<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP32[$$02>>2]|0;
  $isascii = ($1>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $2 = (invoke_i(5)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = HEAP32[$2>>2]|0;
   $8 = (($7) + ($1<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9;
  } else {
   $10 = $1;
  }
  HEAP32[$$02>>2] = $10;
  $11 = (($$02) + 4|0);
  $12 = ($11|0)==($high|0);
  if ($12) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$02 = $11;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $8 = $c;
  STACKTOP = sp;return ($8|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(6)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + ($c<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP32[$$02>>2]|0;
  $isascii = ($1>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $2 = (invoke_i(6)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = HEAP32[$2>>2]|0;
   $8 = (($7) + ($1<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9;
  } else {
   $10 = $1;
  }
  HEAP32[$$02>>2] = $10;
  $11 = (($$02) + 4|0);
  $12 = ($11|0)==($high|0);
  if ($12) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$02 = $11;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c << 24 >> 24;
 STACKTOP = sp;return ($0|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$012 = $low;$$03 = $dest;
 }
 while(1) {
  $1 = HEAP8[$$012]|0;
  $2 = $1 << 24 >> 24;
  HEAP32[$$03>>2] = $2;
  $3 = (($$012) + 1|0);
  $4 = (($$03) + 4|0);
  $5 = ($3|0)==($high|0);
  if ($5) {
   $$01$lcssa = $high;
   break;
  } else {
   $$012 = $3;$$03 = $4;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $$0 = 0, $0 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 $0 = $c&255;
 $$0 = $isascii ? $0 : $dfault;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, $low5 = 0, $scevgep = 0, $scevgep7 = 0, $uglygep = 0, $uglygep6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 }
 $low5 = $low;
 $scevgep = (($high) + -4|0);
 $1 = (0 - ($low5))|0;
 $uglygep = (($scevgep) + ($1)|0);
 $uglygep6 = $uglygep;
 $2 = $uglygep6 >>> 2;
 $3 = (($2) + 1)|0;
 $$012 = $low;$$03 = $dest;
 while(1) {
  $4 = HEAP32[$$012>>2]|0;
  $isascii = ($4>>>0)<(128);
  $5 = $4&255;
  $$dfault = $isascii ? $5 : $dfault;
  HEAP8[$$03] = $$dfault;
  $6 = (($$012) + 4|0);
  $7 = (($$03) + 1|0);
  $8 = ($6|0)==($high|0);
  if ($8) {
   break;
  } else {
   $$012 = $6;$$03 = $7;
  }
 }
 $scevgep7 = (($low) + ($3<<2)|0);
 $$01$lcssa = $scevgep7;
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((18800 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($this) + 12|0);
  $4 = HEAP8[$3]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   __ZdaPv($1);
  }
 }
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((18800 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($this) + 12|0);
  $4 = HEAP8[$3]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   __ZdaPv($1);
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $10 = $c;
  STACKTOP = sp;return ($10|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(5)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = $c&255;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + ($5<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&255;
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$03 = $low;
 }
 while(1) {
  $1 = HEAP8[$$03]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   __THREW__ = 0;
   $2 = (invoke_i(5)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = $1 << 24 >> 24;
   $8 = HEAP32[$2>>2]|0;
   $9 = (($8) + ($7<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   $12 = $11;
  } else {
   $12 = $1;
  }
  HEAP8[$$03] = $12;
  $13 = (($$03) + 1|0);
  $14 = ($13|0)==($high|0);
  if ($14) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$03 = $13;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $10 = $c;
  STACKTOP = sp;return ($10|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(6)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = $c << 24 >> 24;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + ($5<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&255;
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$03 = $low;
 }
 while(1) {
  $1 = HEAP8[$$03]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   __THREW__ = 0;
   $2 = (invoke_i(6)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = $1 << 24 >> 24;
   $8 = HEAP32[$2>>2]|0;
   $9 = (($8) + ($7<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   $12 = $11;
  } else {
   $12 = $1;
  }
  HEAP8[$$03] = $12;
  $13 = (($$03) + 1|0);
  $14 = ($13|0)==($high|0);
  if ($14) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$03 = $13;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($c|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
 } else {
  $$012 = $low;$$03 = $dest;
  while(1) {
   $1 = HEAP8[$$012]|0;
   HEAP8[$$03] = $1;
   $2 = (($$012) + 1|0);
   $3 = (($$03) + 1|0);
   $4 = ($2|0)==($high|0);
   if ($4) {
    $$01$lcssa = $high;
    break;
   } else {
    $$012 = $2;$$03 = $3;
   }
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 $c$dfault = $isascii1 ? $c : $dfault;
 STACKTOP = sp;return ($c$dfault|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$013 = $low;$$04 = $dest;
 }
 while(1) {
  $1 = HEAP8[$$013]|0;
  $isascii2 = ($1<<24>>24)>(-1);
  $$dfault = $isascii2 ? $1 : $dfault;
  HEAP8[$$04] = $$dfault;
  $2 = (($$013) + 1|0);
  $3 = (($$04) + 1|0);
  $4 = ($2|0)==($high|0);
  if ($4) {
   $$01$lcssa = $high;
   break;
  } else {
   $$013 = $2;$$04 = $3;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $end;
 $2 = $frm;
 $3 = (($1) - ($2))|0;
 $4 = ($3>>>0)<($mx>>>0);
 $5 = $4 ? $3 : $mx;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0148 = 0, $$0247 = 0, $$1$lcssa = 0, $$19 = 0, $$pre = 0, $$pre95 = 0, $$pre98 = 0, $$pre99 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$052 = 0, $fend$149 = 0, $fend$2$lcssa = 0, $fend$215 = 0, $fend$3 = 0, $n$011 = 0, $not$ = 0, $or$cond = 0, $or$cond46 = 0, $p$012 = 0, $save_state = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $save_state = sp;
 $tmp = sp + 8|0;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $112 = $frm;
  } else {
   $fend$052 = $frm;
   while(1) {
    $3 = HEAP32[$fend$052>>2]|0;
    $4 = ($3|0)==(0);
    $2 = (($fend$052) + 4|0);
    if ($4) {
     $fend$0$lcssa = $fend$052;
     break;
    }
    $1 = ($2|0)==($frm_end|0);
    if ($1) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$052 = $2;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   $or$cond46 = $0 | $5;
   if ($or$cond46) {
    $112 = $frm;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0148 = $frm;$$0247 = $to;$fend$149 = $fend$0$lcssa;
    while(1) {
     $8 = $st;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $save_state;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = $fend$149;
     $19 = $$0148;
     $20 = (($18) - ($19))|0;
     $21 = $20 >> 2;
     $22 = $$0247;
     $23 = (($6) - ($22))|0;
     $24 = HEAP32[$7>>2]|0;
     $25 = (_uselocale(($24|0))|0);
     __THREW__ = 0;
     $26 = (invoke_iiiiii(17,($$0247|0),($frm_nxt|0),($21|0),($23|0),($st|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      label = 11;
      break;
     }
     $29 = ($25|0)==(0|0);
     if (!($29)) {
      __THREW__ = 0;
      (invoke_ii(73,($25|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 10;
       break;
      }
     }
     if ((($26|0) == 0)) {
      $$0 = 1;
      label = 51;
      break;
     } else if ((($26|0) == -1)) {
      label = 16;
      break;
     }
     $68 = HEAP32[$to_nxt>>2]|0;
     $69 = (($68) + ($26)|0);
     HEAP32[$to_nxt>>2] = $69;
     $70 = ($69|0)==($to_end|0);
     if ($70) {
      label = 49;
      break;
     }
     $71 = ($fend$149|0)==($frm_end|0);
     if ($71) {
      $$pre98 = HEAP32[$frm_nxt>>2]|0;
      $109 = $$pre98;$111 = $69;$fend$3 = $frm_end;
     } else {
      $72 = HEAP32[$7>>2]|0;
      $73 = (_uselocale(($72|0))|0);
      __THREW__ = 0;
      $74 = (invoke_iiii(29,($tmp|0),0,($st|0))|0);
      $75 = __THREW__; __THREW__ = 0;
      $76 = $75&1;
      if ($76) {
       label = 35;
       break;
      }
      $77 = ($73|0)==(0|0);
      if (!($77)) {
       __THREW__ = 0;
       (invoke_ii(73,($73|0))|0);
       $78 = __THREW__; __THREW__ = 0;
       $79 = $78&1;
       if ($79) {
        label = 34;
        break;
       }
      }
      $89 = ($74|0)==(-1);
      if ($89) {
       $$0 = 2;
       label = 51;
       break;
      }
      $90 = HEAP32[$to_nxt>>2]|0;
      $91 = $90;
      $92 = (($6) - ($91))|0;
      $93 = ($74>>>0)>($92>>>0);
      if ($93) {
       $$0 = 1;
       label = 51;
       break;
      }
      $94 = ($74|0)==(0);
      L25: do {
       if (!($94)) {
        $97 = $90;$n$011 = $74;$p$012 = $tmp;
        while(1) {
         $95 = HEAP8[$p$012]|0;
         $96 = (($97) + 1|0);
         HEAP32[$to_nxt>>2] = $96;
         HEAP8[$97] = $95;
         $98 = (($n$011) + -1)|0;
         $99 = ($98|0)==(0);
         if ($99) {
          break L25;
         }
         $100 = (($p$012) + 1|0);
         $$pre99 = HEAP32[$to_nxt>>2]|0;
         $97 = $$pre99;$n$011 = $98;$p$012 = $100;
        }
       }
      } while(0);
      $101 = HEAP32[$frm_nxt>>2]|0;
      $102 = (($101) + 4|0);
      HEAP32[$frm_nxt>>2] = $102;
      $103 = ($102|0)==($frm_end|0);
      L30: do {
       if ($103) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$215 = $102;
        while(1) {
         $106 = HEAP32[$fend$215>>2]|0;
         $107 = ($106|0)==(0);
         $105 = (($fend$215) + 4|0);
         if ($107) {
          $fend$2$lcssa = $fend$215;
          break L30;
         }
         $104 = ($105|0)==($frm_end|0);
         if ($104) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$215 = $105;
         }
        }
       }
      } while(0);
      $$pre95 = HEAP32[$to_nxt>>2]|0;
      $109 = $102;$111 = $$pre95;$fend$3 = $fend$2$lcssa;
     }
     $108 = ($109|0)==($frm_end|0);
     $110 = ($111|0)==($to_end|0);
     $or$cond = $108 | $110;
     if ($or$cond) {
      $112 = $109;
      break L1;
     } else {
      $$0148 = $109;$$0247 = $111;$fend$149 = $fend$3;
     }
    }
    if ((label|0) == 10) {
     $32 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $33 = tempRet0;
     ___clang_call_terminate($32);
     // unreachable;
    }
    else if ((label|0) == 11) {
     $34 = ___cxa_find_matching_catch(-1,-1)|0;
     $35 = tempRet0;
     $36 = ($25|0)==(0|0);
     if ($36) {
      ___resumeException($34|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(73,($25|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      $39 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $40 = tempRet0;
      ___clang_call_terminate($39);
      // unreachable;
     } else {
      ___resumeException($34|0);
      // unreachable;
     }
    }
    else if ((label|0) == 16) {
     HEAP32[$to_nxt>>2] = $$0247;
     $41 = HEAP32[$frm_nxt>>2]|0;
     $42 = ($$0148|0)==($41|0);
     L48: do {
      if ($42) {
       $$1$lcssa = $$0148;
      } else {
       $$19 = $$0148;$46 = $$0247;
       while(1) {
        $43 = HEAP32[$$19>>2]|0;
        $44 = HEAP32[$7>>2]|0;
        $45 = (_uselocale(($44|0))|0);
        __THREW__ = 0;
        $47 = (invoke_iiii(29,($46|0),($43|0),($save_state|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         break;
        }
        $50 = ($45|0)==(0|0);
        if (!($50)) {
         __THREW__ = 0;
         (invoke_ii(73,($45|0))|0);
         $51 = __THREW__; __THREW__ = 0;
         $52 = $51&1;
         if ($52) {
          label = 20;
          break;
         }
        }
        $62 = ($47|0)==(-1);
        if ($62) {
         $$1$lcssa = $$19;
         break L48;
        }
        $63 = HEAP32[$to_nxt>>2]|0;
        $64 = (($63) + ($47)|0);
        HEAP32[$to_nxt>>2] = $64;
        $65 = (($$19) + 4|0);
        $66 = HEAP32[$frm_nxt>>2]|0;
        $67 = ($65|0)==($66|0);
        if ($67) {
         $$1$lcssa = $65;
         break L48;
        } else {
         $$19 = $65;$46 = $64;
        }
       }
       if ((label|0) == 20) {
        $53 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $54 = tempRet0;
        ___clang_call_terminate($53);
        // unreachable;
       }
       $55 = ___cxa_find_matching_catch(-1,-1)|0;
       $56 = tempRet0;
       $57 = ($45|0)==(0|0);
       if ($57) {
        ___resumeException($55|0);
        // unreachable;
       }
       __THREW__ = 0;
       (invoke_ii(73,($45|0))|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        $60 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $61 = tempRet0;
        ___clang_call_terminate($60);
        // unreachable;
       } else {
        ___resumeException($55|0);
        // unreachable;
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $$0 = 2;
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 34) {
     $80 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $81 = tempRet0;
     ___clang_call_terminate($80);
     // unreachable;
    }
    else if ((label|0) == 35) {
     $82 = ___cxa_find_matching_catch(-1,-1)|0;
     $83 = tempRet0;
     $84 = ($73|0)==(0|0);
     if ($84) {
      ___resumeException($82|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(73,($73|0))|0);
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     if ($86) {
      $87 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $88 = tempRet0;
      ___clang_call_terminate($87);
      // unreachable;
     } else {
      ___resumeException($82|0);
      // unreachable;
     }
    }
    else if ((label|0) == 49) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $112 = $$pre;
     break;
    }
    else if ((label|0) == 51) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $not$ = ($112|0)!=($frm_end|0);
 $113 = $not$&1;
 $$0 = $113;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0155 = 0, $$0254 = 0, $$1$lcssa = 0, $$115 = 0, $$2 = 0, $$pre = 0, $$pre111 = 0, $$pre113 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$059 = 0, $fend$156 = 0, $fend$2$lcssa = 0, $fend$216 = 0;
 var $fend$3 = 0, $not$ = 0, $not$3 = 0, $or$cond = 0, $or$cond53 = 0, $save_state = 0, $storemerge14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $save_state = sp;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $104 = $frm;
  } else {
   $fend$059 = $frm;
   while(1) {
    $3 = HEAP8[$fend$059]|0;
    $4 = ($3<<24>>24)==(0);
    $2 = (($fend$059) + 1|0);
    if ($4) {
     $fend$0$lcssa = $fend$059;
     break;
    }
    $1 = ($2|0)==($frm_end|0);
    if ($1) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$059 = $2;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   $or$cond53 = $0 | $5;
   if ($or$cond53) {
    $104 = $frm;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0155 = $frm;$$0254 = $to;$fend$156 = $fend$0$lcssa;
    while(1) {
     $8 = $st;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $save_state;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = $fend$156;
     $19 = $$0155;
     $20 = (($18) - ($19))|0;
     $21 = $$0254;
     $22 = (($6) - ($21))|0;
     $23 = $22 >> 2;
     $24 = HEAP32[$7>>2]|0;
     $25 = (_uselocale(($24|0))|0);
     __THREW__ = 0;
     $26 = (invoke_iiiiii(18,($$0254|0),($frm_nxt|0),($20|0),($23|0),($st|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      label = 11;
      break;
     }
     $29 = ($25|0)==(0|0);
     if (!($29)) {
      __THREW__ = 0;
      (invoke_ii(73,($25|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 10;
       break;
      }
     }
     if ((($26|0) == -1)) {
      label = 16;
      break;
     } else if ((($26|0) == 0)) {
      $$0 = 2;
      label = 50;
      break;
     }
     $69 = HEAP32[$to_nxt>>2]|0;
     $70 = (($69) + ($26<<2)|0);
     HEAP32[$to_nxt>>2] = $70;
     $71 = ($70|0)==($to_end|0);
     if ($71) {
      label = 48;
      break;
     }
     $72 = ($fend$156|0)==($frm_end|0);
     $$pre113 = HEAP32[$frm_nxt>>2]|0;
     if ($72) {
      $101 = $$pre113;$103 = $70;$fend$3 = $frm_end;
     } else {
      $73 = HEAP32[$7>>2]|0;
      $74 = (_uselocale(($73|0))|0);
      __THREW__ = 0;
      $75 = (invoke_iiiii(16,($70|0),($$pre113|0),1,($st|0))|0);
      $76 = __THREW__; __THREW__ = 0;
      $77 = $76&1;
      if ($77) {
       label = 38;
       break;
      }
      $78 = ($74|0)==(0|0);
      if (!($78)) {
       __THREW__ = 0;
       (invoke_ii(73,($74|0))|0);
       $79 = __THREW__; __THREW__ = 0;
       $80 = $79&1;
       if ($80) {
        label = 37;
        break;
       }
      }
      $90 = ($75|0)==(0);
      if (!($90)) {
       $$0 = 2;
       label = 50;
       break;
      }
      $91 = HEAP32[$to_nxt>>2]|0;
      $92 = (($91) + 4|0);
      HEAP32[$to_nxt>>2] = $92;
      $93 = HEAP32[$frm_nxt>>2]|0;
      $94 = (($93) + 1|0);
      HEAP32[$frm_nxt>>2] = $94;
      $95 = ($94|0)==($frm_end|0);
      L23: do {
       if ($95) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$216 = $94;
        while(1) {
         $98 = HEAP8[$fend$216]|0;
         $99 = ($98<<24>>24)==(0);
         $97 = (($fend$216) + 1|0);
         if ($99) {
          $fend$2$lcssa = $fend$216;
          break L23;
         }
         $96 = ($97|0)==($frm_end|0);
         if ($96) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$216 = $97;
         }
        }
       }
      } while(0);
      $$pre111 = HEAP32[$to_nxt>>2]|0;
      $101 = $94;$103 = $$pre111;$fend$3 = $fend$2$lcssa;
     }
     $100 = ($101|0)==($frm_end|0);
     $102 = ($103|0)==($to_end|0);
     $or$cond = $100 | $102;
     if ($or$cond) {
      $104 = $101;
      break L1;
     } else {
      $$0155 = $101;$$0254 = $103;$fend$156 = $fend$3;
     }
    }
    if ((label|0) == 10) {
     $32 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $33 = tempRet0;
     ___clang_call_terminate($32);
     // unreachable;
    }
    else if ((label|0) == 11) {
     $34 = ___cxa_find_matching_catch(-1,-1)|0;
     $35 = tempRet0;
     $36 = ($25|0)==(0|0);
     if ($36) {
      ___resumeException($34|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(73,($25|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      $39 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $40 = tempRet0;
      ___clang_call_terminate($39);
      // unreachable;
     } else {
      ___resumeException($34|0);
      // unreachable;
     }
    }
    else if ((label|0) == 16) {
     HEAP32[$to_nxt>>2] = $$0254;
     $41 = HEAP32[$frm_nxt>>2]|0;
     $42 = ($$0155|0)==($41|0);
     L33: do {
      if ($42) {
       $$1$lcssa = $$0155;
      } else {
       $$115 = $$0155;$storemerge14 = $$0254;
       while(1) {
        $43 = $$115;
        $44 = (($18) - ($43))|0;
        $45 = HEAP32[$7>>2]|0;
        $46 = (_uselocale(($45|0))|0);
        __THREW__ = 0;
        $47 = (invoke_iiiii(16,($storemerge14|0),($$115|0),($44|0),($save_state|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         label = 21;
         break;
        }
        $50 = ($46|0)==(0|0);
        if (!($50)) {
         __THREW__ = 0;
         (invoke_ii(73,($46|0))|0);
         $51 = __THREW__; __THREW__ = 0;
         $52 = $51&1;
         if ($52) {
          label = 20;
          break;
         }
        }
        if ((($47|0) == -1)) {
         label = 27;
         break;
        } else if ((($47|0) == -2)) {
         label = 28;
         break;
        } else if ((($47|0) == 0)) {
         $62 = (($$115) + 1|0);
         $$2 = $62;
        } else {
         $63 = (($$115) + ($47)|0);
         $$2 = $63;
        }
        $64 = HEAP32[$to_nxt>>2]|0;
        $65 = (($64) + 4|0);
        HEAP32[$to_nxt>>2] = $65;
        $66 = HEAP32[$frm_nxt>>2]|0;
        $67 = ($$2|0)==($66|0);
        if ($67) {
         $$1$lcssa = $$2;
         break L33;
        } else {
         $$115 = $$2;$storemerge14 = $65;
        }
       }
       if ((label|0) == 20) {
        $53 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $54 = tempRet0;
        ___clang_call_terminate($53);
        // unreachable;
       }
       else if ((label|0) == 21) {
        $55 = ___cxa_find_matching_catch(-1,-1)|0;
        $56 = tempRet0;
        $57 = ($46|0)==(0|0);
        if ($57) {
         ___resumeException($55|0);
         // unreachable;
        }
        __THREW__ = 0;
        (invoke_ii(73,($46|0))|0);
        $58 = __THREW__; __THREW__ = 0;
        $59 = $58&1;
        if ($59) {
         $60 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
         $61 = tempRet0;
         ___clang_call_terminate($60);
         // unreachable;
        } else {
         ___resumeException($55|0);
         // unreachable;
        }
       }
       else if ((label|0) == 27) {
        HEAP32[$frm_nxt>>2] = $$115;
        $$0 = 2;
        STACKTOP = sp;return ($$0|0);
       }
       else if ((label|0) == 28) {
        HEAP32[$frm_nxt>>2] = $$115;
        $$0 = 1;
        STACKTOP = sp;return ($$0|0);
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $not$3 = ($$1$lcssa|0)!=($frm_end|0);
     $68 = $not$3&1;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 37) {
     $81 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $82 = tempRet0;
     ___clang_call_terminate($81);
     // unreachable;
    }
    else if ((label|0) == 38) {
     $83 = ___cxa_find_matching_catch(-1,-1)|0;
     $84 = tempRet0;
     $85 = ($74|0)==(0|0);
     if ($85) {
      ___resumeException($83|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(73,($74|0))|0);
     $86 = __THREW__; __THREW__ = 0;
     $87 = $86&1;
     if ($87) {
      $88 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $89 = tempRet0;
      ___clang_call_terminate($88);
      // unreachable;
     } else {
      ___resumeException($83|0);
      // unreachable;
     }
    }
    else if ((label|0) == 48) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $104 = $$pre;
     break;
    }
    else if ((label|0) == 50) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $not$ = ($104|0)!=($frm_end|0);
 $105 = $not$&1;
 $$0 = $105;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$02 = 0, $p$03 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tmp = sp;
 HEAP32[$to_nxt>>2] = $to;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_uselocale(($1|0))|0);
 __THREW__ = 0;
 $3 = (invoke_iiii(29,($tmp|0),0,($st|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $11 = ___cxa_find_matching_catch(-1,-1)|0;
  $12 = tempRet0;
  $13 = ($2|0)==(0|0);
  if ($13) {
   ___resumeException($11|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(73,($2|0))|0);
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $17 = tempRet0;
   ___clang_call_terminate($16);
   // unreachable;
  } else {
   ___resumeException($11|0);
   // unreachable;
  }
 }
 $6 = ($2|0)==(0|0);
 if (!($6)) {
  __THREW__ = 0;
  (invoke_ii(73,($2|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $10 = tempRet0;
   ___clang_call_terminate($9);
   // unreachable;
  }
 }
 if ((($3|0) == 0) | (($3|0) == -1)) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = (($3) + -1)|0;
 $19 = HEAP32[$to_nxt>>2]|0;
 $20 = $to_end;
 $21 = $19;
 $22 = (($20) - ($21))|0;
 $23 = ($18>>>0)>($22>>>0);
 if ($23) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = ($18|0)==(0);
 if ($24) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $27 = $19;$n$02 = $18;$p$03 = $tmp;
 }
 while(1) {
  $25 = HEAP8[$p$03]|0;
  $26 = (($27) + 1|0);
  HEAP32[$to_nxt>>2] = $26;
  HEAP8[$27] = $25;
  $28 = (($n$02) + -1)|0;
  $29 = ($28|0)==(0);
  if ($29) {
   $$0 = 0;
   break;
  }
  $30 = (($p$03) + 1|0);
  $$pre = HEAP32[$to_nxt>>2]|0;
  $27 = $$pre;$n$02 = $28;$p$03 = $30;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_ii(73,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  __THREW__ = 0;
  $5 = (invoke_iiii(30,(0|0),(0|0),4)|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $13 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $14 = tempRet0;
   $15 = ($2|0)==(0|0);
   if ($15) {
    $eh$lpad$body$indexZ2D = $13;
    ___clang_call_terminate($eh$lpad$body$indexZ2D);
    // unreachable;
   }
   __THREW__ = 0;
   (invoke_ii(73,($2|0))|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    $18 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $19 = tempRet0;
    ___clang_call_terminate($18);
    // unreachable;
   } else {
    $eh$lpad$body$indexZ2D = $13;
    ___clang_call_terminate($eh$lpad$body$indexZ2D);
    // unreachable;
   }
  }
  $8 = ($2|0)==(0|0);
  if (!($8)) {
   __THREW__ = 0;
   (invoke_ii(73,($2|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $11 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $12 = tempRet0;
    ___clang_call_terminate($11);
    // unreachable;
   }
  }
  $20 = ($5|0)==(0);
  if (!($20)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $21 = HEAP32[$0>>2]|0;
  $22 = ($21|0)==(0|0);
  if ($22) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  __THREW__ = 0;
  $23 = (invoke_ii(73,($21|0))|0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if (!($25)) {
   $26 = ($23|0)==(0|0);
   if ($26) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   __THREW__ = 0;
   (invoke_ii(73,($23|0))|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    $29 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $30 = tempRet0;
    ___clang_call_terminate($29);
    // unreachable;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $31 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $32 = tempRet0;
 $eh$lpad$body$indexZ2D = $31;
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$016 = 0, $$1 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbytes$0$lcssa = 0, $nbytes$07 = 0, $nbytes$1 = 0, $nwchar_t$08 = 0, $or$cond = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mx|0)==(0);
 $1 = ($frm|0)==($frm_end|0);
 $or$cond5 = $0 | $1;
 if ($or$cond5) {
  $nbytes$0$lcssa = 0;
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 $2 = $frm_end;
 $3 = (($this) + 8|0);
 $$016 = $frm;$nbytes$07 = 0;$nwchar_t$08 = 0;
 while(1) {
  $4 = $$016;
  $5 = (($2) - ($4))|0;
  $6 = HEAP32[$3>>2]|0;
  $7 = (_uselocale(($6|0))|0);
  __THREW__ = 0;
  $8 = (invoke_iiii(31,($$016|0),($5|0),($st|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   label = 7;
   break;
  }
  $11 = ($7|0)==(0|0);
  if (!($11)) {
   __THREW__ = 0;
   (invoke_ii(73,($7|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    label = 6;
    break;
   }
  }
  if ((($8|0) == 0)) {
   $23 = (($$016) + 1|0);
   $$1 = $23;$$pn = 1;
  } else if ((($8|0) == -2) | (($8|0) == -1)) {
   $nbytes$0$lcssa = $nbytes$07;
   label = 15;
   break;
  } else {
   $24 = (($$016) + ($8)|0);
   $$1 = $24;$$pn = $8;
  }
  $nbytes$1 = (($$pn) + ($nbytes$07))|0;
  $25 = (($nwchar_t$08) + 1)|0;
  $26 = ($25>>>0)>=($mx>>>0);
  $27 = ($$1|0)==($frm_end|0);
  $or$cond = $26 | $27;
  if ($or$cond) {
   $nbytes$0$lcssa = $nbytes$1;
   label = 15;
   break;
  } else {
   $$016 = $$1;$nbytes$07 = $nbytes$1;$nwchar_t$08 = $25;
  }
 }
 if ((label|0) == 6) {
  $14 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 else if ((label|0) == 7) {
  $16 = ___cxa_find_matching_catch(-1,-1)|0;
  $17 = tempRet0;
  $18 = ($7|0)==(0|0);
  if ($18) {
   ___resumeException($16|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(73,($7|0))|0);
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   $21 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $22 = tempRet0;
   ___clang_call_terminate($21);
   // unreachable;
  } else {
   ___resumeException($16|0);
   // unreachable;
  }
 }
 else if ((label|0) == 15) {
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $11 = 1;
  STACKTOP = sp;return ($11|0);
 }
 __THREW__ = 0;
 $3 = (invoke_ii(73,($1|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $12 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 }
 $6 = ($3|0)==(0|0);
 if ($6) {
  $11 = 4;
  STACKTOP = sp;return ($11|0);
 }
 __THREW__ = 0;
 (invoke_ii(73,($3|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  $11 = 4;
  STACKTOP = sp;return ($11|0);
 }
 return 0|0;
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 1;
 $7 = (($frm) + ($6<<1)|0);
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $12 = (($to) + ($11)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 do {
  if (!($1)) {
   $2 = $to_end;
   $3 = $to;
   $4 = (($2) - ($3))|0;
   $5 = ($4|0)<(3);
   if ($5) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $6 = (($to) + 1|0);
    HEAP32[$to_nxt>>2] = $6;
    HEAP8[$to] = -17;
    $7 = HEAP32[$to_nxt>>2]|0;
    $8 = (($7) + 1|0);
    HEAP32[$to_nxt>>2] = $8;
    HEAP8[$7] = -69;
    $9 = HEAP32[$to_nxt>>2]|0;
    $10 = (($9) + 1|0);
    HEAP32[$to_nxt>>2] = $10;
    HEAP8[$9] = -65;
    break;
   }
  }
 } while(0);
 $11 = $frm_end;
 $12 = HEAP32[$frm_nxt>>2]|0;
 $13 = ($12>>>0)<($frm_end>>>0);
 if (!($13)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = $to_end;
 $16 = $12;
 L10: while(1) {
  $15 = HEAP16[$16>>1]|0;
  $17 = $15&65535;
  $18 = ($17>>>0)>($Maxcode>>>0);
  if ($18) {
   $$0 = 2;
   label = 26;
   break;
  }
  $19 = ($15&65535)<(128);
  do {
   if ($19) {
    $20 = HEAP32[$to_nxt>>2]|0;
    $21 = $20;
    $22 = (($14) - ($21))|0;
    $23 = ($22|0)<(1);
    if ($23) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $24 = $15&255;
    $25 = (($20) + 1|0);
    HEAP32[$to_nxt>>2] = $25;
    HEAP8[$20] = $24;
   } else {
    $26 = ($15&65535)<(2048);
    if ($26) {
     $27 = HEAP32[$to_nxt>>2]|0;
     $28 = $27;
     $29 = (($14) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $31 = $17 >>> 6;
     $32 = $31 | 192;
     $33 = $32&255;
     $34 = (($27) + 1|0);
     HEAP32[$to_nxt>>2] = $34;
     HEAP8[$27] = $33;
     $35 = $17 & 63;
     $36 = $35 | 128;
     $37 = $36&255;
     $38 = HEAP32[$to_nxt>>2]|0;
     $39 = (($38) + 1|0);
     HEAP32[$to_nxt>>2] = $39;
     HEAP8[$38] = $37;
     break;
    }
    $40 = ($15&65535)<(55296);
    if ($40) {
     $41 = HEAP32[$to_nxt>>2]|0;
     $42 = $41;
     $43 = (($14) - ($42))|0;
     $44 = ($43|0)<(3);
     if ($44) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $45 = $17 >>> 12;
     $46 = $45 | 224;
     $47 = $46&255;
     $48 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $48;
     HEAP8[$41] = $47;
     $49 = $17 >>> 6;
     $50 = $49 & 63;
     $51 = $50 | 128;
     $52 = $51&255;
     $53 = HEAP32[$to_nxt>>2]|0;
     $54 = (($53) + 1|0);
     HEAP32[$to_nxt>>2] = $54;
     HEAP8[$53] = $52;
     $55 = $17 & 63;
     $56 = $55 | 128;
     $57 = $56&255;
     $58 = HEAP32[$to_nxt>>2]|0;
     $59 = (($58) + 1|0);
     HEAP32[$to_nxt>>2] = $59;
     HEAP8[$58] = $57;
     break;
    }
    $60 = ($15&65535)<(56320);
    if (!($60)) {
     $112 = ($15&65535)<(57344);
     if ($112) {
      $$0 = 2;
      label = 26;
      break L10;
     }
     $113 = HEAP32[$to_nxt>>2]|0;
     $114 = $113;
     $115 = (($14) - ($114))|0;
     $116 = ($115|0)<(3);
     if ($116) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $117 = $17 >>> 12;
     $118 = $117 | 224;
     $119 = $118&255;
     $120 = (($113) + 1|0);
     HEAP32[$to_nxt>>2] = $120;
     HEAP8[$113] = $119;
     $121 = $17 >>> 6;
     $122 = $121 & 63;
     $123 = $122 | 128;
     $124 = $123&255;
     $125 = HEAP32[$to_nxt>>2]|0;
     $126 = (($125) + 1|0);
     HEAP32[$to_nxt>>2] = $126;
     HEAP8[$125] = $124;
     $127 = $17 & 63;
     $128 = $127 | 128;
     $129 = $128&255;
     $130 = HEAP32[$to_nxt>>2]|0;
     $131 = (($130) + 1|0);
     HEAP32[$to_nxt>>2] = $131;
     HEAP8[$130] = $129;
     break;
    }
    $61 = $16;
    $62 = (($11) - ($61))|0;
    $63 = ($62|0)<(4);
    if ($63) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $64 = (($16) + 2|0);
    $65 = HEAP16[$64>>1]|0;
    $66 = $65&65535;
    $67 = $66 & 64512;
    $68 = ($67|0)==(56320);
    if (!($68)) {
     $$0 = 2;
     label = 26;
     break L10;
    }
    $69 = HEAP32[$to_nxt>>2]|0;
    $70 = $69;
    $71 = (($14) - ($70))|0;
    $72 = ($71|0)<(4);
    if ($72) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $73 = $17 & 960;
    $74 = $73 << 10;
    $75 = (($74) + 65536)|0;
    $76 = $17 << 10;
    $77 = $76 & 64512;
    $78 = $75 | $77;
    $79 = $66 & 1023;
    $80 = $78 | $79;
    $81 = ($80>>>0)>($Maxcode>>>0);
    if ($81) {
     $$0 = 2;
     label = 26;
     break L10;
    }
    HEAP32[$frm_nxt>>2] = $64;
    $82 = $73 >>> 6;
    $83 = (($82) + 1)|0;
    $84 = $83 >>> 2;
    $85 = $84 | 240;
    $86 = $85&255;
    $87 = HEAP32[$to_nxt>>2]|0;
    $88 = (($87) + 1|0);
    HEAP32[$to_nxt>>2] = $88;
    HEAP8[$87] = $86;
    $89 = $83 << 4;
    $90 = $89 & 48;
    $91 = $17 >>> 2;
    $92 = $91 & 15;
    $93 = $92 | $90;
    $94 = $93 | 128;
    $95 = $94&255;
    $96 = HEAP32[$to_nxt>>2]|0;
    $97 = (($96) + 1|0);
    HEAP32[$to_nxt>>2] = $97;
    HEAP8[$96] = $95;
    $98 = $17 << 4;
    $99 = $98 & 48;
    $100 = $66 >>> 6;
    $101 = $100 & 15;
    $102 = $99 | $101;
    $103 = $102 | 128;
    $104 = $103&255;
    $105 = HEAP32[$to_nxt>>2]|0;
    $106 = (($105) + 1|0);
    HEAP32[$to_nxt>>2] = $106;
    HEAP8[$105] = $104;
    $107 = $66 & 63;
    $108 = $107 | 128;
    $109 = $108&255;
    $110 = HEAP32[$to_nxt>>2]|0;
    $111 = (($110) + 1|0);
    HEAP32[$to_nxt>>2] = $111;
    HEAP8[$110] = $109;
   }
  } while(0);
  $132 = HEAP32[$frm_nxt>>2]|0;
  $133 = (($132) + 2|0);
  HEAP32[$frm_nxt>>2] = $133;
  $134 = ($133>>>0)<($frm_end>>>0);
  if ($134) {
   $16 = $133;
  } else {
   $$0 = 0;
   label = 26;
   break;
  }
 }
 if ((label|0) == 26) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = (($frm) + ($5)|0);
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 1;
 $12 = (($to) + ($11<<1)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$off = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre5 = HEAP32[$frm_nxt>>2]|0;
 if ($1) {
  $16 = $$pre5;
 } else {
  $2 = $frm_end;
  $3 = $$pre5;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$$pre5]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($$pre5) + 1|0);
    $9 = HEAP8[$8]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($$pre5) + 2|0);
     $12 = HEAP8[$11]|0;
     $13 = ($12<<24>>24)==(-65);
     if ($13) {
      $14 = (($$pre5) + 3|0);
      HEAP32[$frm_nxt>>2] = $14;
      $16 = $14;
     } else {
      $16 = $$pre5;
     }
    } else {
     $16 = $$pre5;
    }
   } else {
    $16 = $$pre5;
   }
  } else {
   $16 = $$pre5;
  }
 }
 $15 = ($16>>>0)<($frm_end>>>0);
 L8: do {
  if ($15) {
   $17 = $frm_end;
   $18 = $to_end;
   $$pre = HEAP32[$to_nxt>>2]|0;
   $20 = $$pre;$22 = $16;
   L10: while(1) {
    $19 = ($20>>>0)<($to_end>>>0);
    if (!($19)) {
     $135 = $22;
     break L8;
    }
    $21 = HEAP8[$22]|0;
    $23 = $21&255;
    $24 = ($23>>>0)>($Maxcode>>>0);
    if ($24) {
     $$0 = 2;
     label = 41;
     break;
    }
    $25 = ($21<<24>>24)>(-1);
    do {
     if ($25) {
      $26 = $21&255;
      HEAP16[$20>>1] = $26;
      $27 = (($22) + 1|0);
      HEAP32[$frm_nxt>>2] = $27;
     } else {
      $28 = ($21&255)<(194);
      if ($28) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $29 = ($21&255)<(224);
      if ($29) {
       $30 = $22;
       $31 = (($17) - ($30))|0;
       $32 = ($31|0)<(2);
       if ($32) {
        $$0 = 1;
        label = 41;
        break L10;
       }
       $33 = (($22) + 1|0);
       $34 = HEAP8[$33]|0;
       $35 = $34&255;
       $36 = $35 & 192;
       $37 = ($36|0)==(128);
       if (!($37)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $38 = $23 << 6;
       $39 = $38 & 1984;
       $40 = $35 & 63;
       $41 = $40 | $39;
       $42 = ($41>>>0)>($Maxcode>>>0);
       if ($42) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $43 = $41&65535;
       HEAP16[$20>>1] = $43;
       $44 = (($22) + 2|0);
       HEAP32[$frm_nxt>>2] = $44;
       break;
      }
      $45 = ($21&255)<(240);
      if ($45) {
       $46 = $22;
       $47 = (($17) - ($46))|0;
       $48 = ($47|0)<(3);
       if ($48) {
        $$0 = 1;
        label = 41;
        break L10;
       }
       $49 = (($22) + 1|0);
       $50 = HEAP8[$49]|0;
       $51 = (($22) + 2|0);
       $52 = HEAP8[$51]|0;
       if ((($23|0) == 224)) {
        $53 = $50 & -32;
        $54 = ($53<<24>>24)==(-96);
        if (!($54)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       } else if ((($23|0) == 237)) {
        $55 = $50 & -32;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       } else {
        $57 = $50 & -64;
        $58 = ($57<<24>>24)==(-128);
        if (!($58)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       }
       $59 = $52&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $62 = $23 << 12;
       $63 = $50&255;
       $64 = $63 << 6;
       $65 = $64 & 4032;
       $66 = $65 | $62;
       $67 = $59 & 63;
       $68 = $66 | $67;
       $69 = $68 & 65535;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $71 = $68&65535;
       HEAP16[$20>>1] = $71;
       $72 = (($22) + 3|0);
       HEAP32[$frm_nxt>>2] = $72;
       break;
      }
      $73 = ($21&255)<(245);
      if (!($73)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $74 = $22;
      $75 = (($17) - ($74))|0;
      $76 = ($75|0)<(4);
      if ($76) {
       $$0 = 1;
       label = 41;
       break L10;
      }
      $77 = (($22) + 1|0);
      $78 = HEAP8[$77]|0;
      $79 = (($22) + 2|0);
      $80 = HEAP8[$79]|0;
      $81 = (($22) + 3|0);
      $82 = HEAP8[$81]|0;
      if ((($23|0) == 244)) {
       $84 = $78 & -16;
       $85 = ($84<<24>>24)==(-128);
       if (!($85)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      } else if ((($23|0) == 240)) {
       $$off = (($78) + 112)<<24>>24;
       $83 = ($$off&255)<(48);
       if (!($83)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      } else {
       $86 = $78 & -64;
       $87 = ($86<<24>>24)==(-128);
       if (!($87)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      }
      $88 = $80&255;
      $89 = $88 & 192;
      $90 = ($89|0)==(128);
      if (!($90)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $91 = $82&255;
      $92 = $91 & 192;
      $93 = ($92|0)==(128);
      if (!($93)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $94 = $20;
      $95 = (($18) - ($94))|0;
      $96 = ($95|0)<(4);
      if ($96) {
       $$0 = 1;
       label = 41;
       break L10;
      }
      $97 = $23 & 7;
      $98 = $97 << 18;
      $99 = $78&255;
      $100 = $99 << 12;
      $101 = $100 & 258048;
      $102 = $101 | $98;
      $103 = $88 << 6;
      $104 = $103 & 4032;
      $105 = $102 | $104;
      $106 = $91 & 63;
      $107 = $105 | $106;
      $108 = ($107>>>0)>($Maxcode>>>0);
      if ($108) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $109 = $97 << 2;
      $110 = $99 >>> 4;
      $111 = $110 & 3;
      $112 = $111 | $109;
      $113 = $112 << 6;
      $114 = (($113) + 16320)|0;
      $115 = $99 << 2;
      $116 = $115 & 60;
      $117 = $88 >>> 4;
      $118 = $117 & 3;
      $119 = $116 | $118;
      $120 = $119 | $114;
      $121 = $120 | 55296;
      $122 = $121&65535;
      HEAP16[$20>>1] = $122;
      $123 = $103 & 960;
      $124 = $106 | $123;
      $125 = $124 | 56320;
      $126 = $125&65535;
      $127 = (($20) + 2|0);
      HEAP32[$to_nxt>>2] = $127;
      HEAP16[$127>>1] = $126;
      $128 = HEAP32[$frm_nxt>>2]|0;
      $129 = (($128) + 4|0);
      HEAP32[$frm_nxt>>2] = $129;
     }
    } while(0);
    $130 = HEAP32[$to_nxt>>2]|0;
    $131 = (($130) + 2|0);
    HEAP32[$to_nxt>>2] = $131;
    $132 = HEAP32[$frm_nxt>>2]|0;
    $133 = ($132>>>0)<($frm_end>>>0);
    if ($133) {
     $20 = $131;$22 = $132;
    } else {
     $135 = $132;
     break L8;
    }
   }
   if ((label|0) == 41) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $135 = $16;
  }
 } while(0);
 $134 = ($135>>>0)<($frm_end>>>0);
 $136 = $134&1;
 $$0 = $136;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $nchar16_t$014 = 0, $nchar16_t$1 = 0, $or$cond = 0, $or$cond13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm_end;
  $3 = $frm;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$frm]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($frm) + 1|0);
    $9 = HEAP8[$8]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($frm) + 2|0);
     $12 = HEAP8[$11]|0;
     $13 = ($12<<24>>24)==(-65);
     $14 = (($frm) + 3|0);
     $$frm = $13 ? $14 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $15 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $16 = ($mx|0)!=(0);
 $or$cond13 = $15 & $16;
 L7: do {
  if ($or$cond13) {
   $17 = $frm_end;
   $frm_nxt$115 = $frm_nxt$1$ph;$nchar16_t$014 = 0;
   L9: while(1) {
    $18 = HEAP8[$frm_nxt$115]|0;
    $19 = $18&255;
    $20 = ($19>>>0)>($Maxcode>>>0);
    if ($20) {
     $frm_nxt$1$lcssa = $frm_nxt$115;
     break L7;
    }
    $21 = ($18<<24>>24)>(-1);
    do {
     if ($21) {
      $22 = (($frm_nxt$115) + 1|0);
      $frm_nxt$2 = $22;$nchar16_t$1 = $nchar16_t$014;
     } else {
      $23 = ($18&255)<(194);
      if ($23) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $24 = ($18&255)<(224);
      if ($24) {
       $25 = $frm_nxt$115;
       $26 = (($17) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $28 = (($frm_nxt$115) + 1|0);
       $29 = HEAP8[$28]|0;
       $30 = $29&255;
       $31 = $30 & 192;
       $32 = ($31|0)==(128);
       if (!($32)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $33 = $19 << 6;
       $34 = $33 & 1984;
       $35 = $30 & 63;
       $36 = $35 | $34;
       $37 = ($36>>>0)>($Maxcode>>>0);
       if ($37) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $38 = (($frm_nxt$115) + 2|0);
       $frm_nxt$2 = $38;$nchar16_t$1 = $nchar16_t$014;
       break;
      }
      $39 = ($18&255)<(240);
      if ($39) {
       $40 = $frm_nxt$115;
       $41 = (($17) - ($40))|0;
       $42 = ($41|0)<(3);
       if ($42) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $43 = (($frm_nxt$115) + 1|0);
       $44 = HEAP8[$43]|0;
       $45 = (($frm_nxt$115) + 2|0);
       $46 = HEAP8[$45]|0;
       if ((($19|0) == 237)) {
        $51 = $44 & -32;
        $52 = ($51<<24>>24)==(-128);
        if (!($52)) {
         label = 23;
         break L9;
        }
       } else if ((($19|0) == 224)) {
        $47 = $44 & -32;
        $48 = ($47<<24>>24)==(-96);
        if (!($48)) {
         label = 21;
         break L9;
        }
       } else {
        $55 = $44 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         label = 25;
         break L9;
        }
       }
       $59 = $46&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $62 = $19 << 12;
       $63 = $62 & 61440;
       $64 = $44&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $59 & 63;
       $69 = $67 | $68;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $71 = (($frm_nxt$115) + 3|0);
       $frm_nxt$2 = $71;$nchar16_t$1 = $nchar16_t$014;
       break;
      }
      $72 = ($18&255)<(245);
      if (!($72)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $73 = $frm_nxt$115;
      $74 = (($17) - ($73))|0;
      $75 = ($74|0)<(4);
      if ($75) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $76 = (($mx) - ($nchar16_t$014))|0;
      $77 = ($76>>>0)<(2);
      if ($77) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $78 = (($frm_nxt$115) + 1|0);
      $79 = HEAP8[$78]|0;
      $80 = (($frm_nxt$115) + 2|0);
      $81 = HEAP8[$80]|0;
      $82 = (($frm_nxt$115) + 3|0);
      $83 = HEAP8[$82]|0;
      if ((($19|0) == 244)) {
       $87 = $79 & -16;
       $88 = ($87<<24>>24)==(-128);
       if (!($88)) {
        label = 36;
        break L9;
       }
      } else if ((($19|0) == 240)) {
       $$off = (($79) + 112)<<24>>24;
       $84 = ($$off&255)<(48);
       if (!($84)) {
        label = 34;
        break L9;
       }
      } else {
       $91 = $79 & -64;
       $92 = ($91<<24>>24)==(-128);
       if (!($92)) {
        label = 38;
        break L9;
       }
      }
      $95 = $81&255;
      $96 = $95 & 192;
      $97 = ($96|0)==(128);
      if (!($97)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $98 = $83&255;
      $99 = $98 & 192;
      $100 = ($99|0)==(128);
      if (!($100)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $101 = $19 << 18;
      $102 = $101 & 1835008;
      $103 = $79&255;
      $104 = $103 << 12;
      $105 = $104 & 258048;
      $106 = $105 | $102;
      $107 = $95 << 6;
      $108 = $107 & 4032;
      $109 = $106 | $108;
      $110 = $98 & 63;
      $111 = $109 | $110;
      $112 = ($111>>>0)>($Maxcode>>>0);
      if ($112) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $113 = (($nchar16_t$014) + 1)|0;
      $114 = (($frm_nxt$115) + 4|0);
      $frm_nxt$2 = $114;$nchar16_t$1 = $113;
     }
    } while(0);
    $115 = (($nchar16_t$1) + 1)|0;
    $116 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $117 = ($115>>>0)<($mx>>>0);
    $or$cond = $116 & $117;
    if ($or$cond) {
     $frm_nxt$115 = $frm_nxt$2;$nchar16_t$014 = $115;
    } else {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    }
   }
   if ((label|0) == 21) {
    $49 = $frm;
    $50 = (($40) - ($49))|0;
    $$0 = $50;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 23) {
    $53 = $frm;
    $54 = (($40) - ($53))|0;
    $$0 = $54;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 25) {
    $57 = $frm;
    $58 = (($40) - ($57))|0;
    $$0 = $58;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 34) {
    $85 = $frm;
    $86 = (($73) - ($85))|0;
    $$0 = $86;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 36) {
    $89 = $frm;
    $90 = (($73) - ($89))|0;
    $$0 = $90;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 38) {
    $93 = $frm;
    $94 = (($73) - ($93))|0;
    $$0 = $94;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while(0);
 $118 = $frm_nxt$1$lcssa;
 $119 = $frm;
 $120 = (($118) - ($119))|0;
 $$0 = $120;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = (($frm) + ($6<<2)|0);
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $12 = (($to) + ($11)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 do {
  if (!($1)) {
   $2 = $to_end;
   $3 = $to;
   $4 = (($2) - ($3))|0;
   $5 = ($4|0)<(3);
   if ($5) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $6 = (($to) + 1|0);
    HEAP32[$to_nxt>>2] = $6;
    HEAP8[$to] = -17;
    $7 = HEAP32[$to_nxt>>2]|0;
    $8 = (($7) + 1|0);
    HEAP32[$to_nxt>>2] = $8;
    HEAP8[$7] = -69;
    $9 = HEAP32[$to_nxt>>2]|0;
    $10 = (($9) + 1|0);
    HEAP32[$to_nxt>>2] = $10;
    HEAP8[$9] = -65;
    break;
   }
  }
 } while(0);
 $11 = HEAP32[$frm_nxt>>2]|0;
 $12 = ($11>>>0)<($frm_end>>>0);
 if (!($12)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = $to_end;
 $15 = $11;
 L10: while(1) {
  $14 = HEAP32[$15>>2]|0;
  $16 = $14 & -2048;
  $17 = ($16|0)==(55296);
  $18 = ($14>>>0)>($Maxcode>>>0);
  $or$cond = $17 | $18;
  if ($or$cond) {
   $$0 = 2;
   label = 19;
   break;
  }
  $19 = ($14>>>0)<(128);
  do {
   if ($19) {
    $20 = HEAP32[$to_nxt>>2]|0;
    $21 = $20;
    $22 = (($13) - ($21))|0;
    $23 = ($22|0)<(1);
    if ($23) {
     $$0 = 1;
     label = 19;
     break L10;
    }
    $24 = $14&255;
    $25 = (($20) + 1|0);
    HEAP32[$to_nxt>>2] = $25;
    HEAP8[$20] = $24;
   } else {
    $26 = ($14>>>0)<(2048);
    if ($26) {
     $27 = HEAP32[$to_nxt>>2]|0;
     $28 = $27;
     $29 = (($13) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $31 = $14 >>> 6;
     $32 = $31 | 192;
     $33 = $32&255;
     $34 = (($27) + 1|0);
     HEAP32[$to_nxt>>2] = $34;
     HEAP8[$27] = $33;
     $35 = $14 & 63;
     $36 = $35 | 128;
     $37 = $36&255;
     $38 = HEAP32[$to_nxt>>2]|0;
     $39 = (($38) + 1|0);
     HEAP32[$to_nxt>>2] = $39;
     HEAP8[$38] = $37;
     break;
    }
    $40 = ($14>>>0)<(65536);
    $41 = HEAP32[$to_nxt>>2]|0;
    $42 = $41;
    $43 = (($13) - ($42))|0;
    if ($40) {
     $44 = ($43|0)<(3);
     if ($44) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $45 = $14 >>> 12;
     $46 = $45 | 224;
     $47 = $46&255;
     $48 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $48;
     HEAP8[$41] = $47;
     $49 = $14 >>> 6;
     $50 = $49 & 63;
     $51 = $50 | 128;
     $52 = $51&255;
     $53 = HEAP32[$to_nxt>>2]|0;
     $54 = (($53) + 1|0);
     HEAP32[$to_nxt>>2] = $54;
     HEAP8[$53] = $52;
     $55 = $14 & 63;
     $56 = $55 | 128;
     $57 = $56&255;
     $58 = HEAP32[$to_nxt>>2]|0;
     $59 = (($58) + 1|0);
     HEAP32[$to_nxt>>2] = $59;
     HEAP8[$58] = $57;
     break;
    } else {
     $60 = ($43|0)<(4);
     if ($60) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $61 = $14 >>> 18;
     $62 = $61 | 240;
     $63 = $62&255;
     $64 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $64;
     HEAP8[$41] = $63;
     $65 = $14 >>> 12;
     $66 = $65 & 63;
     $67 = $66 | 128;
     $68 = $67&255;
     $69 = HEAP32[$to_nxt>>2]|0;
     $70 = (($69) + 1|0);
     HEAP32[$to_nxt>>2] = $70;
     HEAP8[$69] = $68;
     $71 = $14 >>> 6;
     $72 = $71 & 63;
     $73 = $72 | 128;
     $74 = $73&255;
     $75 = HEAP32[$to_nxt>>2]|0;
     $76 = (($75) + 1|0);
     HEAP32[$to_nxt>>2] = $76;
     HEAP8[$75] = $74;
     $77 = $14 & 63;
     $78 = $77 | 128;
     $79 = $78&255;
     $80 = HEAP32[$to_nxt>>2]|0;
     $81 = (($80) + 1|0);
     HEAP32[$to_nxt>>2] = $81;
     HEAP8[$80] = $79;
     break;
    }
   }
  } while(0);
  $82 = HEAP32[$frm_nxt>>2]|0;
  $83 = (($82) + 4|0);
  HEAP32[$frm_nxt>>2] = $83;
  $84 = ($83>>>0)<($frm_end>>>0);
  if ($84) {
   $15 = $83;
  } else {
   $$0 = 0;
   label = 19;
   break;
  }
 }
 if ((label|0) == 19) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = (($frm) + ($5)|0);
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 2;
 $12 = (($to) + ($11<<2)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$off = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre5 = HEAP32[$frm_nxt>>2]|0;
 if ($1) {
  $16 = $$pre5;
 } else {
  $2 = $frm_end;
  $3 = $$pre5;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$$pre5]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($$pre5) + 1|0);
    $9 = HEAP8[$8]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($$pre5) + 2|0);
     $12 = HEAP8[$11]|0;
     $13 = ($12<<24>>24)==(-65);
     if ($13) {
      $14 = (($$pre5) + 3|0);
      HEAP32[$frm_nxt>>2] = $14;
      $16 = $14;
     } else {
      $16 = $$pre5;
     }
    } else {
     $16 = $$pre5;
    }
   } else {
    $16 = $$pre5;
   }
  } else {
   $16 = $$pre5;
  }
 }
 $15 = ($16>>>0)<($frm_end>>>0);
 L8: do {
  if ($15) {
   $17 = $frm_end;
   $$pre = HEAP32[$to_nxt>>2]|0;
   $19 = $$pre;$21 = $16;
   while(1) {
    $18 = ($19>>>0)<($to_end>>>0);
    if (!($18)) {
     $108 = $21;
     label = 39;
     break L8;
    }
    $20 = HEAP8[$21]|0;
    $22 = $20&255;
    $23 = ($20<<24>>24)>(-1);
    do {
     if ($23) {
      $24 = ($22>>>0)>($Maxcode>>>0);
      if ($24) {
       $$0 = 2;
       break L8;
      }
      HEAP32[$19>>2] = $22;
      $25 = (($21) + 1|0);
      HEAP32[$frm_nxt>>2] = $25;
     } else {
      $26 = ($20&255)<(194);
      if ($26) {
       $$0 = 2;
       break L8;
      }
      $27 = ($20&255)<(224);
      if ($27) {
       $28 = $21;
       $29 = (($17) - ($28))|0;
       $30 = ($29|0)<(2);
       if ($30) {
        $$0 = 1;
        break L8;
       }
       $31 = (($21) + 1|0);
       $32 = HEAP8[$31]|0;
       $33 = $32&255;
       $34 = $33 & 192;
       $35 = ($34|0)==(128);
       if (!($35)) {
        $$0 = 2;
        break L8;
       }
       $36 = $22 << 6;
       $37 = $36 & 1984;
       $38 = $33 & 63;
       $39 = $38 | $37;
       $40 = ($39>>>0)>($Maxcode>>>0);
       if ($40) {
        $$0 = 2;
        break L8;
       }
       HEAP32[$19>>2] = $39;
       $41 = (($21) + 2|0);
       HEAP32[$frm_nxt>>2] = $41;
       break;
      }
      $42 = ($20&255)<(240);
      if ($42) {
       $43 = $21;
       $44 = (($17) - ($43))|0;
       $45 = ($44|0)<(3);
       if ($45) {
        $$0 = 1;
        break L8;
       }
       $46 = (($21) + 1|0);
       $47 = HEAP8[$46]|0;
       $48 = (($21) + 2|0);
       $49 = HEAP8[$48]|0;
       if ((($22|0) == 237)) {
        $52 = $47 & -32;
        $53 = ($52<<24>>24)==(-128);
        if (!($53)) {
         $$0 = 2;
         break L8;
        }
       } else if ((($22|0) == 224)) {
        $50 = $47 & -32;
        $51 = ($50<<24>>24)==(-96);
        if (!($51)) {
         $$0 = 2;
         break L8;
        }
       } else {
        $54 = $47 & -64;
        $55 = ($54<<24>>24)==(-128);
        if (!($55)) {
         $$0 = 2;
         break L8;
        }
       }
       $56 = $49&255;
       $57 = $56 & 192;
       $58 = ($57|0)==(128);
       if (!($58)) {
        $$0 = 2;
        break L8;
       }
       $59 = $22 << 12;
       $60 = $59 & 61440;
       $61 = $47&255;
       $62 = $61 << 6;
       $63 = $62 & 4032;
       $64 = $63 | $60;
       $65 = $56 & 63;
       $66 = $64 | $65;
       $67 = ($66>>>0)>($Maxcode>>>0);
       if ($67) {
        $$0 = 2;
        break L8;
       }
       HEAP32[$19>>2] = $66;
       $68 = (($21) + 3|0);
       HEAP32[$frm_nxt>>2] = $68;
       break;
      }
      $69 = ($20&255)<(245);
      if (!($69)) {
       $$0 = 2;
       break L8;
      }
      $70 = $21;
      $71 = (($17) - ($70))|0;
      $72 = ($71|0)<(4);
      if ($72) {
       $$0 = 1;
       break L8;
      }
      $73 = (($21) + 1|0);
      $74 = HEAP8[$73]|0;
      $75 = (($21) + 2|0);
      $76 = HEAP8[$75]|0;
      $77 = (($21) + 3|0);
      $78 = HEAP8[$77]|0;
      if ((($22|0) == 244)) {
       $80 = $74 & -16;
       $81 = ($80<<24>>24)==(-128);
       if (!($81)) {
        $$0 = 2;
        break L8;
       }
      } else if ((($22|0) == 240)) {
       $$off = (($74) + 112)<<24>>24;
       $79 = ($$off&255)<(48);
       if (!($79)) {
        $$0 = 2;
        break L8;
       }
      } else {
       $82 = $74 & -64;
       $83 = ($82<<24>>24)==(-128);
       if (!($83)) {
        $$0 = 2;
        break L8;
       }
      }
      $84 = $76&255;
      $85 = $84 & 192;
      $86 = ($85|0)==(128);
      if (!($86)) {
       $$0 = 2;
       break L8;
      }
      $87 = $78&255;
      $88 = $87 & 192;
      $89 = ($88|0)==(128);
      if (!($89)) {
       $$0 = 2;
       break L8;
      }
      $90 = $22 << 18;
      $91 = $90 & 1835008;
      $92 = $74&255;
      $93 = $92 << 12;
      $94 = $93 & 258048;
      $95 = $94 | $91;
      $96 = $84 << 6;
      $97 = $96 & 4032;
      $98 = $95 | $97;
      $99 = $87 & 63;
      $100 = $98 | $99;
      $101 = ($100>>>0)>($Maxcode>>>0);
      if ($101) {
       $$0 = 2;
       break L8;
      }
      HEAP32[$19>>2] = $100;
      $102 = (($21) + 4|0);
      HEAP32[$frm_nxt>>2] = $102;
     }
    } while(0);
    $103 = HEAP32[$to_nxt>>2]|0;
    $104 = (($103) + 4|0);
    HEAP32[$to_nxt>>2] = $104;
    $105 = HEAP32[$frm_nxt>>2]|0;
    $106 = ($105>>>0)<($frm_end>>>0);
    if ($106) {
     $19 = $104;$21 = $105;
    } else {
     $108 = $105;
     label = 39;
     break;
    }
   }
  } else {
   $108 = $16;
   label = 39;
  }
 } while(0);
 if ((label|0) == 39) {
  $107 = ($108>>>0)<($frm_end>>>0);
  $109 = $107&1;
  $$0 = $109;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $nchar32_t$014 = 0, $or$cond = 0, $or$cond13 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm_end;
  $3 = $frm;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$frm]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($frm) + 1|0);
    $9 = HEAP8[$8]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($frm) + 2|0);
     $12 = HEAP8[$11]|0;
     $13 = ($12<<24>>24)==(-65);
     $14 = (($frm) + 3|0);
     $$frm = $13 ? $14 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $15 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $16 = ($mx|0)!=(0);
 $or$cond13 = $15 & $16;
 L7: do {
  if ($or$cond13) {
   $17 = $frm_end;
   $frm_nxt$115 = $frm_nxt$1$ph;$nchar32_t$014 = 1;
   L9: while(1) {
    $18 = HEAP8[$frm_nxt$115]|0;
    $19 = $18&255;
    $20 = ($18<<24>>24)>(-1);
    do {
     if ($20) {
      $21 = ($19>>>0)>($Maxcode>>>0);
      if ($21) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $22 = (($frm_nxt$115) + 1|0);
      $frm_nxt$2 = $22;
     } else {
      $23 = ($18&255)<(194);
      if ($23) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $24 = ($18&255)<(224);
      if ($24) {
       $25 = $frm_nxt$115;
       $26 = (($17) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $28 = (($frm_nxt$115) + 1|0);
       $29 = HEAP8[$28]|0;
       $30 = $29&255;
       $31 = $30 & 192;
       $32 = ($31|0)==(128);
       if (!($32)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $33 = $19 << 6;
       $34 = $33 & 1984;
       $35 = $30 & 63;
       $36 = $35 | $34;
       $37 = ($36>>>0)>($Maxcode>>>0);
       if ($37) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $38 = (($frm_nxt$115) + 2|0);
       $frm_nxt$2 = $38;
       break;
      }
      $39 = ($18&255)<(240);
      if ($39) {
       $40 = $frm_nxt$115;
       $41 = (($17) - ($40))|0;
       $42 = ($41|0)<(3);
       if ($42) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $43 = (($frm_nxt$115) + 1|0);
       $44 = HEAP8[$43]|0;
       $45 = (($frm_nxt$115) + 2|0);
       $46 = HEAP8[$45]|0;
       if ((($19|0) == 224)) {
        $47 = $44 & -32;
        $48 = ($47<<24>>24)==(-96);
        if (!($48)) {
         label = 21;
         break L9;
        }
       } else if ((($19|0) == 237)) {
        $51 = $44 & -32;
        $52 = ($51<<24>>24)==(-128);
        if (!($52)) {
         label = 23;
         break L9;
        }
       } else {
        $55 = $44 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         label = 25;
         break L9;
        }
       }
       $59 = $46&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $62 = $19 << 12;
       $63 = $62 & 61440;
       $64 = $44&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $59 & 63;
       $69 = $67 | $68;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $71 = (($frm_nxt$115) + 3|0);
       $frm_nxt$2 = $71;
       break;
      }
      $72 = ($18&255)<(245);
      if (!($72)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $73 = $frm_nxt$115;
      $74 = (($17) - ($73))|0;
      $75 = ($74|0)<(4);
      if ($75) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $76 = (($frm_nxt$115) + 1|0);
      $77 = HEAP8[$76]|0;
      $78 = (($frm_nxt$115) + 2|0);
      $79 = HEAP8[$78]|0;
      $80 = (($frm_nxt$115) + 3|0);
      $81 = HEAP8[$80]|0;
      if ((($19|0) == 244)) {
       $85 = $77 & -16;
       $86 = ($85<<24>>24)==(-128);
       if (!($86)) {
        label = 35;
        break L9;
       }
      } else if ((($19|0) == 240)) {
       $$off = (($77) + 112)<<24>>24;
       $82 = ($$off&255)<(48);
       if (!($82)) {
        label = 33;
        break L9;
       }
      } else {
       $89 = $77 & -64;
       $90 = ($89<<24>>24)==(-128);
       if (!($90)) {
        label = 37;
        break L9;
       }
      }
      $93 = $79&255;
      $94 = $93 & 192;
      $95 = ($94|0)==(128);
      if (!($95)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $96 = $81&255;
      $97 = $96 & 192;
      $98 = ($97|0)==(128);
      if (!($98)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $99 = $19 << 18;
      $100 = $99 & 1835008;
      $101 = $77&255;
      $102 = $101 << 12;
      $103 = $102 & 258048;
      $104 = $103 | $100;
      $105 = $93 << 6;
      $106 = $105 & 4032;
      $107 = $104 | $106;
      $108 = $96 & 63;
      $109 = $107 | $108;
      $110 = ($109>>>0)>($Maxcode>>>0);
      if ($110) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $111 = (($frm_nxt$115) + 4|0);
      $frm_nxt$2 = $111;
     }
    } while(0);
    $112 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $113 = ($nchar32_t$014>>>0)<($mx>>>0);
    $or$cond = $112 & $113;
    if (!($or$cond)) {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    }
    $phitmp = (($nchar32_t$014) + 1)|0;
    $frm_nxt$115 = $frm_nxt$2;$nchar32_t$014 = $phitmp;
   }
   if ((label|0) == 21) {
    $49 = $frm;
    $50 = (($40) - ($49))|0;
    $$0 = $50;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 23) {
    $53 = $frm;
    $54 = (($40) - ($53))|0;
    $$0 = $54;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 25) {
    $57 = $frm;
    $58 = (($40) - ($57))|0;
    $$0 = $58;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 33) {
    $83 = $frm;
    $84 = (($73) - ($83))|0;
    $$0 = $84;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 35) {
    $87 = $frm;
    $88 = (($73) - ($87))|0;
    $$0 = $88;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 37) {
    $91 = $frm;
    $92 = (($73) - ($91))|0;
    $$0 = $92;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while(0);
 $114 = $frm_nxt$1$lcssa;
 $115 = $frm;
 $116 = (($114) - ($115))|0;
 $$0 = $116;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((18952 + 8|0));
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((18952 + 8|0));
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((18992 + 8|0));
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((18992 + 8|0));
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP8[$0]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 9|0);
 $1 = HEAP8[$0]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,19032,4);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(19040)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,19040,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,19064,5);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(19072)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,19072,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[19104]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $36 = HEAP32[19096>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $2 = (___cxa_guard_acquire((19104|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $36 = HEAP32[19096>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $4 = HEAP8[26304]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((26304|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((26136|0),0,168)|0;
   (_atexit((125|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((26304|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(20,(26136|0),(26312|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  (invoke_iii(20,(((26136 + 12|0))|0),(26320|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   (invoke_iii(20,(((26136 + 24|0))|0),(26328|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    (invoke_iii(20,(((26136 + 36|0))|0),(26336|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     (invoke_iii(20,(((26136 + 48|0))|0),(26352|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      (invoke_iii(20,(((26136 + 60|0))|0),(26368|0))|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       (invoke_iii(20,(((26136 + 72|0))|0),(26376|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        (invoke_iii(20,(((26136 + 84|0))|0),(26392|0))|0);
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         (invoke_iii(20,(((26136 + 96|0))|0),(26400|0))|0);
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          (invoke_iii(20,(((26136 + 108|0))|0),(26408|0))|0);
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           (invoke_iii(20,(((26136 + 120|0))|0),(26416|0))|0);
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            (invoke_iii(20,(((26136 + 132|0))|0),(26424|0))|0);
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             (invoke_iii(20,(((26136 + 144|0))|0),(26432|0))|0);
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              (invoke_iii(20,(((26136 + 156|0))|0),(26440|0))|0);
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               HEAP32[19096>>2] = 26136;
               ___cxa_guard_release((19104|0));
               $36 = HEAP32[19096>>2]|0;
               STACKTOP = sp;return ($36|0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $37 = ___cxa_find_matching_catch(-1,-1)|0;
 $38 = tempRet0;
 ___cxa_guard_abort((19104|0));
 ___resumeException($37|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[19120]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $36 = HEAP32[19112>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $2 = (___cxa_guard_acquire((19120|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $36 = HEAP32[19112>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $4 = HEAP8[25768]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((25768|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((25600|0),0,168)|0;
   (_atexit((126|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((25768|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(21,(25600|0),(25776|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  (invoke_iii(21,(((25600 + 12|0))|0),(25808|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   (invoke_iii(21,(((25600 + 24|0))|0),(25840|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    (invoke_iii(21,(((25600 + 36|0))|0),(25872|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     (invoke_iii(21,(((25600 + 48|0))|0),(25912|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      (invoke_iii(21,(((25600 + 60|0))|0),(25952|0))|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       (invoke_iii(21,(((25600 + 72|0))|0),(25984|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        (invoke_iii(21,(((25600 + 84|0))|0),(26024|0))|0);
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         (invoke_iii(21,(((25600 + 96|0))|0),(26040|0))|0);
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          (invoke_iii(21,(((25600 + 108|0))|0),(26056|0))|0);
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           (invoke_iii(21,(((25600 + 120|0))|0),(26072|0))|0);
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            (invoke_iii(21,(((25600 + 132|0))|0),(26088|0))|0);
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             (invoke_iii(21,(((25600 + 144|0))|0),(26104|0))|0);
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              (invoke_iii(21,(((25600 + 156|0))|0),(26120|0))|0);
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               HEAP32[19112>>2] = 25600;
               ___cxa_guard_release((19120|0));
               $36 = HEAP32[19112>>2]|0;
               STACKTOP = sp;return ($36|0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $37 = ___cxa_find_matching_catch(-1,-1)|0;
 $38 = tempRet0;
 ___cxa_guard_abort((19120|0));
 ___resumeException($37|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[19136]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $56 = HEAP32[19128>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $2 = (___cxa_guard_acquire((19136|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $56 = HEAP32[19128>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $4 = HEAP8[25376]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((25376|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((25088|0),0,288)|0;
   (_atexit((127|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((25376|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(20,(25088|0),(25384|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  (invoke_iii(20,(((25088 + 12|0))|0),(25392|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   (invoke_iii(20,(((25088 + 24|0))|0),(25408|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    (invoke_iii(20,(((25088 + 36|0))|0),(25416|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     (invoke_iii(20,(((25088 + 48|0))|0),(25424|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      (invoke_iii(20,(((25088 + 60|0))|0),(25432|0))|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       (invoke_iii(20,(((25088 + 72|0))|0),(25440|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        (invoke_iii(20,(((25088 + 84|0))|0),(25448|0))|0);
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         (invoke_iii(20,(((25088 + 96|0))|0),(25456|0))|0);
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          (invoke_iii(20,(((25088 + 108|0))|0),(25472|0))|0);
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           (invoke_iii(20,(((25088 + 120|0))|0),(25480|0))|0);
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            (invoke_iii(20,(((25088 + 132|0))|0),(25496|0))|0);
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             (invoke_iii(20,(((25088 + 144|0))|0),(25512|0))|0);
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              (invoke_iii(20,(((25088 + 156|0))|0),(25520|0))|0);
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               __THREW__ = 0;
               (invoke_iii(20,(((25088 + 168|0))|0),(25528|0))|0);
               $36 = __THREW__; __THREW__ = 0;
               $37 = $36&1;
               if (!($37)) {
                __THREW__ = 0;
                (invoke_iii(20,(((25088 + 180|0))|0),(25536|0))|0);
                $38 = __THREW__; __THREW__ = 0;
                $39 = $38&1;
                if (!($39)) {
                 __THREW__ = 0;
                 (invoke_iii(20,(((25088 + 192|0))|0),(25424|0))|0);
                 $40 = __THREW__; __THREW__ = 0;
                 $41 = $40&1;
                 if (!($41)) {
                  __THREW__ = 0;
                  (invoke_iii(20,(((25088 + 204|0))|0),(25544|0))|0);
                  $42 = __THREW__; __THREW__ = 0;
                  $43 = $42&1;
                  if (!($43)) {
                   __THREW__ = 0;
                   (invoke_iii(20,(((25088 + 216|0))|0),(25552|0))|0);
                   $44 = __THREW__; __THREW__ = 0;
                   $45 = $44&1;
                   if (!($45)) {
                    __THREW__ = 0;
                    (invoke_iii(20,(((25088 + 228|0))|0),(25560|0))|0);
                    $46 = __THREW__; __THREW__ = 0;
                    $47 = $46&1;
                    if (!($47)) {
                     __THREW__ = 0;
                     (invoke_iii(20,(((25088 + 240|0))|0),(25568|0))|0);
                     $48 = __THREW__; __THREW__ = 0;
                     $49 = $48&1;
                     if (!($49)) {
                      __THREW__ = 0;
                      (invoke_iii(20,(((25088 + 252|0))|0),(25576|0))|0);
                      $50 = __THREW__; __THREW__ = 0;
                      $51 = $50&1;
                      if (!($51)) {
                       __THREW__ = 0;
                       (invoke_iii(20,(((25088 + 264|0))|0),(25584|0))|0);
                       $52 = __THREW__; __THREW__ = 0;
                       $53 = $52&1;
                       if (!($53)) {
                        __THREW__ = 0;
                        (invoke_iii(20,(((25088 + 276|0))|0),(25592|0))|0);
                        $54 = __THREW__; __THREW__ = 0;
                        $55 = $54&1;
                        if (!($55)) {
                         HEAP32[19128>>2] = 25088;
                         ___cxa_guard_release((19136|0));
                         $56 = HEAP32[19128>>2]|0;
                         STACKTOP = sp;return ($56|0);
                        }
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $57 = ___cxa_find_matching_catch(-1,-1)|0;
 $58 = tempRet0;
 ___cxa_guard_abort((19136|0));
 ___resumeException($57|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[19152]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $56 = HEAP32[19144>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $2 = (___cxa_guard_acquire((19152|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $56 = HEAP32[19144>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $4 = HEAP8[24536]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((24536|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((24248|0),0,288)|0;
   (_atexit((128|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((24536|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(21,(24248|0),(24544|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  (invoke_iii(21,(((24248 + 12|0))|0),(24576|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   (invoke_iii(21,(((24248 + 24|0))|0),(24616|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    (invoke_iii(21,(((24248 + 36|0))|0),(24640|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     (invoke_iii(21,(((24248 + 48|0))|0),(24960|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      (invoke_iii(21,(((24248 + 60|0))|0),(24664|0))|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       (invoke_iii(21,(((24248 + 72|0))|0),(24688|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        (invoke_iii(21,(((24248 + 84|0))|0),(24712|0))|0);
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         (invoke_iii(21,(((24248 + 96|0))|0),(24744|0))|0);
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          (invoke_iii(21,(((24248 + 108|0))|0),(24784|0))|0);
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           (invoke_iii(21,(((24248 + 120|0))|0),(24816|0))|0);
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            (invoke_iii(21,(((24248 + 132|0))|0),(24856|0))|0);
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             (invoke_iii(21,(((24248 + 144|0))|0),(24896|0))|0);
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              (invoke_iii(21,(((24248 + 156|0))|0),(24912|0))|0);
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               __THREW__ = 0;
               (invoke_iii(21,(((24248 + 168|0))|0),(24928|0))|0);
               $36 = __THREW__; __THREW__ = 0;
               $37 = $36&1;
               if (!($37)) {
                __THREW__ = 0;
                (invoke_iii(21,(((24248 + 180|0))|0),(24944|0))|0);
                $38 = __THREW__; __THREW__ = 0;
                $39 = $38&1;
                if (!($39)) {
                 __THREW__ = 0;
                 (invoke_iii(21,(((24248 + 192|0))|0),(24960|0))|0);
                 $40 = __THREW__; __THREW__ = 0;
                 $41 = $40&1;
                 if (!($41)) {
                  __THREW__ = 0;
                  (invoke_iii(21,(((24248 + 204|0))|0),(24976|0))|0);
                  $42 = __THREW__; __THREW__ = 0;
                  $43 = $42&1;
                  if (!($43)) {
                   __THREW__ = 0;
                   (invoke_iii(21,(((24248 + 216|0))|0),(24992|0))|0);
                   $44 = __THREW__; __THREW__ = 0;
                   $45 = $44&1;
                   if (!($45)) {
                    __THREW__ = 0;
                    (invoke_iii(21,(((24248 + 228|0))|0),(25008|0))|0);
                    $46 = __THREW__; __THREW__ = 0;
                    $47 = $46&1;
                    if (!($47)) {
                     __THREW__ = 0;
                     (invoke_iii(21,(((24248 + 240|0))|0),(25024|0))|0);
                     $48 = __THREW__; __THREW__ = 0;
                     $49 = $48&1;
                     if (!($49)) {
                      __THREW__ = 0;
                      (invoke_iii(21,(((24248 + 252|0))|0),(25040|0))|0);
                      $50 = __THREW__; __THREW__ = 0;
                      $51 = $50&1;
                      if (!($51)) {
                       __THREW__ = 0;
                       (invoke_iii(21,(((24248 + 264|0))|0),(25056|0))|0);
                       $52 = __THREW__; __THREW__ = 0;
                       $53 = $52&1;
                       if (!($53)) {
                        __THREW__ = 0;
                        (invoke_iii(21,(((24248 + 276|0))|0),(25072|0))|0);
                        $54 = __THREW__; __THREW__ = 0;
                        $55 = $54&1;
                        if (!($55)) {
                         HEAP32[19144>>2] = 24248;
                         ___cxa_guard_release((19152|0));
                         $56 = HEAP32[19144>>2]|0;
                         STACKTOP = sp;return ($56|0);
                        }
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $57 = ___cxa_find_matching_catch(-1,-1)|0;
 $58 = tempRet0;
 ___cxa_guard_abort((19152|0));
 ___resumeException($57|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[19168]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $12 = HEAP32[19160>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $2 = (___cxa_guard_acquire((19168|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $12 = HEAP32[19160>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $4 = HEAP8[24224]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((24224|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((23936|0),0,288)|0;
   (_atexit((129|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((24224|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(20,(23936|0),(24232|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  ___cxa_guard_abort((19168|0));
  ___resumeException($13|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(20,(((23936 + 12|0))|0),(24240|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  ___cxa_guard_abort((19168|0));
  ___resumeException($13|0);
  // unreachable;
 }
 HEAP32[19160>>2] = 23936;
 ___cxa_guard_release((19168|0));
 $12 = HEAP32[19160>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[19184]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $12 = HEAP32[19176>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $2 = (___cxa_guard_acquire((19184|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $12 = HEAP32[19176>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $4 = HEAP8[23896]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((23896|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((23608|0),0,288)|0;
   (_atexit((130|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((23896|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(21,(23608|0),(23904|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  ___cxa_guard_abort((19184|0));
  ___resumeException($13|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(21,(((23608 + 12|0))|0),(23920|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  ___cxa_guard_abort((19184|0));
  ___resumeException($13|0);
  // unreachable;
 }
 HEAP32[19176>>2] = 23608;
 ___cxa_guard_release((19184|0));
 $12 = HEAP32[19176>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[19208]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (19192|0);
 }
 $2 = (___cxa_guard_acquire((19208|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (19192|0);
 }
 __THREW__ = 0;
 invoke_viii(9,(19192|0),(19216|0),8);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch(-1,-1)|0;
  $7 = tempRet0;
  ___cxa_guard_abort((19208|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (_atexit((131|0),(19192|0),(___dso_handle|0))|0);
 ___cxa_guard_release((19208|0));
 STACKTOP = sp;return (19192|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[19248]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (19232|0);
 }
 $2 = (___cxa_guard_acquire((19248|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (19232|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(74,(19256|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(11,(19232|0),(19256|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (_atexit((132|0),(19232|0),(___dso_handle|0))|0);
   ___cxa_guard_release((19248|0));
   STACKTOP = sp;return (19232|0);
  }
 }
 $9 = ___cxa_find_matching_catch(-1,-1)|0;
 $10 = tempRet0;
 ___cxa_guard_abort((19248|0));
 ___resumeException($9|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[19312]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (19296|0);
 }
 $2 = (___cxa_guard_acquire((19312|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (19296|0);
 }
 __THREW__ = 0;
 invoke_viii(9,(19296|0),(19320|0),8);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch(-1,-1)|0;
  $7 = tempRet0;
  ___cxa_guard_abort((19312|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (_atexit((131|0),(19296|0),(___dso_handle|0))|0);
 ___cxa_guard_release((19312|0));
 STACKTOP = sp;return (19296|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[19352]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (19336|0);
 }
 $2 = (___cxa_guard_acquire((19352|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (19336|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(74,(19360|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(11,(19336|0),(19360|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (_atexit((132|0),(19336|0),(___dso_handle|0))|0);
   ___cxa_guard_release((19352|0));
   STACKTOP = sp;return (19336|0);
  }
 }
 $9 = ___cxa_find_matching_catch(-1,-1)|0;
 $10 = tempRet0;
 ___cxa_guard_abort((19352|0));
 ___resumeException($9|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[19416]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (19400|0);
 }
 $2 = (___cxa_guard_acquire((19416|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (19400|0);
 }
 __THREW__ = 0;
 invoke_viii(9,(19400|0),(19424|0),20);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch(-1,-1)|0;
  $7 = tempRet0;
  ___cxa_guard_abort((19416|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (_atexit((131|0),(19400|0),(___dso_handle|0))|0);
 ___cxa_guard_release((19416|0));
 STACKTOP = sp;return (19400|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[19464]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (19448|0);
 }
 $2 = (___cxa_guard_acquire((19464|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (19448|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(74,(19472|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(11,(19448|0),(19472|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (_atexit((132|0),(19448|0),(___dso_handle|0))|0);
   ___cxa_guard_release((19464|0));
   STACKTOP = sp;return (19448|0);
  }
 }
 $9 = ___cxa_find_matching_catch(-1,-1)|0;
 $10 = tempRet0;
 ___cxa_guard_abort((19464|0));
 ___resumeException($9|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[19576]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (19560|0);
 }
 $2 = (___cxa_guard_acquire((19576|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (19560|0);
 }
 __THREW__ = 0;
 invoke_viii(9,(19560|0),(19584|0),11);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch(-1,-1)|0;
  $7 = tempRet0;
  ___cxa_guard_abort((19576|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (_atexit((131|0),(19560|0),(___dso_handle|0))|0);
 ___cxa_guard_release((19576|0));
 STACKTOP = sp;return (19560|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[19616]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (19600|0);
 }
 $2 = (___cxa_guard_acquire((19616|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (19600|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(74,(19624|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(11,(19600|0),(19624|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (_atexit((132|0),(19600|0),(___dso_handle|0))|0);
   ___cxa_guard_release((19616|0));
   STACKTOP = sp;return (19600|0);
  }
 }
 $9 = ___cxa_find_matching_catch(-1,-1)|0;
 $10 = tempRet0;
 ___cxa_guard_abort((19616|0));
 ___resumeException($9|0);
 // unreachable;
 return 0|0;
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = HEAP8[18688]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (___cxa_guard_acquire((18688|0))|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    __THREW__ = 0;
    $7 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $10 = ___cxa_find_matching_catch(-1,-1)|0;
     $11 = tempRet0;
     ___cxa_guard_abort((18688|0));
     ___resumeException($10|0);
     // unreachable;
    } else {
     HEAP32[18680>>2] = $7;
     ___cxa_guard_release((18688|0));
     break;
    }
   }
  }
 } while(0);
 $12 = HEAP32[18680>>2]|0;
 $13 = (+_strtold_l($__a,$__p2,$12));
 $14 = HEAP32[$1>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  HEAP32[$1>>2] = $2;
 }
 $16 = HEAP32[$__p2>>2]|0;
 $17 = ($16|0)==($__a_end|0);
 if (!($17)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $18 = ($14|0)==(34);
 if (!($18)) {
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 HEAP32[$__err>>2] = 4;
 $$0 = $13;
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = HEAP8[18688]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (___cxa_guard_acquire((18688|0))|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    __THREW__ = 0;
    $7 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $10 = ___cxa_find_matching_catch(-1,-1)|0;
     $11 = tempRet0;
     ___cxa_guard_abort((18688|0));
     ___resumeException($10|0);
     // unreachable;
    } else {
     HEAP32[18680>>2] = $7;
     ___cxa_guard_release((18688|0));
     break;
    }
   }
  }
 } while(0);
 $12 = HEAP32[18680>>2]|0;
 $13 = (+_strtold_l($__a,$__p2,$12));
 $14 = HEAP32[$1>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  HEAP32[$1>>2] = $2;
 }
 $16 = HEAP32[$__p2>>2]|0;
 $17 = ($16|0)==($__a_end|0);
 if (!($17)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $18 = ($14|0)==(34);
 if (!($18)) {
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 HEAP32[$__err>>2] = 4;
 $$0 = $13;
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = HEAP8[18688]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (___cxa_guard_acquire((18688|0))|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    __THREW__ = 0;
    $7 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $10 = ___cxa_find_matching_catch(-1,-1)|0;
     $11 = tempRet0;
     ___cxa_guard_abort((18688|0));
     ___resumeException($10|0);
     // unreachable;
    } else {
     HEAP32[18680>>2] = $7;
     ___cxa_guard_release((18688|0));
     break;
    }
   }
  }
 } while(0);
 $12 = HEAP32[18680>>2]|0;
 $13 = (+_strtold_l($__a,$__p2,$12));
 $14 = HEAP32[$1>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  HEAP32[$1>>2] = $2;
 }
 $16 = HEAP32[$__p2>>2]|0;
 $17 = ($16|0)==($__a_end|0);
 if (!($17)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $18 = ($14|0)==(34);
 if ($18) {
  HEAP32[$__err>>2] = 4;
 }
 $19 = $13;
 $$0 = $19;
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $22 = 0;$23 = 0;
  tempRet0 = $22;
  STACKTOP = sp;return ($23|0);
 }
 $1 = HEAP8[$__a]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $22 = 0;$23 = 0;
  tempRet0 = $22;
  STACKTOP = sp;return ($23|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = HEAP8[18688]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire((18688|0))|0);
   $8 = ($7|0)==(0);
   if (!($8)) {
    __THREW__ = 0;
    $9 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     $12 = ___cxa_find_matching_catch(-1,-1)|0;
     $13 = tempRet0;
     ___cxa_guard_abort((18688|0));
     ___resumeException($12|0);
     // unreachable;
    } else {
     HEAP32[18680>>2] = $9;
     ___cxa_guard_release((18688|0));
     break;
    }
   }
  }
 } while(0);
 $14 = HEAP32[18680>>2]|0;
 $15 = (_strtoull_l(($__a|0),($__p2|0),($__base|0),($14|0))|0);
 $16 = tempRet0;
 $17 = HEAP32[$3>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  HEAP32[$3>>2] = $4;
 }
 $19 = HEAP32[$__p2>>2]|0;
 $20 = ($19|0)==($__a_end|0);
 if (!($20)) {
  HEAP32[$__err>>2] = 4;
  $22 = 0;$23 = 0;
  tempRet0 = $22;
  STACKTOP = sp;return ($23|0);
 }
 $21 = ($17|0)==(34);
 if (!($21)) {
  $22 = $16;$23 = $15;
  tempRet0 = $22;
  STACKTOP = sp;return ($23|0);
 }
 HEAP32[$__err>>2] = 4;
 $22 = -1;$23 = -1;
 tempRet0 = $22;
 STACKTOP = sp;return ($23|0);
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = HEAP8[18688]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire((18688|0))|0);
   $8 = ($7|0)==(0);
   if (!($8)) {
    __THREW__ = 0;
    $9 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     $12 = ___cxa_find_matching_catch(-1,-1)|0;
     $13 = tempRet0;
     ___cxa_guard_abort((18688|0));
     ___resumeException($12|0);
     // unreachable;
    } else {
     HEAP32[18680>>2] = $9;
     ___cxa_guard_release((18688|0));
     break;
    }
   }
  }
 } while(0);
 $14 = HEAP32[18680>>2]|0;
 $15 = (_strtoull_l(($__a|0),($__p2|0),($__base|0),($14|0))|0);
 $16 = tempRet0;
 $17 = HEAP32[$3>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  HEAP32[$3>>2] = $4;
 }
 $19 = HEAP32[$__p2>>2]|0;
 $20 = ($19|0)==($__a_end|0);
 if (!($20)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($17|0)==(34);
 $22 = ($16>>>0)>(0);
 $23 = ($16|0)==(0);
 $24 = ($15>>>0)>(4294967295);
 $25 = $23 & $24;
 $26 = $22 | $25;
 $or$cond = $21 | $26;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = HEAP8[18688]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire((18688|0))|0);
   $8 = ($7|0)==(0);
   if (!($8)) {
    __THREW__ = 0;
    $9 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     $12 = ___cxa_find_matching_catch(-1,-1)|0;
     $13 = tempRet0;
     ___cxa_guard_abort((18688|0));
     ___resumeException($12|0);
     // unreachable;
    } else {
     HEAP32[18680>>2] = $9;
     ___cxa_guard_release((18688|0));
     break;
    }
   }
  }
 } while(0);
 $14 = HEAP32[18680>>2]|0;
 $15 = (_strtoull_l(($__a|0),($__p2|0),($__base|0),($14|0))|0);
 $16 = tempRet0;
 $17 = HEAP32[$3>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  HEAP32[$3>>2] = $4;
 }
 $19 = HEAP32[$__p2>>2]|0;
 $20 = ($19|0)==($__a_end|0);
 if (!($20)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($17|0)==(34);
 $22 = ($16>>>0)>(0);
 $23 = ($16|0)==(0);
 $24 = ($15>>>0)>(4294967295);
 $25 = $23 & $24;
 $26 = $22 | $25;
 $or$cond = $21 | $26;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = HEAP8[18688]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire((18688|0))|0);
   $8 = ($7|0)==(0);
   if (!($8)) {
    __THREW__ = 0;
    $9 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     $12 = ___cxa_find_matching_catch(-1,-1)|0;
     $13 = tempRet0;
     ___cxa_guard_abort((18688|0));
     ___resumeException($12|0);
     // unreachable;
    } else {
     HEAP32[18680>>2] = $9;
     ___cxa_guard_release((18688|0));
     break;
    }
   }
  }
 } while(0);
 $14 = HEAP32[18680>>2]|0;
 $15 = (_strtoull_l(($__a|0),($__p2|0),($__base|0),($14|0))|0);
 $16 = tempRet0;
 $17 = HEAP32[$3>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  HEAP32[$3>>2] = $4;
 }
 $19 = HEAP32[$__p2>>2]|0;
 $20 = ($19|0)==($__a_end|0);
 if (!($20)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($17|0)==(34);
 $22 = ($16>>>0)>(0);
 $23 = ($16|0)==(0);
 $24 = ($15>>>0)>(65535);
 $25 = $23 & $24;
 $26 = $22 | $25;
 $or$cond = $21 | $26;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $27 = $15&65535;
  $$0 = $27;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $27 = 0;$28 = 0;
  tempRet0 = $27;
  STACKTOP = sp;return ($28|0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = HEAP8[18688]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (___cxa_guard_acquire((18688|0))|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    __THREW__ = 0;
    $7 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $10 = ___cxa_find_matching_catch(-1,-1)|0;
     $11 = tempRet0;
     ___cxa_guard_abort((18688|0));
     ___resumeException($10|0);
     // unreachable;
    } else {
     HEAP32[18680>>2] = $7;
     ___cxa_guard_release((18688|0));
     break;
    }
   }
  }
 } while(0);
 $12 = HEAP32[18680>>2]|0;
 $13 = (_strtoll_l(($__a|0),($__p2|0),($__base|0),($12|0))|0);
 $14 = tempRet0;
 $15 = HEAP32[$1>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  HEAP32[$1>>2] = $2;
 }
 $17 = HEAP32[$__p2>>2]|0;
 $18 = ($17|0)==($__a_end|0);
 if (!($18)) {
  HEAP32[$__err>>2] = 4;
  $27 = 0;$28 = 0;
  tempRet0 = $27;
  STACKTOP = sp;return ($28|0);
 }
 $19 = ($15|0)==(34);
 if ($19) {
  HEAP32[$__err>>2] = 4;
  $20 = ($14|0)>(0);
  $21 = ($14|0)==(0);
  $22 = ($13>>>0)>(0);
  $23 = $21 & $22;
  $24 = $20 | $23;
  $25 = $24 ? -1 : 0;
  $26 = $24 ? 2147483647 : -2147483648;
  tempRet0 = $26;
  STACKTOP = sp;return ($25|0);
 } else {
  $27 = $14;$28 = $13;
  tempRet0 = $27;
  STACKTOP = sp;return ($28|0);
 }
 return 0|0;
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = HEAP8[18688]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (___cxa_guard_acquire((18688|0))|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    __THREW__ = 0;
    $7 = (invoke_iiii(25,2147483647,(18696|0),(0|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $10 = ___cxa_find_matching_catch(-1,-1)|0;
     $11 = tempRet0;
     ___cxa_guard_abort((18688|0));
     ___resumeException($10|0);
     // unreachable;
    } else {
     HEAP32[18680>>2] = $7;
     ___cxa_guard_release((18688|0));
     break;
    }
   }
  }
 } while(0);
 $12 = HEAP32[18680>>2]|0;
 $13 = (_strtoll_l(($__a|0),($__p2|0),($__base|0),($12|0))|0);
 $14 = tempRet0;
 $15 = HEAP32[$1>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  HEAP32[$1>>2] = $2;
 }
 $17 = HEAP32[$__p2>>2]|0;
 $18 = ($17|0)==($__a_end|0);
 if (!($18)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = ($15|0)==(34);
 do {
  if ($19) {
   HEAP32[$__err>>2] = 4;
   $30 = ($14|0)>(0);
   $31 = ($14|0)==(0);
   $32 = ($13>>>0)>(0);
   $33 = $31 & $32;
   $34 = $30 | $33;
   if ($34) {
    $$0 = 2147483647;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $20 = ($14|0)<(-1);
   $21 = ($14|0)==(-1);
   $22 = ($13>>>0)<(2147483648);
   $23 = $21 & $22;
   $24 = $20 | $23;
   if ($24) {
    HEAP32[$__err>>2] = 4;
    break;
   }
   $25 = ($14|0)>(0);
   $26 = ($14|0)==(0);
   $27 = ($13>>>0)>(2147483647);
   $28 = $26 & $27;
   $29 = $25 | $28;
   if ($29) {
    HEAP32[$__err>>2] = 4;
    $$0 = 2147483647;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$0 = $13;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$0 = -2147483648;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp|0;
 var $$idx$val = 0, $$idx1 = 0, $$idx1$val$field = 0, $$idx1$val$field2 = 0, $$idx1$val$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$val = HEAP32[$__vp>>2]|0;
 $$idx1 = (($__vp) + 4|0);
 $$idx1$val$field = HEAPU8[$$idx1]|(HEAPU8[$$idx1+1|0]<<8)|(HEAPU8[$$idx1+2|0]<<16)|(HEAPU8[$$idx1+3|0]<<24);
 $$idx1$val$index1 = (($$idx1) + 4|0);
 $$idx1$val$field2 = HEAPU8[$$idx1$val$index1]|(HEAPU8[$$idx1$val$index1+1|0]<<8)|(HEAPU8[$$idx1$val$index1+2|0]<<16)|(HEAPU8[$$idx1$val$index1+3|0]<<24);
 $0 = $$idx1$val$field2 >> 1;
 $1 = (($$idx$val) + ($0)|0);
 $2 = $$idx1$val$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$idx1$val$field;
  $8 = $7;
  FUNCTION_TABLE_vi[$8 & 255]($1);
  STACKTOP = sp;return;
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$idx1$val$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  FUNCTION_TABLE_vi[$8 & 255]($1);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i = 0, $$0$i2 = 0, $$0$i569 = 0, $$0$i57 = 0, $$pre1$i = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)<($__n>>>0);
 if (!($8)) {
  $$0$i = $__n;$10 = $3;
  while(1) {
   $9 = ($10|0)==(0|0);
   if ($9) {
    $12 = 0;
   } else {
    HEAP32[$10>>2] = 0;
    $$pre1$i = HEAP32[$2>>2]|0;
    $12 = $$pre1$i;
   }
   $11 = (($12) + 4|0);
   HEAP32[$2>>2] = $11;
   $13 = (($$0$i) + -1)|0;
   $14 = ($13|0)==(0);
   if ($14) {
    break;
   } else {
    $$0$i = $13;$10 = $11;
   }
  }
  STACKTOP = sp;return;
 }
 $15 = (($this) + 16|0);
 $16 = HEAP32[$this>>2]|0;
 $17 = $16;
 $18 = (($5) - ($17))|0;
 $19 = $18 >> 2;
 $20 = (($19) + ($__n))|0;
 $21 = ($20>>>0)>(1073741823);
 if ($21) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $22 = (($4) - ($17))|0;
 $23 = $22 >> 2;
 $24 = ($23>>>0)<(536870911);
 if ($24) {
  $25 = $22 >> 1;
  $26 = ($25>>>0)<($20>>>0);
  $27 = $26 ? $20 : $25;
  $28 = ($27|0)==(0);
  if ($28) {
   $$0$i57 = 0;$36 = 0;
  } else {
   $29 = (($this) + 128|0);
   $30 = HEAP8[$29]|0;
   $31 = ($30<<24>>24)==(0);
   $32 = ($27>>>0)<(29);
   $or$cond$i$i$i$i = $31 & $32;
   if ($or$cond$i$i$i$i) {
    HEAP8[$29] = 1;
    $$0$i57 = $27;$36 = $15;
   } else {
    $$0$i569 = $27;
    label = 11;
   }
  }
 } else {
  $$0$i569 = 1073741823;
  label = 11;
 }
 if ((label|0) == 11) {
  $33 = $$0$i569 << 2;
  $34 = (__Znwj($33)|0);
  $$0$i57 = $$0$i569;$36 = $34;
 }
 $35 = (($36) + ($19<<2)|0);
 $$0$i2 = $__n;$38 = $35;
 while(1) {
  $37 = ($38|0)==(0|0);
  if ($37) {
   $40 = 0;
  } else {
   HEAP32[$38>>2] = 0;
   $40 = $38;
  }
  $39 = (($40) + 4|0);
  $41 = (($$0$i2) + -1)|0;
  $42 = ($41|0)==(0);
  if ($42) {
   break;
  } else {
   $$0$i2 = $41;$38 = $39;
  }
 }
 $43 = (($36) + ($$0$i57<<2)|0);
 $44 = HEAP32[$this>>2]|0;
 $45 = HEAP32[$2>>2]|0;
 $46 = $45;
 $47 = $44;
 $48 = (($46) - ($47))|0;
 $49 = $48 >> 2;
 $$sum = (($19) - ($49))|0;
 $50 = (($36) + ($$sum<<2)|0);
 _memcpy(($50|0),($44|0),($48|0))|0;
 HEAP32[$this>>2] = $50;
 HEAP32[$2>>2] = $39;
 HEAP32[$0>>2] = $43;
 $51 = ($44|0)==(0|0);
 if ($51) {
  STACKTOP = sp;return;
 }
 $52 = ($15|0)==($44|0);
 if ($52) {
  $53 = (($this) + 128|0);
  HEAP8[$53] = 0;
  STACKTOP = sp;return;
 } else {
  __ZdlPv($44);
  STACKTOP = sp;return;
 }
}
function ___cxx_global_array_dtor($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23608 + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23608 + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23608 + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23608 + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23608 + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23608 + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23608 + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23608 + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23608 + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23608 + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23608 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23608 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23608 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23608 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23608 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23608 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23608 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23608 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23608 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23608 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23608 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23608 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((23608 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(23608);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor53($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23936 + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23936 + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23936 + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23936 + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23936 + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23936 + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23936 + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23936 + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23936 + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23936 + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23936 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23936 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23936 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23936 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23936 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23936 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23936 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23936 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23936 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23936 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23936 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23936 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((23936 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(23936);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor56($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24248 + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24248 + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24248 + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24248 + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24248 + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24248 + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24248 + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24248 + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24248 + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24248 + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24248 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24248 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24248 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24248 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24248 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24248 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24248 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24248 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24248 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24248 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24248 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24248 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((24248 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(24248);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor81($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25088 + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25088 + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25088 + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25088 + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25088 + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25088 + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25088 + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25088 + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25088 + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25088 + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25088 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25088 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25088 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25088 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25088 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25088 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25088 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25088 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25088 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25088 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25088 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25088 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((25088 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(25088);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor105($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((25600 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((25600 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((25600 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((25600 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((25600 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((25600 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((25600 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((25600 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((25600 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((25600 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((25600 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((25600 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((25600 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(25600);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor120($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((26136 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((26136 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((26136 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((26136 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((26136 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((26136 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((26136 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((26136 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((26136 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((26136 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((26136 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((26136 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((26136 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(26136);
 STACKTOP = sp;return;
}
function _mbrlen($s,$n,$st) {
 $s = $s|0;
 $n = $n|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)!=(0|0);
 $1 = $0 ? $st : 26656;
 $2 = (_mbrtowc(0,$s,$n,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($st|0)==(0|0);
 $$01 = $1 ? 26664 : $st;
 $2 = HEAP32[$$01>>2]|0;
 $3 = ($src|0)==(0|0);
 L1: do {
  if ($3) {
   $4 = ($2|0)==(0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $5 = ($wc|0)==(0|0);
   if ($5) {
    HEAP32[$0>>2] = $0;
    $11 = $0;
   } else {
    $11 = $wc;
   }
   $6 = ($n|0)==(0);
   if ($6) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($2|0)==(0);
   do {
    if ($7) {
     $8 = HEAP8[$src]|0;
     $9 = $8&255;
     $10 = ($8<<24>>24)>(-1);
     if ($10) {
      HEAP32[$11>>2] = $9;
      $12 = ($8<<24>>24)!=(0);
      $13 = $12&1;
      $$0 = $13;
      STACKTOP = sp;return ($$0|0);
     } else {
      $14 = (($9) + -194)|0;
      $15 = ($14>>>0)>(50);
      if ($15) {
       break L1;
      }
      $16 = (($src) + 1|0);
      $17 = (26448 + ($14<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (($n) + -1)|0;
      $$02 = $19;$c$0 = $18;$s$0 = $16;
      break;
     }
    } else {
     $$02 = $n;$c$0 = $2;$s$0 = $src;
    }
   } while(0);
   $20 = ($$02|0)==(0);
   L19: do {
    if ($20) {
     $c$2 = $c$0;
    } else {
     $21 = HEAP8[$s$0]|0;
     $22 = $21&255;
     $23 = $22 >>> 3;
     $24 = (($23) + -16)|0;
     $25 = $c$0 >> 26;
     $26 = (($23) + ($25))|0;
     $27 = $24 | $26;
     $28 = ($27>>>0)>(7);
     if ($28) {
      break L1;
     } else {
      $$1 = $$02;$32 = $21;$c$1 = $c$0;$s$1 = $s$0;
     }
     while(1) {
      $29 = $c$1 << 6;
      $30 = (($s$1) + 1|0);
      $31 = $32&255;
      $33 = (($31) + -128)|0;
      $34 = $33 | $29;
      $35 = (($$1) + -1)|0;
      $36 = ($34|0)<(0);
      if (!($36)) {
       break;
      }
      $38 = ($35|0)==(0);
      if ($38) {
       $c$2 = $34;
       break L19;
      }
      $39 = HEAP8[$30]|0;
      $40 = $39&255;
      $41 = (($40) + -128)|0;
      $42 = ($41>>>0)>(63);
      if ($42) {
       break L1;
      } else {
       $$1 = $35;$32 = $39;$c$1 = $34;$s$1 = $30;
      }
     }
     HEAP32[$$01>>2] = 0;
     HEAP32[$11>>2] = $34;
     $37 = (($n) - ($35))|0;
     $$0 = $37;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   HEAP32[$$01>>2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$01>>2] = 0;
 $43 = (___errno_location()|0);
 HEAP32[$43>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
 $wcs = $wcs|0;
 $src = $src|0;
 $n = $n|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$026 = 0, $$04$ = 0, $$0423 = 0, $$1 = 0, $$15 = 0, $$214 = 0, $$26 = 0, $$311 = 0, $$pr$pre = 0, $$pr41 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$024 = 0, $cnt$1 = 0, $cnt$212 = 0, $cnt$3 = 0, $or$cond = 0, $or$cond22 = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond810 = 0, $s = 0, $wbuf = 0, $wcs$ = 0, $wn$ = 0, $ws$018 = 0, $ws$025 = 0, $ws$1 = 0;
 var $ws$213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0;
 $wbuf = sp + 8|0;
 $s = sp;
 $0 = HEAP32[$src>>2]|0;
 HEAP32[$s>>2] = $0;
 $1 = ($wcs|0)!=(0|0);
 $wn$ = $1 ? $wn : 256;
 $wcs$ = $1 ? $wcs : $wbuf;
 $2 = ($0|0)==(0|0);
 $3 = ($wn$|0)==(0);
 $or$cond22 = $2 | $3;
 L1: do {
  if ($or$cond22) {
   $$1 = $n;$$26 = $wn$;$18 = $0;$cnt$1 = 0;$ws$018 = $wcs$;
  } else {
   $$026 = $n;$$0423 = $wn$;$$pr41 = $0;$cnt$024 = 0;$ws$025 = $wcs$;
   while(1) {
    $4 = $$026 >>> 2;
    $5 = ($4>>>0)>=($$0423>>>0);
    $6 = ($$026>>>0)>(131);
    $or$cond7 = $5 | $6;
    if (!($or$cond7)) {
     $$1 = $$026;$$26 = $$0423;$18 = $$pr41;$cnt$1 = $cnt$024;$ws$018 = $ws$025;
     break L1;
    }
    $$04$ = $5 ? $$0423 : $4;
    $7 = (($$026) - ($$04$))|0;
    $8 = (_mbsrtowcs($ws$025,$s,$$04$,$st)|0);
    $9 = ($8|0)==(-1);
    if ($9) {
     break;
    }
    $10 = ($ws$025|0)==($wbuf|0);
    if ($10) {
     $$15 = $$0423;$ws$1 = $wbuf;
    } else {
     $11 = (($ws$025) + ($8<<2)|0);
     $12 = (($$0423) - ($8))|0;
     $$15 = $12;$ws$1 = $11;
    }
    $13 = (($8) + ($cnt$024))|0;
    $14 = HEAP32[$s>>2]|0;
    $15 = ($14|0)==(0|0);
    $16 = ($$15|0)==(0);
    $or$cond = $15 | $16;
    if ($or$cond) {
     $$1 = $7;$$26 = $$15;$18 = $14;$cnt$1 = $13;$ws$018 = $ws$1;
     break L1;
    } else {
     $$026 = $7;$$0423 = $$15;$$pr41 = $14;$cnt$024 = $13;$ws$025 = $ws$1;
    }
   }
   $$pr$pre = HEAP32[$s>>2]|0;
   $$1 = $7;$$26 = 0;$18 = $$pr$pre;$cnt$1 = -1;$ws$018 = $ws$025;
  }
 } while(0);
 $17 = ($18|0)==(0|0);
 L11: do {
  if ($17) {
   $cnt$3 = $cnt$1;
  } else {
   $19 = ($$26|0)==(0);
   $20 = ($$1|0)==(0);
   $or$cond810 = $19 | $20;
   if ($or$cond810) {
    $cnt$3 = $cnt$1;
   } else {
    $$214 = $$1;$$311 = $$26;$21 = $18;$cnt$212 = $cnt$1;$ws$213 = $ws$018;
    while(1) {
     $22 = (_mbrtowc($ws$213,$21,$$214,$st)|0);
     $23 = (($22) + 2)|0;
     $24 = ($23>>>0)<(3);
     if ($24) {
      break;
     }
     $25 = HEAP32[$s>>2]|0;
     $26 = (($25) + ($22)|0);
     HEAP32[$s>>2] = $26;
     $27 = (($$214) - ($22))|0;
     $28 = (($ws$213) + 4|0);
     $29 = (($$311) + -1)|0;
     $30 = (($cnt$212) + 1)|0;
     $31 = ($29|0)==(0);
     $32 = ($$214|0)==($22|0);
     $or$cond8 = $31 | $32;
     if ($or$cond8) {
      $cnt$3 = $30;
      break L11;
     } else {
      $$214 = $27;$$311 = $29;$21 = $26;$cnt$212 = $30;$ws$213 = $28;
     }
    }
    if ((($22|0) == -1)) {
     $cnt$3 = -1;
     break;
    } else if ((($22|0) == 0)) {
     HEAP32[$s>>2] = 0;
     $cnt$3 = $cnt$212;
     break;
    } else {
     HEAP32[$st>>2] = 0;
     $cnt$3 = $cnt$212;
     break;
    }
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $33 = HEAP32[$s>>2]|0;
 HEAP32[$src>>2] = $33;
 STACKTOP = sp;return ($cnt$3|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$01$ph = 0, $$0123 = 0, $$02 = 0, $$113 = 0, $$13$lcssa = 0, $$137 = 0, $$2 = 0, $$24 = 0, $$3 = 0, $$35 = 0, $$4 = 0, $$441 = 0, $$442 = 0, $$46$ph = 0, $$4622 = 0, $$512 = 0, $$6 = 0, $$7 = 0, $$8 = 0;
 var $$840 = 0, $$in = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $or$cond = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0;
 var $s$1043 = 0, $s$1044 = 0, $s$18 = 0, $s$2 = 0, $s$3 = 0, $s$4 = 0, $s$5$ph = 0, $s$524 = 0, $s$614 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $1 = ($st|0)==(0|0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$st>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   label = 5;
  } else {
   $4 = ($ws|0)==(0|0);
   if ($4) {
    $$35 = $wn;$c$2 = $2;$s$3 = $0;
    label = 16;
   } else {
    HEAP32[$st>>2] = 0;
    $$3 = $ws;$$7 = $wn;$c$4 = $2;$s$8 = $0;
    label = 36;
   }
  }
 }
 if ((label|0) == 5) {
  $5 = ($ws|0)==(0|0);
  if ($5) {
   $$02 = $wn;$s$0 = $0;
   label = 7;
  } else {
   $$01$ph = $ws;$$46$ph = $wn;$s$5$ph = $0;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $6 = ($$46$ph|0)==(0);
   if ($6) {
    $$0 = $wn;
    label = 53;
    break;
   } else {
    $$0123 = $$01$ph;$$4622 = $$46$ph;$s$524 = $s$5$ph;
   }
   while(1) {
    $65 = HEAP8[$s$524]|0;
    $66 = $65&255;
    $67 = (($66) + -1)|0;
    $68 = ($67>>>0)<(127);
    do {
     if ($68) {
      $69 = $s$524;
      $70 = $69 & 3;
      $71 = ($70|0)==(0);
      $72 = ($$4622>>>0)>(3);
      $or$cond = $71 & $72;
      if ($or$cond) {
       $$113 = $$0123;$$512 = $$4622;$s$614 = $s$524;
       while(1) {
        $73 = HEAP32[$s$614>>2]|0;
        $74 = (($73) + -16843009)|0;
        $75 = $74 | $73;
        $76 = $75 & -2139062144;
        $77 = ($76|0)==(0);
        if (!($77)) {
         label = 30;
         break;
        }
        $78 = (($s$614) + 1|0);
        $79 = $73 & 255;
        $80 = (($$113) + 4|0);
        HEAP32[$$113>>2] = $79;
        $81 = (($s$614) + 2|0);
        $82 = HEAP8[$78]|0;
        $83 = $82&255;
        $84 = (($$113) + 8|0);
        HEAP32[$80>>2] = $83;
        $85 = (($s$614) + 3|0);
        $86 = HEAP8[$81]|0;
        $87 = $86&255;
        $88 = (($$113) + 12|0);
        HEAP32[$84>>2] = $87;
        $89 = (($s$614) + 4|0);
        $90 = HEAP8[$85]|0;
        $91 = $90&255;
        $92 = (($$113) + 16|0);
        HEAP32[$88>>2] = $91;
        $93 = (($$512) + -4)|0;
        $94 = ($93>>>0)>(3);
        if ($94) {
         $$113 = $92;$$512 = $93;$s$614 = $89;
        } else {
         label = 31;
         break;
        }
       }
       if ((label|0) == 30) {
        label = 0;
        $95 = $73&255;
        $$2 = $$113;$$6 = $$512;$97 = $95;$s$7 = $s$614;
        break;
       }
       else if ((label|0) == 31) {
        label = 0;
        $$pre$pre = HEAP8[$89]|0;
        $$2 = $92;$$6 = $93;$97 = $$pre$pre;$s$7 = $89;
        break;
       }
      } else {
       $$2 = $$0123;$$6 = $$4622;$97 = $65;$s$7 = $s$524;
      }
     } else {
      $$2 = $$0123;$$6 = $$4622;$97 = $65;$s$7 = $s$524;
     }
    } while(0);
    $96 = $97&255;
    $98 = (($96) + -1)|0;
    $99 = ($98>>>0)<(127);
    if (!($99)) {
     break;
    }
    $100 = (($s$7) + 1|0);
    $101 = (($$2) + 4|0);
    HEAP32[$$2>>2] = $96;
    $102 = (($$6) + -1)|0;
    $103 = ($102|0)==(0);
    if ($103) {
     $$0 = $wn;
     label = 53;
     break L7;
    } else {
     $$0123 = $101;$$4622 = $102;$s$524 = $100;
    }
   }
   $104 = (($96) + -194)|0;
   $105 = ($104>>>0)>(50);
   if ($105) {
    $$442 = $$2;$$840 = $$6;$s$1044 = $s$7;
    label = 47;
    break;
   }
   $106 = (($s$7) + 1|0);
   $107 = (26448 + ($104<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $$3 = $$2;$$7 = $$6;$c$4 = $108;$s$8 = $106;
   label = 36;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $7 = HEAP8[$s$0]|0;
   $8 = $7&255;
   $9 = (($8) + -1)|0;
   $10 = ($9>>>0)<(127);
   if ($10) {
    $11 = $s$0;
    $12 = $11 & 3;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = HEAP32[$s$0>>2]|0;
     $15 = (($14) + -16843009)|0;
     $16 = $15 | $14;
     $17 = $16 & -2139062144;
     $18 = ($17|0)==(0);
     if ($18) {
      $$137 = $$02;$s$18 = $s$0;
      while(1) {
       $19 = (($s$18) + 4|0);
       $20 = (($$137) + -4)|0;
       $21 = HEAP32[$19>>2]|0;
       $22 = (($21) + -16843009)|0;
       $23 = $22 | $21;
       $24 = $23 & -2139062144;
       $25 = ($24|0)==(0);
       if ($25) {
        $$137 = $20;$s$18 = $19;
       } else {
        $$13$lcssa = $20;$$in = $21;$s$1$lcssa = $19;
        break;
       }
      }
     } else {
      $$13$lcssa = $$02;$$in = $14;$s$1$lcssa = $s$0;
     }
     $26 = $$in&255;
     $$24 = $$13$lcssa;$28 = $26;$s$2 = $s$1$lcssa;
    } else {
     $$24 = $$02;$28 = $7;$s$2 = $s$0;
    }
   } else {
    $$24 = $$02;$28 = $7;$s$2 = $s$0;
   }
   $27 = $28&255;
   $29 = (($27) + -1)|0;
   $30 = ($29>>>0)<(127);
   if ($30) {
    $31 = (($s$2) + 1|0);
    $32 = (($$24) + -1)|0;
    $$02 = $32;$s$0 = $31;
    label = 7;
    continue;
   }
   $33 = (($27) + -194)|0;
   $34 = ($33>>>0)>(50);
   if ($34) {
    $$442 = $ws;$$840 = $$24;$s$1044 = $s$2;
    label = 47;
    break;
   }
   $35 = (($s$2) + 1|0);
   $36 = (26448 + ($33<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $$35 = $$24;$c$2 = $37;$s$3 = $35;
   label = 16;
   continue;
  }
  else if ((label|0) == 16) {
   label = 0;
   $38 = HEAP8[$s$3]|0;
   $39 = $38&255;
   $40 = $39 >>> 3;
   $41 = (($40) + -16)|0;
   $42 = $c$2 >> 26;
   $43 = (($40) + ($42))|0;
   $44 = $41 | $43;
   $45 = ($44>>>0)>(7);
   if ($45) {
    label = 17;
    break;
   }
   $47 = (($s$3) + 1|0);
   $48 = $c$2 & 33554432;
   $49 = ($48|0)==(0);
   if ($49) {
    $s$4 = $47;
   } else {
    $50 = HEAP8[$47]|0;
    $51 = $50&255;
    $52 = (($51) + -128)|0;
    $53 = ($52>>>0)>(63);
    if ($53) {
     label = 20;
     break;
    }
    $55 = (($s$3) + 2|0);
    $56 = $c$2 & 524288;
    $57 = ($56|0)==(0);
    if ($57) {
     $s$4 = $55;
    } else {
     $58 = HEAP8[$55]|0;
     $59 = $58&255;
     $60 = (($59) + -128)|0;
     $61 = ($60>>>0)>(63);
     if ($61) {
      label = 23;
      break;
     }
     $63 = (($s$3) + 3|0);
     $s$4 = $63;
    }
   }
   $64 = (($$35) + -1)|0;
   $$02 = $64;$s$0 = $s$4;
   label = 7;
   continue;
  }
  else if ((label|0) == 36) {
   label = 0;
   $109 = HEAP8[$s$8]|0;
   $110 = $109&255;
   $111 = $110 >>> 3;
   $112 = (($111) + -16)|0;
   $113 = $c$4 >> 26;
   $114 = (($111) + ($113))|0;
   $115 = $112 | $114;
   $116 = ($115>>>0)>(7);
   if ($116) {
    label = 37;
    break;
   }
   $118 = $c$4 << 6;
   $119 = (($s$8) + 1|0);
   $120 = (($110) + -128)|0;
   $121 = $120 | $118;
   $122 = ($121|0)<(0);
   if ($122) {
    $123 = HEAP8[$119]|0;
    $124 = $123&255;
    $125 = (($124) + -128)|0;
    $126 = ($125>>>0)>(63);
    if ($126) {
     label = 40;
     break;
    }
    $128 = $121 << 6;
    $129 = (($s$8) + 2|0);
    $130 = $125 | $128;
    $131 = ($130|0)<(0);
    if ($131) {
     $132 = HEAP8[$129]|0;
     $133 = $132&255;
     $134 = (($133) + -128)|0;
     $135 = ($134>>>0)>(63);
     if ($135) {
      label = 43;
      break;
     }
     $137 = $130 << 6;
     $138 = (($s$8) + 3|0);
     $139 = $134 | $137;
     $c$5 = $139;$s$9 = $138;
    } else {
     $c$5 = $130;$s$9 = $129;
    }
   } else {
    $c$5 = $121;$s$9 = $119;
   }
   $140 = (($$3) + 4|0);
   HEAP32[$$3>>2] = $c$5;
   $141 = (($$7) + -1)|0;
   $$01$ph = $140;$$46$ph = $141;$s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 17) {
  $46 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $46;
  label = 46;
 }
 else if ((label|0) == 20) {
  $54 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $54;
  label = 46;
 }
 else if ((label|0) == 23) {
  $62 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $62;
  label = 46;
 }
 else if ((label|0) == 37) {
  $117 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $117;
  label = 46;
 }
 else if ((label|0) == 40) {
  $127 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $121;$s$10 = $127;
  label = 46;
 }
 else if ((label|0) == 43) {
  $136 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $130;$s$10 = $136;
  label = 46;
 }
 else if ((label|0) == 53) {
  STACKTOP = sp;return ($$0|0);
 }
 if ((label|0) == 46) {
  $142 = ($c$6|0)==(0);
  if ($142) {
   $$442 = $$4;$$840 = $$8;$s$1044 = $s$10;
   label = 47;
  } else {
   $$441 = $$4;$s$1043 = $s$10;
  }
 }
 if ((label|0) == 47) {
  $143 = HEAP8[$s$1044]|0;
  $144 = ($143<<24>>24)==(0);
  if ($144) {
   $145 = ($$442|0)==(0|0);
   if (!($145)) {
    HEAP32[$$442>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $146 = (($wn) - ($$840))|0;
   $$0 = $146;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$441 = $$442;$s$1043 = $s$1044;
  }
 }
 $147 = (___errno_location()|0);
 HEAP32[$147>>2] = 84;
 $148 = ($$441|0)==(0|0);
 if ($148) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$src>>2] = $s$1043;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($src|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($n|0)==(0);
 do {
  if (!($2)) {
   $3 = ($wc|0)==(0|0);
   if ($3) {
    HEAP32[$0>>2] = $0;
    $7 = $0;
   } else {
    $7 = $wc;
   }
   $4 = HEAP8[$src]|0;
   $5 = $4&255;
   $6 = ($4<<24>>24)>(-1);
   if ($6) {
    HEAP32[$7>>2] = $5;
    $8 = ($4<<24>>24)!=(0);
    $9 = $8&1;
    $$0 = $9;
    STACKTOP = sp;return ($$0|0);
   }
   $10 = (($5) + -194)|0;
   $11 = ($10>>>0)>(50);
   if (!($11)) {
    $12 = (($src) + 1|0);
    $13 = (26448 + ($10<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($n>>>0)<(4);
    if ($15) {
     $16 = ($n*6)|0;
     $17 = (($16) + -6)|0;
     $18 = -2147483648 >>> $17;
     $19 = $14 & $18;
     $20 = ($19|0)==(0);
     if (!($20)) {
      break;
     }
    }
    $21 = HEAP8[$12]|0;
    $22 = $21&255;
    $23 = $22 >>> 3;
    $24 = (($23) + -16)|0;
    $25 = $14 >> 26;
    $26 = (($23) + ($25))|0;
    $27 = $24 | $26;
    $28 = ($27>>>0)>(7);
    if (!($28)) {
     $29 = $14 << 6;
     $30 = (($22) + -128)|0;
     $31 = $30 | $29;
     $32 = ($31|0)<(0);
     if (!($32)) {
      HEAP32[$7>>2] = $31;
      $$0 = 2;
      STACKTOP = sp;return ($$0|0);
     }
     $33 = (($src) + 2|0);
     $34 = HEAP8[$33]|0;
     $35 = $34&255;
     $36 = (($35) + -128)|0;
     $37 = ($36>>>0)>(63);
     if (!($37)) {
      $38 = $31 << 6;
      $39 = $36 | $38;
      $40 = ($39|0)<(0);
      if (!($40)) {
       HEAP32[$7>>2] = $39;
       $$0 = 3;
       STACKTOP = sp;return ($$0|0);
      }
      $41 = (($src) + 3|0);
      $42 = HEAP8[$41]|0;
      $43 = $42&255;
      $44 = (($43) + -128)|0;
      $45 = ($44>>>0)>(63);
      if (!($45)) {
       $46 = $39 << 6;
       $47 = $44 | $46;
       HEAP32[$7>>2] = $47;
       $$0 = 4;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
   }
  }
 } while(0);
 $48 = (___errno_location()|0);
 HEAP32[$48>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = (($wc) + -57344)|0;
 $13 = ($12>>>0)<(8192);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
 $dst = $dst|0;
 $wcs = $wcs|0;
 $wn = $wn|0;
 $n = $n|0;
 $st = $st|0;
 var $$026 = 0, $$04$$0 = 0, $$0423 = 0, $$1 = 0, $$15 = 0, $$214 = 0, $$26 = 0, $$311 = 0, $$pr$pre = 0, $$pr41 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cnt$024 = 0, $cnt$1 = 0, $cnt$212 = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $or$cond = 0, $or$cond22 = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond810 = 0, $s$018 = 0, $s$025 = 0, $s$1 = 0;
 var $s$213 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $buf = sp + 8|0;
 $ws = sp;
 $0 = HEAP32[$wcs>>2]|0;
 HEAP32[$ws>>2] = $0;
 $1 = ($dst|0)!=(0|0);
 $n$ = $1 ? $n : 256;
 $dst$ = $1 ? $dst : $buf;
 $2 = ($0|0)==(0|0);
 $3 = ($n$|0)==(0);
 $or$cond22 = $2 | $3;
 L1: do {
  if ($or$cond22) {
   $$1 = $wn;$$26 = $n$;$17 = $0;$cnt$1 = 0;$s$018 = $dst$;
  } else {
   $$026 = $wn;$$0423 = $n$;$$pr41 = $0;$cnt$024 = 0;$s$025 = $dst$;
   while(1) {
    $4 = ($$026>>>0)>=($$0423>>>0);
    $5 = ($$026>>>0)>(32);
    $or$cond7 = $4 | $5;
    if (!($or$cond7)) {
     $$1 = $$026;$$26 = $$0423;$17 = $$pr41;$cnt$1 = $cnt$024;$s$018 = $s$025;
     break L1;
    }
    $$04$$0 = $4 ? $$0423 : $$026;
    $6 = (($$026) - ($$04$$0))|0;
    $7 = (_wcsrtombs($s$025,$ws,$$04$$0,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     break;
    }
    $9 = ($s$025|0)==($buf|0);
    if ($9) {
     $$15 = $$0423;$s$1 = $buf;
    } else {
     $10 = (($s$025) + ($7)|0);
     $11 = (($$0423) - ($7))|0;
     $$15 = $11;$s$1 = $10;
    }
    $12 = (($7) + ($cnt$024))|0;
    $13 = HEAP32[$ws>>2]|0;
    $14 = ($13|0)==(0|0);
    $15 = ($$15|0)==(0);
    $or$cond = $14 | $15;
    if ($or$cond) {
     $$1 = $6;$$26 = $$15;$17 = $13;$cnt$1 = $12;$s$018 = $s$1;
     break L1;
    } else {
     $$026 = $6;$$0423 = $$15;$$pr41 = $13;$cnt$024 = $12;$s$025 = $s$1;
    }
   }
   $$pr$pre = HEAP32[$ws>>2]|0;
   $$1 = $6;$$26 = 0;$17 = $$pr$pre;$cnt$1 = -1;$s$018 = $s$025;
  }
 } while(0);
 $16 = ($17|0)==(0|0);
 L11: do {
  if ($16) {
   $cnt$3 = $cnt$1;
  } else {
   $18 = ($$26|0)==(0);
   $19 = ($$1|0)==(0);
   $or$cond810 = $18 | $19;
   if ($or$cond810) {
    $cnt$3 = $cnt$1;
   } else {
    $$214 = $$1;$$311 = $$26;$21 = $17;$cnt$212 = $cnt$1;$s$213 = $s$018;
    while(1) {
     $20 = HEAP32[$21>>2]|0;
     $22 = (_wcrtomb($s$213,$20,0)|0);
     $23 = (($22) + 1)|0;
     $24 = ($23>>>0)<(2);
     if ($24) {
      break;
     }
     $26 = HEAP32[$ws>>2]|0;
     $27 = (($26) + 4|0);
     HEAP32[$ws>>2] = $27;
     $28 = (($$214) + -1)|0;
     $29 = (($s$213) + ($22)|0);
     $30 = (($$311) - ($22))|0;
     $31 = (($cnt$212) + 1)|0;
     $32 = ($$311|0)==($22|0);
     $33 = ($28|0)==(0);
     $or$cond8 = $32 | $33;
     if ($or$cond8) {
      $cnt$3 = $31;
      break L11;
     } else {
      $$214 = $28;$$311 = $30;$21 = $27;$cnt$212 = $31;$s$213 = $29;
     }
    }
    $25 = ($22|0)==(0);
    if ($25) {
     HEAP32[$ws>>2] = 0;
     $cnt$3 = $cnt$212;
    } else {
     $cnt$3 = -1;
    }
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $34 = HEAP32[$ws>>2]|0;
 HEAP32[$wcs>>2] = $34;
 STACKTOP = sp;return ($cnt$3|0);
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$02$lcssa = 0, $$0226 = 0, $$038 = 0, $$1 = 0, $$14 = 0, $$219 = 0, $$25$lcssa = 0, $$2525 = 0, $$3 = 0, $$36 = 0, $$414 = 0, $$418 = 0, $$5 = 0, $$pn = 0, $$pre = 0, $$pre40 = 0, $$pre41 = 0, $$pre42 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ws2$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $buf = sp;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $2 = HEAP32[$ws>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$038 = 0;$6 = $3;$ws2$09 = $2;
  }
  while(1) {
   $5 = ($6>>>0)>(127);
   if ($5) {
    $7 = (_wcrtomb($buf,$6,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     $$0 = -1;
     label = 26;
     break;
    } else {
     $$pn = $7;
    }
   } else {
    $$pn = 1;
   }
   $$14 = (($$pn) + ($$038))|0;
   $9 = (($ws2$09) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $$0 = $$14;
    label = 26;
    break;
   } else {
    $$038 = $$14;$6 = $10;$ws2$09 = $9;
   }
  }
  if ((label|0) == 26) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1 = ($n>>>0)>(3);
 L14: do {
  if ($1) {
   $$pre41 = HEAP32[$ws>>2]|0;
   $$0226 = $s;$$2525 = $n;$13 = $$pre41;
   while(1) {
    $12 = HEAP32[$13>>2]|0;
    $14 = ($12|0)==(0);
    if ($14) {
     $$02$lcssa = $$0226;$$25$lcssa = $$2525;
     break L14;
    }
    $16 = ($12>>>0)>(127);
    if ($16) {
     $17 = (_wcrtomb($$0226,$12,0)|0);
     $18 = ($17|0)==(-1);
     if ($18) {
      $$0 = -1;
      break;
     }
     $19 = (($$0226) + ($17)|0);
     $20 = (($$2525) - ($17))|0;
     $$1 = $19;$$36 = $20;$25 = $13;
    } else {
     $21 = $12&255;
     $22 = (($$0226) + 1|0);
     HEAP8[$$0226] = $21;
     $23 = (($$2525) + -1)|0;
     $$pre42 = HEAP32[$ws>>2]|0;
     $$1 = $22;$$36 = $23;$25 = $$pre42;
    }
    $24 = (($25) + 4|0);
    HEAP32[$ws>>2] = $24;
    $26 = ($$36>>>0)>(3);
    if ($26) {
     $$0226 = $$1;$$2525 = $$36;$13 = $24;
    } else {
     $$02$lcssa = $$1;$$25$lcssa = $$36;
     break L14;
    }
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   $$02$lcssa = $s;$$25$lcssa = $n;
  }
 } while(0);
 $15 = ($$25$lcssa|0)==(0);
 L26: do {
  if ($15) {
   $$414 = 0;
  } else {
   $$pre = HEAP32[$ws>>2]|0;
   $$219 = $$02$lcssa;$$418 = $$25$lcssa;$28 = $$pre;
   while(1) {
    $27 = HEAP32[$28>>2]|0;
    $29 = ($27|0)==(0);
    if ($29) {
     label = 24;
     break;
    }
    $30 = ($27>>>0)>(127);
    if ($30) {
     $31 = (_wcrtomb($buf,$27,0)|0);
     $32 = ($31|0)==(-1);
     if ($32) {
      $$0 = -1;
      label = 26;
      break;
     }
     $33 = ($31>>>0)>($$418>>>0);
     if ($33) {
      label = 20;
      break;
     }
     $35 = HEAP32[$28>>2]|0;
     (_wcrtomb($$219,$35,0)|0);
     $36 = (($$219) + ($31)|0);
     $37 = (($$418) - ($31))|0;
     $$3 = $36;$$5 = $37;$42 = $28;
    } else {
     $38 = $27&255;
     $39 = (($$219) + 1|0);
     HEAP8[$$219] = $38;
     $40 = (($$418) + -1)|0;
     $$pre40 = HEAP32[$ws>>2]|0;
     $$3 = $39;$$5 = $40;$42 = $$pre40;
    }
    $41 = (($42) + 4|0);
    HEAP32[$ws>>2] = $41;
    $43 = ($$5|0)==(0);
    if ($43) {
     $$414 = 0;
     break L26;
    } else {
     $$219 = $$3;$$418 = $$5;$28 = $41;
    }
   }
   if ((label|0) == 20) {
    $34 = (($n) - ($$418))|0;
    $$0 = $34;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 24) {
    HEAP8[$$219] = 0;
    $$414 = $$418;
    break;
   }
   else if ((label|0) == 26) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$ws>>2] = 0;
 $44 = (($n) - ($$414))|0;
 $$0 = $44;
 STACKTOP = sp;return ($$0|0);
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$ = 0, $$$i = 0, $$0$be$i = 0, $$0$be$i20 = 0, $$0$i50 = 0, $$01$be$i = 0, $$01$be$i19 = 0, $$01$i5$i = 0, $$012$i = 0, $$012$i16 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$i3469 = 0, $$02$i72 = 0, $$02$us$i = 0, $$02$us$i32 = 0, $$03$i = 0, $$03$i15 = 0, $$66 = 0, $$67 = 0;
 var $$lcssa75 = 0, $$lcssa76 = 0, $$pre = 0, $$pre$i = 0, $$pre$i22 = 0, $$pre$i28 = 0, $$pre$i9 = 0, $$sum = 0, $$sum$i = 0, $$sum$i18 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $4$phi = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar$i = 0, $exitcond$i = 0, $exitcond$i31 = 0, $head$0$lcssa = 0, $head$077 = 0;
 var $head$1 = 0, $i$0 = 0, $i$0$lcssa$i = 0, $i$0$lcssa$i24 = 0, $i$01$us$i = 0, $i$01$us$i30 = 0, $i$04$i = 0, $i$04$i14 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $pshift$0$lcssa = 0, $pshift$078 = 0, $pshift$1 = 0, $pshift$2 = 0, $sum = 0, $sum$i = 0, $sum$i17 = 0, $tmp$i = 0, $tmp$i26 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944|0;
 $tmp$i26 = sp + 680|0;
 $tmp$i = sp + 424|0;
 $ar$i = sp;
 $lp = sp + 232|0;
 $0 = Math_imul($width, $nel)|0;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $$sum = (($0) - ($width))|0;
 $2 = (($lp) + 4|0);
 HEAP32[$2>>2] = $width;
 HEAP32[$lp>>2] = $width;
 $4 = $width;$6 = $width;$i$0 = 2;
 while(1) {
  $3 = (($4) + ($width))|0;
  $5 = (($3) + ($6))|0;
  $7 = (($lp) + ($i$0<<2)|0);
  HEAP32[$7>>2] = $5;
  $8 = ($5>>>0)<($0>>>0);
  $9 = (($i$0) + 1)|0;
  if ($8) {
   $4$phi = $6;$6 = $5;$i$0 = $9;$4 = $4$phi;
  } else {
   break;
  }
 }
 $10 = (0 - ($width))|0;
 $11 = (($base) + ($$sum)|0);
 $12 = ($$sum|0)>(0);
 if ($12) {
  $13 = ($width|0)==(0);
  $14 = ($width>>>0)>(256);
  $15 = $14 ? 256 : $width;
  $16 = ($15|0)==($width|0);
  $17 = $11;
  $19 = 1;$61 = 0;$head$077 = $base;$pshift$078 = 1;
  while(1) {
   $18 = $19 & 3;
   $20 = ($18|0)==(3);
   do {
    if ($20) {
     HEAP32[$ar$i>>2] = $head$077;
     $21 = ($pshift$078|0)>(1);
     L44: do {
      if ($21) {
       $$012$i = $pshift$078;$$03$i = $head$077;$27 = $head$077;$i$04$i = 1;
       while(1) {
        $22 = (($$03$i) + ($10)|0);
        $23 = (($$012$i) + -2)|0;
        $24 = (($lp) + ($23<<2)|0);
        $25 = HEAP32[$24>>2]|0;
        $sum$i = (($25) + ($width))|0;
        $$sum$i = (0 - ($sum$i))|0;
        $26 = (($$03$i) + ($$sum$i)|0);
        $28 = (FUNCTION_TABLE_iii[$cmp & 31]($27,$26)|0);
        $29 = ($28|0)>(-1);
        if ($29) {
         $30 = (FUNCTION_TABLE_iii[$cmp & 31]($27,$22)|0);
         $31 = ($30|0)>(-1);
         if ($31) {
          $i$0$lcssa$i = $i$04$i;
          break;
         }
        }
        $32 = (FUNCTION_TABLE_iii[$cmp & 31]($26,$22)|0);
        $33 = ($32|0)>(-1);
        $34 = (($i$04$i) + 1)|0;
        $35 = (($ar$i) + ($i$04$i<<2)|0);
        if ($33) {
         HEAP32[$35>>2] = $26;
         $36 = (($$012$i) + -1)|0;
         $$0$be$i = $26;$$01$be$i = $36;
        } else {
         HEAP32[$35>>2] = $22;
         $$0$be$i = $22;$$01$be$i = $23;
        }
        $37 = ($$01$be$i|0)>(1);
        if (!($37)) {
         $i$0$lcssa$i = $34;
         break;
        }
        $$pre$i = HEAP32[$ar$i>>2]|0;
        $$012$i = $$01$be$i;$$03$i = $$0$be$i;$27 = $$pre$i;$i$04$i = $34;
       }
       $38 = ($i$0$lcssa$i|0)<(2);
       if (!($38)) {
        $39 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
        HEAP32[$39>>2] = $tmp$i;
        if (!($13)) {
         $40 = ($i$0$lcssa$i|0)>(0);
         if ($40) {
          $$02$us$i = $width;$53 = $tmp$i;
         } else {
          $41 = HEAP32[$ar$i>>2]|0;
          _memcpy(($tmp$i|0),($41|0),($15|0))|0;
          if ($16) {
           break;
          } else {
           $$02$i72 = $width;$55 = $15;
          }
          while(1) {
           $54 = (($$02$i72) - ($55))|0;
           $56 = ($54>>>0)>(256);
           $57 = $56 ? 256 : $54;
           _memcpy(($tmp$i|0),($41|0),($57|0))|0;
           $58 = ($54|0)==($57|0);
           if ($58) {
            break L44;
           } else {
            $$02$i72 = $54;$55 = $57;
           }
          }
         }
         while(1) {
          $51 = ($$02$us$i>>>0)>(256);
          $43 = $51 ? 256 : $$02$us$i;
          $52 = HEAP32[$ar$i>>2]|0;
          _memcpy(($53|0),($52|0),($43|0))|0;
          $49 = $52;$i$01$us$i = 0;
          while(1) {
           $45 = (($ar$i) + ($i$01$us$i<<2)|0);
           $46 = (($i$01$us$i) + 1)|0;
           $47 = (($ar$i) + ($46<<2)|0);
           $48 = HEAP32[$47>>2]|0;
           _memcpy(($49|0),($48|0),($43|0))|0;
           $50 = (($49) + ($43)|0);
           HEAP32[$45>>2] = $50;
           $exitcond$i = ($46|0)==($i$0$lcssa$i|0);
           if ($exitcond$i) {
            break;
           } else {
            $49 = $48;$i$01$us$i = $46;
           }
          }
          $42 = ($$02$us$i|0)==($43|0);
          if ($42) {
           break L44;
          }
          $44 = (($$02$us$i) - ($43))|0;
          $$pre$i9 = HEAP32[$39>>2]|0;
          $$02$us$i = $44;$53 = $$pre$i9;
         }
        }
       }
      }
     } while(0);
     $59 = $19 >>> 2;
     $60 = $61 << 30;
     $62 = $59 | $60;
     $63 = $61 >>> 2;
     $64 = (($pshift$078) + 2)|0;
     $122 = $62;$182 = $63;$pshift$1 = $64;
    } else {
     $65 = (($pshift$078) + -1)|0;
     $66 = (($lp) + ($65<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = $head$077;
     $69 = (($17) - ($68))|0;
     $70 = ($67>>>0)<($69>>>0);
     L13: do {
      if ($70) {
       HEAP32[$ar$i>>2] = $head$077;
       $71 = ($pshift$078|0)>(1);
       if ($71) {
        $$012$i16 = $pshift$078;$$03$i15 = $head$077;$77 = $head$077;$i$04$i14 = 1;
        while(1) {
         $72 = (($$03$i15) + ($10)|0);
         $73 = (($$012$i16) + -2)|0;
         $74 = (($lp) + ($73<<2)|0);
         $75 = HEAP32[$74>>2]|0;
         $sum$i17 = (($75) + ($width))|0;
         $$sum$i18 = (0 - ($sum$i17))|0;
         $76 = (($$03$i15) + ($$sum$i18)|0);
         $78 = (FUNCTION_TABLE_iii[$cmp & 31]($77,$76)|0);
         $79 = ($78|0)>(-1);
         if ($79) {
          $80 = (FUNCTION_TABLE_iii[$cmp & 31]($77,$72)|0);
          $81 = ($80|0)>(-1);
          if ($81) {
           $i$0$lcssa$i24 = $i$04$i14;
           break;
          }
         }
         $82 = (FUNCTION_TABLE_iii[$cmp & 31]($76,$72)|0);
         $83 = ($82|0)>(-1);
         $84 = (($i$04$i14) + 1)|0;
         $85 = (($ar$i) + ($i$04$i14<<2)|0);
         if ($83) {
          HEAP32[$85>>2] = $76;
          $86 = (($$012$i16) + -1)|0;
          $$0$be$i20 = $76;$$01$be$i19 = $86;
         } else {
          HEAP32[$85>>2] = $72;
          $$0$be$i20 = $72;$$01$be$i19 = $73;
         }
         $87 = ($$01$be$i19|0)>(1);
         if (!($87)) {
          $i$0$lcssa$i24 = $84;
          break;
         }
         $$pre$i22 = HEAP32[$ar$i>>2]|0;
         $$012$i16 = $$01$be$i19;$$03$i15 = $$0$be$i20;$77 = $$pre$i22;$i$04$i14 = $84;
        }
        $88 = ($i$0$lcssa$i24|0)<(2);
        if (!($88)) {
         $89 = (($ar$i) + ($i$0$lcssa$i24<<2)|0);
         HEAP32[$89>>2] = $tmp$i26;
         if (!($13)) {
          $90 = ($i$0$lcssa$i24|0)>(0);
          if ($90) {
           $$02$us$i32 = $width;$103 = $tmp$i26;
          } else {
           $91 = HEAP32[$ar$i>>2]|0;
           _memcpy(($tmp$i26|0),($91|0),($15|0))|0;
           if ($16) {
            break;
           } else {
            $$02$i3469 = $width;$105 = $15;
           }
           while(1) {
            $104 = (($$02$i3469) - ($105))|0;
            $106 = ($104>>>0)>(256);
            $107 = $106 ? 256 : $104;
            _memcpy(($tmp$i26|0),($91|0),($107|0))|0;
            $108 = ($104|0)==($107|0);
            if ($108) {
             break L13;
            } else {
             $$02$i3469 = $104;$105 = $107;
            }
           }
          }
          while(1) {
           $101 = ($$02$us$i32>>>0)>(256);
           $93 = $101 ? 256 : $$02$us$i32;
           $102 = HEAP32[$ar$i>>2]|0;
           _memcpy(($103|0),($102|0),($93|0))|0;
           $99 = $102;$i$01$us$i30 = 0;
           while(1) {
            $95 = (($ar$i) + ($i$01$us$i30<<2)|0);
            $96 = (($i$01$us$i30) + 1)|0;
            $97 = (($ar$i) + ($96<<2)|0);
            $98 = HEAP32[$97>>2]|0;
            _memcpy(($99|0),($98|0),($93|0))|0;
            $100 = (($99) + ($93)|0);
            HEAP32[$95>>2] = $100;
            $exitcond$i31 = ($96|0)==($i$0$lcssa$i24|0);
            if ($exitcond$i31) {
             break;
            } else {
             $99 = $98;$i$01$us$i30 = $96;
            }
           }
           $92 = ($$02$us$i32|0)==($93|0);
           if ($92) {
            break L13;
           }
           $94 = (($$02$us$i32) - ($93))|0;
           $$pre$i28 = HEAP32[$89>>2]|0;
           $$02$us$i32 = $94;$103 = $$pre$i28;
          }
         }
        }
       }
      } else {
       _trinkle($head$077,$width,$cmp,$19,$61,$pshift$078,0,$lp);
      }
     } while(0);
     $109 = ($pshift$078|0)==(1);
     if ($109) {
      $110 = $61 << 1;
      $111 = $19 >>> 31;
      $112 = $111 | $110;
      $113 = $19 << 1;
      $122 = $113;$182 = $112;$pshift$1 = 0;
      break;
     } else {
      $114 = ($65>>>0)>(31);
      $115 = (($pshift$078) + -33)|0;
      $$ = $114 ? 0 : $19;
      $$66 = $114 ? $19 : $61;
      $$67 = $114 ? $115 : $65;
      $116 = $$66 << $$67;
      $117 = (32 - ($$67))|0;
      $118 = $$ >>> $117;
      $119 = $118 | $116;
      $120 = $$ << $$67;
      $122 = $120;$182 = $119;$pshift$1 = 1;
      break;
     }
    }
   } while(0);
   $121 = $122 | 1;
   $123 = (($head$077) + ($width)|0);
   $124 = ($123>>>0)<($11>>>0);
   if ($124) {
    $19 = $121;$61 = $182;$head$077 = $123;$pshift$078 = $pshift$1;
   } else {
    $$lcssa75 = $182;$$lcssa76 = $121;$head$0$lcssa = $123;$pshift$0$lcssa = $pshift$1;
    break;
   }
  }
 } else {
  $$lcssa75 = 0;$$lcssa76 = 1;$head$0$lcssa = $base;$pshift$0$lcssa = 1;
 }
 _trinkle($head$0$lcssa,$width,$cmp,$$lcssa76,$$lcssa75,$pshift$0$lcssa,0,$lp);
 $127 = $$lcssa76;$129 = $$lcssa75;$head$1 = $head$0$lcssa;$pshift$2 = $pshift$0$lcssa;
 while(1) {
  $125 = ($pshift$2|0)==(1);
  if ($125) {
   $126 = ($127|0)==(1);
   if ($126) {
    $128 = ($129|0)==(0);
    if ($128) {
     break;
    } else {
     label = 52;
    }
   }
  } else {
   label = 52;
  }
  if ((label|0) == 52) {
   label = 0;
   $130 = ($pshift$2|0)<(2);
   if (!($130)) {
    $162 = $129 << 2;
    $163 = $127 >>> 30;
    $164 = $163 | $162;
    $165 = (($pshift$2) + -2)|0;
    $166 = $127 << 1;
    $167 = $166 & 2147483646;
    $168 = $163 << 31;
    $169 = $167 | $168;
    $170 = $169 ^ 3;
    $171 = $164 >>> 1;
    $172 = (($lp) + ($165<<2)|0);
    $173 = HEAP32[$172>>2]|0;
    $sum = (($173) + ($width))|0;
    $$sum2 = (0 - ($sum))|0;
    $174 = (($head$1) + ($$sum2)|0);
    $175 = (($pshift$2) + -1)|0;
    _trinkle($174,$width,$cmp,$170,$171,$175,1,$lp);
    $176 = $171 << 1;
    $177 = $163 & 1;
    $178 = $176 | $177;
    $179 = $170 << 1;
    $180 = $179 | 1;
    $181 = (($head$1) + ($10)|0);
    _trinkle($181,$width,$cmp,$180,$178,$165,1,$lp);
    $127 = $180;$129 = $178;$head$1 = $181;$pshift$2 = $165;
    continue;
   }
  }
  $131 = (($127) + -1)|0;
  $132 = ($131|0)==(0);
  if ($132) {
   $152 = 32;
   label = 62;
  } else {
   $133 = $131 & 1;
   $134 = ($133|0)==(0);
   if ($134) {
    $$02$i$i = $131;$nTrailingZeros$03$i$i = 0;
    while(1) {
     $135 = (($nTrailingZeros$03$i$i) + 1)|0;
     $136 = $$02$i$i >>> 1;
     $137 = $136 & 1;
     $138 = ($137|0)==(0);
     if ($138) {
      $$02$i$i = $136;$nTrailingZeros$03$i$i = $135;
     } else {
      break;
     }
    }
    $139 = ($135|0)==(0);
    if ($139) {
     label = 57;
    } else {
     $150 = $135;
    }
   } else {
    label = 57;
   }
   if ((label|0) == 57) {
    label = 0;
    $140 = ($129|0)==(0);
    if ($140) {
     $$01$i5$i = 32;
    } else {
     $141 = $129 & 1;
     $142 = ($141|0)==(0);
     if ($142) {
      $$02$i3$i = $129;$nTrailingZeros$03$i2$i = 0;
      while(1) {
       $143 = (($nTrailingZeros$03$i2$i) + 1)|0;
       $144 = $$02$i3$i >>> 1;
       $145 = $144 & 1;
       $146 = ($145|0)==(0);
       if ($146) {
        $$02$i3$i = $144;$nTrailingZeros$03$i2$i = $143;
       } else {
        $$01$i5$i = $143;
        break;
       }
      }
     } else {
      $$01$i5$i = 0;
     }
    }
    $147 = (($$01$i5$i) + 32)|0;
    $148 = ($$01$i5$i|0)==(0);
    $$$i = $148 ? 0 : $147;
    $150 = $$$i;
   }
   $149 = ($150>>>0)>(31);
   if ($149) {
    $152 = $150;
    label = 62;
   } else {
    $$0$i50 = $150;$154 = $127;$157 = $129;$161 = $150;
   }
  }
  if ((label|0) == 62) {
   label = 0;
   $151 = (($152) + -32)|0;
   $$0$i50 = $151;$154 = $129;$157 = 0;$161 = $152;
  }
  $153 = $154 >>> $$0$i50;
  $155 = (32 - ($$0$i50))|0;
  $156 = $157 << $155;
  $158 = $156 | $153;
  $159 = $157 >>> $$0$i50;
  $160 = (($161) + ($pshift$2))|0;
  $$pre = (($head$1) + ($10)|0);
  $127 = $158;$129 = $159;$head$1 = $$pre;$pshift$2 = $160;
 }
 STACKTOP = sp;return;
}
function _trinkle($head,$width,$cmp,$pp$val,$pp$1$val,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp$val = $pp$val|0;
 $pp$1$val = $pp$1$val|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$$i = 0, $$0$be$i = 0, $$0$i = 0, $$0$lcssa = 0, $$0$lcssa26 = 0, $$01$be$i = 0, $$01$i5$i = 0, $$01$lcssa = 0, $$01$lcssa28 = 0, $$0110 = 0, $$012 = 0, $$012$i = 0, $$02$i$i = 0, $$02$i146 = 0, $$02$i3 = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$us$i = 0, $$02$us$i12 = 0, $$029 = 0;
 var $$03$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i3 = 0, $$pre$i8 = 0, $$sum = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar = 0, $ar$i = 0, $exitcond$i = 0, $exitcond$i11 = 0, $i$0$lcssa = 0, $i$0$lcssa$i = 0;
 var $i$0$lcssa27 = 0, $i$01$us$i = 0, $i$01$us$i10 = 0, $i$011 = 0, $i$04$i = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $or$cond = 0, $or$cond1 = 0, $or$cond18 = 0, $sum = 0, $sum$i = 0, $tmp$i = 0, $tmp$i6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 976|0;
 $tmp$i6 = sp + 712|0;
 $tmp$i = sp + 456|0;
 $ar$i = sp;
 $ar = sp + 228|0;
 HEAP32[$ar>>2] = $head;
 $0 = (0 - ($width))|0;
 $1 = ($pp$val|0)==(1);
 $2 = ($pp$1$val|0)==(0);
 $or$cond18 = $1 & $2;
 L1: do {
  if ($or$cond18) {
   $$0$lcssa = $head;$$01$lcssa = $pshift;$$02$lcssa = $trusty;$i$0$lcssa = 1;
   label = 18;
  } else {
   $$0110 = $pshift;$$012 = $head;$$029 = $trusty;$24 = $pp$val;$34 = $pp$1$val;$7 = $head;$i$011 = 1;
   while(1) {
    $3 = (($lp) + ($$0110<<2)|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (0 - ($4))|0;
    $6 = (($$012) + ($5)|0);
    $8 = (FUNCTION_TABLE_iii[$cmp & 31]($6,$7)|0);
    $9 = ($8|0)<(1);
    if ($9) {
     $$0$lcssa = $$012;$$01$lcssa = $$0110;$$02$lcssa = $$029;$i$0$lcssa = $i$011;
     label = 18;
     break L1;
    }
    $10 = ($$029|0)==(0);
    $11 = ($$0110|0)>(1);
    $or$cond = $10 & $11;
    if ($or$cond) {
     $12 = (($$012) + ($0)|0);
     $13 = (($$0110) + -2)|0;
     $14 = (($lp) + ($13<<2)|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (FUNCTION_TABLE_iii[$cmp & 31]($12,$6)|0);
     $17 = ($16|0)>(-1);
     if ($17) {
      $$0$lcssa26 = $$012;$$01$lcssa28 = $$0110;$i$0$lcssa27 = $i$011;
      break L1;
     }
     $sum = (($15) + ($width))|0;
     $$sum = (0 - ($sum))|0;
     $18 = (($$012) + ($$sum)|0);
     $19 = (FUNCTION_TABLE_iii[$cmp & 31]($18,$6)|0);
     $20 = ($19|0)>(-1);
     if ($20) {
      $$0$lcssa26 = $$012;$$01$lcssa28 = $$0110;$i$0$lcssa27 = $i$011;
      break L1;
     }
    }
    $21 = (($i$011) + 1)|0;
    $22 = (($ar) + ($i$011<<2)|0);
    HEAP32[$22>>2] = $6;
    $23 = (($24) + -1)|0;
    $25 = ($23|0)==(0);
    if ($25) {
     $46 = 32;
     label = 15;
    } else {
     $26 = $23 & 1;
     $27 = ($26|0)==(0);
     if ($27) {
      $$02$i$i = $23;$nTrailingZeros$03$i$i = 0;
      while(1) {
       $28 = (($nTrailingZeros$03$i$i) + 1)|0;
       $29 = $$02$i$i >>> 1;
       $30 = $29 & 1;
       $31 = ($30|0)==(0);
       if ($31) {
        $$02$i$i = $29;$nTrailingZeros$03$i$i = $28;
       } else {
        break;
       }
      }
      $32 = ($28|0)==(0);
      if ($32) {
       label = 10;
      } else {
       $44 = $28;
      }
     } else {
      label = 10;
     }
     if ((label|0) == 10) {
      label = 0;
      $33 = ($34|0)==(0);
      if ($33) {
       $$01$i5$i = 32;
      } else {
       $35 = $34 & 1;
       $36 = ($35|0)==(0);
       if ($36) {
        $$02$i3$i = $34;$nTrailingZeros$03$i2$i = 0;
        while(1) {
         $37 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $38 = $$02$i3$i >>> 1;
         $39 = $38 & 1;
         $40 = ($39|0)==(0);
         if ($40) {
          $$02$i3$i = $38;$nTrailingZeros$03$i2$i = $37;
         } else {
          $$01$i5$i = $37;
          break;
         }
        }
       } else {
        $$01$i5$i = 0;
       }
      }
      $41 = (($$01$i5$i) + 32)|0;
      $42 = ($$01$i5$i|0)==(0);
      $$$i = $42 ? 0 : $41;
      $44 = $$$i;
     }
     $43 = ($44>>>0)>(31);
     if ($43) {
      $46 = $44;
      label = 15;
     } else {
      $$0$i = $44;$48 = $24;$51 = $34;$55 = $44;
     }
    }
    if ((label|0) == 15) {
     label = 0;
     $45 = (($46) + -32)|0;
     $$0$i = $45;$48 = $34;$51 = 0;$55 = $46;
    }
    $47 = $48 >>> $$0$i;
    $49 = (32 - ($$0$i))|0;
    $50 = $51 << $49;
    $52 = $50 | $47;
    $53 = $51 >>> $$0$i;
    $54 = (($55) + ($$0110))|0;
    $56 = ($52|0)==(1);
    $57 = ($53|0)==(0);
    $or$cond1 = $56 & $57;
    if ($or$cond1) {
     $$0$lcssa26 = $6;$$01$lcssa28 = $54;$i$0$lcssa27 = $21;
     break L1;
    }
    $$pre = HEAP32[$ar>>2]|0;
    $$0110 = $54;$$012 = $6;$$029 = 0;$24 = $52;$34 = $53;$7 = $$pre;$i$011 = $21;
   }
  }
 } while(0);
 if ((label|0) == 18) {
  $58 = ($$02$lcssa|0)==(0);
  if ($58) {
   $$0$lcssa26 = $$0$lcssa;$$01$lcssa28 = $$01$lcssa;$i$0$lcssa27 = $i$0$lcssa;
  } else {
   STACKTOP = sp;return;
  }
 }
 $59 = ($i$0$lcssa27|0)<(2);
 L31: do {
  if (!($59)) {
   $60 = (($ar) + ($i$0$lcssa27<<2)|0);
   HEAP32[$60>>2] = $tmp$i6;
   $61 = ($width|0)==(0);
   if (!($61)) {
    $62 = ($i$0$lcssa27|0)>(0);
    if ($62) {
     $$02$us$i12 = $width;$78 = $tmp$i6;
    } else {
     $63 = ($width>>>0)>(256);
     $64 = $63 ? 256 : $width;
     $65 = HEAP32[$ar>>2]|0;
     _memcpy(($tmp$i6|0),($65|0),($64|0))|0;
     $66 = ($64|0)==($width|0);
     if ($66) {
      break;
     } else {
      $$02$i146 = $width;$80 = $64;
     }
     while(1) {
      $79 = (($$02$i146) - ($80))|0;
      $81 = ($79>>>0)>(256);
      $82 = $81 ? 256 : $79;
      _memcpy(($tmp$i6|0),($65|0),($82|0))|0;
      $83 = ($79|0)==($82|0);
      if ($83) {
       break L31;
      } else {
       $$02$i146 = $79;$80 = $82;
      }
     }
    }
    while(1) {
     $76 = ($$02$us$i12>>>0)>(256);
     $68 = $76 ? 256 : $$02$us$i12;
     $77 = HEAP32[$ar>>2]|0;
     _memcpy(($78|0),($77|0),($68|0))|0;
     $74 = $77;$i$01$us$i10 = 0;
     while(1) {
      $70 = (($ar) + ($i$01$us$i10<<2)|0);
      $71 = (($i$01$us$i10) + 1)|0;
      $72 = (($ar) + ($71<<2)|0);
      $73 = HEAP32[$72>>2]|0;
      _memcpy(($74|0),($73|0),($68|0))|0;
      $75 = (($74) + ($68)|0);
      HEAP32[$70>>2] = $75;
      $exitcond$i11 = ($71|0)==($i$0$lcssa27|0);
      if ($exitcond$i11) {
       break;
      } else {
       $74 = $73;$i$01$us$i10 = $71;
      }
     }
     $67 = ($$02$us$i12|0)==($68|0);
     if ($67) {
      break L31;
     }
     $69 = (($$02$us$i12) - ($68))|0;
     $$pre$i8 = HEAP32[$60>>2]|0;
     $$02$us$i12 = $69;$78 = $$pre$i8;
    }
   }
  }
 } while(0);
 HEAP32[$ar$i>>2] = $$0$lcssa26;
 $84 = ($$01$lcssa28|0)>(1);
 L45: do {
  if ($84) {
   $$012$i = $$01$lcssa28;$$03$i = $$0$lcssa26;$90 = $$0$lcssa26;$i$04$i = 1;
   while(1) {
    $85 = (($$03$i) + ($0)|0);
    $86 = (($$012$i) + -2)|0;
    $87 = (($lp) + ($86<<2)|0);
    $88 = HEAP32[$87>>2]|0;
    $sum$i = (($88) + ($width))|0;
    $$sum$i = (0 - ($sum$i))|0;
    $89 = (($$03$i) + ($$sum$i)|0);
    $91 = (FUNCTION_TABLE_iii[$cmp & 31]($90,$89)|0);
    $92 = ($91|0)>(-1);
    if ($92) {
     $93 = (FUNCTION_TABLE_iii[$cmp & 31]($90,$85)|0);
     $94 = ($93|0)>(-1);
     if ($94) {
      $i$0$lcssa$i = $i$04$i;
      break;
     }
    }
    $95 = (FUNCTION_TABLE_iii[$cmp & 31]($89,$85)|0);
    $96 = ($95|0)>(-1);
    $97 = (($i$04$i) + 1)|0;
    $98 = (($ar$i) + ($i$04$i<<2)|0);
    if ($96) {
     HEAP32[$98>>2] = $89;
     $99 = (($$012$i) + -1)|0;
     $$0$be$i = $89;$$01$be$i = $99;
    } else {
     HEAP32[$98>>2] = $85;
     $$0$be$i = $85;$$01$be$i = $86;
    }
    $100 = ($$01$be$i|0)>(1);
    if (!($100)) {
     $i$0$lcssa$i = $97;
     break;
    }
    $$pre$i = HEAP32[$ar$i>>2]|0;
    $$012$i = $$01$be$i;$$03$i = $$0$be$i;$90 = $$pre$i;$i$04$i = $97;
   }
   $101 = ($i$0$lcssa$i|0)<(2);
   if ($101) {
    $126 = $tmp$i;
   } else {
    $102 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
    HEAP32[$102>>2] = $tmp$i;
    $103 = ($width|0)==(0);
    if ($103) {
     $126 = $tmp$i;
    } else {
     $104 = ($i$0$lcssa$i|0)>(0);
     if ($104) {
      $$02$us$i = $width;$120 = $tmp$i;
     } else {
      $105 = ($width>>>0)>(256);
      $106 = $105 ? 256 : $width;
      $107 = HEAP32[$ar$i>>2]|0;
      _memcpy(($tmp$i|0),($107|0),($106|0))|0;
      $108 = ($106|0)==($width|0);
      if ($108) {
       $126 = $tmp$i;
       break;
      } else {
       $$02$i3 = $width;$122 = $106;
      }
      while(1) {
       $121 = (($$02$i3) - ($122))|0;
       $123 = ($121>>>0)>(256);
       $124 = $123 ? 256 : $121;
       _memcpy(($tmp$i|0),($107|0),($124|0))|0;
       $125 = ($121|0)==($124|0);
       if ($125) {
        $126 = $tmp$i;
        break L45;
       } else {
        $$02$i3 = $121;$122 = $124;
       }
      }
     }
     while(1) {
      $118 = ($$02$us$i>>>0)>(256);
      $110 = $118 ? 256 : $$02$us$i;
      $119 = HEAP32[$ar$i>>2]|0;
      _memcpy(($120|0),($119|0),($110|0))|0;
      $116 = $119;$i$01$us$i = 0;
      while(1) {
       $112 = (($ar$i) + ($i$01$us$i<<2)|0);
       $113 = (($i$01$us$i) + 1)|0;
       $114 = (($ar$i) + ($113<<2)|0);
       $115 = HEAP32[$114>>2]|0;
       _memcpy(($116|0),($115|0),($110|0))|0;
       $117 = (($116) + ($110)|0);
       HEAP32[$112>>2] = $117;
       $exitcond$i = ($113|0)==($i$0$lcssa$i|0);
       if ($exitcond$i) {
        break;
       } else {
        $116 = $115;$i$01$us$i = $113;
       }
      }
      $109 = ($$02$us$i|0)==($110|0);
      if ($109) {
       $126 = $tmp$i;
       break L45;
      }
      $111 = (($$02$us$i) - ($110))|0;
      $$pre$i3 = HEAP32[$102>>2]|0;
      $$02$us$i = $111;$120 = $$pre$i3;
     }
    }
   }
  } else {
   $126 = $tmp$i;
  }
 } while(0);
 STACKTOP = sp;return;
}
function _strncat($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($d|0))|0);
 $1 = (($d) + ($0)|0);
 $2 = ($n|0)==(0);
 L1: do {
  if ($2) {
   $$0$lcssa = $1;
  } else {
   $$014 = $n;$$023 = $s;$$05 = $1;
   while(1) {
    $3 = HEAP8[$$023]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$0$lcssa = $$05;
     break L1;
    }
    $5 = (($$014) + -1)|0;
    $6 = (($$023) + 1|0);
    $7 = (($$05) + 1|0);
    HEAP8[$$05] = $3;
    $8 = ($5|0)==(0);
    if ($8) {
     $$0$lcssa = $7;
     break;
    } else {
     $$014 = $5;$$023 = $6;$$05 = $7;
    }
   }
  }
 } while(0);
 HEAP8[$$0$lcssa] = 0;
 STACKTOP = sp;return ($d|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0);
  $2 = (($$0) + 4|0);
  if ($1) {
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0;
 $4 = $s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 STACKTOP = sp;return ($6|0);
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  STACKTOP = sp;return ($d|0);
 } else {
  $$014 = $n;$$023 = $s;$$05 = $d;
 }
 while(1) {
  $1 = (($$014) + -1)|0;
  $2 = (($$023) + 4|0);
  $3 = HEAP32[$$023>>2]|0;
  $4 = (($$05) + 4|0);
  HEAP32[$$05>>2] = $3;
  $5 = ($1|0)==(0);
  if ($5) {
   break;
  } else {
   $$014 = $1;$$023 = $2;$$05 = $4;
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $d;
 $1 = $s;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)<($n>>>0);
 $5 = ($n|0)==(0);
 if ($4) {
  if (!($5)) {
   $$in = $n;
   while(1) {
    $6 = (($$in) + -1)|0;
    $7 = (($s) + ($6<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($d) + ($6<<2)|0);
    HEAP32[$9>>2] = $8;
    $10 = ($6|0)==(0);
    if ($10) {
     break;
    } else {
     $$in = $6;
    }
   }
  }
 } else {
  if (!($5)) {
   $$025 = $s;$$07 = $d;$$16 = $n;
   while(1) {
    $11 = (($$16) + -1)|0;
    $12 = (($$025) + 4|0);
    $13 = HEAP32[$$025>>2]|0;
    $14 = (($$07) + 4|0);
    HEAP32[$$07>>2] = $13;
    $15 = ($11|0)==(0);
    if ($15) {
     break;
    } else {
     $$025 = $12;$$07 = $14;$$16 = $11;
    }
   }
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if (!($0)) {
  $$012 = $n;$$03 = $d;
  while(1) {
   $1 = (($$012) + -1)|0;
   $2 = (($$03) + 4|0);
   HEAP32[$$03>>2] = $c;
   $3 = ($1|0)==(0);
   if ($3) {
    break;
   } else {
    $$012 = $1;$$03 = $2;
   }
  }
 }
 STACKTOP = sp;return ($d|0);
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt8bad_castC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((26672 + 8|0));
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9exceptionD2Ev(($this|0));
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9exceptionD2Ev(($this|0));
 STACKTOP = sp;return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (26696|0);
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $1 = ($thrown_type|0)==(0|0);
 if ($1) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $2 = (___dynamic_cast($thrown_type,26808,26864,0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$info>>2] = $2;
 $4 = (($info) + 8|0);
 HEAP32[$4>>2] = $this;
 $5 = (($info) + 12|0);
 HEAP32[$5>>2] = -1;
 $6 = (($info) + 48|0);
 HEAP32[$6>>2] = 1;
 $7 = HEAP32[$2>>2]|0;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$adjustedPtr>>2]|0;
 FUNCTION_TABLE_viiii[$9 & 15]($2,$info,$10,1);
 $11 = (($info) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(1);
 if (!($13)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $14 = (($info) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$adjustedPtr>>2] = $15;
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($info) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$3>>2] = $adjustedPtr;
  $6 = (($info) + 24|0);
  HEAP32[$6>>2] = $path_below;
  $7 = (($info) + 36|0);
  HEAP32[$7>>2] = 1;
  STACKTOP = sp;return;
 }
 $8 = ($4|0)==($adjustedPtr|0);
 if (!($8)) {
  $12 = (($info) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$12>>2] = $14;
  $15 = (($info) + 24|0);
  HEAP32[$15>>2] = 2;
  $16 = (($info) + 54|0);
  HEAP8[$16] = 1;
  STACKTOP = sp;return;
 }
 $9 = (($info) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(2);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 HEAP32[$9>>2] = $path_below;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if (!($2)) {
  $17 = (($this) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_viiii[$21 & 15]($18,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
 $3 = (($info) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$3>>2] = $adjustedPtr;
  $6 = (($info) + 24|0);
  HEAP32[$6>>2] = $path_below;
  $7 = (($info) + 36|0);
  HEAP32[$7>>2] = 1;
  STACKTOP = sp;return;
 }
 $8 = ($4|0)==($adjustedPtr|0);
 if (!($8)) {
  $12 = (($info) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$12>>2] = $14;
  $15 = (($info) + 24|0);
  HEAP32[$15>>2] = 2;
  $16 = (($info) + 54|0);
  HEAP8[$16] = 1;
  STACKTOP = sp;return;
 }
 $9 = (($info) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(2);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 HEAP32[$9>>2] = $path_below;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $offset_to_base$0$i = 0, $offset_to_base$0$i1 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   HEAP32[$3>>2] = $adjustedPtr;
   $6 = (($info) + 24|0);
   HEAP32[$6>>2] = $path_below;
   $7 = (($info) + 36|0);
   HEAP32[$7>>2] = 1;
   STACKTOP = sp;return;
  }
  $8 = ($4|0)==($adjustedPtr|0);
  if (!($8)) {
   $12 = (($info) + 36|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + 1)|0;
   HEAP32[$12>>2] = $14;
   $15 = (($info) + 24|0);
   HEAP32[$15>>2] = 2;
   $16 = (($info) + 54|0);
   HEAP8[$16] = 1;
   STACKTOP = sp;return;
  }
  $9 = (($info) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(2);
  if (!($11)) {
   STACKTOP = sp;return;
  }
  HEAP32[$9>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $17 = (($this) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($this) + ($18<<3)|0) + 16|0);
 $20 = (($this) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 >> 8;
 $23 = $21 & 1;
 $24 = ($23|0)==(0);
 if ($24) {
  $offset_to_base$0$i1 = $22;
 } else {
  $25 = HEAP32[$adjustedPtr>>2]|0;
  $26 = (($25) + ($22)|0);
  $27 = HEAP32[$26>>2]|0;
  $offset_to_base$0$i1 = $27;
 }
 $28 = (($this) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 28|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($adjustedPtr) + ($offset_to_base$0$i1)|0);
 $34 = $21 & 2;
 $35 = ($34|0)!=(0);
 $36 = $35 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$32 & 15]($29,$info,$33,$36);
 $37 = ($18|0)>(1);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = (($this) + 24|0);
 $39 = (($info) + 54|0);
 $p$0 = $38;
 while(1) {
  $40 = (($p$0) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 >> 8;
  $43 = $41 & 1;
  $44 = ($43|0)==(0);
  if ($44) {
   $offset_to_base$0$i = $42;
  } else {
   $45 = HEAP32[$adjustedPtr>>2]|0;
   $46 = (($45) + ($42)|0);
   $47 = HEAP32[$46>>2]|0;
   $offset_to_base$0$i = $47;
  }
  $48 = HEAP32[$p$0>>2]|0;
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + 28|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($adjustedPtr) + ($offset_to_base$0$i)|0);
  $53 = $41 & 2;
  $54 = ($53|0)!=(0);
  $55 = $54 ? $path_below : 2;
  FUNCTION_TABLE_viiii[$51 & 15]($48,$info,$52,$55);
  $56 = HEAP8[$39]|0;
  $57 = ($56<<24>>24)==(0);
  if (!($57)) {
   label = 16;
   break;
  }
  $58 = (($p$0) + 8|0);
  $59 = ($58>>>0)<($19>>>0);
  if ($59) {
   $p$0 = $58;
  } else {
   label = 16;
   break;
  }
 }
 if ((label|0) == 16) {
  STACKTOP = sp;return;
 }
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = (($0) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = (($0) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = (($info) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = (($info) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = (($info) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = (($info) + 16|0);
 $11 = (($info) + 20|0);
 $12 = (($info) + 24|0);
 $13 = (($info) + 28|0);
 $14 = (($info) + 32|0);
 $15 = (($info) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38|0]=0|0;
 if ($16) {
  $17 = (($info) + 48|0);
  HEAP32[$17>>2] = 1;
  $18 = HEAP32[$6>>2]|0;
  $19 = (($18) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  FUNCTION_TABLE_viiiiii[$20 & 15]($6,$info,$4,$4,1,0);
  $21 = HEAP32[$12>>2]|0;
  $22 = ($21|0)==(1);
  $$ = $22 ? $4 : 0;
  $dst_ptr$0 = $$;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 $23 = (($info) + 36|0);
 $24 = HEAP32[$6>>2]|0;
 $25 = (($24) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_viiiii[$26 & 3]($6,$info,$4,1,0);
 $27 = HEAP32[$23>>2]|0;
 if ((($27|0) == 0)) {
  $28 = HEAP32[$15>>2]|0;
  $29 = ($28|0)==(1);
  if (!($29)) {
   $dst_ptr$0 = 0;
   STACKTOP = sp;return ($dst_ptr$0|0);
  }
  $30 = HEAP32[$13>>2]|0;
  $31 = ($30|0)==(1);
  if (!($31)) {
   $dst_ptr$0 = 0;
   STACKTOP = sp;return ($dst_ptr$0|0);
  }
  $32 = HEAP32[$14>>2]|0;
  $33 = ($32|0)==(1);
  $34 = HEAP32[$11>>2]|0;
  $$1 = $33 ? $34 : 0;
  $dst_ptr$0 = $$1;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else if ((($27|0) == 1)) {
  $35 = HEAP32[$12>>2]|0;
  $36 = ($35|0)==(1);
  if (!($36)) {
   $37 = HEAP32[$15>>2]|0;
   $38 = ($37|0)==(0);
   if (!($38)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
   $39 = HEAP32[$13>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
   $41 = HEAP32[$14>>2]|0;
   $42 = ($41|0)==(1);
   if (!($42)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
  }
  $43 = HEAP32[$10>>2]|0;
  $dst_ptr$0 = $43;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else {
  $dst_ptr$0 = 0;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 return 0|0;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off019 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off021 = 0;
 var $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $is_dst_type_derived_from_static_type$2$off030 = 0, $is_dst_type_derived_from_static_type$2$off031 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i11 = 0, $offset_to_base$0$i13 = 0, $offset_to_base$0$i14 = 0, $offset_to_base$0$i9 = 0, $p$020 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if ($10) {
  $11 = (($info) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==($current_ptr|0);
  if (!($13)) {
   $14 = (($info) + 20|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==($current_ptr|0);
   if (!($16)) {
    $19 = (($info) + 32|0);
    HEAP32[$19>>2] = $path_below;
    $20 = (($info) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(4);
    if ($22) {
     STACKTOP = sp;return;
    }
    $23 = (($this) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($this) + ($24<<3)|0) + 16|0);
    $26 = ($24|0)>(0);
    L19: do {
     if ($26) {
      $27 = (($this) + 16|0);
      $28 = (($info) + 52|0);
      $29 = (($info) + 53|0);
      $30 = (($info) + 54|0);
      $31 = (($this) + 8|0);
      $32 = (($info) + 24|0);
      $does_dst_type_point_to_our_static_type$0$off019 = 0;$is_dst_type_derived_from_static_type$0$off021 = 0;$p$020 = $27;
      L21: while(1) {
       HEAP8[$28] = 0;
       HEAP8[$29] = 0;
       $33 = (($p$020) + 4|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = $34 >> 8;
       $36 = $34 & 1;
       $37 = ($36|0)==(0);
       if ($37) {
        $offset_to_base$0$i13 = $35;
       } else {
        $38 = HEAP32[$current_ptr>>2]|0;
        $39 = (($38) + ($35)|0);
        $40 = HEAP32[$39>>2]|0;
        $offset_to_base$0$i13 = $40;
       }
       $41 = HEAP32[$p$020>>2]|0;
       $42 = HEAP32[$41>>2]|0;
       $43 = (($42) + 20|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = (($current_ptr) + ($offset_to_base$0$i13)|0);
       $46 = $34 >>> 1;
       $47 = $46 & 1;
       $48 = (2 - ($47))|0;
       FUNCTION_TABLE_viiiiii[$44 & 15]($41,$info,$current_ptr,$45,$48,$use_strcmp);
       $49 = HEAP8[$30]|0;
       $50 = ($49<<24>>24)==(0);
       if (!($50)) {
        $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off021;
        break;
       }
       $51 = HEAP8[$29]|0;
       $52 = ($51<<24>>24)==(0);
       do {
        if ($52) {
         $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off021;
        } else {
         $53 = HEAP8[$28]|0;
         $54 = ($53<<24>>24)==(0);
         if ($54) {
          $60 = HEAP32[$31>>2]|0;
          $61 = $60 & 1;
          $62 = ($61|0)==(0);
          if ($62) {
           $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$2$off0 = 1;
           break L21;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$1$off0 = 1;
           break;
          }
         }
         $55 = HEAP32[$32>>2]|0;
         $56 = ($55|0)==(1);
         if ($56) {
          label = 27;
          break L19;
         }
         $57 = HEAP32[$31>>2]|0;
         $58 = $57 & 2;
         $59 = ($58|0)==(0);
         if ($59) {
          label = 27;
          break L19;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
         }
        }
       } while(0);
       $63 = (($p$020) + 8|0);
       $64 = ($63>>>0)<($25>>>0);
       if ($64) {
        $does_dst_type_point_to_our_static_type$0$off019 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off021 = $is_dst_type_derived_from_static_type$1$off0;$p$020 = $63;
       } else {
        $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
        break;
       }
      }
      if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
       $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off0;
       label = 26;
      } else {
       $is_dst_type_derived_from_static_type$2$off030 = $is_dst_type_derived_from_static_type$2$off0;
       label = 23;
      }
     } else {
      $is_dst_type_derived_from_static_type$2$off030 = 0;
      label = 23;
     }
    } while(0);
    if ((label|0) == 23) {
     HEAP32[$14>>2] = $current_ptr;
     $65 = (($info) + 40|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = (($66) + 1)|0;
     HEAP32[$65>>2] = $67;
     $68 = (($info) + 36|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==(1);
     if ($70) {
      $71 = (($info) + 24|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = ($72|0)==(2);
      if ($73) {
       $74 = (($info) + 54|0);
       HEAP8[$74] = 1;
       if ($is_dst_type_derived_from_static_type$2$off030) {
        label = 27;
       } else {
        label = 28;
       }
      } else {
       $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off030;
       label = 26;
      }
     } else {
      $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off030;
      label = 26;
     }
    }
    if ((label|0) == 26) {
     if ($is_dst_type_derived_from_static_type$2$off031) {
      label = 27;
     } else {
      label = 28;
     }
    }
    if ((label|0) == 27) {
     HEAP32[$20>>2] = 3;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 28) {
     HEAP32[$20>>2] = 4;
     STACKTOP = sp;return;
    }
   }
  }
  $17 = ($path_below|0)==(1);
  if (!($17)) {
   STACKTOP = sp;return;
  }
  $18 = (($info) + 32|0);
  HEAP32[$18>>2] = 1;
  STACKTOP = sp;return;
 }
 $75 = (($this) + 12|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ((($this) + ($76<<3)|0) + 16|0);
 $78 = (($this) + 20|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79 >> 8;
 $81 = $79 & 1;
 $82 = ($81|0)==(0);
 if ($82) {
  $offset_to_base$0$i14 = $80;
 } else {
  $83 = HEAP32[$current_ptr>>2]|0;
  $84 = (($83) + ($80)|0);
  $85 = HEAP32[$84>>2]|0;
  $offset_to_base$0$i14 = $85;
 }
 $86 = (($this) + 16|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = HEAP32[$87>>2]|0;
 $89 = (($88) + 24|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($current_ptr) + ($offset_to_base$0$i14)|0);
 $92 = $79 & 2;
 $93 = ($92|0)!=(0);
 $94 = $93 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$90 & 3]($87,$info,$91,$94,$use_strcmp);
 $95 = (($this) + 24|0);
 $96 = ($76|0)>(1);
 if (!($96)) {
  STACKTOP = sp;return;
 }
 $97 = (($this) + 8|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $98 & 2;
 $100 = ($99|0)==(0);
 if ($100) {
  $101 = (($info) + 36|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($102|0)==(1);
  if (!($103)) {
   $125 = $98 & 1;
   $126 = ($125|0)==(0);
   if ($126) {
    $129 = (($info) + 54|0);
    $p2$2 = $95;
    while(1) {
     $154 = HEAP8[$129]|0;
     $155 = ($154<<24>>24)==(0);
     if (!($155)) {
      label = 53;
      break;
     }
     $156 = HEAP32[$101>>2]|0;
     $157 = ($156|0)==(1);
     if ($157) {
      label = 53;
      break;
     }
     $158 = (($p2$2) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = $159 >> 8;
     $161 = $159 & 1;
     $162 = ($161|0)==(0);
     if ($162) {
      $offset_to_base$0$i = $160;
     } else {
      $163 = HEAP32[$current_ptr>>2]|0;
      $164 = (($163) + ($160)|0);
      $165 = HEAP32[$164>>2]|0;
      $offset_to_base$0$i = $165;
     }
     $166 = HEAP32[$p2$2>>2]|0;
     $167 = HEAP32[$166>>2]|0;
     $168 = (($167) + 24|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = (($current_ptr) + ($offset_to_base$0$i)|0);
     $171 = $159 & 2;
     $172 = ($171|0)!=(0);
     $173 = $172 ? $path_below : 2;
     FUNCTION_TABLE_viiiii[$169 & 3]($166,$info,$170,$173,$use_strcmp);
     $174 = (($p2$2) + 8|0);
     $175 = ($174>>>0)<($77>>>0);
     if ($175) {
      $p2$2 = $174;
     } else {
      label = 53;
      break;
     }
    }
    if ((label|0) == 53) {
     STACKTOP = sp;return;
    }
   }
   $127 = (($info) + 24|0);
   $128 = (($info) + 54|0);
   $p2$1 = $95;
   while(1) {
    $130 = HEAP8[$128]|0;
    $131 = ($130<<24>>24)==(0);
    if (!($131)) {
     label = 53;
     break;
    }
    $132 = HEAP32[$101>>2]|0;
    $133 = ($132|0)==(1);
    if ($133) {
     $134 = HEAP32[$127>>2]|0;
     $135 = ($134|0)==(1);
     if ($135) {
      label = 53;
      break;
     }
    }
    $136 = (($p2$1) + 4|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $137 >> 8;
    $139 = $137 & 1;
    $140 = ($139|0)==(0);
    if ($140) {
     $offset_to_base$0$i9 = $138;
    } else {
     $141 = HEAP32[$current_ptr>>2]|0;
     $142 = (($141) + ($138)|0);
     $143 = HEAP32[$142>>2]|0;
     $offset_to_base$0$i9 = $143;
    }
    $144 = HEAP32[$p2$1>>2]|0;
    $145 = HEAP32[$144>>2]|0;
    $146 = (($145) + 24|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = (($current_ptr) + ($offset_to_base$0$i9)|0);
    $149 = $137 & 2;
    $150 = ($149|0)!=(0);
    $151 = $150 ? $path_below : 2;
    FUNCTION_TABLE_viiiii[$147 & 3]($144,$info,$148,$151,$use_strcmp);
    $152 = (($p2$1) + 8|0);
    $153 = ($152>>>0)<($77>>>0);
    if ($153) {
     $p2$1 = $152;
    } else {
     label = 53;
     break;
    }
   }
   if ((label|0) == 53) {
    STACKTOP = sp;return;
   }
  }
 }
 $104 = (($info) + 54|0);
 $p2$0 = $95;
 while(1) {
  $105 = HEAP8[$104]|0;
  $106 = ($105<<24>>24)==(0);
  if (!($106)) {
   label = 53;
   break;
  }
  $107 = (($p2$0) + 4|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $108 >> 8;
  $110 = $108 & 1;
  $111 = ($110|0)==(0);
  if ($111) {
   $offset_to_base$0$i11 = $109;
  } else {
   $112 = HEAP32[$current_ptr>>2]|0;
   $113 = (($112) + ($109)|0);
   $114 = HEAP32[$113>>2]|0;
   $offset_to_base$0$i11 = $114;
  }
  $115 = HEAP32[$p2$0>>2]|0;
  $116 = HEAP32[$115>>2]|0;
  $117 = (($116) + 24|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($current_ptr) + ($offset_to_base$0$i11)|0);
  $120 = $108 & 2;
  $121 = ($120|0)!=(0);
  $122 = $121 ? $path_below : 2;
  FUNCTION_TABLE_viiiii[$118 & 3]($115,$info,$119,$122,$use_strcmp);
  $123 = (($p2$0) + 8|0);
  $124 = ($123>>>0)<($77>>>0);
  if ($124) {
   $p2$0 = $123;
  } else {
   label = 53;
   break;
  }
 }
 if ((label|0) == 53) {
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if (!($10)) {
  $43 = (($this) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  FUNCTION_TABLE_viiiii[$47 & 3]($44,$info,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   $20 = (($info) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(4);
   if ($22) {
    STACKTOP = sp;return;
   }
   $23 = (($info) + 52|0);
   HEAP8[$23] = 0;
   $24 = (($info) + 53|0);
   HEAP8[$24] = 0;
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_viiiiii[$29 & 15]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
   $30 = HEAP8[$24]|0;
   $31 = ($30<<24>>24)==(0);
   if ($31) {
    $is_dst_type_derived_from_static_type$0$off01 = 0;
    label = 13;
   } else {
    $32 = HEAP8[$23]|0;
    $not$ = ($32<<24>>24)==(0);
    if ($not$) {
     $is_dst_type_derived_from_static_type$0$off01 = 1;
     label = 13;
    }
   }
   do {
    if ((label|0) == 13) {
     HEAP32[$14>>2] = $current_ptr;
     $33 = (($info) + 40|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (($34) + 1)|0;
     HEAP32[$33>>2] = $35;
     $36 = (($info) + 36|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(1);
     if ($38) {
      $39 = (($info) + 24|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==(2);
      if ($41) {
       $42 = (($info) + 54|0);
       HEAP8[$42] = 1;
       if ($is_dst_type_derived_from_static_type$0$off01) {
        break;
       }
      } else {
       label = 16;
      }
     } else {
      label = 16;
     }
     if ((label|0) == 16) {
      if ($is_dst_type_derived_from_static_type$0$off01) {
       break;
      }
     }
     HEAP32[$20>>2] = 4;
     STACKTOP = sp;return;
    }
   } while(0);
   HEAP32[$20>>2] = 3;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($9|0)==($this|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   HEAP32[$14>>2] = $current_ptr;
   $20 = (($info) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 1)|0;
   HEAP32[$20>>2] = $22;
   $23 = (($info) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(1);
   if ($25) {
    $26 = (($info) + 24|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(2);
    if ($28) {
     $29 = (($info) + 54|0);
     HEAP8[$29] = 1;
    }
   }
   $30 = (($info) + 44|0);
   HEAP32[$30>>2] = 4;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i1 = 0, $or$cond$i = 0, $or$cond1$i = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if (!($2)) {
  $32 = (($info) + 52|0);
  $33 = HEAP8[$32]|0;
  $34 = (($info) + 53|0);
  $35 = HEAP8[$34]|0;
  $36 = (($this) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($this) + ($37<<3)|0) + 16|0);
  HEAP8[$32] = 0;
  HEAP8[$34] = 0;
  $39 = (($this) + 20|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $40 >> 8;
  $42 = $40 & 1;
  $43 = ($42|0)==(0);
  if ($43) {
   $offset_to_base$0$i1 = $41;
  } else {
   $44 = HEAP32[$current_ptr>>2]|0;
   $45 = (($44) + ($41)|0);
   $46 = HEAP32[$45>>2]|0;
   $offset_to_base$0$i1 = $46;
  }
  $47 = (($this) + 16|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + 20|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($current_ptr) + ($offset_to_base$0$i1)|0);
  $53 = $40 & 2;
  $54 = ($53|0)!=(0);
  $55 = $54 ? $path_below : 2;
  FUNCTION_TABLE_viiiiii[$51 & 15]($48,$info,$dst_ptr,$52,$55,$use_strcmp);
  $56 = ($37|0)>(1);
  L6: do {
   if ($56) {
    $57 = (($this) + 24|0);
    $58 = (($info) + 24|0);
    $59 = (($this) + 8|0);
    $60 = (($info) + 54|0);
    $p$0 = $57;
    while(1) {
     $61 = HEAP8[$60]|0;
     $62 = ($61<<24>>24)==(0);
     if (!($62)) {
      break L6;
     }
     $63 = HEAP8[$32]|0;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $70 = HEAP8[$34]|0;
      $71 = ($70<<24>>24)==(0);
      if (!($71)) {
       $72 = HEAP32[$59>>2]|0;
       $73 = $72 & 1;
       $74 = ($73|0)==(0);
       if ($74) {
        break L6;
       }
      }
     } else {
      $65 = HEAP32[$58>>2]|0;
      $66 = ($65|0)==(1);
      if ($66) {
       break L6;
      }
      $67 = HEAP32[$59>>2]|0;
      $68 = $67 & 2;
      $69 = ($68|0)==(0);
      if ($69) {
       break L6;
      }
     }
     HEAP8[$32] = 0;
     HEAP8[$34] = 0;
     $75 = (($p$0) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = $76 >> 8;
     $78 = $76 & 1;
     $79 = ($78|0)==(0);
     if ($79) {
      $offset_to_base$0$i = $77;
     } else {
      $80 = HEAP32[$current_ptr>>2]|0;
      $81 = (($80) + ($77)|0);
      $82 = HEAP32[$81>>2]|0;
      $offset_to_base$0$i = $82;
     }
     $83 = HEAP32[$p$0>>2]|0;
     $84 = HEAP32[$83>>2]|0;
     $85 = (($84) + 20|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = (($current_ptr) + ($offset_to_base$0$i)|0);
     $88 = $76 & 2;
     $89 = ($88|0)!=(0);
     $90 = $89 ? $path_below : 2;
     FUNCTION_TABLE_viiiiii[$86 & 15]($83,$info,$dst_ptr,$87,$90,$use_strcmp);
     $91 = (($p$0) + 8|0);
     $92 = ($91>>>0)<($38>>>0);
     if ($92) {
      $p$0 = $91;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$32] = $33;
  HEAP8[$34] = $35;
  STACKTOP = sp;return;
 }
 $3 = (($info) + 53|0);
 HEAP8[$3] = 1;
 $4 = (($info) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($current_ptr|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($info) + 52|0);
 HEAP8[$7] = 1;
 $8 = (($info) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$8>>2] = $dst_ptr;
  $11 = (($info) + 24|0);
  HEAP32[$11>>2] = $path_below;
  $12 = (($info) + 36|0);
  HEAP32[$12>>2] = 1;
  $13 = (($info) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(1);
  $16 = ($path_below|0)==(1);
  $or$cond$i = $15 & $16;
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $17 = (($info) + 54|0);
  HEAP8[$17] = 1;
  STACKTOP = sp;return;
 }
 $18 = ($9|0)==($dst_ptr|0);
 if (!($18)) {
  $28 = (($info) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$28>>2] = $30;
  $31 = (($info) + 54|0);
  HEAP8[$31] = 1;
  STACKTOP = sp;return;
 }
 $19 = (($info) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(2);
 if ($21) {
  HEAP32[$19>>2] = $path_below;
  $26 = $path_below;
 } else {
  $26 = $20;
 }
 $22 = (($info) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 $25 = ($26|0)==(1);
 $or$cond1$i = $24 & $25;
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $27 = (($info) + 54|0);
 HEAP8[$27] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $or$cond1$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if (!($2)) {
  $32 = (($this) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 20|0);
  $36 = HEAP32[$35>>2]|0;
  FUNCTION_TABLE_viiiiii[$36 & 15]($33,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $3 = (($info) + 53|0);
 HEAP8[$3] = 1;
 $4 = (($info) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($current_ptr|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($info) + 52|0);
 HEAP8[$7] = 1;
 $8 = (($info) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$8>>2] = $dst_ptr;
  $11 = (($info) + 24|0);
  HEAP32[$11>>2] = $path_below;
  $12 = (($info) + 36|0);
  HEAP32[$12>>2] = 1;
  $13 = (($info) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(1);
  $16 = ($path_below|0)==(1);
  $or$cond$i = $15 & $16;
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $17 = (($info) + 54|0);
  HEAP8[$17] = 1;
  STACKTOP = sp;return;
 }
 $18 = ($9|0)==($dst_ptr|0);
 if (!($18)) {
  $28 = (($info) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$28>>2] = $30;
  $31 = (($info) + 54|0);
  HEAP8[$31] = 1;
  STACKTOP = sp;return;
 }
 $19 = (($info) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(2);
 if ($21) {
  HEAP32[$19>>2] = $path_below;
  $26 = $path_below;
 } else {
  $26 = $20;
 }
 $22 = (($info) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 $25 = ($26|0)==(1);
 $or$cond1$i = $24 & $25;
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $27 = (($info) + 54|0);
 HEAP8[$27] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $or$cond1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($info) + 53|0);
 HEAP8[$3] = 1;
 $4 = (($info) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($current_ptr|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($info) + 52|0);
 HEAP8[$7] = 1;
 $8 = (($info) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$8>>2] = $dst_ptr;
  $11 = (($info) + 24|0);
  HEAP32[$11>>2] = $path_below;
  $12 = (($info) + 36|0);
  HEAP32[$12>>2] = 1;
  $13 = (($info) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(1);
  $16 = ($path_below|0)==(1);
  $or$cond$i = $15 & $16;
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $17 = (($info) + 54|0);
  HEAP8[$17] = 1;
  STACKTOP = sp;return;
 }
 $18 = ($9|0)==($dst_ptr|0);
 if (!($18)) {
  $28 = (($info) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$28>>2] = $30;
  $31 = (($info) + 54|0);
  HEAP8[$31] = 1;
  STACKTOP = sp;return;
 }
 $19 = (($info) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(2);
 if ($21) {
  HEAP32[$19>>2] = $path_below;
  $26 = $path_below;
 } else {
  $26 = $20;
 }
 $22 = (($info) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 $25 = ($26|0)==(1);
 $or$cond1$i = $24 & $25;
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $27 = (($info) + 54|0);
 HEAP8[$27] = 1;
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0;
 var $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0;
 var $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0;
 var $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0;
 var $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0;
 var $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0;
 var $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0;
 var $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0;
 var $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0;
 var $v$330$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[27112>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((27112 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((27112 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[27112>>2] = $22;
     } else {
      $23 = HEAP32[((27112 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((27112 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((27112 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((27112 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[27112>>2] = $74;
      } else {
       $75 = HEAP32[((27112 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = HEAP32[((27112 + 8|0))>>2]|0;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((27112 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((27112 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[27112>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[27112>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre = ((27112 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((27112 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((27112 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((27112 + 8|0))>>2] = $81;
     HEAP32[((27112 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((27112 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((27112 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((27112 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((27112 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((27112 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((27112 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((27112 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((27112 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = HEAP32[((27112 + 16|0))>>2]|0;
         $204 = ($201>>>0)<($203>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = (($R$1$i) + 16|0);
          HEAP32[$205>>2] = $201;
          $206 = (($201) + 24|0);
          HEAP32[$206>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $207 = (($v$0$i) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[((27112 + 16|0))>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = (($R$1$i) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = (($208) + 24|0);
         HEAP32[$213>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($5))|0;
      $216 = $215 | 3;
      $217 = (($v$0$i) + 4|0);
      HEAP32[$217>>2] = $216;
      $$sum4$i = (($215) + 4)|0;
      $218 = (($v$0$i) + ($$sum4$i)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = $219 | 1;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $5 | 3;
      $222 = (($v$0$i) + 4|0);
      HEAP32[$222>>2] = $221;
      $223 = $rsize$0$i | 1;
      $$sum$i35 = $5 | 4;
      $224 = (($v$0$i) + ($$sum$i35)|0);
      HEAP32[$224>>2] = $223;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $225 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$225>>2] = $rsize$0$i;
      $226 = HEAP32[((27112 + 8|0))>>2]|0;
      $227 = ($226|0)==(0);
      if (!($227)) {
       $228 = HEAP32[((27112 + 20|0))>>2]|0;
       $229 = $226 >>> 3;
       $230 = $229 << 1;
       $231 = ((27112 + ($230<<2)|0) + 40|0);
       $232 = HEAP32[27112>>2]|0;
       $233 = 1 << $229;
       $234 = $232 & $233;
       $235 = ($234|0)==(0);
       if ($235) {
        $236 = $232 | $233;
        HEAP32[27112>>2] = $236;
        $$sum2$pre$i = (($230) + 2)|0;
        $$pre$i = ((27112 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $231;
       } else {
        $$sum3$i = (($230) + 2)|0;
        $237 = ((27112 + ($$sum3$i<<2)|0) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = HEAP32[((27112 + 16|0))>>2]|0;
        $240 = ($238>>>0)<($239>>>0);
        if ($240) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $237;$F1$0$i = $238;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $241 = (($F1$0$i) + 12|0);
       HEAP32[$241>>2] = $228;
       $242 = (($228) + 8|0);
       HEAP32[$242>>2] = $F1$0$i;
       $243 = (($228) + 12|0);
       HEAP32[$243>>2] = $231;
      }
      HEAP32[((27112 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((27112 + 20|0))>>2] = $151;
     }
     $244 = (($v$0$i) + 8|0);
     $mem$0 = $244;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $245 = ($bytes>>>0)>(4294967231);
   if ($245) {
    $nb$0 = -1;
   } else {
    $246 = (($bytes) + 11)|0;
    $247 = $246 & -8;
    $248 = HEAP32[((27112 + 4|0))>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $nb$0 = $247;
    } else {
     $250 = (0 - ($247))|0;
     $251 = $246 >>> 8;
     $252 = ($251|0)==(0);
     if ($252) {
      $idx$0$i = 0;
     } else {
      $253 = ($247>>>0)>(16777215);
      if ($253) {
       $idx$0$i = 31;
      } else {
       $254 = (($251) + 1048320)|0;
       $255 = $254 >>> 16;
       $256 = $255 & 8;
       $257 = $251 << $256;
       $258 = (($257) + 520192)|0;
       $259 = $258 >>> 16;
       $260 = $259 & 4;
       $261 = $260 | $256;
       $262 = $257 << $260;
       $263 = (($262) + 245760)|0;
       $264 = $263 >>> 16;
       $265 = $264 & 2;
       $266 = $261 | $265;
       $267 = (14 - ($266))|0;
       $268 = $262 << $265;
       $269 = $268 >>> 15;
       $270 = (($267) + ($269))|0;
       $271 = $270 << 1;
       $272 = (($270) + 7)|0;
       $273 = $247 >>> $272;
       $274 = $273 & 1;
       $275 = $274 | $271;
       $idx$0$i = $275;
      }
     }
     $276 = ((27112 + ($idx$0$i<<2)|0) + 304|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)==(0|0);
     L126: do {
      if ($278) {
       $rsize$2$i = $250;$t$1$i = 0;$v$2$i = 0;
      } else {
       $279 = ($idx$0$i|0)==(31);
       if ($279) {
        $283 = 0;
       } else {
        $280 = $idx$0$i >>> 1;
        $281 = (25 - ($280))|0;
        $283 = $281;
       }
       $282 = $247 << $283;
       $rsize$0$i15 = $250;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $277;$v$0$i16 = 0;
       while(1) {
        $284 = (($t$0$i14) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = $285 & -8;
        $287 = (($286) - ($247))|0;
        $288 = ($287>>>0)<($rsize$0$i15>>>0);
        if ($288) {
         $289 = ($286|0)==($247|0);
         if ($289) {
          $rsize$2$i = $287;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $287;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $290 = (($t$0$i14) + 20|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $sizebits$0$i >>> 31;
        $293 = ((($t$0$i14) + ($292<<2)|0) + 16|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($291|0)==(0|0);
        $296 = ($291|0)==($294|0);
        $or$cond$i = $295 | $296;
        $rst$1$i = $or$cond$i ? $rst$0$i : $291;
        $297 = ($294|0)==(0|0);
        $298 = $sizebits$0$i << 1;
        if ($297) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $298;$t$0$i14 = $294;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $299 = ($t$1$i|0)==(0|0);
     $300 = ($v$2$i|0)==(0|0);
     $or$cond19$i = $299 & $300;
     if ($or$cond19$i) {
      $301 = 2 << $idx$0$i;
      $302 = (0 - ($301))|0;
      $303 = $301 | $302;
      $304 = $248 & $303;
      $305 = ($304|0)==(0);
      if ($305) {
       $nb$0 = $247;
       break;
      }
      $306 = (0 - ($304))|0;
      $307 = $304 & $306;
      $308 = (($307) + -1)|0;
      $309 = $308 >>> 12;
      $310 = $309 & 16;
      $311 = $308 >>> $310;
      $312 = $311 >>> 5;
      $313 = $312 & 8;
      $314 = $313 | $310;
      $315 = $311 >>> $313;
      $316 = $315 >>> 2;
      $317 = $316 & 4;
      $318 = $314 | $317;
      $319 = $315 >>> $317;
      $320 = $319 >>> 1;
      $321 = $320 & 2;
      $322 = $318 | $321;
      $323 = $319 >>> $321;
      $324 = $323 >>> 1;
      $325 = $324 & 1;
      $326 = $322 | $325;
      $327 = $323 >>> $325;
      $328 = (($326) + ($327))|0;
      $329 = ((27112 + ($328<<2)|0) + 304|0);
      $330 = HEAP32[$329>>2]|0;
      $t$2$ph$i = $330;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $331 = ($t$2$ph$i|0)==(0|0);
     if ($331) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
      while(1) {
       $332 = (($t$228$i) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($247))|0;
       $336 = ($335>>>0)<($rsize$329$i>>>0);
       $$rsize$3$i = $336 ? $335 : $rsize$329$i;
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
       $337 = (($t$228$i) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $338;$v$330$i = $t$2$v$3$i;
        continue;
       }
       $340 = (($t$228$i) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $341;$v$330$i = $t$2$v$3$i;
       }
      }
     }
     $343 = ($v$3$lcssa$i|0)==(0|0);
     if ($343) {
      $nb$0 = $247;
     } else {
      $344 = HEAP32[((27112 + 8|0))>>2]|0;
      $345 = (($344) - ($247))|0;
      $346 = ($rsize$3$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[((27112 + 16|0))>>2]|0;
       $348 = ($v$3$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($v$3$lcssa$i) + ($247)|0);
       $350 = ($v$3$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = (($v$3$lcssa$i) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = (($v$3$lcssa$i) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($v$3$lcssa$i|0);
       do {
        if ($355) {
         $365 = (($v$3$lcssa$i) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = (($v$3$lcssa$i) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $369;$RP$0$i17 = $368;
          }
         } else {
          $R$0$i18 = $366;$RP$0$i17 = $365;
         }
         while(1) {
          $371 = (($R$0$i18) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $R$0$i18 = $372;$RP$0$i17 = $371;
           continue;
          }
          $374 = (($R$0$i18) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $R$0$i18 = $375;$RP$0$i17 = $374;
          }
         }
         $377 = ($RP$0$i17>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $356 = (($v$3$lcssa$i) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = (($357) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($v$3$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = (($354) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($v$3$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $R$1$i20 = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if (!($378)) {
         $379 = (($v$3$lcssa$i) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = ((27112 + ($380<<2)|0) + 304|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($v$3$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = HEAP32[((27112 + 4|0))>>2]|0;
           $387 = $386 & $385;
           HEAP32[((27112 + 4|0))>>2] = $387;
           break;
          }
         } else {
          $388 = HEAP32[((27112 + 16|0))>>2]|0;
          $389 = ($352>>>0)<($388>>>0);
          if ($389) {
           _abort();
           // unreachable;
          }
          $390 = (($352) + 16|0);
          $391 = HEAP32[$390>>2]|0;
          $392 = ($391|0)==($v$3$lcssa$i|0);
          if ($392) {
           HEAP32[$390>>2] = $R$1$i20;
          } else {
           $393 = (($352) + 20|0);
           HEAP32[$393>>2] = $R$1$i20;
          }
          $394 = ($R$1$i20|0)==(0|0);
          if ($394) {
           break;
          }
         }
         $395 = HEAP32[((27112 + 16|0))>>2]|0;
         $396 = ($R$1$i20>>>0)<($395>>>0);
         if ($396) {
          _abort();
          // unreachable;
         }
         $397 = (($R$1$i20) + 24|0);
         HEAP32[$397>>2] = $352;
         $398 = (($v$3$lcssa$i) + 16|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = ($399|0)==(0|0);
         do {
          if (!($400)) {
           $401 = HEAP32[((27112 + 16|0))>>2]|0;
           $402 = ($399>>>0)<($401>>>0);
           if ($402) {
            _abort();
            // unreachable;
           } else {
            $403 = (($R$1$i20) + 16|0);
            HEAP32[$403>>2] = $399;
            $404 = (($399) + 24|0);
            HEAP32[$404>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $405 = (($v$3$lcssa$i) + 20|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($406|0)==(0|0);
         if (!($407)) {
          $408 = HEAP32[((27112 + 16|0))>>2]|0;
          $409 = ($406>>>0)<($408>>>0);
          if ($409) {
           _abort();
           // unreachable;
          } else {
           $410 = (($R$1$i20) + 20|0);
           HEAP32[$410>>2] = $406;
           $411 = (($406) + 24|0);
           HEAP32[$411>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $412 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($412) {
         $413 = (($rsize$3$lcssa$i) + ($247))|0;
         $414 = $413 | 3;
         $415 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$415>>2] = $414;
         $$sum18$i = (($413) + 4)|0;
         $416 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $417 = HEAP32[$416>>2]|0;
         $418 = $417 | 1;
         HEAP32[$416>>2] = $418;
        } else {
         $419 = $247 | 3;
         $420 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $247 | 4;
         $422 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$422>>2] = $421;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($247))|0;
         $423 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$423>>2] = $rsize$3$lcssa$i;
         $424 = $rsize$3$lcssa$i >>> 3;
         $425 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($425) {
          $426 = $424 << 1;
          $427 = ((27112 + ($426<<2)|0) + 40|0);
          $428 = HEAP32[27112>>2]|0;
          $429 = 1 << $424;
          $430 = $428 & $429;
          $431 = ($430|0)==(0);
          if ($431) {
           $432 = $428 | $429;
           HEAP32[27112>>2] = $432;
           $$sum14$pre$i = (($426) + 2)|0;
           $$pre$i25 = ((27112 + ($$sum14$pre$i<<2)|0) + 40|0);
           $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $427;
          } else {
           $$sum17$i = (($426) + 2)|0;
           $433 = ((27112 + ($$sum17$i<<2)|0) + 40|0);
           $434 = HEAP32[$433>>2]|0;
           $435 = HEAP32[((27112 + 16|0))>>2]|0;
           $436 = ($434>>>0)<($435>>>0);
           if ($436) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $433;$F5$0$i = $434;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $349;
          $437 = (($F5$0$i) + 12|0);
          HEAP32[$437>>2] = $349;
          $$sum15$i = (($247) + 8)|0;
          $438 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$438>>2] = $F5$0$i;
          $$sum16$i = (($247) + 12)|0;
          $439 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$439>>2] = $427;
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8;
         $441 = ($440|0)==(0);
         if ($441) {
          $I7$0$i = 0;
         } else {
          $442 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($442) {
           $I7$0$i = 31;
          } else {
           $443 = (($440) + 1048320)|0;
           $444 = $443 >>> 16;
           $445 = $444 & 8;
           $446 = $440 << $445;
           $447 = (($446) + 520192)|0;
           $448 = $447 >>> 16;
           $449 = $448 & 4;
           $450 = $449 | $445;
           $451 = $446 << $449;
           $452 = (($451) + 245760)|0;
           $453 = $452 >>> 16;
           $454 = $453 & 2;
           $455 = $450 | $454;
           $456 = (14 - ($455))|0;
           $457 = $451 << $454;
           $458 = $457 >>> 15;
           $459 = (($456) + ($458))|0;
           $460 = $459 << 1;
           $461 = (($459) + 7)|0;
           $462 = $rsize$3$lcssa$i >>> $461;
           $463 = $462 & 1;
           $464 = $463 | $460;
           $I7$0$i = $464;
          }
         }
         $465 = ((27112 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($247) + 28)|0;
         $466 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$466>>2] = $I7$0$i;
         $$sum3$i27 = (($247) + 16)|0;
         $467 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($247) + 20)|0;
         $468 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$468>>2] = 0;
         HEAP32[$467>>2] = 0;
         $469 = HEAP32[((27112 + 4|0))>>2]|0;
         $470 = 1 << $I7$0$i;
         $471 = $469 & $470;
         $472 = ($471|0)==(0);
         if ($472) {
          $473 = $469 | $470;
          HEAP32[((27112 + 4|0))>>2] = $473;
          HEAP32[$465>>2] = $349;
          $$sum5$i = (($247) + 24)|0;
          $474 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$474>>2] = $465;
          $$sum6$i = (($247) + 12)|0;
          $475 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$475>>2] = $349;
          $$sum7$i = (($247) + 8)|0;
          $476 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$476>>2] = $349;
          break;
         }
         $477 = HEAP32[$465>>2]|0;
         $478 = ($I7$0$i|0)==(31);
         if ($478) {
          $486 = 0;
         } else {
          $479 = $I7$0$i >>> 1;
          $480 = (25 - ($479))|0;
          $486 = $480;
         }
         $481 = (($477) + 4|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = $482 & -8;
         $484 = ($483|0)==($rsize$3$lcssa$i|0);
         L224: do {
          if ($484) {
           $T$0$lcssa$i = $477;
          } else {
           $485 = $rsize$3$lcssa$i << $486;
           $K12$025$i = $485;$T$024$i = $477;
           while(1) {
            $493 = $K12$025$i >>> 31;
            $494 = ((($T$024$i) + ($493<<2)|0) + 16|0);
            $489 = HEAP32[$494>>2]|0;
            $495 = ($489|0)==(0|0);
            if ($495) {
             break;
            }
            $487 = $K12$025$i << 1;
            $488 = (($489) + 4|0);
            $490 = HEAP32[$488>>2]|0;
            $491 = $490 & -8;
            $492 = ($491|0)==($rsize$3$lcssa$i|0);
            if ($492) {
             $T$0$lcssa$i = $489;
             break L224;
            } else {
             $K12$025$i = $487;$T$024$i = $489;
            }
           }
           $496 = HEAP32[((27112 + 16|0))>>2]|0;
           $497 = ($494>>>0)<($496>>>0);
           if ($497) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$494>>2] = $349;
            $$sum11$i = (($247) + 24)|0;
            $498 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$498>>2] = $T$024$i;
            $$sum12$i = (($247) + 12)|0;
            $499 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$499>>2] = $349;
            $$sum13$i = (($247) + 8)|0;
            $500 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$500>>2] = $349;
            break L204;
           }
          }
         } while(0);
         $501 = (($T$0$lcssa$i) + 8|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = HEAP32[((27112 + 16|0))>>2]|0;
         $504 = ($T$0$lcssa$i>>>0)<($503>>>0);
         if ($504) {
          _abort();
          // unreachable;
         }
         $505 = ($502>>>0)<($503>>>0);
         if ($505) {
          _abort();
          // unreachable;
         } else {
          $506 = (($502) + 12|0);
          HEAP32[$506>>2] = $349;
          HEAP32[$501>>2] = $349;
          $$sum8$i = (($247) + 8)|0;
          $507 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$507>>2] = $502;
          $$sum9$i = (($247) + 12)|0;
          $508 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$508>>2] = $T$0$lcssa$i;
          $$sum10$i = (($247) + 24)|0;
          $509 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$509>>2] = 0;
          break;
         }
        }
       } while(0);
       $510 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $510;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $247;
      }
     }
    }
   }
  }
 } while(0);
 $511 = HEAP32[((27112 + 8|0))>>2]|0;
 $512 = ($nb$0>>>0)>($511>>>0);
 if (!($512)) {
  $513 = (($511) - ($nb$0))|0;
  $514 = HEAP32[((27112 + 20|0))>>2]|0;
  $515 = ($513>>>0)>(15);
  if ($515) {
   $516 = (($514) + ($nb$0)|0);
   HEAP32[((27112 + 20|0))>>2] = $516;
   HEAP32[((27112 + 8|0))>>2] = $513;
   $517 = $513 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $518 = (($514) + ($$sum2)|0);
   HEAP32[$518>>2] = $517;
   $519 = (($514) + ($511)|0);
   HEAP32[$519>>2] = $513;
   $520 = $nb$0 | 3;
   $521 = (($514) + 4|0);
   HEAP32[$521>>2] = $520;
  } else {
   HEAP32[((27112 + 8|0))>>2] = 0;
   HEAP32[((27112 + 20|0))>>2] = 0;
   $522 = $511 | 3;
   $523 = (($514) + 4|0);
   HEAP32[$523>>2] = $522;
   $$sum1 = (($511) + 4)|0;
   $524 = (($514) + ($$sum1)|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = (($514) + 8|0);
  $mem$0 = $527;
  STACKTOP = sp;return ($mem$0|0);
 }
 $528 = HEAP32[((27112 + 12|0))>>2]|0;
 $529 = ($nb$0>>>0)<($528>>>0);
 if ($529) {
  $530 = (($528) - ($nb$0))|0;
  HEAP32[((27112 + 12|0))>>2] = $530;
  $531 = HEAP32[((27112 + 24|0))>>2]|0;
  $532 = (($531) + ($nb$0)|0);
  HEAP32[((27112 + 24|0))>>2] = $532;
  $533 = $530 | 1;
  $$sum = (($nb$0) + 4)|0;
  $534 = (($531) + ($$sum)|0);
  HEAP32[$534>>2] = $533;
  $535 = $nb$0 | 3;
  $536 = (($531) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = (($531) + 8|0);
  $mem$0 = $537;
  STACKTOP = sp;return ($mem$0|0);
 }
 $538 = HEAP32[27584>>2]|0;
 $539 = ($538|0)==(0);
 do {
  if ($539) {
   $540 = (_sysconf(30)|0);
   $541 = (($540) + -1)|0;
   $542 = $541 & $540;
   $543 = ($542|0)==(0);
   if ($543) {
    HEAP32[((27584 + 8|0))>>2] = $540;
    HEAP32[((27584 + 4|0))>>2] = $540;
    HEAP32[((27584 + 12|0))>>2] = -1;
    HEAP32[((27584 + 16|0))>>2] = -1;
    HEAP32[((27584 + 20|0))>>2] = 0;
    HEAP32[((27112 + 444|0))>>2] = 0;
    $544 = (_time((0|0))|0);
    $545 = $544 & -16;
    $546 = $545 ^ 1431655768;
    HEAP32[27584>>2] = $546;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $547 = (($nb$0) + 48)|0;
 $548 = HEAP32[((27584 + 8|0))>>2]|0;
 $549 = (($nb$0) + 47)|0;
 $550 = (($548) + ($549))|0;
 $551 = (0 - ($548))|0;
 $552 = $550 & $551;
 $553 = ($552>>>0)>($nb$0>>>0);
 if (!($553)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $554 = HEAP32[((27112 + 440|0))>>2]|0;
 $555 = ($554|0)==(0);
 if (!($555)) {
  $556 = HEAP32[((27112 + 432|0))>>2]|0;
  $557 = (($556) + ($552))|0;
  $558 = ($557>>>0)<=($556>>>0);
  $559 = ($557>>>0)>($554>>>0);
  $or$cond1$i = $558 | $559;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $560 = HEAP32[((27112 + 444|0))>>2]|0;
 $561 = $560 & 4;
 $562 = ($561|0)==(0);
 L269: do {
  if ($562) {
   $563 = HEAP32[((27112 + 24|0))>>2]|0;
   $564 = ($563|0)==(0|0);
   L271: do {
    if ($564) {
     label = 182;
    } else {
     $sp$0$i$i = ((27112 + 448|0));
     while(1) {
      $565 = HEAP32[$sp$0$i$i>>2]|0;
      $566 = ($565>>>0)>($563>>>0);
      if (!($566)) {
       $567 = (($sp$0$i$i) + 4|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = (($565) + ($568)|0);
       $570 = ($569>>>0)>($563>>>0);
       if ($570) {
        break;
       }
      }
      $571 = (($sp$0$i$i) + 8|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = ($572|0)==(0|0);
      if ($573) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $572;
      }
     }
     $574 = ($sp$0$i$i|0)==(0|0);
     if ($574) {
      label = 182;
     } else {
      $597 = HEAP32[((27112 + 12|0))>>2]|0;
      $598 = (($550) - ($597))|0;
      $599 = $598 & $551;
      $600 = ($599>>>0)<(2147483647);
      if ($600) {
       $601 = (_sbrk(($599|0))|0);
       $602 = HEAP32[$sp$0$i$i>>2]|0;
       $603 = HEAP32[$567>>2]|0;
       $604 = (($602) + ($603)|0);
       $605 = ($601|0)==($604|0);
       $$3$i = $605 ? $599 : 0;
       $$4$i = $605 ? $601 : (-1);
       $br$0$i = $601;$ssize$1$i = $599;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $575 = (_sbrk(0)|0);
     $576 = ($575|0)==((-1)|0);
     if ($576) {
      $tsize$0323841$i = 0;
     } else {
      $577 = $575;
      $578 = HEAP32[((27584 + 4|0))>>2]|0;
      $579 = (($578) + -1)|0;
      $580 = $579 & $577;
      $581 = ($580|0)==(0);
      if ($581) {
       $ssize$0$i = $552;
      } else {
       $582 = (($579) + ($577))|0;
       $583 = (0 - ($578))|0;
       $584 = $582 & $583;
       $585 = (($552) - ($577))|0;
       $586 = (($585) + ($584))|0;
       $ssize$0$i = $586;
      }
      $587 = HEAP32[((27112 + 432|0))>>2]|0;
      $588 = (($587) + ($ssize$0$i))|0;
      $589 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $590 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $589 & $590;
      if ($or$cond$i29) {
       $591 = HEAP32[((27112 + 440|0))>>2]|0;
       $592 = ($591|0)==(0);
       if (!($592)) {
        $593 = ($588>>>0)<=($587>>>0);
        $594 = ($588>>>0)>($591>>>0);
        $or$cond2$i = $593 | $594;
        if ($or$cond2$i) {
         $tsize$0323841$i = 0;
         break;
        }
       }
       $595 = (_sbrk(($ssize$0$i|0))|0);
       $596 = ($595|0)==($575|0);
       $ssize$0$$i = $596 ? $ssize$0$i : 0;
       $$$i = $596 ? $575 : (-1);
       $br$0$i = $595;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $606 = (0 - ($ssize$1$i))|0;
     $607 = ($tbase$0$i|0)==((-1)|0);
     if (!($607)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $608 = ($br$0$i|0)!=((-1)|0);
     $609 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $608 & $609;
     $610 = ($ssize$1$i>>>0)<($547>>>0);
     $or$cond6$i = $or$cond5$i & $610;
     do {
      if ($or$cond6$i) {
       $611 = HEAP32[((27584 + 8|0))>>2]|0;
       $612 = (($549) - ($ssize$1$i))|0;
       $613 = (($612) + ($611))|0;
       $614 = (0 - ($611))|0;
       $615 = $613 & $614;
       $616 = ($615>>>0)<(2147483647);
       if ($616) {
        $617 = (_sbrk(($615|0))|0);
        $618 = ($617|0)==((-1)|0);
        if ($618) {
         (_sbrk(($606|0))|0);
         $tsize$0323841$i = $tsize$0$i;
         break L291;
        } else {
         $619 = (($615) + ($ssize$1$i))|0;
         $ssize$2$i = $619;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $620 = ($br$0$i|0)==((-1)|0);
     if ($620) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $621 = HEAP32[((27112 + 444|0))>>2]|0;
   $622 = $621 | 4;
   HEAP32[((27112 + 444|0))>>2] = $622;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $623 = ($552>>>0)<(2147483647);
  if ($623) {
   $624 = (_sbrk(($552|0))|0);
   $625 = (_sbrk(0)|0);
   $notlhs$i = ($624|0)!=((-1)|0);
   $notrhs$i = ($625|0)!=((-1)|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $626 = ($624>>>0)<($625>>>0);
   $or$cond9$i = $or$cond8$not$i & $626;
   if ($or$cond9$i) {
    $627 = $625;
    $628 = $624;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$247$i = $624;$tsize$246$i = $$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $632 = HEAP32[((27112 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$246$i))|0;
  HEAP32[((27112 + 432|0))>>2] = $633;
  $634 = HEAP32[((27112 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((27112 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((27112 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L311: do {
   if ($637) {
    $638 = HEAP32[((27112 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$247$i>>>0)<($638>>>0);
    $or$cond10$i = $639 | $640;
    if ($or$cond10$i) {
     HEAP32[((27112 + 16|0))>>2] = $tbase$247$i;
    }
    HEAP32[((27112 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((27112 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((27112 + 460|0))>>2] = 0;
    $641 = HEAP32[27584>>2]|0;
    HEAP32[((27112 + 36|0))>>2] = $641;
    HEAP32[((27112 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((27112 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((27112 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((27112 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$246$i) + -40)|0;
    $648 = (($tbase$247$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$247$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((27112 + 24|0))>>2] = $654;
    HEAP32[((27112 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i14$i = (($655) + 4)|0;
    $658 = (($tbase$247$i) + ($$sum$i14$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$246$i) + -36)|0;
    $659 = (($tbase$247$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((27584 + 16|0))>>2]|0;
    HEAP32[((27112 + 28|0))>>2] = $660;
   } else {
    $sp$075$i = ((27112 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$075$i>>2]|0;
     $662 = (($sp$075$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$247$i|0)==($664|0);
     if ($665) {
      label = 214;
      break;
     }
     $666 = (($sp$075$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$075$i = $667;
     }
    }
    if ((label|0) == 214) {
     $669 = (($sp$075$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$247$i>>>0);
      $or$cond49$i = $673 & $674;
      if ($or$cond49$i) {
       $675 = (($663) + ($tsize$246$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((27112 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$246$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((27112 + 24|0))>>2] = $684;
       HEAP32[((27112 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i18$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i18$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i19$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i19$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((27584 + 16|0))>>2]|0;
       HEAP32[((27112 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((27112 + 16|0))>>2]|0;
    $692 = ($tbase$247$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((27112 + 16|0))>>2] = $tbase$247$i;
    }
    $693 = (($tbase$247$i) + ($tsize$246$i)|0);
    $sp$168$i = ((27112 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$168$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 224;
      break;
     }
     $696 = (($sp$168$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$168$i = $697;
     }
    }
    if ((label|0) == 224) {
     $699 = (($sp$168$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$168$i>>2] = $tbase$247$i;
      $703 = (($sp$168$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$246$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$247$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$247$i) + ($713)|0);
      $$sum107$i = (($tsize$246$i) + 8)|0;
      $714 = (($tbase$247$i) + ($$sum107$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum108$i = (($720) + ($tsize$246$i))|0;
      $721 = (($tbase$247$i) + ($$sum108$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i21$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$247$i) + ($$sum$i21$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i22$i = (($713) + 4)|0;
      $728 = (($tbase$247$i) + ($$sum1$i22$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = HEAP32[((27112 + 24|0))>>2]|0;
      $730 = ($721|0)==($729|0);
      L348: do {
       if ($730) {
        $731 = HEAP32[((27112 + 12|0))>>2]|0;
        $732 = (($731) + ($726))|0;
        HEAP32[((27112 + 12|0))>>2] = $732;
        HEAP32[((27112 + 24|0))>>2] = $725;
        $733 = $732 | 1;
        $$sum42$i$i = (($$sum$i21$i) + 4)|0;
        $734 = (($tbase$247$i) + ($$sum42$i$i)|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[((27112 + 20|0))>>2]|0;
        $736 = ($721|0)==($735|0);
        if ($736) {
         $737 = HEAP32[((27112 + 8|0))>>2]|0;
         $738 = (($737) + ($726))|0;
         HEAP32[((27112 + 8|0))>>2] = $738;
         HEAP32[((27112 + 20|0))>>2] = $725;
         $739 = $738 | 1;
         $$sum40$i$i = (($$sum$i21$i) + 4)|0;
         $740 = (($tbase$247$i) + ($$sum40$i$i)|0);
         HEAP32[$740>>2] = $739;
         $$sum41$i$i = (($738) + ($$sum$i21$i))|0;
         $741 = (($tbase$247$i) + ($$sum41$i$i)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $$sum2$i23$i = (($tsize$246$i) + 4)|0;
        $$sum109$i = (($$sum2$i23$i) + ($720))|0;
        $742 = (($tbase$247$i) + ($$sum109$i)|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         do {
          if ($748) {
           $$sum3738$i$i = $720 | 8;
           $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
           $749 = (($tbase$247$i) + ($$sum119$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $$sum39$i$i = (($tsize$246$i) + 12)|0;
           $$sum120$i = (($$sum39$i$i) + ($720))|0;
           $751 = (($tbase$247$i) + ($$sum120$i)|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = ((27112 + ($753<<2)|0) + 40|0);
           $755 = ($750|0)==($754|0);
           if (!($755)) {
            $756 = HEAP32[((27112 + 16|0))>>2]|0;
            $757 = ($750>>>0)<($756>>>0);
            if ($757) {
             _abort();
             // unreachable;
            }
            $758 = (($750) + 12|0);
            $759 = HEAP32[$758>>2]|0;
            $760 = ($759|0)==($721|0);
            if (!($760)) {
             _abort();
             // unreachable;
            }
           }
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[27112>>2]|0;
            $765 = $764 & $763;
            HEAP32[27112>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           if ($766) {
            $$pre57$i$i = (($752) + 8|0);
            $$pre$phi58$i$iZ2D = $$pre57$i$i;
           } else {
            $767 = HEAP32[((27112 + 16|0))>>2]|0;
            $768 = ($752>>>0)<($767>>>0);
            if ($768) {
             _abort();
             // unreachable;
            }
            $769 = (($752) + 8|0);
            $770 = HEAP32[$769>>2]|0;
            $771 = ($770|0)==($721|0);
            if ($771) {
             $$pre$phi58$i$iZ2D = $769;
            } else {
             _abort();
             // unreachable;
            }
           }
           $772 = (($750) + 12|0);
           HEAP32[$772>>2] = $752;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $750;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
           $773 = (($tbase$247$i) + ($$sum110$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $$sum5$i$i = (($tsize$246$i) + 12)|0;
           $$sum111$i = (($$sum5$i$i) + ($720))|0;
           $775 = (($tbase$247$i) + ($$sum111$i)|0);
           $776 = HEAP32[$775>>2]|0;
           $777 = ($776|0)==($721|0);
           do {
            if ($777) {
             $$sum67$i$i = $720 | 16;
             $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
             $788 = (($tbase$247$i) + ($$sum117$i)|0);
             $789 = HEAP32[$788>>2]|0;
             $790 = ($789|0)==(0|0);
             if ($790) {
              $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
              $791 = (($tbase$247$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $792;$RP$0$i$i = $791;
              }
             } else {
              $R$0$i$i = $789;$RP$0$i$i = $788;
             }
             while(1) {
              $794 = (($R$0$i$i) + 20|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if (!($796)) {
               $R$0$i$i = $795;$RP$0$i$i = $794;
               continue;
              }
              $797 = (($R$0$i$i) + 16|0);
              $798 = HEAP32[$797>>2]|0;
              $799 = ($798|0)==(0|0);
              if ($799) {
               break;
              } else {
               $R$0$i$i = $798;$RP$0$i$i = $797;
              }
             }
             $800 = HEAP32[((27112 + 16|0))>>2]|0;
             $801 = ($RP$0$i$i>>>0)<($800>>>0);
             if ($801) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
             $778 = (($tbase$247$i) + ($$sum112$i)|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = HEAP32[((27112 + 16|0))>>2]|0;
             $781 = ($779>>>0)<($780>>>0);
             if ($781) {
              _abort();
              // unreachable;
             }
             $782 = (($779) + 12|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if (!($784)) {
              _abort();
              // unreachable;
             }
             $785 = (($776) + 8|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==($721|0);
             if ($787) {
              HEAP32[$782>>2] = $776;
              HEAP32[$785>>2] = $779;
              $R$1$i$i = $776;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $802 = ($774|0)==(0|0);
           if (!($802)) {
            $$sum30$i$i = (($tsize$246$i) + 28)|0;
            $$sum113$i = (($$sum30$i$i) + ($720))|0;
            $803 = (($tbase$247$i) + ($$sum113$i)|0);
            $804 = HEAP32[$803>>2]|0;
            $805 = ((27112 + ($804<<2)|0) + 304|0);
            $806 = HEAP32[$805>>2]|0;
            $807 = ($721|0)==($806|0);
            if ($807) {
             HEAP32[$805>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if ($cond$i$i) {
              $808 = 1 << $804;
              $809 = $808 ^ -1;
              $810 = HEAP32[((27112 + 4|0))>>2]|0;
              $811 = $810 & $809;
              HEAP32[((27112 + 4|0))>>2] = $811;
              break;
             }
            } else {
             $812 = HEAP32[((27112 + 16|0))>>2]|0;
             $813 = ($774>>>0)<($812>>>0);
             if ($813) {
              _abort();
              // unreachable;
             }
             $814 = (($774) + 16|0);
             $815 = HEAP32[$814>>2]|0;
             $816 = ($815|0)==($721|0);
             if ($816) {
              HEAP32[$814>>2] = $R$1$i$i;
             } else {
              $817 = (($774) + 20|0);
              HEAP32[$817>>2] = $R$1$i$i;
             }
             $818 = ($R$1$i$i|0)==(0|0);
             if ($818) {
              break;
             }
            }
            $819 = HEAP32[((27112 + 16|0))>>2]|0;
            $820 = ($R$1$i$i>>>0)<($819>>>0);
            if ($820) {
             _abort();
             // unreachable;
            }
            $821 = (($R$1$i$i) + 24|0);
            HEAP32[$821>>2] = $774;
            $$sum3132$i$i = $720 | 16;
            $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
            $822 = (($tbase$247$i) + ($$sum114$i)|0);
            $823 = HEAP32[$822>>2]|0;
            $824 = ($823|0)==(0|0);
            do {
             if (!($824)) {
              $825 = HEAP32[((27112 + 16|0))>>2]|0;
              $826 = ($823>>>0)<($825>>>0);
              if ($826) {
               _abort();
               // unreachable;
              } else {
               $827 = (($R$1$i$i) + 16|0);
               HEAP32[$827>>2] = $823;
               $828 = (($823) + 24|0);
               HEAP32[$828>>2] = $R$1$i$i;
               break;
              }
             }
            } while(0);
            $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
            $829 = (($tbase$247$i) + ($$sum115$i)|0);
            $830 = HEAP32[$829>>2]|0;
            $831 = ($830|0)==(0|0);
            if (!($831)) {
             $832 = HEAP32[((27112 + 16|0))>>2]|0;
             $833 = ($830>>>0)<($832>>>0);
             if ($833) {
              _abort();
              // unreachable;
             } else {
              $834 = (($R$1$i$i) + 20|0);
              HEAP32[$834>>2] = $830;
              $835 = (($830) + 24|0);
              HEAP32[$835>>2] = $R$1$i$i;
              break;
             }
            }
           }
          }
         } while(0);
         $$sum9$i$i = $746 | $720;
         $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
         $836 = (($tbase$247$i) + ($$sum116$i)|0);
         $837 = (($746) + ($726))|0;
         $oldfirst$0$i$i = $836;$qsize$0$i$i = $837;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $838 = (($oldfirst$0$i$i) + 4|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = $839 & -2;
        HEAP32[$838>>2] = $840;
        $841 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i21$i) + 4)|0;
        $842 = (($tbase$247$i) + ($$sum10$i$i)|0);
        HEAP32[$842>>2] = $841;
        $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
        $843 = (($tbase$247$i) + ($$sum11$i24$i)|0);
        HEAP32[$843>>2] = $qsize$0$i$i;
        $844 = $qsize$0$i$i >>> 3;
        $845 = ($qsize$0$i$i>>>0)<(256);
        if ($845) {
         $846 = $844 << 1;
         $847 = ((27112 + ($846<<2)|0) + 40|0);
         $848 = HEAP32[27112>>2]|0;
         $849 = 1 << $844;
         $850 = $848 & $849;
         $851 = ($850|0)==(0);
         if ($851) {
          $852 = $848 | $849;
          HEAP32[27112>>2] = $852;
          $$sum26$pre$i$i = (($846) + 2)|0;
          $$pre$i25$i = ((27112 + ($$sum26$pre$i$i<<2)|0) + 40|0);
          $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $847;
         } else {
          $$sum29$i$i = (($846) + 2)|0;
          $853 = ((27112 + ($$sum29$i$i<<2)|0) + 40|0);
          $854 = HEAP32[$853>>2]|0;
          $855 = HEAP32[((27112 + 16|0))>>2]|0;
          $856 = ($854>>>0)<($855>>>0);
          if ($856) {
           _abort();
           // unreachable;
          } else {
           $$pre$phi$i26$iZ2D = $853;$F4$0$i$i = $854;
          }
         }
         HEAP32[$$pre$phi$i26$iZ2D>>2] = $725;
         $857 = (($F4$0$i$i) + 12|0);
         HEAP32[$857>>2] = $725;
         $$sum27$i$i = (($$sum$i21$i) + 8)|0;
         $858 = (($tbase$247$i) + ($$sum27$i$i)|0);
         HEAP32[$858>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i21$i) + 12)|0;
         $859 = (($tbase$247$i) + ($$sum28$i$i)|0);
         HEAP32[$859>>2] = $847;
         break;
        }
        $860 = $qsize$0$i$i >>> 8;
        $861 = ($860|0)==(0);
        if ($861) {
         $I7$0$i$i = 0;
        } else {
         $862 = ($qsize$0$i$i>>>0)>(16777215);
         if ($862) {
          $I7$0$i$i = 31;
         } else {
          $863 = (($860) + 1048320)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 8;
          $866 = $860 << $865;
          $867 = (($866) + 520192)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 4;
          $870 = $869 | $865;
          $871 = $866 << $869;
          $872 = (($871) + 245760)|0;
          $873 = $872 >>> 16;
          $874 = $873 & 2;
          $875 = $870 | $874;
          $876 = (14 - ($875))|0;
          $877 = $871 << $874;
          $878 = $877 >>> 15;
          $879 = (($876) + ($878))|0;
          $880 = $879 << 1;
          $881 = (($879) + 7)|0;
          $882 = $qsize$0$i$i >>> $881;
          $883 = $882 & 1;
          $884 = $883 | $880;
          $I7$0$i$i = $884;
         }
        }
        $885 = ((27112 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i21$i) + 28)|0;
        $886 = (($tbase$247$i) + ($$sum12$i$i)|0);
        HEAP32[$886>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i21$i) + 16)|0;
        $887 = (($tbase$247$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i21$i) + 20)|0;
        $888 = (($tbase$247$i) + ($$sum14$i$i)|0);
        HEAP32[$888>>2] = 0;
        HEAP32[$887>>2] = 0;
        $889 = HEAP32[((27112 + 4|0))>>2]|0;
        $890 = 1 << $I7$0$i$i;
        $891 = $889 & $890;
        $892 = ($891|0)==(0);
        if ($892) {
         $893 = $889 | $890;
         HEAP32[((27112 + 4|0))>>2] = $893;
         HEAP32[$885>>2] = $725;
         $$sum15$i$i = (($$sum$i21$i) + 24)|0;
         $894 = (($tbase$247$i) + ($$sum15$i$i)|0);
         HEAP32[$894>>2] = $885;
         $$sum16$i$i = (($$sum$i21$i) + 12)|0;
         $895 = (($tbase$247$i) + ($$sum16$i$i)|0);
         HEAP32[$895>>2] = $725;
         $$sum17$i$i = (($$sum$i21$i) + 8)|0;
         $896 = (($tbase$247$i) + ($$sum17$i$i)|0);
         HEAP32[$896>>2] = $725;
         break;
        }
        $897 = HEAP32[$885>>2]|0;
        $898 = ($I7$0$i$i|0)==(31);
        if ($898) {
         $906 = 0;
        } else {
         $899 = $I7$0$i$i >>> 1;
         $900 = (25 - ($899))|0;
         $906 = $900;
        }
        $901 = (($897) + 4|0);
        $902 = HEAP32[$901>>2]|0;
        $903 = $902 & -8;
        $904 = ($903|0)==($qsize$0$i$i|0);
        L444: do {
         if ($904) {
          $T$0$lcssa$i28$i = $897;
         } else {
          $905 = $qsize$0$i$i << $906;
          $K8$052$i$i = $905;$T$051$i$i = $897;
          while(1) {
           $913 = $K8$052$i$i >>> 31;
           $914 = ((($T$051$i$i) + ($913<<2)|0) + 16|0);
           $909 = HEAP32[$914>>2]|0;
           $915 = ($909|0)==(0|0);
           if ($915) {
            break;
           }
           $907 = $K8$052$i$i << 1;
           $908 = (($909) + 4|0);
           $910 = HEAP32[$908>>2]|0;
           $911 = $910 & -8;
           $912 = ($911|0)==($qsize$0$i$i|0);
           if ($912) {
            $T$0$lcssa$i28$i = $909;
            break L444;
           } else {
            $K8$052$i$i = $907;$T$051$i$i = $909;
           }
          }
          $916 = HEAP32[((27112 + 16|0))>>2]|0;
          $917 = ($914>>>0)<($916>>>0);
          if ($917) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$914>>2] = $725;
           $$sum23$i$i = (($$sum$i21$i) + 24)|0;
           $918 = (($tbase$247$i) + ($$sum23$i$i)|0);
           HEAP32[$918>>2] = $T$051$i$i;
           $$sum24$i$i = (($$sum$i21$i) + 12)|0;
           $919 = (($tbase$247$i) + ($$sum24$i$i)|0);
           HEAP32[$919>>2] = $725;
           $$sum25$i$i = (($$sum$i21$i) + 8)|0;
           $920 = (($tbase$247$i) + ($$sum25$i$i)|0);
           HEAP32[$920>>2] = $725;
           break L348;
          }
         }
        } while(0);
        $921 = (($T$0$lcssa$i28$i) + 8|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = HEAP32[((27112 + 16|0))>>2]|0;
        $924 = ($T$0$lcssa$i28$i>>>0)<($923>>>0);
        if ($924) {
         _abort();
         // unreachable;
        }
        $925 = ($922>>>0)<($923>>>0);
        if ($925) {
         _abort();
         // unreachable;
        } else {
         $926 = (($922) + 12|0);
         HEAP32[$926>>2] = $725;
         HEAP32[$921>>2] = $725;
         $$sum20$i$i = (($$sum$i21$i) + 8)|0;
         $927 = (($tbase$247$i) + ($$sum20$i$i)|0);
         HEAP32[$927>>2] = $922;
         $$sum21$i$i = (($$sum$i21$i) + 12)|0;
         $928 = (($tbase$247$i) + ($$sum21$i$i)|0);
         HEAP32[$928>>2] = $T$0$lcssa$i28$i;
         $$sum22$i$i = (($$sum$i21$i) + 24)|0;
         $929 = (($tbase$247$i) + ($$sum22$i$i)|0);
         HEAP32[$929>>2] = 0;
         break;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $930 = (($tbase$247$i) + ($$sum1819$i$i)|0);
      $mem$0 = $930;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((27112 + 448|0));
    while(1) {
     $931 = HEAP32[$sp$0$i$i$i>>2]|0;
     $932 = ($931>>>0)>($636>>>0);
     if (!($932)) {
      $933 = (($sp$0$i$i$i) + 4|0);
      $934 = HEAP32[$933>>2]|0;
      $935 = (($931) + ($934)|0);
      $936 = ($935>>>0)>($636>>>0);
      if ($936) {
       break;
      }
     }
     $937 = (($sp$0$i$i$i) + 8|0);
     $938 = HEAP32[$937>>2]|0;
     $sp$0$i$i$i = $938;
    }
    $$sum$i15$i = (($934) + -47)|0;
    $$sum1$i16$i = (($934) + -39)|0;
    $939 = (($931) + ($$sum1$i16$i)|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    if ($942) {
     $945 = 0;
    } else {
     $943 = (0 - ($940))|0;
     $944 = $943 & 7;
     $945 = $944;
    }
    $$sum2$i17$i = (($$sum$i15$i) + ($945))|0;
    $946 = (($931) + ($$sum2$i17$i)|0);
    $947 = (($636) + 16|0);
    $948 = ($946>>>0)<($947>>>0);
    $949 = $948 ? $636 : $946;
    $950 = (($949) + 8|0);
    $951 = (($tsize$246$i) + -40)|0;
    $952 = (($tbase$247$i) + 8|0);
    $953 = $952;
    $954 = $953 & 7;
    $955 = ($954|0)==(0);
    if ($955) {
     $959 = 0;
    } else {
     $956 = (0 - ($953))|0;
     $957 = $956 & 7;
     $959 = $957;
    }
    $958 = (($tbase$247$i) + ($959)|0);
    $960 = (($951) - ($959))|0;
    HEAP32[((27112 + 24|0))>>2] = $958;
    HEAP32[((27112 + 12|0))>>2] = $960;
    $961 = $960 | 1;
    $$sum$i$i$i = (($959) + 4)|0;
    $962 = (($tbase$247$i) + ($$sum$i$i$i)|0);
    HEAP32[$962>>2] = $961;
    $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
    $963 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
    HEAP32[$963>>2] = 40;
    $964 = HEAP32[((27584 + 16|0))>>2]|0;
    HEAP32[((27112 + 28|0))>>2] = $964;
    $965 = (($949) + 4|0);
    HEAP32[$965>>2] = 27;
    ;HEAP32[$950+0>>2]=HEAP32[((27112 + 448|0))+0>>2]|0;HEAP32[$950+4>>2]=HEAP32[((27112 + 448|0))+4>>2]|0;HEAP32[$950+8>>2]=HEAP32[((27112 + 448|0))+8>>2]|0;HEAP32[$950+12>>2]=HEAP32[((27112 + 448|0))+12>>2]|0;
    HEAP32[((27112 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((27112 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((27112 + 460|0))>>2] = 0;
    HEAP32[((27112 + 456|0))>>2] = $950;
    $966 = (($949) + 28|0);
    HEAP32[$966>>2] = 7;
    $967 = (($949) + 32|0);
    $968 = ($967>>>0)<($935>>>0);
    if ($968) {
     $970 = $966;
     while(1) {
      $969 = (($970) + 4|0);
      HEAP32[$969>>2] = 7;
      $971 = (($970) + 8|0);
      $972 = ($971>>>0)<($935>>>0);
      if ($972) {
       $970 = $969;
      } else {
       break;
      }
     }
    }
    $973 = ($949|0)==($636|0);
    if (!($973)) {
     $974 = $949;
     $975 = $636;
     $976 = (($974) - ($975))|0;
     $977 = (($636) + ($976)|0);
     $$sum3$i$i = (($976) + 4)|0;
     $978 = (($636) + ($$sum3$i$i)|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = $979 & -2;
     HEAP32[$978>>2] = $980;
     $981 = $976 | 1;
     $982 = (($636) + 4|0);
     HEAP32[$982>>2] = $981;
     HEAP32[$977>>2] = $976;
     $983 = $976 >>> 3;
     $984 = ($976>>>0)<(256);
     if ($984) {
      $985 = $983 << 1;
      $986 = ((27112 + ($985<<2)|0) + 40|0);
      $987 = HEAP32[27112>>2]|0;
      $988 = 1 << $983;
      $989 = $987 & $988;
      $990 = ($989|0)==(0);
      if ($990) {
       $991 = $987 | $988;
       HEAP32[27112>>2] = $991;
       $$sum10$pre$i$i = (($985) + 2)|0;
       $$pre$i$i = ((27112 + ($$sum10$pre$i$i<<2)|0) + 40|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $986;
      } else {
       $$sum11$i$i = (($985) + 2)|0;
       $992 = ((27112 + ($$sum11$i$i<<2)|0) + 40|0);
       $993 = HEAP32[$992>>2]|0;
       $994 = HEAP32[((27112 + 16|0))>>2]|0;
       $995 = ($993>>>0)<($994>>>0);
       if ($995) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $992;$F$0$i$i = $993;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $996 = (($F$0$i$i) + 12|0);
      HEAP32[$996>>2] = $636;
      $997 = (($636) + 8|0);
      HEAP32[$997>>2] = $F$0$i$i;
      $998 = (($636) + 12|0);
      HEAP32[$998>>2] = $986;
      break;
     }
     $999 = $976 >>> 8;
     $1000 = ($999|0)==(0);
     if ($1000) {
      $I1$0$i$i = 0;
     } else {
      $1001 = ($976>>>0)>(16777215);
      if ($1001) {
       $I1$0$i$i = 31;
      } else {
       $1002 = (($999) + 1048320)|0;
       $1003 = $1002 >>> 16;
       $1004 = $1003 & 8;
       $1005 = $999 << $1004;
       $1006 = (($1005) + 520192)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 4;
       $1009 = $1008 | $1004;
       $1010 = $1005 << $1008;
       $1011 = (($1010) + 245760)|0;
       $1012 = $1011 >>> 16;
       $1013 = $1012 & 2;
       $1014 = $1009 | $1013;
       $1015 = (14 - ($1014))|0;
       $1016 = $1010 << $1013;
       $1017 = $1016 >>> 15;
       $1018 = (($1015) + ($1017))|0;
       $1019 = $1018 << 1;
       $1020 = (($1018) + 7)|0;
       $1021 = $976 >>> $1020;
       $1022 = $1021 & 1;
       $1023 = $1022 | $1019;
       $I1$0$i$i = $1023;
      }
     }
     $1024 = ((27112 + ($I1$0$i$i<<2)|0) + 304|0);
     $1025 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1025>>2] = $I1$0$c$i$i;
     $1026 = (($636) + 20|0);
     HEAP32[$1026>>2] = 0;
     $1027 = (($636) + 16|0);
     HEAP32[$1027>>2] = 0;
     $1028 = HEAP32[((27112 + 4|0))>>2]|0;
     $1029 = 1 << $I1$0$i$i;
     $1030 = $1028 & $1029;
     $1031 = ($1030|0)==(0);
     if ($1031) {
      $1032 = $1028 | $1029;
      HEAP32[((27112 + 4|0))>>2] = $1032;
      HEAP32[$1024>>2] = $636;
      $1033 = (($636) + 24|0);
      HEAP32[$1033>>2] = $1024;
      $1034 = (($636) + 12|0);
      HEAP32[$1034>>2] = $636;
      $1035 = (($636) + 8|0);
      HEAP32[$1035>>2] = $636;
      break;
     }
     $1036 = HEAP32[$1024>>2]|0;
     $1037 = ($I1$0$i$i|0)==(31);
     if ($1037) {
      $1045 = 0;
     } else {
      $1038 = $I1$0$i$i >>> 1;
      $1039 = (25 - ($1038))|0;
      $1045 = $1039;
     }
     $1040 = (($1036) + 4|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $1041 & -8;
     $1043 = ($1042|0)==($976|0);
     L499: do {
      if ($1043) {
       $T$0$lcssa$i$i = $1036;
      } else {
       $1044 = $976 << $1045;
       $K2$014$i$i = $1044;$T$013$i$i = $1036;
       while(1) {
        $1052 = $K2$014$i$i >>> 31;
        $1053 = ((($T$013$i$i) + ($1052<<2)|0) + 16|0);
        $1048 = HEAP32[$1053>>2]|0;
        $1054 = ($1048|0)==(0|0);
        if ($1054) {
         break;
        }
        $1046 = $K2$014$i$i << 1;
        $1047 = (($1048) + 4|0);
        $1049 = HEAP32[$1047>>2]|0;
        $1050 = $1049 & -8;
        $1051 = ($1050|0)==($976|0);
        if ($1051) {
         $T$0$lcssa$i$i = $1048;
         break L499;
        } else {
         $K2$014$i$i = $1046;$T$013$i$i = $1048;
        }
       }
       $1055 = HEAP32[((27112 + 16|0))>>2]|0;
       $1056 = ($1053>>>0)<($1055>>>0);
       if ($1056) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1053>>2] = $636;
        $1057 = (($636) + 24|0);
        HEAP32[$1057>>2] = $T$013$i$i;
        $1058 = (($636) + 12|0);
        HEAP32[$1058>>2] = $636;
        $1059 = (($636) + 8|0);
        HEAP32[$1059>>2] = $636;
        break L311;
       }
      }
     } while(0);
     $1060 = (($T$0$lcssa$i$i) + 8|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = HEAP32[((27112 + 16|0))>>2]|0;
     $1063 = ($T$0$lcssa$i$i>>>0)<($1062>>>0);
     if ($1063) {
      _abort();
      // unreachable;
     }
     $1064 = ($1061>>>0)<($1062>>>0);
     if ($1064) {
      _abort();
      // unreachable;
     } else {
      $1065 = (($1061) + 12|0);
      HEAP32[$1065>>2] = $636;
      HEAP32[$1060>>2] = $636;
      $1066 = (($636) + 8|0);
      HEAP32[$1066>>2] = $1061;
      $1067 = (($636) + 12|0);
      HEAP32[$1067>>2] = $T$0$lcssa$i$i;
      $1068 = (($636) + 24|0);
      HEAP32[$1068>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $1069 = HEAP32[((27112 + 12|0))>>2]|0;
  $1070 = ($1069>>>0)>($nb$0>>>0);
  if ($1070) {
   $1071 = (($1069) - ($nb$0))|0;
   HEAP32[((27112 + 12|0))>>2] = $1071;
   $1072 = HEAP32[((27112 + 24|0))>>2]|0;
   $1073 = (($1072) + ($nb$0)|0);
   HEAP32[((27112 + 24|0))>>2] = $1073;
   $1074 = $1071 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1075 = (($1072) + ($$sum$i32)|0);
   HEAP32[$1075>>2] = $1074;
   $1076 = $nb$0 | 3;
   $1077 = (($1072) + 4|0);
   HEAP32[$1077>>2] = $1076;
   $1078 = (($1072) + 8|0);
   $mem$0 = $1078;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1079 = (___errno_location()|0);
 HEAP32[$1079>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$057 = 0;
 var $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((27112 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((27112 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $104 = (($mem) + ($$sum3)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((27112 + 8|0))>>2] = $15;
    $108 = HEAP32[$104>>2]|0;
    $109 = $108 & -2;
    HEAP32[$104>>2] = $109;
    $110 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $111 = (($mem) + ($$sum26)|0);
    HEAP32[$111>>2] = $110;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((27112 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[27112>>2]|0;
     $36 = $35 & $34;
     HEAP32[27112>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre69 = (($24) + 8|0);
     $$pre$phi70Z2D = $$pre69;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi70Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi70Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((27112 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((27112 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((27112 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((27112 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((27112 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = HEAP32[((27112 + 16|0))>>2]|0;
      $94 = ($91>>>0)<($93>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = (($R$1) + 16|0);
       HEAP32[$95>>2] = $91;
       $96 = (($91) + 24|0);
       HEAP32[$96>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $97 = (($mem) + ($$sum34)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $100 = HEAP32[((27112 + 16|0))>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = (($R$1) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = (($98) + 24|0);
      HEAP32[$103>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $112 = ($p$0>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $113 = (($mem) + ($$sum25)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[((27112 + 24|0))>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[((27112 + 12|0))>>2]|0;
   $122 = (($121) + ($psize$0))|0;
   HEAP32[((27112 + 12|0))>>2] = $122;
   HEAP32[((27112 + 24|0))>>2] = $p$0;
   $123 = $122 | 1;
   $124 = (($p$0) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[((27112 + 20|0))>>2]|0;
   $126 = ($p$0|0)==($125|0);
   if (!($126)) {
    STACKTOP = sp;return;
   }
   HEAP32[((27112 + 20|0))>>2] = 0;
   HEAP32[((27112 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $127 = HEAP32[((27112 + 20|0))>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[((27112 + 8|0))>>2]|0;
   $130 = (($129) + ($psize$0))|0;
   HEAP32[((27112 + 8|0))>>2] = $130;
   HEAP32[((27112 + 20|0))>>2] = $p$0;
   $131 = $130 | 1;
   $132 = (($p$0) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$0) + ($130)|0);
   HEAP32[$133>>2] = $130;
   STACKTOP = sp;return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$0))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = (($mem) + ($8)|0);
    $139 = HEAP32[$138>>2]|0;
    $$sum2324 = $8 | 4;
    $140 = (($mem) + ($$sum2324)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = ((27112 + ($142<<2)|0) + 40|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[((27112 + 16|0))>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = (($139) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[27112>>2]|0;
     $154 = $153 & $152;
     HEAP32[27112>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre67 = (($141) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $156 = HEAP32[((27112 + 16|0))>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = (($141) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi68Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = (($139) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi68Z2D>>2] = $139;
   } else {
    $$sum5 = (($8) + 16)|0;
    $162 = (($mem) + ($$sum5)|0);
    $163 = HEAP32[$162>>2]|0;
    $$sum67 = $8 | 4;
    $164 = (($mem) + ($$sum67)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $$sum9 = (($8) + 12)|0;
      $177 = (($mem) + ($$sum9)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(0|0);
      if ($179) {
       $$sum8 = (($8) + 8)|0;
       $180 = (($mem) + ($$sum8)|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $181;$RP9$0 = $180;
       }
      } else {
       $R7$0 = $178;$RP9$0 = $177;
      }
      while(1) {
       $183 = (($R7$0) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R7$0 = $184;$RP9$0 = $183;
        continue;
       }
       $186 = (($R7$0) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R7$0 = $187;$RP9$0 = $186;
       }
      }
      $189 = HEAP32[((27112 + 16|0))>>2]|0;
      $190 = ($RP9$0>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $167 = (($mem) + ($8)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[((27112 + 16|0))>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = (($168) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = (($165) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R7$1 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $$sum18 = (($8) + 20)|0;
     $192 = (($mem) + ($$sum18)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((27112 + ($193<<2)|0) + 304|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[((27112 + 4|0))>>2]|0;
       $200 = $199 & $198;
       HEAP32[((27112 + 4|0))>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[((27112 + 16|0))>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = (($163) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R7$1;
      } else {
       $206 = (($163) + 20|0);
       HEAP32[$206>>2] = $R7$1;
      }
      $207 = ($R7$1|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[((27112 + 16|0))>>2]|0;
     $209 = ($R7$1>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = (($R7$1) + 24|0);
     HEAP32[$210>>2] = $163;
     $$sum19 = (($8) + 8)|0;
     $211 = (($mem) + ($$sum19)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = HEAP32[((27112 + 16|0))>>2]|0;
       $215 = ($212>>>0)<($214>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = (($R7$1) + 16|0);
        HEAP32[$216>>2] = $212;
        $217 = (($212) + 24|0);
        HEAP32[$217>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $218 = (($mem) + ($$sum20)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[((27112 + 16|0))>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = (($R7$1) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = (($219) + 24|0);
       HEAP32[$224>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $135 | 1;
  $226 = (($p$0) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($p$0) + ($135)|0);
  HEAP32[$227>>2] = $135;
  $228 = HEAP32[((27112 + 20|0))>>2]|0;
  $229 = ($p$0|0)==($228|0);
  if ($229) {
   HEAP32[((27112 + 8|0))>>2] = $135;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $135;
  }
 } else {
  $230 = $114 & -2;
  HEAP32[$113>>2] = $230;
  $231 = $psize$0 | 1;
  $232 = (($p$0) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($p$0) + ($psize$0)|0);
  HEAP32[$233>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 $235 = ($psize$1>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = ((27112 + ($236<<2)|0) + 40|0);
  $238 = HEAP32[27112>>2]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[27112>>2] = $242;
   $$sum16$pre = (($236) + 2)|0;
   $$pre = ((27112 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $237;
  } else {
   $$sum17 = (($236) + 2)|0;
   $243 = ((27112 + ($$sum17<<2)|0) + 40|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[((27112 + 16|0))>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $243;$F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $247 = (($F16$0) + 12|0);
  HEAP32[$247>>2] = $p$0;
  $248 = (($p$0) + 8|0);
  HEAP32[$248>>2] = $F16$0;
  $249 = (($p$0) + 12|0);
  HEAP32[$249>>2] = $237;
  STACKTOP = sp;return;
 }
 $250 = $psize$1 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $I18$0 = 0;
 } else {
  $252 = ($psize$1>>>0)>(16777215);
  if ($252) {
   $I18$0 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $psize$1 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $I18$0 = $274;
  }
 }
 $275 = ((27112 + ($I18$0<<2)|0) + 304|0);
 $276 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$276>>2] = $I18$0$c;
 $277 = (($p$0) + 20|0);
 HEAP32[$277>>2] = 0;
 $278 = (($p$0) + 16|0);
 HEAP32[$278>>2] = 0;
 $279 = HEAP32[((27112 + 4|0))>>2]|0;
 $280 = 1 << $I18$0;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 L199: do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[((27112 + 4|0))>>2] = $283;
   HEAP32[$275>>2] = $p$0;
   $284 = (($p$0) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = (($p$0) + 12|0);
   HEAP32[$285>>2] = $p$0;
   $286 = (($p$0) + 8|0);
   HEAP32[$286>>2] = $p$0;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($I18$0|0)==(31);
   if ($288) {
    $296 = 0;
   } else {
    $289 = $I18$0 >>> 1;
    $290 = (25 - ($289))|0;
    $296 = $290;
   }
   $291 = (($287) + 4|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 & -8;
   $294 = ($293|0)==($psize$1|0);
   L205: do {
    if ($294) {
     $T$0$lcssa = $287;
    } else {
     $295 = $psize$1 << $296;
     $K19$057 = $295;$T$056 = $287;
     while(1) {
      $303 = $K19$057 >>> 31;
      $304 = ((($T$056) + ($303<<2)|0) + 16|0);
      $299 = HEAP32[$304>>2]|0;
      $305 = ($299|0)==(0|0);
      if ($305) {
       break;
      }
      $297 = $K19$057 << 1;
      $298 = (($299) + 4|0);
      $300 = HEAP32[$298>>2]|0;
      $301 = $300 & -8;
      $302 = ($301|0)==($psize$1|0);
      if ($302) {
       $T$0$lcssa = $299;
       break L205;
      } else {
       $K19$057 = $297;$T$056 = $299;
      }
     }
     $306 = HEAP32[((27112 + 16|0))>>2]|0;
     $307 = ($304>>>0)<($306>>>0);
     if ($307) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$304>>2] = $p$0;
      $308 = (($p$0) + 24|0);
      HEAP32[$308>>2] = $T$056;
      $309 = (($p$0) + 12|0);
      HEAP32[$309>>2] = $p$0;
      $310 = (($p$0) + 8|0);
      HEAP32[$310>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $311 = (($T$0$lcssa) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[((27112 + 16|0))>>2]|0;
   $314 = ($T$0$lcssa>>>0)<($313>>>0);
   if ($314) {
    _abort();
    // unreachable;
   }
   $315 = ($312>>>0)<($313>>>0);
   if ($315) {
    _abort();
    // unreachable;
   } else {
    $316 = (($312) + 12|0);
    HEAP32[$316>>2] = $p$0;
    HEAP32[$311>>2] = $p$0;
    $317 = (($p$0) + 8|0);
    HEAP32[$317>>2] = $312;
    $318 = (($p$0) + 12|0);
    HEAP32[$318>>2] = $T$0$lcssa;
    $319 = (($p$0) + 24|0);
    HEAP32[$319>>2] = 0;
    break;
   }
  }
 } while(0);
 $320 = HEAP32[((27112 + 32|0))>>2]|0;
 $321 = (($320) + -1)|0;
 HEAP32[((27112 + 32|0))>>2] = $321;
 $322 = ($321|0)==(0);
 if ($322) {
  $sp$0$in$i = ((27112 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $323 = ($sp$0$i|0)==(0|0);
  $324 = (($sp$0$i) + 8|0);
  if ($323) {
   break;
  } else {
   $sp$0$in$i = $324;
  }
 }
 HEAP32[((27112 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return ($6|0);
 }
 $8 = (($6) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  STACKTOP = sp;return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 STACKTOP = sp;return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   if ($4) {
    $8 = 16;
   } else {
    $5 = (($bytes) + 11)|0;
    $6 = $5 & -8;
    $8 = $6;
   }
   $7 = (($oldmem) + -8|0);
   $9 = (_try_realloc_chunk($7,$8)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = (($9) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = (($oldmem) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 STACKTOP = sp;return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0;
 var $cond = 0, $newp$0 = 0, $or$cond = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((27112 + 16|0))>>2]|0;
 $5 = ($p>>>0)<($4>>>0);
 if ($5) {
  _abort();
  // unreachable;
 }
 $6 = $1 & 3;
 $7 = ($6|0)!=(1);
 $8 = ($p>>>0)<($3>>>0);
 $or$cond = $7 & $8;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $9 = (($p) + ($$sum2728)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($6|0)==(0);
 if ($13) {
  $14 = ($nb>>>0)<(256);
  if ($14) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $15 = (($nb) + 4)|0;
  $16 = ($2>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($2) - ($nb))|0;
   $18 = HEAP32[((27584 + 8|0))>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $21 = ($2>>>0)<($nb>>>0);
 if (!($21)) {
  $22 = (($2) - ($nb))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $24 = (($p) + ($nb)|0);
  $25 = $1 & 1;
  $26 = $25 | $nb;
  $27 = $26 | 2;
  HEAP32[$0>>2] = $27;
  $$sum23 = (($nb) + 4)|0;
  $28 = (($p) + ($$sum23)|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = HEAP32[$9>>2]|0;
  $31 = $30 | 1;
  HEAP32[$9>>2] = $31;
  _dispose_chunk($24,$22);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $32 = HEAP32[((27112 + 24|0))>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[((27112 + 12|0))>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $$sum22 = (($nb) + 4)|0;
  $42 = (($p) + ($$sum22)|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[((27112 + 24|0))>>2] = $38;
  HEAP32[((27112 + 12|0))>>2] = $37;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $44 = HEAP32[((27112 + 20|0))>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[((27112 + 8|0))>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($p) + ($47)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $$sum19 = (($nb) + 4)|0;
   $56 = (($p) + ($$sum19)|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $$sum20 = (($47) + 4)|0;
   $58 = (($p) + ($$sum20)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge21 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $$sum17 = (($47) + 4)|0;
   $64 = (($p) + ($$sum17)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 | 1;
   HEAP32[$64>>2] = $66;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((27112 + 8|0))>>2] = $storemerge21;
  HEAP32[((27112 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $67 = $10 & 2;
 $68 = ($67|0)==(0);
 if (!($68)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $69 = $10 & -8;
 $70 = (($69) + ($2))|0;
 $71 = ($70>>>0)<($nb>>>0);
 if ($71) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $72 = (($70) - ($nb))|0;
 $73 = $10 >>> 3;
 $74 = ($10>>>0)<(256);
 do {
  if ($74) {
   $$sum15 = (($2) + 8)|0;
   $75 = (($p) + ($$sum15)|0);
   $76 = HEAP32[$75>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $77 = (($p) + ($$sum16)|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $73 << 1;
   $80 = ((27112 + ($79<<2)|0) + 40|0);
   $81 = ($76|0)==($80|0);
   if (!($81)) {
    $82 = ($76>>>0)<($4>>>0);
    if ($82) {
     _abort();
     // unreachable;
    }
    $83 = (($76) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)==($3|0);
    if (!($85)) {
     _abort();
     // unreachable;
    }
   }
   $86 = ($78|0)==($76|0);
   if ($86) {
    $87 = 1 << $73;
    $88 = $87 ^ -1;
    $89 = HEAP32[27112>>2]|0;
    $90 = $89 & $88;
    HEAP32[27112>>2] = $90;
    break;
   }
   $91 = ($78|0)==($80|0);
   if ($91) {
    $$pre = (($78) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $92 = ($78>>>0)<($4>>>0);
    if ($92) {
     _abort();
     // unreachable;
    }
    $93 = (($78) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==($3|0);
    if ($95) {
     $$pre$phiZ2D = $93;
    } else {
     _abort();
     // unreachable;
    }
   }
   $96 = (($76) + 12|0);
   HEAP32[$96>>2] = $78;
   HEAP32[$$pre$phiZ2D>>2] = $76;
  } else {
   $$sum = (($2) + 24)|0;
   $97 = (($p) + ($$sum)|0);
   $98 = HEAP32[$97>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $99 = (($p) + ($$sum2)|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ($100|0)==($3|0);
   do {
    if ($101) {
     $$sum4 = (($2) + 20)|0;
     $111 = (($p) + ($$sum4)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==(0|0);
     if ($113) {
      $$sum3 = (($2) + 16)|0;
      $114 = (($p) + ($$sum3)|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ($115|0)==(0|0);
      if ($116) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $115;$RP$0 = $114;
      }
     } else {
      $R$0 = $112;$RP$0 = $111;
     }
     while(1) {
      $117 = (($R$0) + 20|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = ($118|0)==(0|0);
      if (!($119)) {
       $R$0 = $118;$RP$0 = $117;
       continue;
      }
      $120 = (($R$0) + 16|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if ($122) {
       break;
      } else {
       $R$0 = $121;$RP$0 = $120;
      }
     }
     $123 = ($RP$0>>>0)<($4>>>0);
     if ($123) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $102 = (($p) + ($$sum14)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103>>>0)<($4>>>0);
     if ($104) {
      _abort();
      // unreachable;
     }
     $105 = (($103) + 12|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)==($3|0);
     if (!($107)) {
      _abort();
      // unreachable;
     }
     $108 = (($100) + 8|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($3|0);
     if ($110) {
      HEAP32[$105>>2] = $100;
      HEAP32[$108>>2] = $103;
      $R$1 = $100;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $124 = ($98|0)==(0|0);
   if (!($124)) {
    $$sum11 = (($2) + 28)|0;
    $125 = (($p) + ($$sum11)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((27112 + ($126<<2)|0) + 304|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($3|0)==($128|0);
    if ($129) {
     HEAP32[$127>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $130 = 1 << $126;
      $131 = $130 ^ -1;
      $132 = HEAP32[((27112 + 4|0))>>2]|0;
      $133 = $132 & $131;
      HEAP32[((27112 + 4|0))>>2] = $133;
      break;
     }
    } else {
     $134 = HEAP32[((27112 + 16|0))>>2]|0;
     $135 = ($98>>>0)<($134>>>0);
     if ($135) {
      _abort();
      // unreachable;
     }
     $136 = (($98) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)==($3|0);
     if ($138) {
      HEAP32[$136>>2] = $R$1;
     } else {
      $139 = (($98) + 20|0);
      HEAP32[$139>>2] = $R$1;
     }
     $140 = ($R$1|0)==(0|0);
     if ($140) {
      break;
     }
    }
    $141 = HEAP32[((27112 + 16|0))>>2]|0;
    $142 = ($R$1>>>0)<($141>>>0);
    if ($142) {
     _abort();
     // unreachable;
    }
    $143 = (($R$1) + 24|0);
    HEAP32[$143>>2] = $98;
    $$sum12 = (($2) + 16)|0;
    $144 = (($p) + ($$sum12)|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ($145|0)==(0|0);
    do {
     if (!($146)) {
      $147 = HEAP32[((27112 + 16|0))>>2]|0;
      $148 = ($145>>>0)<($147>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = (($R$1) + 16|0);
       HEAP32[$149>>2] = $145;
       $150 = (($145) + 24|0);
       HEAP32[$150>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $151 = (($p) + ($$sum13)|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[((27112 + 16|0))>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = (($R$1) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = (($152) + 24|0);
      HEAP32[$157>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($72>>>0)<(16);
 if ($158) {
  $159 = HEAP32[$0>>2]|0;
  $160 = $159 & 1;
  $161 = $70 | $160;
  $162 = $161 | 2;
  HEAP32[$0>>2] = $162;
  $$sum910 = $70 | 4;
  $163 = (($p) + ($$sum910)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = HEAP32[$0>>2]|0;
  $168 = $167 & 1;
  $169 = $168 | $nb;
  $170 = $169 | 2;
  HEAP32[$0>>2] = $170;
  $$sum5 = (($nb) + 4)|0;
  $171 = (($p) + ($$sum5)|0);
  $172 = $72 | 3;
  HEAP32[$171>>2] = $172;
  $$sum78 = $70 | 4;
  $173 = (($p) + ($$sum78)|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$72);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return 0|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$pre62 = 0, $$pre64 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$049 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$048 = 0, $cond = 0, $cond46 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((27112 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((27112 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $100 = (($p) + ($$sum)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((27112 + 8|0))>>2] = $10;
    $104 = HEAP32[$100>>2]|0;
    $105 = $104 & -2;
    HEAP32[$100>>2] = $105;
    $106 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $107 = (($p) + ($$sum20)|0);
    HEAP32[$107>>2] = $106;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((27112 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[27112>>2]|0;
     $32 = $31 & $30;
     HEAP32[27112>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre64 = (($20) + 8|0);
     $$pre$phi65Z2D = $$pre64;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi65Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi65Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((27112 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((27112 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((27112 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((27112 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((27112 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = HEAP32[((27112 + 16|0))>>2]|0;
      $90 = ($87>>>0)<($89>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = (($R$1) + 16|0);
       HEAP32[$91>>2] = $87;
       $92 = (($87) + 24|0);
       HEAP32[$92>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $93 = (($p) + ($$sum28)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$0 = $9;$$02 = $10;
    } else {
     $96 = HEAP32[((27112 + 16|0))>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = (($R$1) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = (($94) + 24|0);
      HEAP32[$99>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $108 = HEAP32[((27112 + 16|0))>>2]|0;
 $109 = ($0>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $110 = (($p) + ($$sum1)|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[((27112 + 24|0))>>2]|0;
  $115 = ($0|0)==($114|0);
  if ($115) {
   $116 = HEAP32[((27112 + 12|0))>>2]|0;
   $117 = (($116) + ($$02))|0;
   HEAP32[((27112 + 12|0))>>2] = $117;
   HEAP32[((27112 + 24|0))>>2] = $$0;
   $118 = $117 | 1;
   $119 = (($$0) + 4|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[((27112 + 20|0))>>2]|0;
   $121 = ($$0|0)==($120|0);
   if (!($121)) {
    STACKTOP = sp;return;
   }
   HEAP32[((27112 + 20|0))>>2] = 0;
   HEAP32[((27112 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $122 = HEAP32[((27112 + 20|0))>>2]|0;
  $123 = ($0|0)==($122|0);
  if ($123) {
   $124 = HEAP32[((27112 + 8|0))>>2]|0;
   $125 = (($124) + ($$02))|0;
   HEAP32[((27112 + 8|0))>>2] = $125;
   HEAP32[((27112 + 20|0))>>2] = $$0;
   $126 = $125 | 1;
   $127 = (($$0) + 4|0);
   HEAP32[$127>>2] = $126;
   $128 = (($$0) + ($125)|0);
   HEAP32[$128>>2] = $125;
   STACKTOP = sp;return;
  }
  $129 = $111 & -8;
  $130 = (($129) + ($$02))|0;
  $131 = $111 >>> 3;
  $132 = ($111>>>0)<(256);
  do {
   if ($132) {
    $$sum18 = (($psize) + 8)|0;
    $133 = (($p) + ($$sum18)|0);
    $134 = HEAP32[$133>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $135 = (($p) + ($$sum19)|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $131 << 1;
    $138 = ((27112 + ($137<<2)|0) + 40|0);
    $139 = ($134|0)==($138|0);
    if (!($139)) {
     $140 = ($134>>>0)<($108>>>0);
     if ($140) {
      _abort();
      // unreachable;
     }
     $141 = (($134) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==($0|0);
     if (!($143)) {
      _abort();
      // unreachable;
     }
    }
    $144 = ($136|0)==($134|0);
    if ($144) {
     $145 = 1 << $131;
     $146 = $145 ^ -1;
     $147 = HEAP32[27112>>2]|0;
     $148 = $147 & $146;
     HEAP32[27112>>2] = $148;
     break;
    }
    $149 = ($136|0)==($138|0);
    if ($149) {
     $$pre62 = (($136) + 8|0);
     $$pre$phi63Z2D = $$pre62;
    } else {
     $150 = ($136>>>0)<($108>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($136) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==($0|0);
     if ($153) {
      $$pre$phi63Z2D = $151;
     } else {
      _abort();
      // unreachable;
     }
    }
    $154 = (($134) + 12|0);
    HEAP32[$154>>2] = $136;
    HEAP32[$$pre$phi63Z2D>>2] = $134;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $155 = (($p) + ($$sum2)|0);
    $156 = HEAP32[$155>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $157 = (($p) + ($$sum3)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==($0|0);
    do {
     if ($159) {
      $$sum5 = (($psize) + 20)|0;
      $169 = (($p) + ($$sum5)|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $$sum4 = (($psize) + 16)|0;
       $172 = (($p) + ($$sum4)|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($173|0)==(0|0);
       if ($174) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $173;$RP9$0 = $172;
       }
      } else {
       $R7$0 = $170;$RP9$0 = $169;
      }
      while(1) {
       $175 = (($R7$0) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if (!($177)) {
        $R7$0 = $176;$RP9$0 = $175;
        continue;
       }
       $178 = (($R7$0) + 16|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      }
      $181 = ($RP9$0>>>0)<($108>>>0);
      if ($181) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $160 = (($p) + ($$sum17)|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($161>>>0)<($108>>>0);
      if ($162) {
       _abort();
       // unreachable;
      }
      $163 = (($161) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==($0|0);
      if (!($165)) {
       _abort();
       // unreachable;
      }
      $166 = (($158) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==($0|0);
      if ($168) {
       HEAP32[$163>>2] = $158;
       HEAP32[$166>>2] = $161;
       $R7$1 = $158;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $182 = ($156|0)==(0|0);
    if (!($182)) {
     $$sum14 = (($psize) + 28)|0;
     $183 = (($p) + ($$sum14)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ((27112 + ($184<<2)|0) + 304|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($0|0)==($186|0);
     if ($187) {
      HEAP32[$185>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $188 = 1 << $184;
       $189 = $188 ^ -1;
       $190 = HEAP32[((27112 + 4|0))>>2]|0;
       $191 = $190 & $189;
       HEAP32[((27112 + 4|0))>>2] = $191;
       break;
      }
     } else {
      $192 = HEAP32[((27112 + 16|0))>>2]|0;
      $193 = ($156>>>0)<($192>>>0);
      if ($193) {
       _abort();
       // unreachable;
      }
      $194 = (($156) + 16|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)==($0|0);
      if ($196) {
       HEAP32[$194>>2] = $R7$1;
      } else {
       $197 = (($156) + 20|0);
       HEAP32[$197>>2] = $R7$1;
      }
      $198 = ($R7$1|0)==(0|0);
      if ($198) {
       break;
      }
     }
     $199 = HEAP32[((27112 + 16|0))>>2]|0;
     $200 = ($R7$1>>>0)<($199>>>0);
     if ($200) {
      _abort();
      // unreachable;
     }
     $201 = (($R7$1) + 24|0);
     HEAP32[$201>>2] = $156;
     $$sum15 = (($psize) + 16)|0;
     $202 = (($p) + ($$sum15)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0|0);
     do {
      if (!($204)) {
       $205 = HEAP32[((27112 + 16|0))>>2]|0;
       $206 = ($203>>>0)<($205>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = (($R7$1) + 16|0);
        HEAP32[$207>>2] = $203;
        $208 = (($203) + 24|0);
        HEAP32[$208>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $209 = (($p) + ($$sum16)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[((27112 + 16|0))>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = (($R7$1) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = (($210) + 24|0);
       HEAP32[$215>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $130 | 1;
  $217 = (($$0) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$0) + ($130)|0);
  HEAP32[$218>>2] = $130;
  $219 = HEAP32[((27112 + 20|0))>>2]|0;
  $220 = ($$0|0)==($219|0);
  if ($220) {
   HEAP32[((27112 + 8|0))>>2] = $130;
   STACKTOP = sp;return;
  } else {
   $$1 = $130;
  }
 } else {
  $221 = $111 & -2;
  HEAP32[$110>>2] = $221;
  $222 = $$02 | 1;
  $223 = (($$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$0) + ($$02)|0);
  HEAP32[$224>>2] = $$02;
  $$1 = $$02;
 }
 $225 = $$1 >>> 3;
 $226 = ($$1>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = ((27112 + ($227<<2)|0) + 40|0);
  $229 = HEAP32[27112>>2]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[27112>>2] = $233;
   $$sum12$pre = (($227) + 2)|0;
   $$pre = ((27112 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $228;
  } else {
   $$sum13 = (($227) + 2)|0;
   $234 = ((27112 + ($$sum13<<2)|0) + 40|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[((27112 + 16|0))>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $234;$F16$0 = $235;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $238 = (($F16$0) + 12|0);
  HEAP32[$238>>2] = $$0;
  $239 = (($$0) + 8|0);
  HEAP32[$239>>2] = $F16$0;
  $240 = (($$0) + 12|0);
  HEAP32[$240>>2] = $228;
  STACKTOP = sp;return;
 }
 $241 = $$1 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $I19$0 = 0;
 } else {
  $243 = ($$1>>>0)>(16777215);
  if ($243) {
   $I19$0 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$1 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $I19$0 = $265;
  }
 }
 $266 = ((27112 + ($I19$0<<2)|0) + 304|0);
 $267 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$267>>2] = $I19$0$c;
 $268 = (($$0) + 20|0);
 HEAP32[$268>>2] = 0;
 $269 = (($$0) + 16|0);
 HEAP32[$269>>2] = 0;
 $270 = HEAP32[((27112 + 4|0))>>2]|0;
 $271 = 1 << $I19$0;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[((27112 + 4|0))>>2] = $274;
  HEAP32[$266>>2] = $$0;
  $275 = (($$0) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = (($$0) + 12|0);
  HEAP32[$276>>2] = $$0;
  $277 = (($$0) + 8|0);
  HEAP32[$277>>2] = $$0;
  STACKTOP = sp;return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($I19$0|0)==(31);
 if ($279) {
  $287 = 0;
 } else {
  $280 = $I19$0 >>> 1;
  $281 = (25 - ($280))|0;
  $287 = $281;
 }
 $282 = (($278) + 4|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = $283 & -8;
 $285 = ($284|0)==($$1|0);
 L194: do {
  if ($285) {
   $T$0$lcssa = $278;
  } else {
   $286 = $$1 << $287;
   $K20$049 = $286;$T$048 = $278;
   while(1) {
    $294 = $K20$049 >>> 31;
    $295 = ((($T$048) + ($294<<2)|0) + 16|0);
    $290 = HEAP32[$295>>2]|0;
    $296 = ($290|0)==(0|0);
    if ($296) {
     break;
    }
    $288 = $K20$049 << 1;
    $289 = (($290) + 4|0);
    $291 = HEAP32[$289>>2]|0;
    $292 = $291 & -8;
    $293 = ($292|0)==($$1|0);
    if ($293) {
     $T$0$lcssa = $290;
     break L194;
    } else {
     $K20$049 = $288;$T$048 = $290;
    }
   }
   $297 = HEAP32[((27112 + 16|0))>>2]|0;
   $298 = ($295>>>0)<($297>>>0);
   if ($298) {
    _abort();
    // unreachable;
   }
   HEAP32[$295>>2] = $$0;
   $299 = (($$0) + 24|0);
   HEAP32[$299>>2] = $T$048;
   $300 = (($$0) + 12|0);
   HEAP32[$300>>2] = $$0;
   $301 = (($$0) + 8|0);
   HEAP32[$301>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $302 = (($T$0$lcssa) + 8|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = HEAP32[((27112 + 16|0))>>2]|0;
 $305 = ($T$0$lcssa>>>0)<($304>>>0);
 if ($305) {
  _abort();
  // unreachable;
 }
 $306 = ($303>>>0)<($304>>>0);
 if ($306) {
  _abort();
  // unreachable;
 }
 $307 = (($303) + 12|0);
 HEAP32[$307>>2] = $$0;
 HEAP32[$302>>2] = $$0;
 $308 = (($$0) + 8|0);
 HEAP32[$308>>2] = $303;
 $309 = (($$0) + 12|0);
 HEAP32[$309>>2] = $T$0$lcssa;
 $310 = (($$0) + 24|0);
 HEAP32[$310>>2] = 0;
 STACKTOP = sp;return;
}
function __Znwj($size) {
 $size = $size|0;
 var $$size = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 while(1) {
  $1 = (_malloc($$size)|0);
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   label = 10;
   break;
  }
  $3 = HEAP32[27608>>2]|0;HEAP32[27608>>2] = (($3+0)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 9;
   break;
  }
  $5 = $3;
  __THREW__ = 0;
  invoke_v($5|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   label = 5;
   break;
  }
 }
 do {
  if ((label|0) == 5) {
   $8 = ___cxa_find_matching_catch(-1,-1,27672|0)|0;
   $9 = tempRet0;
   $lpad$phi$index = $8;$lpad$phi$index2 = $9;
  }
  else if ((label|0) == 9) {
   $13 = (___cxa_allocate_exception(4)|0);
   HEAP32[$13>>2] = ((27616 + 8|0));
   __THREW__ = 0;
   invoke_viii(7,($13|0),(27672|0),(110|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $10 = ___cxa_find_matching_catch(-1,-1,27672|0)|0;
    $11 = tempRet0;
    $lpad$phi$index = $10;$lpad$phi$index2 = $11;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 10) {
   STACKTOP = sp;return ($1|0);
  }
 } while(0);
 $12 = ($lpad$phi$index2|0)<(0);
 if ($12) {
  ___cxa_call_unexpected(($lpad$phi$index|0));
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return 0|0;
}
function __Znaj($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_ii(72,($size|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  STACKTOP = sp;return ($0|0);
 }
 $3 = ___cxa_find_matching_catch(-1,-1,27672|0)|0;
 $4 = tempRet0;
 $5 = ($4|0)<(0);
 if ($5) {
  ___cxa_call_unexpected(($3|0));
  // unreachable;
 } else {
  ___resumeException($3|0);
  // unreachable;
 }
 return 0|0;
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if (!($0)) {
  _free($ptr);
 }
 STACKTOP = sp;return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9exceptionD2Ev(($this|0));
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9exceptionD2Ev(($this|0));
 STACKTOP = sp;return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (27640|0);
}
function __ZSt17__throw_bad_allocv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(4)|0);
 HEAP32[$0>>2] = ((27616 + 8|0));
 ___cxa_throw(($0|0),(27672|0),(110|0));
 // unreachable;
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$$i22 = 0, $$0 = 0.0, $$02$i = 0, $$08$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$10$i = 0, $$14$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$38$i = 0, $$388$i = 0, $$397$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa43$i = 0, $$lnz$0$i = 0;
 var $$neg20$i = 0, $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i17 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us53$i = 0, $$x$4$i = 0, $$y$3$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0;
 var $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0.0, $473 = 0, $474 = 0.0, $475 = 0.0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0, $482 = 0, $483 = 0, $484 = 0.0, $485 = 0.0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0.0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0.0, $682 = 0, $683 = 0.0;
 var $684 = 0.0, $685 = 0.0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0.0, $691 = 0, $692 = 0, $693 = 0, $694 = 0.0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0.0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0.0, $707 = 0, $708 = 0, $709 = 0.0, $71 = 0, $710 = 0.0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$061$i = 0, $a$1$i = 0, $a$2$ph40$i = 0;
 var $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$427$i = 0, $a$5$i = 0, $bias$0$i = 0.0, $bias$07$i = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge107 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$169 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$364 = 0, $c$4 = 0;
 var $c$5 = 0, $c$6 = 0, $carry$063$i = 0, $carry1$0$us$i = 0, $carry1$0$us49$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us54$i = 0, $carry3$030$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us44$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0;
 var $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i9 = 0, $gotdig$2$i = 0, $gotdig$2$i11 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$381$i = 0, $gotdig$393$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i12 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0;
 var $gotrad$194$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$025$i = 0, $i$068 = 0, $i$1$i = 0, $i$166 = 0, $i$263 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$086$i = 0, $j$096$i = 0, $j$2$i = 0, $j$371$i = 0, $k$0$lcssa$i = 0, $k$084$i = 0;
 var $k$095$i = 0, $k$2$i = 0, $k$3$i = 0, $k$462$i = 0, $k$5$in$us$i = 0, $k$5$in$us48$i = 0, $k$5$us$i = 0, $k$5$us50$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us56$i = 0, $k$628$i = 0, $lnz$0$lcssa$i = 0, $lnz$079$i = 0, $lnz$092$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i15 = 0;
 var $or$cond106$not = 0, $or$cond11$i = 0, $or$cond12$us$i = 0, $or$cond12$us55$i = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0, $or$cond3$i = 0, $or$cond3$i16 = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond7$i = 0, $or$cond789$i = 0, $or$cond8 = 0, $rp$0$lcssa162$i = 0, $rp$060$i = 0, $rp$1$i18 = 0, $rp$2$ph38$i = 0, $rp$3$i$ph = 0;
 var $rp$3$ph33$i = 0, $rp$426$i = 0, $rp$5$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$313$i = 0, $x$4$lcssa$i = 0, $x$48$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i24 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$39$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph39$i = 0, $z$1$us$i = 0, $z$1$us45$i = 0, $z$2$us$i = 0, $z$2$us47$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us57$i = 0, $z$4$i = 0, $z$5$ph$i = 0;
 var $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $x$i = sp;
 if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace(($9|0))|0);
  $11 = ($10|0)==(0);
  if ($11) {
   break;
  }
 }
 $12 = ($9|0)==(45);
 do {
  if ((($9|0) == 43) | (($9|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $9;$sign$0 = 1;
  }
 } while(0);
 $c$169 = $c$0;$i$068 = 0;
 while(1) {
  $23 = $c$169 | 32;
  $24 = (27688 + ($i$068)|0);
  $25 = HEAP8[$24]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$169;$i$0$lcssa = $i$068;
   break;
  }
  $28 = ($i$068>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$169;
   }
  } while(0);
  $36 = (($i$068) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$169 = $c$2;$i$068 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)<(4);
   $39 = ($pok|0)==(0);
   $or$cond = $38 | $39;
   if (!($or$cond)) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $52 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($52) {
     $c$364 = $c$1$lcssa;$i$263 = 0;
     while(1) {
      $53 = $c$364 | 32;
      $54 = (27704 + ($i$263)|0);
      $55 = HEAP8[$54]|0;
      $56 = $55 << 24 >> 24;
      $57 = ($53|0)==($56|0);
      if (!($57)) {
       $c$5 = $c$364;$i$3 = $i$263;
       break L34;
      }
      $58 = ($i$263>>>0)<(2);
      do {
       if ($58) {
        $59 = HEAP32[$0>>2]|0;
        $60 = HEAP32[$1>>2]|0;
        $61 = ($59>>>0)<($60>>>0);
        if ($61) {
         $62 = (($59) + 1|0);
         HEAP32[$0>>2] = $62;
         $63 = HEAP8[$59]|0;
         $64 = $63&255;
         $c$4 = $64;
         break;
        } else {
         $65 = (___shgetc($f)|0);
         $c$4 = $65;
         break;
        }
       } else {
        $c$4 = $c$364;
       }
      } while(0);
      $66 = (($i$263) + 1)|0;
      $67 = ($66>>>0)<(3);
      if ($67) {
       $c$364 = $c$4;$i$263 = $66;
      } else {
       $c$5 = $c$4;$i$3 = $66;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 3)) {
    $68 = HEAP32[$0>>2]|0;
    $69 = HEAP32[$1>>2]|0;
    $70 = ($68>>>0)<($69>>>0);
    if ($70) {
     $71 = (($68) + 1|0);
     HEAP32[$0>>2] = $71;
     $72 = HEAP8[$68]|0;
     $73 = $72&255;
     $76 = $73;
    } else {
     $74 = (___shgetc($f)|0);
     $76 = $74;
    }
    $75 = ($76|0)==(40);
    if ($75) {
     $i$4 = 1;
    } else {
     $77 = HEAP32[$1>>2]|0;
     $78 = ($77|0)==(0|0);
     if ($78) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $79 = HEAP32[$0>>2]|0;
     $80 = (($79) + -1|0);
     HEAP32[$0>>2] = $80;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    while(1) {
     $81 = HEAP32[$0>>2]|0;
     $82 = HEAP32[$1>>2]|0;
     $83 = ($81>>>0)<($82>>>0);
     if ($83) {
      $84 = (($81) + 1|0);
      HEAP32[$0>>2] = $84;
      $85 = HEAP8[$81]|0;
      $86 = $85&255;
      $89 = $86;
     } else {
      $87 = (___shgetc($f)|0);
      $89 = $87;
     }
     $88 = (($89) + -48)|0;
     $90 = ($88>>>0)<(10);
     $91 = (($89) + -65)|0;
     $92 = ($91>>>0)<(26);
     $or$cond8 = $90 | $92;
     if (!($or$cond8)) {
      $93 = (($89) + -97)|0;
      $94 = ($93>>>0)<(26);
      $95 = ($89|0)==(95);
      $or$cond5 = $94 | $95;
      if (!($or$cond5)) {
       break;
      }
     }
     $107 = (($i$4) + 1)|0;
     $i$4 = $107;
    }
    $96 = ($89|0)==(41);
    if ($96) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $97 = HEAP32[$1>>2]|0;
    $98 = ($97|0)==(0|0);
    if (!($98)) {
     $99 = HEAP32[$0>>2]|0;
     $100 = (($99) + -1|0);
     HEAP32[$0>>2] = $100;
    }
    if ($39) {
     $102 = (___errno_location()|0);
     HEAP32[$102>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $101 = ($i$4|0)==(0);
    $brmerge107 = $101 | $98;
    if ($brmerge107) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    } else {
     $$in = $i$4;
    }
    while(1) {
     $103 = (($$in) + -1)|0;
     $104 = HEAP32[$0>>2]|0;
     $105 = (($104) + -1|0);
     HEAP32[$0>>2] = $105;
     $106 = ($103|0)==(0);
     if ($106) {
      $$0 = nan;
      break;
     } else {
      $$in = $103;
     }
    }
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 0)) {
    $113 = ($c$5|0)==(48);
    do {
     if ($113) {
      $114 = HEAP32[$0>>2]|0;
      $115 = HEAP32[$1>>2]|0;
      $116 = ($114>>>0)<($115>>>0);
      if ($116) {
       $117 = (($114) + 1|0);
       HEAP32[$0>>2] = $117;
       $118 = HEAP8[$114]|0;
       $119 = $118&255;
       $122 = $119;
      } else {
       $120 = (___shgetc($f)|0);
       $122 = $120;
      }
      $121 = $122 | 32;
      $123 = ($121|0)==(120);
      if (!($123)) {
       $321 = HEAP32[$1>>2]|0;
       $322 = ($321|0)==(0|0);
       if ($322) {
        $c$6 = 48;
        break;
       }
       $323 = HEAP32[$0>>2]|0;
       $324 = (($323) + -1|0);
       HEAP32[$0>>2] = $324;
       $c$6 = 48;
       break;
      }
      $124 = HEAP32[$0>>2]|0;
      $125 = HEAP32[$1>>2]|0;
      $126 = ($124>>>0)<($125>>>0);
      if ($126) {
       $127 = (($124) + 1|0);
       HEAP32[$0>>2] = $127;
       $128 = HEAP8[$124]|0;
       $129 = $128&255;
       $c$0$i = $129;$gotdig$0$i = 0;
      } else {
       $130 = (___shgetc($f)|0);
       $c$0$i = $130;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        label = 70;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $169 = 0;$172 = 0;$212 = 0;$214 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $131 = HEAP32[$0>>2]|0;
       $132 = HEAP32[$1>>2]|0;
       $133 = ($131>>>0)<($132>>>0);
       if ($133) {
        $134 = (($131) + 1|0);
        HEAP32[$0>>2] = $134;
        $135 = HEAP8[$131]|0;
        $136 = $135&255;
        $c$0$i = $136;$gotdig$0$i = 1;
        continue;
       } else {
        $137 = (___shgetc($f)|0);
        $c$0$i = $137;$gotdig$0$i = 1;
        continue;
       }
      }
      L107: do {
       if ((label|0) == 70) {
        $138 = HEAP32[$0>>2]|0;
        $139 = HEAP32[$1>>2]|0;
        $140 = ($138>>>0)<($139>>>0);
        if ($140) {
         $141 = (($138) + 1|0);
         HEAP32[$0>>2] = $141;
         $142 = HEAP8[$138]|0;
         $143 = $142&255;
         $c$1$ph$i = $143;
        } else {
         $144 = (___shgetc($f)|0);
         $c$1$ph$i = $144;
        }
        $145 = ($c$1$ph$i|0)==(48);
        if ($145) {
         $155 = -1;$156 = -1;
         while(1) {
          $146 = HEAP32[$0>>2]|0;
          $147 = HEAP32[$1>>2]|0;
          $148 = ($146>>>0)<($147>>>0);
          if ($148) {
           $149 = (($146) + 1|0);
           HEAP32[$0>>2] = $149;
           $150 = HEAP8[$146]|0;
           $151 = $150&255;
           $154 = $151;
          } else {
           $152 = (___shgetc($f)|0);
           $154 = $152;
          }
          $153 = ($154|0)==(48);
          if (!($153)) {
           $169 = 0;$172 = 0;$212 = $155;$214 = $156;$c$2$i = $154;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
           break L107;
          }
          $157 = (_i64Add(($155|0),($156|0),-1,-1)|0);
          $158 = tempRet0;
          $155 = $157;$156 = $158;
         }
        } else {
         $169 = 0;$172 = 0;$212 = 0;$214 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        }
       }
      } while(0);
      L120: while(1) {
       $159 = (($c$2$i) + -48)|0;
       $160 = ($159>>>0)<(10);
       do {
        if ($160) {
         $d$0$i = $159;
         label = 84;
        } else {
         $161 = $c$2$i | 32;
         $162 = (($161) + -97)|0;
         $163 = ($162>>>0)<(6);
         $164 = ($c$2$i|0)==(46);
         $or$cond$i = $163 | $164;
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L120;
         }
         if ($164) {
          $165 = ($gotrad$0$i|0)==(0);
          if ($165) {
           $712 = $172;$713 = $169;$714 = $172;$715 = $169;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L120;
          }
         } else {
          $166 = ($c$2$i|0)>(57);
          $167 = (($161) + -87)|0;
          $$38$i = $166 ? $167 : $159;
          $d$0$i = $$38$i;
          label = 84;
          break;
         }
        }
       } while(0);
       if ((label|0) == 84) {
        label = 0;
        $168 = ($169|0)<(0);
        $170 = ($169|0)==(0);
        $171 = ($172>>>0)<(8);
        $173 = $170 & $171;
        $174 = $168 | $173;
        do {
         if ($174) {
          $175 = $x$0$i << 4;
          $176 = (($d$0$i) + ($175))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
         } else {
          $177 = ($169|0)<(0);
          $178 = ($169|0)==(0);
          $179 = ($172>>>0)<(14);
          $180 = $178 & $179;
          $181 = $177 | $180;
          if ($181) {
           $182 = (+($d$0$i|0));
           $183 = $scale$0$i * 0.0625;
           $184 = $183 * $182;
           $185 = $y$0$i + $184;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
           break;
          }
          $186 = ($d$0$i|0)!=(0);
          $187 = ($gottail$0$i|0)==(0);
          $or$cond3$i = $186 & $187;
          if ($or$cond3$i) {
           $188 = $scale$0$i * 0.5;
           $189 = $y$0$i + $188;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
          } else {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          }
         }
        } while(0);
        $190 = (_i64Add(($172|0),($169|0),1,0)|0);
        $191 = tempRet0;
        $712 = $212;$713 = $214;$714 = $190;$715 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $192 = HEAP32[$0>>2]|0;
       $193 = HEAP32[$1>>2]|0;
       $194 = ($192>>>0)<($193>>>0);
       if ($194) {
        $195 = (($192) + 1|0);
        HEAP32[$0>>2] = $195;
        $196 = HEAP8[$192]|0;
        $197 = $196&255;
        $169 = $715;$172 = $714;$212 = $712;$214 = $713;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $198 = (___shgetc($f)|0);
        $169 = $715;$172 = $714;$212 = $712;$214 = $713;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $199 = ($gotdig$2$i|0)==(0);
      if ($199) {
       $200 = HEAP32[$1>>2]|0;
       $201 = ($200|0)==(0|0);
       if (!($201)) {
        $202 = HEAP32[$0>>2]|0;
        $203 = (($202) + -1|0);
        HEAP32[$0>>2] = $203;
       }
       if ($39) {
        ___shlim($f,0);
       } else {
        if (!($201)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i|0)==(0);
      $211 = $210 ? $172 : $212;
      $213 = $210 ? $169 : $214;
      $215 = ($169|0)<(0);
      $216 = ($169|0)==(0);
      $217 = ($172>>>0)<(8);
      $218 = $216 & $217;
      $219 = $215 | $218;
      if ($219) {
       $221 = $172;$222 = $169;$x$313$i = $x$0$i;
       while(1) {
        $220 = $x$313$i << 4;
        $223 = (_i64Add(($221|0),($222|0),1,0)|0);
        $224 = tempRet0;
        $225 = ($224|0)<(0);
        $226 = ($224|0)==(0);
        $227 = ($223>>>0)<(8);
        $228 = $226 & $227;
        $229 = $225 | $228;
        if ($229) {
         $221 = $223;$222 = $224;$x$313$i = $220;
        } else {
         $x$3$lcssa$i = $220;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      $230 = $c$2$lcssa$i | 32;
      $231 = ($230|0)==(112);
      do {
       if ($231) {
        $232 = (_scanexp($f,$pok)|0);
        $233 = tempRet0;
        $234 = ($232|0)==(0);
        $235 = ($233|0)==(-2147483648);
        $236 = $234 & $235;
        if ($236) {
         if ($39) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $237 = HEAP32[$1>>2]|0;
          $238 = ($237|0)==(0|0);
          if ($238) {
           $249 = 0;$250 = 0;
           break;
          }
          $239 = HEAP32[$0>>2]|0;
          $240 = (($239) + -1|0);
          HEAP32[$0>>2] = $240;
          $249 = 0;$250 = 0;
          break;
         }
        } else {
         $249 = $232;$250 = $233;
        }
       } else {
        $241 = HEAP32[$1>>2]|0;
        $242 = ($241|0)==(0|0);
        if ($242) {
         $249 = 0;$250 = 0;
        } else {
         $243 = HEAP32[$0>>2]|0;
         $244 = (($243) + -1|0);
         HEAP32[$0>>2] = $244;
         $249 = 0;$250 = 0;
        }
       }
      } while(0);
      $245 = (_bitshift64Shl(($211|0),($213|0),2)|0);
      $246 = tempRet0;
      $247 = (_i64Add(($245|0),($246|0),-32,-1)|0);
      $248 = tempRet0;
      $251 = (_i64Add(($247|0),($248|0),($249|0),($250|0))|0);
      $252 = tempRet0;
      $253 = ($x$3$lcssa$i|0)==(0);
      if ($253) {
       $254 = (+($sign$0|0));
       $255 = $254 * 0.0;
       $$0 = $255;
       STACKTOP = sp;return (+$$0);
      }
      $256 = (0 - ($emin$0$ph))|0;
      $257 = ($252|0)>(0);
      $258 = ($252|0)==(0);
      $259 = ($251>>>0)>($256>>>0);
      $260 = $258 & $259;
      $261 = $257 | $260;
      if ($261) {
       $262 = (___errno_location()|0);
       HEAP32[$262>>2] = 34;
       $263 = (+($sign$0|0));
       $264 = $263 * 1.79769313486231570815E+308;
       $265 = $264 * 1.79769313486231570815E+308;
       $$0 = $265;
       STACKTOP = sp;return (+$$0);
      }
      $266 = (($emin$0$ph) + -106)|0;
      $267 = ($266|0)<(0);
      $268 = $267 << 31 >> 31;
      $269 = ($252|0)<($268|0);
      $270 = ($252|0)==($268|0);
      $271 = ($251>>>0)<($266>>>0);
      $272 = $270 & $271;
      $273 = $269 | $272;
      if ($273) {
       $275 = (___errno_location()|0);
       HEAP32[$275>>2] = 34;
       $276 = (+($sign$0|0));
       $277 = $276 * 2.22507385850720138309E-308;
       $278 = $277 * 2.22507385850720138309E-308;
       $$0 = $278;
       STACKTOP = sp;return (+$$0);
      }
      $274 = ($x$3$lcssa$i|0)>(-1);
      if ($274) {
       $283 = $251;$284 = $252;$x$48$i = $x$3$lcssa$i;$y$39$i = $y$0$i;
       while(1) {
        $279 = !($y$39$i >= 0.5);
        $280 = $x$48$i << 1;
        if ($279) {
         $$pn$i = $y$39$i;$x$5$i = $280;
        } else {
         $281 = $280 | 1;
         $282 = $y$39$i + -1.0;
         $$pn$i = $282;$x$5$i = $281;
        }
        $y$4$i = $y$39$i + $$pn$i;
        $285 = (_i64Add(($283|0),($284|0),-1,-1)|0);
        $286 = tempRet0;
        $287 = ($x$5$i|0)>(-1);
        if ($287) {
         $283 = $285;$284 = $286;$x$48$i = $x$5$i;$y$39$i = $y$4$i;
        } else {
         $292 = $285;$293 = $286;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $292 = $251;$293 = $252;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      $288 = ($emin$0$ph|0)<(0);
      $289 = $288 << 31 >> 31;
      $290 = (_i64Subtract(32,0,($emin$0$ph|0),($289|0))|0);
      $291 = tempRet0;
      $294 = (_i64Add(($292|0),($293|0),($290|0),($291|0))|0);
      $295 = tempRet0;
      $296 = (0)>($295|0);
      $297 = (0)==($295|0);
      $298 = ($bits$0$ph>>>0)>($294>>>0);
      $299 = $297 & $298;
      $300 = $296 | $299;
      if ($300) {
       $301 = ($294|0)<(0);
       $$$i = $301 ? 0 : $294;
       $$02$i = $$$i;
      } else {
       $$02$i = $bits$0$ph;
      }
      $302 = ($$02$i|0)<(53);
      if ($302) {
       $303 = (84 - ($$02$i))|0;
       $304 = (+_scalbn(1.0,$303));
       $305 = (+($sign$0|0));
       $306 = (+_copysign((+$304),(+$305)));
       $307 = ($$02$i|0)<(32);
       $308 = $y$3$lcssa$i != 0.0;
       $or$cond4$i = $307 & $308;
       if ($or$cond4$i) {
        $309 = $x$4$lcssa$i & 1;
        $310 = ($309|0)==(0);
        $311 = $309 ^ 1;
        $$x$4$i = (($311) + ($x$4$lcssa$i))|0;
        $$y$3$i = $310 ? 0.0 : $y$3$lcssa$i;
        $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $$x$4$i;$y$5$i = $$y$3$i;
       } else {
        $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
       }
      } else {
       $$pre$i = (+($sign$0|0));
       $$pre$phi$iZ2D = $$pre$i;$bias$07$i = 0.0;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
      }
      $312 = (+($x$6$i>>>0));
      $313 = $$pre$phi$iZ2D * $312;
      $314 = $bias$07$i + $313;
      $315 = $$pre$phi$iZ2D * $y$5$i;
      $316 = $315 + $314;
      $317 = $316 - $bias$07$i;
      $318 = $317 != 0.0;
      if (!($318)) {
       $319 = (___errno_location()|0);
       HEAP32[$319>>2] = 34;
      }
      $320 = (+_scalbnl($317,$292));
      $$0 = $320;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $325 = (0 - ($sum$i))|0;
    $$08$i = $c$6;$gotdig$0$i9 = 0;
    while(1) {
     if ((($$08$i|0) == 46)) {
      label = 139;
      break;
     } else if (!((($$08$i|0) == 48))) {
      $$2$i = $$08$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 0;
      break;
     }
     $326 = HEAP32[$0>>2]|0;
     $327 = HEAP32[$1>>2]|0;
     $328 = ($326>>>0)<($327>>>0);
     if ($328) {
      $329 = (($326) + 1|0);
      HEAP32[$0>>2] = $329;
      $330 = HEAP8[$326]|0;
      $331 = $330&255;
      $$08$i = $331;$gotdig$0$i9 = 1;
      continue;
     } else {
      $332 = (___shgetc($f)|0);
      $$08$i = $332;$gotdig$0$i9 = 1;
      continue;
     }
    }
    L209: do {
     if ((label|0) == 139) {
      $333 = HEAP32[$0>>2]|0;
      $334 = HEAP32[$1>>2]|0;
      $335 = ($333>>>0)<($334>>>0);
      if ($335) {
       $336 = (($333) + 1|0);
       HEAP32[$0>>2] = $336;
       $337 = HEAP8[$333]|0;
       $338 = $337&255;
       $$1$ph$i = $338;
      } else {
       $339 = (___shgetc($f)|0);
       $$1$ph$i = $339;
      }
      $340 = ($$1$ph$i|0)==(48);
      if ($340) {
       $349 = -1;$350 = -1;
       while(1) {
        $341 = HEAP32[$0>>2]|0;
        $342 = HEAP32[$1>>2]|0;
        $343 = ($341>>>0)<($342>>>0);
        if ($343) {
         $344 = (($341) + 1|0);
         HEAP32[$0>>2] = $344;
         $345 = HEAP8[$341]|0;
         $346 = $345&255;
         $$1$be$i = $346;
        } else {
         $347 = (___shgetc($f)|0);
         $$1$be$i = $347;
        }
        $348 = ($$1$be$i|0)==(48);
        if (!($348)) {
         $$2$i = $$1$be$i;$716 = $349;$717 = $350;$gotdig$2$i11 = 1;$gotrad$0$i12 = 1;
         break L209;
        }
        $351 = (_i64Add(($349|0),($350|0),-1,-1)|0);
        $352 = tempRet0;
        $349 = $351;$350 = $352;
       }
      } else {
       $$2$i = $$1$ph$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 1;
      }
     }
    } while(0);
    HEAP32[$x$i>>2] = 0;
    $353 = (($$2$i) + -48)|0;
    $354 = ($353>>>0)<(10);
    $355 = ($$2$i|0)==(46);
    $or$cond789$i = $354 | $355;
    L223: do {
     if ($or$cond789$i) {
      $356 = (($x$i) + 496|0);
      $$397$i = $$2$i;$358 = 0;$359 = 0;$718 = $355;$719 = $353;$720 = $716;$721 = $717;$gotdig$393$i = $gotdig$2$i11;$gotrad$194$i = $gotrad$0$i12;$j$096$i = 0;$k$095$i = 0;$lnz$092$i = 0;
      while(1) {
       do {
        if ($718) {
         $cond$i = ($gotrad$194$i|0)==(0);
         if ($cond$i) {
          $722 = $358;$723 = $359;$724 = $358;$725 = $359;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = 1;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
         } else {
          $$388$i = $$397$i;$405 = $720;$406 = $721;$421 = $358;$424 = $359;$gotdig$381$i = $gotdig$393$i;$j$086$i = $j$096$i;$k$084$i = $k$095$i;$lnz$079$i = $lnz$092$i;
          break L223;
         }
        } else {
         $357 = ($k$095$i|0)<(125);
         $360 = (_i64Add(($358|0),($359|0),1,0)|0);
         $361 = tempRet0;
         $362 = ($$397$i|0)!=(48);
         if (!($357)) {
          if (!($362)) {
           $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
           break;
          }
          $372 = HEAP32[$356>>2]|0;
          $373 = $372 | 1;
          HEAP32[$356>>2] = $373;
          $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
          break;
         }
         $$lnz$0$i = $362 ? $360 : $lnz$092$i;
         $363 = ($j$096$i|0)==(0);
         $364 = (($x$i) + ($k$095$i<<2)|0);
         if ($363) {
          $storemerge$i = $719;
         } else {
          $365 = HEAP32[$364>>2]|0;
          $366 = ($365*10)|0;
          $367 = (($$397$i) + -48)|0;
          $368 = (($367) + ($366))|0;
          $storemerge$i = $368;
         }
         HEAP32[$364>>2] = $storemerge$i;
         $369 = (($j$096$i) + 1)|0;
         $370 = ($369|0)==(9);
         $371 = $370&1;
         $$k$0$i = (($371) + ($k$095$i))|0;
         $$10$i = $370 ? 0 : $369;
         $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$194$i;$j$2$i = $$10$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $374 = HEAP32[$0>>2]|0;
       $375 = HEAP32[$1>>2]|0;
       $376 = ($374>>>0)<($375>>>0);
       if ($376) {
        $377 = (($374) + 1|0);
        HEAP32[$0>>2] = $377;
        $378 = HEAP8[$374]|0;
        $379 = $378&255;
        $$3$be$i = $379;
       } else {
        $380 = (___shgetc($f)|0);
        $$3$be$i = $380;
       }
       $381 = (($$3$be$i) + -48)|0;
       $382 = ($381>>>0)<(10);
       $383 = ($$3$be$i|0)==(46);
       $or$cond7$i = $382 | $383;
       if ($or$cond7$i) {
        $$397$i = $$3$be$i;$358 = $724;$359 = $725;$718 = $383;$719 = $381;$720 = $722;$721 = $723;$gotdig$393$i = $gotdig$4$i;$gotrad$194$i = $gotrad$2$i;$j$096$i = $j$2$i;$k$095$i = $k$2$i;$lnz$092$i = $lnz$2$i;
       } else {
        $$3$lcssa$i = $$3$be$i;$386 = $724;$387 = $722;$389 = $725;$390 = $723;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 162;
        break;
       }
      }
     } else {
      $$3$lcssa$i = $$2$i;$386 = 0;$387 = $716;$389 = 0;$390 = $717;$gotdig$3$lcssa$i = $gotdig$2$i11;$gotrad$1$lcssa$i = $gotrad$0$i12;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 162;
     }
    } while(0);
    if ((label|0) == 162) {
     $384 = ($gotrad$1$lcssa$i|0)==(0);
     $385 = $384 ? $386 : $387;
     $388 = $384 ? $389 : $390;
     $$388$i = $$3$lcssa$i;$405 = $385;$406 = $388;$421 = $386;$424 = $389;$gotdig$381$i = $gotdig$3$lcssa$i;$j$086$i = $j$0$lcssa$i;$k$084$i = $k$0$lcssa$i;$lnz$079$i = $lnz$0$lcssa$i;
    }
    $391 = ($gotdig$381$i|0)!=(0);
    if ($391) {
     $392 = $$388$i | 32;
     $393 = ($392|0)==(101);
     if ($393) {
      $394 = (_scanexp($f,$pok)|0);
      $395 = tempRet0;
      $396 = ($394|0)==(0);
      $397 = ($395|0)==(-2147483648);
      $398 = $396 & $397;
      do {
       if ($398) {
        if ($39) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $399 = HEAP32[$1>>2]|0;
         $400 = ($399|0)==(0|0);
         if ($400) {
          $403 = 0;$404 = 0;
          break;
         }
         $401 = HEAP32[$0>>2]|0;
         $402 = (($401) + -1|0);
         HEAP32[$0>>2] = $402;
         $403 = 0;$404 = 0;
         break;
        }
       } else {
        $403 = $394;$404 = $395;
       }
      } while(0);
      $407 = (_i64Add(($403|0),($404|0),($405|0),($406|0))|0);
      $408 = tempRet0;
      $420 = $407;$423 = $408;
     } else {
      label = 171;
     }
    } else {
     label = 171;
    }
    if ((label|0) == 171) {
     $409 = ($$388$i|0)>(-1);
     if ($409) {
      $410 = HEAP32[$1>>2]|0;
      $411 = ($410|0)==(0|0);
      if ($411) {
       $420 = $405;$423 = $406;
      } else {
       $412 = HEAP32[$0>>2]|0;
       $413 = (($412) + -1|0);
       HEAP32[$0>>2] = $413;
       $420 = $405;$423 = $406;
      }
     } else {
      $420 = $405;$423 = $406;
     }
    }
    if (!($391)) {
     $414 = (___errno_location()|0);
     HEAP32[$414>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $415 = HEAP32[$x$i>>2]|0;
    $416 = ($415|0)==(0);
    if ($416) {
     $417 = (+($sign$0|0));
     $418 = $417 * 0.0;
     $$0 = $418;
     STACKTOP = sp;return (+$$0);
    }
    $419 = ($420|0)==($421|0);
    $422 = ($423|0)==($424|0);
    $425 = $419 & $422;
    $426 = ($424|0)<(0);
    $427 = ($424|0)==(0);
    $428 = ($421>>>0)<(10);
    $429 = $427 & $428;
    $430 = $426 | $429;
    $or$cond$i15 = $425 & $430;
    do {
     if ($or$cond$i15) {
      $431 = ($bits$0$ph>>>0)>(30);
      if (!($431)) {
       $432 = $415 >>> $bits$0$ph;
       $433 = ($432|0)==(0);
       if (!($433)) {
        break;
       }
      }
      $434 = (+($sign$0|0));
      $435 = (+($415>>>0));
      $436 = $434 * $435;
      $$0 = $436;
      STACKTOP = sp;return (+$$0);
     }
    } while(0);
    $437 = (($emin$0$ph|0) / -2)&-1;
    $438 = ($437|0)<(0);
    $439 = $438 << 31 >> 31;
    $440 = ($423|0)>($439|0);
    $441 = ($423|0)==($439|0);
    $442 = ($420>>>0)>($437>>>0);
    $443 = $441 & $442;
    $444 = $440 | $443;
    if ($444) {
     $445 = (___errno_location()|0);
     HEAP32[$445>>2] = 34;
     $446 = (+($sign$0|0));
     $447 = $446 * 1.79769313486231570815E+308;
     $448 = $447 * 1.79769313486231570815E+308;
     $$0 = $448;
     STACKTOP = sp;return (+$$0);
    }
    $449 = (($emin$0$ph) + -106)|0;
    $450 = ($449|0)<(0);
    $451 = $450 << 31 >> 31;
    $452 = ($423|0)<($451|0);
    $453 = ($423|0)==($451|0);
    $454 = ($420>>>0)<($449>>>0);
    $455 = $453 & $454;
    $456 = $452 | $455;
    if ($456) {
     $457 = (___errno_location()|0);
     HEAP32[$457>>2] = 34;
     $458 = (+($sign$0|0));
     $459 = $458 * 2.22507385850720138309E-308;
     $460 = $459 * 2.22507385850720138309E-308;
     $$0 = $460;
     STACKTOP = sp;return (+$$0);
    }
    $461 = ($j$086$i|0)==(0);
    if ($461) {
     $k$3$i = $k$084$i;
    } else {
     $462 = ($j$086$i|0)<(9);
     if ($462) {
      $463 = (($x$i) + ($k$084$i<<2)|0);
      $$promoted$i = HEAP32[$463>>2]|0;
      $465 = $$promoted$i;$j$371$i = $j$086$i;
      while(1) {
       $464 = ($465*10)|0;
       $466 = (($j$371$i) + 1)|0;
       $exitcond$i = ($466|0)==(9);
       if ($exitcond$i) {
        break;
       } else {
        $465 = $464;$j$371$i = $466;
       }
      }
      HEAP32[$463>>2] = $464;
     }
     $467 = (($k$084$i) + 1)|0;
     $k$3$i = $467;
    }
    $468 = ($lnz$079$i|0)<(9);
    do {
     if ($468) {
      $469 = ($lnz$079$i|0)<=($420|0);
      $470 = ($420|0)<(18);
      $or$cond3$i16 = $469 & $470;
      if ($or$cond3$i16) {
       $471 = ($420|0)==(9);
       if ($471) {
        $472 = (+($sign$0|0));
        $473 = HEAP32[$x$i>>2]|0;
        $474 = (+($473>>>0));
        $475 = $472 * $474;
        $$0 = $475;
        STACKTOP = sp;return (+$$0);
       }
       $476 = ($420|0)<(9);
       if ($476) {
        $477 = (+($sign$0|0));
        $478 = HEAP32[$x$i>>2]|0;
        $479 = (+($478>>>0));
        $480 = $477 * $479;
        $481 = (8 - ($420))|0;
        $482 = (27720 + ($481<<2)|0);
        $483 = HEAP32[$482>>2]|0;
        $484 = (+($483|0));
        $485 = $480 / $484;
        $$0 = $485;
        STACKTOP = sp;return (+$$0);
       }
       $486 = Math_imul($420, -3)|0;
       $$neg20$i = (($bits$0$ph) + 27)|0;
       $487 = (($$neg20$i) + ($486))|0;
       $488 = ($487|0)>(30);
       $$pre$i17 = HEAP32[$x$i>>2]|0;
       if (!($488)) {
        $489 = $$pre$i17 >>> $487;
        $490 = ($489|0)==(0);
        if (!($490)) {
         break;
        }
       }
       $491 = (+($sign$0|0));
       $492 = (+($$pre$i17>>>0));
       $493 = $491 * $492;
       $494 = (($420) + -10)|0;
       $495 = (27720 + ($494<<2)|0);
       $496 = HEAP32[$495>>2]|0;
       $497 = (+($496|0));
       $498 = $493 * $497;
       $$0 = $498;
       STACKTOP = sp;return (+$$0);
      }
     }
    } while(0);
    $499 = (($420|0) % 9)&-1;
    $500 = ($499|0)==(0);
    if ($500) {
     $a$2$ph40$i = 0;$e2$0$ph$i = 0;$rp$2$ph38$i = $420;$z$1$ph39$i = $k$3$i;
    } else {
     $501 = ($420|0)>(-1);
     $502 = (($499) + 9)|0;
     $503 = $501 ? $499 : $502;
     $504 = (8 - ($503))|0;
     $505 = (27720 + ($504<<2)|0);
     $506 = HEAP32[$505>>2]|0;
     $507 = ($k$3$i|0)==(0);
     if ($507) {
      $a$0$lcssa161$i = 0;$rp$0$lcssa162$i = $420;$z$0$i = 0;
     } else {
      $508 = (1000000000 / ($506|0))&-1;
      $a$061$i = 0;$carry$063$i = 0;$k$462$i = 0;$rp$060$i = $420;
      while(1) {
       $509 = (($x$i) + ($k$462$i<<2)|0);
       $510 = HEAP32[$509>>2]|0;
       $511 = (($510>>>0) % ($506>>>0))&-1;
       $512 = (($510>>>0) / ($506>>>0))&-1;
       $513 = (($512) + ($carry$063$i))|0;
       HEAP32[$509>>2] = $513;
       $514 = Math_imul($511, $508)|0;
       $515 = ($k$462$i|0)==($a$061$i|0);
       $516 = ($513|0)==(0);
       $or$cond11$i = $515 & $516;
       $517 = (($k$462$i) + 1)|0;
       if ($or$cond11$i) {
        $518 = $517 & 127;
        $519 = (($rp$060$i) + -9)|0;
        $a$1$i = $518;$rp$1$i18 = $519;
       } else {
        $a$1$i = $a$061$i;$rp$1$i18 = $rp$060$i;
       }
       $520 = ($517|0)==($k$3$i|0);
       if ($520) {
        break;
       } else {
        $a$061$i = $a$1$i;$carry$063$i = $514;$k$462$i = $517;$rp$060$i = $rp$1$i18;
       }
      }
      $521 = ($514|0)==(0);
      if ($521) {
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $k$3$i;
      } else {
       $522 = (($k$3$i) + 1)|0;
       $523 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$523>>2] = $514;
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $522;
      }
     }
     $524 = (9 - ($503))|0;
     $525 = (($524) + ($rp$0$lcssa162$i))|0;
     $a$2$ph40$i = $a$0$lcssa161$i;$e2$0$ph$i = 0;$rp$2$ph38$i = $525;$z$1$ph39$i = $z$0$i;
    }
    L321: while(1) {
     $526 = ($rp$2$ph38$i|0)<(18);
     $527 = (($x$i) + ($a$2$ph40$i<<2)|0);
     if ($526) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph39$i;
      while(1) {
       $529 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $529;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $530 = (($x$i) + ($k$5$us$i<<2)|0);
        $531 = HEAP32[$530>>2]|0;
        $532 = (_bitshift64Shl(($531|0),0,29)|0);
        $533 = tempRet0;
        $534 = (_i64Add(($532|0),($533|0),($carry1$0$us$i|0),0)|0);
        $535 = tempRet0;
        $536 = ($535>>>0)>(0);
        $537 = ($535|0)==(0);
        $538 = ($534>>>0)>(1000000000);
        $539 = $537 & $538;
        $540 = $536 | $539;
        if ($540) {
         $541 = (___udivdi3(($534|0),($535|0),1000000000,0)|0);
         $542 = tempRet0;
         $543 = (___uremdi3(($534|0),($535|0),1000000000,0)|0);
         $544 = tempRet0;
         $$sink$off0$us$i = $543;$carry1$1$us$i = $541;
        } else {
         $$sink$off0$us$i = $534;$carry1$1$us$i = 0;
        }
        HEAP32[$530>>2] = $$sink$off0$us$i;
        $545 = (($z$2$us$i) + 127)|0;
        $546 = $545 & 127;
        $547 = ($k$5$us$i|0)!=($546|0);
        $548 = ($k$5$us$i|0)==($a$2$ph40$i|0);
        $or$cond12$us$i = $547 | $548;
        if ($or$cond12$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $549 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $549 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $550 = (($k$5$us$i) + -1)|0;
        if ($548) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $550;$z$2$us$i = $z$3$us$i;
        }
       }
       $551 = (($e2$0$us$i) + -29)|0;
       $552 = ($carry1$1$us$i|0)==(0);
       if ($552) {
        $e2$0$us$i = $551;$z$1$us$i = $z$3$us$i;
       } else {
        $$lcssa43$i = $551;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $528 = ($rp$2$ph38$i|0)==(18);
      if ($528) {
       $e2$0$us44$i = $e2$0$ph$i;$z$1$us45$i = $z$1$ph39$i;
      } else {
       $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph33$i = $rp$2$ph38$i;$z$5$ph$i = $z$1$ph39$i;
       break;
      }
      while(1) {
       $553 = HEAP32[$527>>2]|0;
       $554 = ($553>>>0)<(9007199);
       if (!($554)) {
        $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$us44$i;$rp$3$ph33$i = 18;$z$5$ph$i = $z$1$us45$i;
        break L321;
       }
       $555 = (($z$1$us45$i) + 127)|0;
       $carry1$0$us49$i = 0;$k$5$in$us48$i = $555;$z$2$us47$i = $z$1$us45$i;
       while(1) {
        $k$5$us50$i = $k$5$in$us48$i & 127;
        $556 = (($x$i) + ($k$5$us50$i<<2)|0);
        $557 = HEAP32[$556>>2]|0;
        $558 = (_bitshift64Shl(($557|0),0,29)|0);
        $559 = tempRet0;
        $560 = (_i64Add(($558|0),($559|0),($carry1$0$us49$i|0),0)|0);
        $561 = tempRet0;
        $562 = ($561>>>0)>(0);
        $563 = ($561|0)==(0);
        $564 = ($560>>>0)>(1000000000);
        $565 = $563 & $564;
        $566 = $562 | $565;
        if ($566) {
         $567 = (___udivdi3(($560|0),($561|0),1000000000,0)|0);
         $568 = tempRet0;
         $569 = (___uremdi3(($560|0),($561|0),1000000000,0)|0);
         $570 = tempRet0;
         $$sink$off0$us53$i = $569;$carry1$1$us54$i = $567;
        } else {
         $$sink$off0$us53$i = $560;$carry1$1$us54$i = 0;
        }
        HEAP32[$556>>2] = $$sink$off0$us53$i;
        $571 = (($z$2$us47$i) + 127)|0;
        $572 = $571 & 127;
        $573 = ($k$5$us50$i|0)!=($572|0);
        $574 = ($k$5$us50$i|0)==($a$2$ph40$i|0);
        $or$cond12$us55$i = $573 | $574;
        if ($or$cond12$us55$i) {
         $z$3$us57$i = $z$2$us47$i;
        } else {
         $575 = ($$sink$off0$us53$i|0)==(0);
         $k$5$z$2$us56$i = $575 ? $k$5$us50$i : $z$2$us47$i;
         $z$3$us57$i = $k$5$z$2$us56$i;
        }
        $576 = (($k$5$us50$i) + -1)|0;
        if ($574) {
         break;
        } else {
         $carry1$0$us49$i = $carry1$1$us54$i;$k$5$in$us48$i = $576;$z$2$us47$i = $z$3$us57$i;
        }
       }
       $577 = (($e2$0$us44$i) + -29)|0;
       $578 = ($carry1$1$us54$i|0)==(0);
       if ($578) {
        $e2$0$us44$i = $577;$z$1$us45$i = $z$3$us57$i;
       } else {
        $$lcssa43$i = $577;$carry1$1$lcssa$lcssa$i = $carry1$1$us54$i;$z$3$lcssa$lcssa$i = $z$3$us57$i;
        break;
       }
      }
     }
     $579 = (($rp$2$ph38$i) + 9)|0;
     $580 = (($a$2$ph40$i) + 127)|0;
     $581 = $580 & 127;
     $582 = ($581|0)==($z$3$lcssa$lcssa$i|0);
     if ($582) {
      $583 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $584 = $583 & 127;
      $585 = (($x$i) + ($584<<2)|0);
      $586 = HEAP32[$585>>2]|0;
      $587 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $588 = $587 & 127;
      $589 = (($x$i) + ($588<<2)|0);
      $590 = HEAP32[$589>>2]|0;
      $591 = $590 | $586;
      HEAP32[$589>>2] = $591;
      $z$4$i = $584;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $592 = (($x$i) + ($581<<2)|0);
     HEAP32[$592>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph40$i = $581;$e2$0$ph$i = $$lcssa43$i;$rp$2$ph38$i = $579;$z$1$ph39$i = $z$4$i;
    }
    L352: while(1) {
     $629 = (($z$5$ph$i) + 1)|0;
     $627 = $629 & 127;
     $630 = (($z$5$ph$i) + 127)|0;
     $631 = $630 & 127;
     $632 = (($x$i) + ($631<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph33$i;
     while(1) {
      $605 = ($rp$3$i$ph|0)==(18);
      $633 = ($rp$3$i$ph|0)>(27);
      $$14$i = $633 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$025$i = 0;
       while(1) {
        $595 = (($i$025$i) + ($a$3$i))|0;
        $596 = $595 & 127;
        $597 = ($596|0)==($z$5$ph$i|0);
        if ($597) {
         $i$1$i = 2;
         break;
        }
        $598 = (($x$i) + ($596<<2)|0);
        $599 = HEAP32[$598>>2]|0;
        $600 = (27712 + ($i$025$i<<2)|0);
        $601 = HEAP32[$600>>2]|0;
        $602 = ($599>>>0)<($601>>>0);
        if ($602) {
         $i$1$i = 2;
         break;
        }
        $603 = ($599>>>0)>($601>>>0);
        $594 = (($i$025$i) + 1)|0;
        if ($603) {
         $i$1$i = $i$025$i;
         break;
        }
        $593 = ($594|0)<(2);
        if ($593) {
         $i$025$i = $594;
        } else {
         $i$1$i = $594;
         break;
        }
       }
       $604 = ($i$1$i|0)==(2);
       $or$cond13$i = $604 & $605;
       if ($or$cond13$i) {
        break L352;
       }
       $608 = (($$14$i) + ($e2$1$i))|0;
       $609 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($609) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $608;
       } else {
        break;
       }
      }
      $610 = 1 << $$14$i;
      $611 = (($610) + -1)|0;
      $612 = 1000000000 >>> $$14$i;
      $a$427$i = $a$3$i;$carry3$030$i = 0;$k$628$i = $a$3$i;$rp$426$i = $rp$3$i$ph;
      while(1) {
       $613 = (($x$i) + ($k$628$i<<2)|0);
       $614 = HEAP32[$613>>2]|0;
       $615 = $614 & $611;
       $616 = $614 >>> $$14$i;
       $617 = (($616) + ($carry3$030$i))|0;
       HEAP32[$613>>2] = $617;
       $618 = Math_imul($615, $612)|0;
       $619 = ($k$628$i|0)==($a$427$i|0);
       $620 = ($617|0)==(0);
       $or$cond15$i = $619 & $620;
       $621 = (($k$628$i) + 1)|0;
       $622 = $621 & 127;
       $623 = (($rp$426$i) + -9)|0;
       $rp$5$i = $or$cond15$i ? $623 : $rp$426$i;
       $a$5$i = $or$cond15$i ? $622 : $a$427$i;
       $624 = ($622|0)==($z$5$ph$i|0);
       if ($624) {
        break;
       } else {
        $a$427$i = $a$5$i;$carry3$030$i = $618;$k$628$i = $622;$rp$426$i = $rp$5$i;
       }
      }
      $625 = ($618|0)==(0);
      if ($625) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $626 = ($627|0)==($a$5$i|0);
      if (!($626)) {
       break;
      }
      $634 = HEAP32[$632>>2]|0;
      $635 = $634 | 1;
      HEAP32[$632>>2] = $635;
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
     }
     $628 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$628>>2] = $618;
     $a$3$ph$i = $a$5$i;$e2$1$ph$i = $608;$rp$3$ph33$i = $rp$5$i;$z$5$ph$i = $627;
    }
    $606 = $a$3$i & 127;
    $607 = ($606|0)==($z$5$ph$i|0);
    if ($607) {
     $636 = (($627) + -1)|0;
     $637 = (($x$i) + ($636<<2)|0);
     HEAP32[$637>>2] = 0;
     $z$7$i = $627;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $638 = (($x$i) + ($606<<2)|0);
    $639 = HEAP32[$638>>2]|0;
    $640 = (+($639>>>0));
    $641 = (($a$3$i) + 1)|0;
    $642 = $641 & 127;
    $643 = ($642|0)==($z$7$i|0);
    if ($643) {
     $702 = (($z$7$i) + 1)|0;
     $703 = $702 & 127;
     $704 = (($703) + -1)|0;
     $705 = (($x$i) + ($704<<2)|0);
     HEAP32[$705>>2] = 0;
     $z$7$1$i = $703;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $706 = $640 * 1.0E+9;
    $707 = (($x$i) + ($642<<2)|0);
    $708 = HEAP32[$707>>2]|0;
    $709 = (+($708>>>0));
    $710 = $706 + $709;
    $667 = (+($sign$0|0));
    $649 = $667 * $710;
    $687 = (($e2$1$i) + 53)|0;
    $645 = (($687) - ($emin$0$ph))|0;
    $711 = ($645|0)<($bits$0$ph|0);
    if ($711) {
     $644 = ($645|0)<(0);
     $$$i22 = $644 ? 0 : $645;
     $$09$i = $$$i22;$denormal$0$i = 1;
    } else {
     $$09$i = $bits$0$ph;$denormal$0$i = 0;
    }
    $646 = ($$09$i|0)<(53);
    if ($646) {
     $647 = (105 - ($$09$i))|0;
     $648 = (+_scalbn(1.0,$647));
     $650 = (+_copysign((+$648),(+$649)));
     $651 = (53 - ($$09$i))|0;
     $652 = (+_scalbn(1.0,$651));
     $653 = (+_fmod((+$649),(+$652)));
     $654 = $649 - $653;
     $655 = $650 + $654;
     $bias$0$i = $650;$frac$0$i = $653;$y$1$i23 = $655;
    } else {
     $bias$0$i = 0.0;$frac$0$i = 0.0;$y$1$i23 = $649;
    }
    $656 = (($a$3$i) + 2)|0;
    $657 = $656 & 127;
    $658 = ($657|0)==($z$7$1$i|0);
    if ($658) {
     $frac$2$i = $frac$0$i;
    } else {
     $659 = (($x$i) + ($657<<2)|0);
     $660 = HEAP32[$659>>2]|0;
     $661 = ($660>>>0)<(500000000);
     do {
      if ($661) {
       $662 = ($660|0)==(0);
       if ($662) {
        $663 = (($a$3$i) + 3)|0;
        $664 = $663 & 127;
        $665 = ($664|0)==($z$7$1$i|0);
        if ($665) {
         $frac$1$i = $frac$0$i;
         break;
        }
       }
       $666 = $667 * 0.25;
       $668 = $666 + $frac$0$i;
       $frac$1$i = $668;
      } else {
       $669 = ($660>>>0)>(500000000);
       if ($669) {
        $670 = $667 * 0.75;
        $671 = $670 + $frac$0$i;
        $frac$1$i = $671;
        break;
       }
       $672 = (($a$3$i) + 3)|0;
       $673 = $672 & 127;
       $674 = ($673|0)==($z$7$1$i|0);
       if ($674) {
        $675 = $667 * 0.5;
        $676 = $675 + $frac$0$i;
        $frac$1$i = $676;
        break;
       } else {
        $677 = $667 * 0.75;
        $678 = $677 + $frac$0$i;
        $frac$1$i = $678;
        break;
       }
      }
     } while(0);
     $679 = (53 - ($$09$i))|0;
     $680 = ($679|0)>(1);
     if ($680) {
      $681 = (+_fmod((+$frac$1$i),1.0));
      $682 = $681 != 0.0;
      if ($682) {
       $frac$2$i = $frac$1$i;
      } else {
       $683 = $frac$1$i + 1.0;
       $frac$2$i = $683;
      }
     } else {
      $frac$2$i = $frac$1$i;
     }
    }
    $684 = $y$1$i23 + $frac$2$i;
    $685 = $684 - $bias$0$i;
    $686 = $687 & 2147483647;
    $688 = (-2 - ($sum$i))|0;
    $689 = ($686|0)>($688|0);
    do {
     if ($689) {
      $690 = (+Math_abs((+$685)));
      $691 = !($690 >= 9007199254740992.0);
      if ($691) {
       $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i;$y$2$i24 = $685;
      } else {
       $692 = ($denormal$0$i|0)!=(0);
       $693 = ($$09$i|0)==($645|0);
       $or$cond16$i = $692 & $693;
       $denormal$1$i = $or$cond16$i ? 0 : $denormal$0$i;
       $694 = $685 * 0.5;
       $695 = (($e2$1$i) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $695;$y$2$i24 = $694;
      }
      $696 = (($e2$2$i) + 50)|0;
      $697 = ($696|0)>($325|0);
      if (!($697)) {
       $698 = ($denormal$2$i|0)!=(0);
       $699 = $frac$2$i != 0.0;
       $or$cond17$i = $698 & $699;
       if (!($or$cond17$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
        break;
       }
      }
      $700 = (___errno_location()|0);
      HEAP32[$700>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $685;
     }
    } while(0);
    $701 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $701;
    STACKTOP = sp;return (+$$0);
   } else {
    $108 = HEAP32[$1>>2]|0;
    $109 = ($108|0)==(0|0);
    if (!($109)) {
     $110 = HEAP32[$0>>2]|0;
     $111 = (($110) + -1|0);
     HEAP32[$0>>2] = $111;
    }
    $112 = (___errno_location()|0);
    HEAP32[$112>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond106$not = $notrhs | $notlhs;
  $brmerge = $or$cond106$not | $42;
  if (!($brmerge)) {
   $i$166 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$166) + -1)|0;
    $48 = ($47>>>0)>(3);
    if ($48) {
     $i$166 = $47;
    } else {
     break;
    }
   }
  }
 }
 $49 = (+($sign$0|0));
 $50 = $49 * inf;
 $51 = $50;
 $$0 = $51;
 STACKTOP = sp;return (+$$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $c$0 = 0, $c$1$be = 0;
 var $c$18 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$23 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond2 = 0, $phitmp16 = 0, $x$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1]|0;
  $7 = $6&255;
  $10 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $10 = $8;
 }
 $9 = ($10|0)==(45);
 if ((($10|0) == 43) | (($10|0) == 45)) {
  $11 = $9&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)<(10);
  $22 = ($pok|0)==(0);
  $or$cond = $21 | $22;
  if ($or$cond) {
   $c$0 = $20;$neg$0 = $11;
  } else {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  }
 } else {
  $c$0 = $10;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $95 = -2147483648;$96 = 0;
   tempRet0 = $95;
   STACKTOP = sp;return ($96|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $95 = -2147483648;$96 = 0;
  tempRet0 = $95;
  STACKTOP = sp;return ($96|0);
 } else {
  $c$18 = $c$0;$x$09 = 0;
 }
 while(1) {
  $33 = (($c$18) + -48)|0;
  $34 = (($33) + ($x$09))|0;
  $35 = HEAP32[$0>>2]|0;
  $36 = HEAP32[$2>>2]|0;
  $37 = ($35>>>0)<($36>>>0);
  if ($37) {
   $38 = (($35) + 1|0);
   HEAP32[$0>>2] = $38;
   $39 = HEAP8[$35]|0;
   $40 = $39&255;
   $c$1$be = $40;
  } else {
   $41 = (___shgetc($f)|0);
   $c$1$be = $41;
  }
  $42 = (($c$1$be) + -48)|0;
  $43 = ($42>>>0)<(10);
  $44 = ($34|0)<(214748364);
  $$ = $43 & $44;
  if (!($$)) {
   break;
  }
  $phitmp16 = ($34*10)|0;
  $c$18 = $c$1$be;$x$09 = $phitmp16;
 }
 $45 = ($34|0)<(0);
 $46 = $45 << 31 >> 31;
 $47 = (($c$1$be) + -48)|0;
 $48 = ($47>>>0)<(10);
 if ($48) {
  $51 = $34;$52 = $46;$c$23 = $c$1$be;
  while(1) {
   $53 = (___muldi3(($51|0),($52|0),10,0)|0);
   $54 = tempRet0;
   $55 = ($c$23|0)<(0);
   $56 = $55 << 31 >> 31;
   $57 = (_i64Add(($c$23|0),($56|0),-48,-1)|0);
   $58 = tempRet0;
   $59 = (_i64Add(($57|0),($58|0),($53|0),($54|0))|0);
   $60 = tempRet0;
   $61 = HEAP32[$0>>2]|0;
   $62 = HEAP32[$2>>2]|0;
   $63 = ($61>>>0)<($62>>>0);
   if ($63) {
    $64 = (($61) + 1|0);
    HEAP32[$0>>2] = $64;
    $65 = HEAP8[$61]|0;
    $66 = $65&255;
    $c$2$be = $66;
   } else {
    $67 = (___shgetc($f)|0);
    $c$2$be = $67;
   }
   $68 = (($c$2$be) + -48)|0;
   $69 = ($68>>>0)<(10);
   $70 = ($60|0)<(21474836);
   $71 = ($60|0)==(21474836);
   $72 = ($59>>>0)<(2061584302);
   $73 = $71 & $72;
   $74 = $70 | $73;
   $or$cond2 = $69 & $74;
   if ($or$cond2) {
    $51 = $59;$52 = $60;$c$23 = $c$2$be;
   } else {
    $89 = $59;$90 = $60;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $89 = $34;$90 = $46;$c$2$lcssa = $c$1$be;
 }
 $49 = (($c$2$lcssa) + -48)|0;
 $50 = ($49>>>0)<(10);
 if ($50) {
  while(1) {
   $75 = HEAP32[$0>>2]|0;
   $76 = HEAP32[$2>>2]|0;
   $77 = ($75>>>0)<($76>>>0);
   if ($77) {
    $78 = (($75) + 1|0);
    HEAP32[$0>>2] = $78;
    $79 = HEAP8[$75]|0;
    $80 = $79&255;
    $c$3$be = $80;
   } else {
    $81 = (___shgetc($f)|0);
    $c$3$be = $81;
   }
   $82 = (($c$3$be) + -48)|0;
   $83 = ($82>>>0)<(10);
   if (!($83)) {
    break;
   }
  }
 }
 $84 = HEAP32[$2>>2]|0;
 $85 = ($84|0)==(0|0);
 if (!($85)) {
  $86 = HEAP32[$0>>2]|0;
  $87 = (($86) + -1|0);
  HEAP32[$0>>2] = $87;
 }
 $88 = ($neg$0|0)!=(0);
 $91 = (_i64Subtract(0,0,($89|0),($90|0))|0);
 $92 = tempRet0;
 $93 = $88 ? $91 : $89;
 $94 = $88 ? $92 : $90;
 $95 = $94;$96 = $93;
 tempRet0 = $95;
 STACKTOP = sp;return ($96|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $11;
  STACKTOP = sp;return;
 } else {
  $13 = (($f) + 100|0);
  HEAP32[$13>>2] = $2;
  STACKTOP = sp;return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    STACKTOP = sp;return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32] = $36;
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.98846567431157953864E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.98846567431157953864E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.22507385850720138309E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.22507385850720138309E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 STACKTOP = sp;return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 31]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 31]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strtold_l($s,$p,$loc) {
 $s = $s|0;
 $p = $p|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i$i = sp;
 dest=$f$i$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i$i,0);
 $4 = (+___floatscan($f$i$i,2,1));
 $5 = (($f$i$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function runPostSets() {
 HEAP32[3808] = __ZTISt9exception;HEAP32[3834] = __ZTISt9exception;HEAP32[6690] = __ZTISt9exception;HEAP32[6920] = __ZTISt9exception;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[(curr)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _saveSetjmp(env, label, table) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < 40) {
      if (((HEAP32[(((table)+((i<<2)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<2)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<2)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<2)+8))>>2)]=0;
        return 0;
      }
      i = (i+2)|0;
    }
    _putchar(116);_putchar(111);_putchar(111);_putchar(32);_putchar(109);_putchar(97);_putchar(110);_putchar(121);_putchar(32);_putchar(115);_putchar(101);_putchar(116);_putchar(106);_putchar(109);_putchar(112);_putchar(115);_putchar(32);_putchar(105);_putchar(110);_putchar(32);_putchar(97);_putchar(32);_putchar(102);_putchar(117);_putchar(110);_putchar(99);_putchar(116);_putchar(105);_putchar(111);_putchar(110);_putchar(32);_putchar(99);_putchar(97);_putchar(108);_putchar(108);_putchar(44);_putchar(32);_putchar(98);_putchar(117);_putchar(105);_putchar(108);_putchar(100);_putchar(32);_putchar(119);_putchar(105);_putchar(116);_putchar(104);_putchar(32);_putchar(97);_putchar(32);_putchar(104);_putchar(105);_putchar(103);_putchar(104);_putchar(101);_putchar(114);_putchar(32);_putchar(118);_putchar(97);_putchar(108);_putchar(117);_putchar(101);_putchar(32);_putchar(102);_putchar(111);_putchar(114);_putchar(32);_putchar(77);_putchar(65);_putchar(88);_putchar(95);_putchar(83);_putchar(69);_putchar(84);_putchar(74);_putchar(77);_putchar(80);_putchar(83);_putchar(10);
    abort(0);
    return 0;
}
function _testSetjmp(id, table) {
    id = id|0;
    table = table|0;
    var i = 0, curr = 0;
    while ((i|0) < 20) {
      curr = ((HEAP32[(((table)+((i<<2)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<2)+4))>>2)])|0);
      }
      i = (i+2)|0;
    }
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[(dest)]=((HEAP8[(src)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[(dest)]=((HEAP8[(src)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[(dest)]=((HEAP8[(src)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[(ptr)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[(ptr)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strcat(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    var pdestEnd = 0;
    pdestEnd = (pdest + (_strlen(pdest)|0))|0;
    do {
      HEAP8[((pdestEnd+i)|0)]=HEAP8[((psrc+i)|0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))|0)])|0));
    return pdest|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))|0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))|0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))|0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))|0)])|0) + 24)|0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)|0)]=HEAP8[(((psrc+i)|0)|0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))|0)])|0));
    return pdest|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))|0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))|0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))|0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))|0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

  
  function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
    return FUNCTION_TABLE_iiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
  }


  function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    FUNCTION_TABLE_viiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0);
  }


  function dynCall_vi(index,a1) {
    index = index|0;
    a1=a1|0;
    FUNCTION_TABLE_vi[index&255](a1|0);
  }


  function dynCall_vii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
  }


  function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
    return FUNCTION_TABLE_iiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
  }


  function dynCall_ii(index,a1) {
    index = index|0;
    a1=a1|0;
    return FUNCTION_TABLE_ii[index&127](a1|0)|0;
  }


  function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
    return FUNCTION_TABLE_iiiiiiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
  }


  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&31](a1|0,a2|0,a3|0)|0;
  }


  function dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
    FUNCTION_TABLE_viiiiiiiiiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
  }


  function dynCall_viiiiid(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
    FUNCTION_TABLE_viiiiid[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
  }


  function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
    FUNCTION_TABLE_viiiiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
  }


  function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
    FUNCTION_TABLE_viiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
  }


  function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
    FUNCTION_TABLE_viiiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
  }


  function dynCall_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
    FUNCTION_TABLE_viiiiiid[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
  }


  function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
    FUNCTION_TABLE_viiiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
  }


  function dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
    FUNCTION_TABLE_viiiiiiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
  }


  function dynCall_iii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return FUNCTION_TABLE_iii[index&31](a1|0,a2|0)|0;
  }


  function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    return FUNCTION_TABLE_iiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
  }


  function dynCall_diii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return +FUNCTION_TABLE_diii[index&3](a1|0,a2|0,a3|0);
  }


  function dynCall_i(index) {
    index = index|0;
    
    return FUNCTION_TABLE_i[index&7]()|0;
  }


  function dynCall_iiiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    return FUNCTION_TABLE_iiiii[index&31](a1|0,a2|0,a3|0,a4|0)|0;
  }


  function dynCall_viii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    FUNCTION_TABLE_viii[index&15](a1|0,a2|0,a3|0);
  }


  function dynCall_v(index) {
    index = index|0;
    
    FUNCTION_TABLE_v[index&7]();
  }


  function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
    return FUNCTION_TABLE_iiiiiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
  }


  function dynCall_viiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    FUNCTION_TABLE_viiii[index&15](a1|0,a2|0,a3|0,a4|0);
  }

function b0(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0; }
  function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1); }
  function b2(p0) { p0 = p0|0; nullFunc_vi(2); }
  function _freelocale__wrapper(p0) { p0 = p0|0; _freelocale(p0|0); }
  function b3(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(3); }
  function b4(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(4);return 0; }
  function b5(p0) { p0 = p0|0; nullFunc_ii(5);return 0; }
  function _pthread_mutex_unlock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0; }
  function _pthread_mutex_lock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_lock(p0|0)|0; }
  function _pthread_cond_broadcast__wrapper(p0) { p0 = p0|0; return _pthread_cond_broadcast(p0|0)|0; }
  function _uselocale__wrapper(p0) { p0 = p0|0; return _uselocale(p0|0)|0; }
  function b6(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(6);return 0; }
  function b7(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(7);return 0; }
  function _fprintf__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _fprintf(p0|0,p1|0,p2|0)|0; }
  function _newlocale__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _newlocale(p0|0,p1|0,p2|0)|0; }
  function _vasprintf__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _vasprintf(p0|0,p1|0,p2|0)|0; }
  function b8(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0;p13 = p13|0;p14 = p14|0; nullFunc_viiiiiiiiiiiiiii(8); }
  function b9(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_viiiiid(9); }
  function b10(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_viiiiiiii(10); }
  function b11(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(11); }
  function b12(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(12); }
  function b13(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = +p6; nullFunc_viiiiiid(13); }
  function b14(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(14); }
  function b15(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_viiiiiiiiii(15); }
  function b16(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(16);return 0; }
  function _printf__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _printf(p0|0,p1|0)|0; }
  function _isxdigit_l__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _isxdigit_l(p0|0,p1|0)|0; }
  function _isdigit_l__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _isdigit_l(p0|0,p1|0)|0; }
  function b17(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(17);return 0; }
  function b18(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(18);return +0; }
  function b19() { ; nullFunc_i(19);return 0; }
  function ___ctype_b_loc__wrapper() { ; return ___ctype_b_loc()|0; }
  function ___ctype_toupper_loc__wrapper() { ; return ___ctype_toupper_loc()|0; }
  function ___ctype_tolower_loc__wrapper() { ; return ___ctype_tolower_loc()|0; }
  function b20(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(20);return 0; }
  function _catgets__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _catgets(p0|0,p1|0,p2|0,p3|0)|0; }
  function b21(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(21); }
  function ___cxa_throw__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; ___cxa_throw(p0|0,p1|0,p2|0); }
  function b22() { ; nullFunc_v(22); }
  function _abort__wrapper() { ; _abort(); }
  function ___cxa_rethrow__wrapper() { ; ___cxa_rethrow(); }
  function ___cxa_end_catch__wrapper() { ; ___cxa_end_catch(); }
  function b23(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(23);return 0; }
  function b24(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(24); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiiiiiii = [b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0];
  var FUNCTION_TABLE_viiiii = [b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
  var FUNCTION_TABLE_vi = [b2,__ZNSt3__111__stdoutbufIwED1Ev,__ZNSt3__111__stdoutbufIwED0Ev,__ZNSt3__110__stdinbufIwED1Ev,__ZNSt3__110__stdinbufIwED0Ev,__ZNSt3__111__stdoutbufIcED1Ev,__ZNSt3__111__stdoutbufIcED0Ev,__ZNSt3__110__stdinbufIcED1Ev,__ZNSt3__110__stdinbufIcED0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt14overflow_errorD0Ev,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev
  ,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__119__iostream_categoryD1Ev,__ZNSt3__119__iostream_categoryD0Ev,__ZNSt3__17collateIcED1Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,__ZNSt3__17collateIwED1Ev,__ZNSt3__17collateIwED0Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev
  ,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__110moneypunctIcLb0EED1Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,__ZNSt3__110moneypunctIcLb1EED1Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,__ZNSt3__110moneypunctIwLb0EED1Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,__ZNSt3__110moneypunctIwLb1EED1Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18messagesIcED1Ev,__ZNSt3__18messagesIcED0Ev,__ZNSt3__18messagesIwED1Ev,__ZNSt3__18messagesIwED0Ev,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev
  ,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,_free,__ZL16free_pair_memoryi,_destroy_p3retval,__Z23destroy_thal_arg_holderP15thal_arg_holder,__ZL17sort_primer_arrayP11oligo_array,__ZN9__gnu_cxx8hash_mapIiP11primer_pairNS_4hashIiEENSt3__18equal_toIiEENS5_9allocatorINS5_4pairIKiS2_EEEEED1Ev,__ZNSt3__112__hash_tableINS_4pairIiP11primer_pairEEN9__gnu_cxx17__hash_map_hasherIS4_NS5_4hashIiEELb1EEENS5_16__hash_map_equalIS4_NS_8equal_toIiEELb1EEENS_9allocatorIS4_EEED1Ev
  ,__ZNSt3__121__throw_runtime_errorEPKc,__ZNSt3__18ios_base4InitD2Ev,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,_freelocale__wrapper,__ZNSt3__112__do_nothingEPv,___cxx_global_array_dtor120,___cxx_global_array_dtor105,___cxx_global_array_dtor81,___cxx_global_array_dtor56,___cxx_global_array_dtor53,___cxx_global_array_dtor,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
  var FUNCTION_TABLE_vii = [b3,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv
  ,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__18messagesIcE8do_closeEi,__ZNKSt3__18messagesIwE8do_closeEi,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,_p3_print_args,__ZL19pr_append_new_chunkP13pr_append_strPKc,__ZL27set_retval_both_stop_codonsPK8seq_argsP8p3retval,__ZNSt3__112__hash_tableINS_4pairIiP11primer_pairEEN9__gnu_cxx17__hash_map_hasherIS4_NS5_4hashIiEELb1EEENS5_16__hash_map_equalIS4_NS_8equal_toIiEELb1EEENS_9allocatorIS4_EEE6rehashEj,__ZNSt3__18ios_base4initEPv,__ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZNSt13runtime_errorC2EPKc,__ZNSt11logic_errorC2EPKc,__ZNSt3__18ios_base5clearEj,__ZNKSt3__18ios_base6getlocEv,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj,__ZNSt3__16locale5__impC2Ej,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3];
  var FUNCTION_TABLE_iiiiiii = [b4,__ZL26make_complete_primer_listsP8p3retvalPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderSC_,__ZL20add_primers_to_checkP8p3retvalPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderSC_,b4];
  var FUNCTION_TABLE_ii = [b5,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,__ZNKSt11logic_error4whatEv,__ZNKSt13runtime_error4whatEv,__ZNKSt3__119__iostream_category4nameEv,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv
  ,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv
  ,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,__ZNKSt8bad_cast4whatEv,__ZNKSt9bad_alloc4whatEv,_pr_is_empty,__Z22create_thal_arg_holderPK28args_for_one_oligo_or_primer,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv,__Znaj,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,__Znwj,_uselocale__wrapper,_wcslen,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5];
  var FUNCTION_TABLE_iiiiiiiiiiii = [b6,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b6];
  var FUNCTION_TABLE_iiii = [b7,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,__ZNKSt3__17collateIcE7do_hashEPKcS3_,__ZNKSt3__17collateIwE7do_hashEPKwS3_,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__15ctypeIcE9do_narrowEcc,__ZNKSt3__15ctypeIwE5do_isEtw,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__15ctypeIwE9do_narrowEwc,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_fprintf__wrapper,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,_newlocale__wrapper,_vasprintf__wrapper,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_
  ,_wcrtomb,_mbtowc,_mbrlen];
  var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b8,__ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,__ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b8];
  var FUNCTION_TABLE_viiiiid = [b9,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b9,b9,b9];
  var FUNCTION_TABLE_viiiiiiii = [b10,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b10];
  var FUNCTION_TABLE_viiiiii = [b11,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];
  var FUNCTION_TABLE_viiiiiii = [b12,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
  ,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,__ZL21choose_pair_or_tripleP8p3retvalPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holderSC_P12pair_array_t,__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,__ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12];
  var FUNCTION_TABLE_viiiiiid = [b13,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b13];
  var FUNCTION_TABLE_viiiiiiiii = [b14,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b14];
  var FUNCTION_TABLE_viiiiiiiiii = [b15,__ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri,__ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri,__ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,__ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b15,b15,b15];
  var FUNCTION_TABLE_iii = [b16,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__111__stdoutbufIwE8overflowEj,__ZNSt3__110__stdinbufIwE9pbackfailEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__111__stdoutbufIcE8overflowEi,__ZNSt3__110__stdinbufIcE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNKSt3__15ctypeIcE10do_toupperEc,__ZNKSt3__15ctypeIcE10do_tolowerEc,__ZNKSt3__15ctypeIcE8do_widenEc,__ZNKSt3__15ctypeIwE10do_toupperEw,__ZNKSt3__15ctypeIwE10do_tolowerEw,__ZNKSt3__15ctypeIwE8do_widenEc,_printf__wrapper,__ZL15primer_rec_compPKvS0_,__ZNKSt3__16locale9use_facetERNS0_2idE,_isxdigit_l__wrapper,_isdigit_l__wrapper,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16];
  var FUNCTION_TABLE_iiiiii = [b17,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZL16_pr_data_controlPK18p3_global_settingsPK8seq_argsP13pr_append_strS6_S6_,__ZL27pick_sequencing_primer_listP8p3retvalPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holder,__ZL27make_detection_primer_listsP8p3retvalPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holder,__ZL24make_internal_oligo_listP8p3retvalPK18p3_global_settingsPK8seq_argsPK15dpal_arg_holderPK15thal_arg_holder,_wcsnrtombs,_mbsnrtowcs,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17];
  var FUNCTION_TABLE_diii = [b18,__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj];
  var FUNCTION_TABLE_i = [b19,__ZL15create_p3retvalv,__Z22create_dpal_arg_holderv,___ctype_b_loc__wrapper,__ZNSt3__16locale8__globalEv,___ctype_toupper_loc__wrapper,___ctype_tolower_loc__wrapper,b19];
  var FUNCTION_TABLE_iiiii = [b20,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji,__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji,__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z,__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz,_mbsrtowcs,_catgets__wrapper,_mbrtowc,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20];
  var FUNCTION_TABLE_viii = [b21,__ZNKSt3__114error_category23default_error_conditionEi,__ZNKSt3__119__iostream_category7messageEi,__ZNSt3__112__hash_tableINS_4pairIiP11primer_pairEEN9__gnu_cxx17__hash_map_hasherIS4_NS5_4hashIiEELb1EEENS5_16__hash_map_equalIS4_NS_8equal_toIiEELb1EEENS_9allocatorIS4_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS4_PvEE,__ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNSt3__112system_errorC2ENS_10error_codeEPKc,__ZNSt3__111__call_onceERVmPvPFvS2_E,___cxa_throw__wrapper,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,__ZNSt3__16locale5__imp7installEPNS0_5facetEl,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj,b21,b21,b21,b21];
  var FUNCTION_TABLE_v = [b22,_abort__wrapper,___cxa_rethrow__wrapper,___cxa_end_catch__wrapper,__ZSt17__throw_bad_allocv,b22,b22,b22];
  var FUNCTION_TABLE_iiiiiiiii = [b23,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b23,b23,b23,b23,b23,b23,b23];
  var FUNCTION_TABLE_viiii = [b24,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__17collateIcE12do_transformEPKcS3_,__ZNKSt3__17collateIwE12do_transformEPKwS3_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZL16_adjust_seq_argsPK18p3_global_settingsP8seq_argsP13pr_append_strS5_,b24,b24,b24,b24,b24,b24,b24];

  return { _strlen: _strlen, _strcat: _strcat, _calloc: _calloc, _bitshift64Shl: _bitshift64Shl, _p3_set_sa_right_input: _p3_set_sa_right_input, _p3_create_global_settings: _p3_create_global_settings, _p3_get_rv_fwd: _p3_get_rv_fwd, _memset: _memset, _memcpy: _memcpy, _p3_set_sa_left_input: _p3_set_sa_left_input, _p3_get_rv_best_pairs: _p3_get_rv_best_pairs, _i64Subtract: _i64Subtract, _realloc: _realloc, _i64Add: _i64Add, _create_seq_arg: _create_seq_arg, _libprimer3_release: _libprimer3_release, _choose_primers: _choose_primers, _p3_set_sa_sequence: _p3_set_sa_sequence, _testSetjmp: _testSetjmp, _saveSetjmp: _saveSetjmp, _free: _free, _memmove: _memmove, _malloc: _malloc, _llvm_ctlz_i32: _llvm_ctlz_i32, _strcpy: _strcpy, __GLOBAL__I_a: __GLOBAL__I_a, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, setTempRet1: setTempRet1, setTempRet2: setTempRet2, setTempRet3: setTempRet3, setTempRet4: setTempRet4, setTempRet5: setTempRet5, setTempRet6: setTempRet6, setTempRet7: setTempRet7, setTempRet8: setTempRet8, setTempRet9: setTempRet9, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, dynCall_viiiiid: dynCall_viiiiid, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiid: dynCall_viiiiiid, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_diii: dynCall_diii, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_viiiiid": nullFunc_viiiiid, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiid": nullFunc_viiiiiid, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_diii": nullFunc_diii, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_ii": invoke_ii, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viiiiid": invoke_viiiiid, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiid": invoke_viiiiiid, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_diii": invoke_diii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_vsscanf": _vsscanf, "__ZSt9terminatev": __ZSt9terminatev, "___cxa_guard_acquire": ___cxa_guard_acquire, "__reallyNegative": __reallyNegative, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_longjmp": _longjmp, "___ctype_toupper_loc": ___ctype_toupper_loc, "__addDays": __addDays, "_sbrk": _sbrk, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_sysconf": _sysconf, "_end_oligodg": _end_oligodg, "_fileno": _fileno, "_fread": _fread, "_dpal": _dpal, "_write": _write, "__isLeapYear": __isLeapYear, "__ZNSt9exceptionD2Ev": __ZNSt9exceptionD2Ev, "___cxa_does_inherit": ___cxa_does_inherit, "_strtoll_l": _strtoll_l, "___cxa_rethrow": ___cxa_rethrow, "_catclose": _catclose, "___cxa_call_unexpected": ___cxa_call_unexpected, "__Z21set_thal_default_argsP9thal_args": __Z21set_thal_default_argsP9thal_args, "_send": _send, "___cxa_is_number_type": ___cxa_is_number_type, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_isxdigit_l": _isxdigit_l, "___cxa_guard_release": ___cxa_guard_release, "_strerror_r": _strerror_r, "___setErrNo": ___setErrNo, "_newlocale": _newlocale, "_isdigit_l": _isdigit_l, "___resumeException": ___resumeException, "_freelocale": _freelocale, "_dpal_set_ambiguity_code_matrix": _dpal_set_ambiguity_code_matrix, "_putchar": _putchar, "_printf": _printf, "_sprintf": _sprintf, "_vasprintf": _vasprintf, "_vsnprintf": _vsnprintf, "_strtoull_l": _strtoull_l, "_read": _read, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_catopen": _catopen, "_exit": _exit, "___cxa_guard_abort": ___cxa_guard_abort, "___ctype_b_loc": ___ctype_b_loc, "_fmod": _fmod, "__Z4thalPKhS0_PK9thal_argsP12thal_results": __Z4thalPKhS0_PK9thal_argsP12thal_results, "___cxa_allocate_exception": ___cxa_allocate_exception, "_ceilf": _ceilf, "_strtoll": _strtoll, "_pwrite": _pwrite, "_uselocale": _uselocale, "_snprintf": _snprintf, "__scanString": __scanString, "___cxa_end_catch": ___cxa_end_catch, "_strtoull": _strtoull, "_strftime": _strftime, "_isxdigit": _isxdigit, "_pthread_cond_broadcast": _pthread_cond_broadcast, "_recv": _recv, "_fgetc": _fgetc, "__parseInt64": __parseInt64, "__getFloat": __getFloat, "_seqtm": _seqtm, "_abort": _abort, "_set_dpal_args": _set_dpal_args, "_abs": _abs, "_isspace": _isspace, "_pthread_cond_wait": _pthread_cond_wait, "___gxx_personality_v0": ___gxx_personality_v0, "_ungetc": _ungetc, "_fflush": _fflush, "_strftime_l": _strftime_l, "_pthread_mutex_lock": _pthread_mutex_lock, "_sscanf": _sscanf, "_catgets": _catgets, "_asprintf": _asprintf, "__exit": __exit, "__arraySum": __arraySum, "___ctype_tolower_loc": ___ctype_tolower_loc, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_pread": _pread, "_mkport": _mkport, "___errno_location": ___errno_location, "_copysign": _copysign, "_fputc": _fputc, "___cxa_throw": ___cxa_throw, "_isdigit": _isdigit, "_strerror": _strerror, "_emscripten_longjmp": _emscripten_longjmp, "__formatString": __formatString, "_atexit": _atexit, "_long_seq_tm": _long_seq_tm, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "__INFINITY": __INFINITY, "__ZTISt9exception": __ZTISt9exception, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout }, buffer);
var _strlen = Module["_strlen"] = asm["_strlen"];
var _strcat = Module["_strcat"] = asm["_strcat"];
var _calloc = Module["_calloc"] = asm["_calloc"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _p3_set_sa_right_input = Module["_p3_set_sa_right_input"] = asm["_p3_set_sa_right_input"];
var _p3_create_global_settings = Module["_p3_create_global_settings"] = asm["_p3_create_global_settings"];
var _p3_get_rv_fwd = Module["_p3_get_rv_fwd"] = asm["_p3_get_rv_fwd"];
var _memset = Module["_memset"] = asm["_memset"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _p3_set_sa_left_input = Module["_p3_set_sa_left_input"] = asm["_p3_set_sa_left_input"];
var _p3_get_rv_best_pairs = Module["_p3_get_rv_best_pairs"] = asm["_p3_get_rv_best_pairs"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _create_seq_arg = Module["_create_seq_arg"] = asm["_create_seq_arg"];
var _libprimer3_release = Module["_libprimer3_release"] = asm["_libprimer3_release"];
var _choose_primers = Module["_choose_primers"] = asm["_choose_primers"];
var _p3_set_sa_sequence = Module["_p3_set_sa_sequence"] = asm["_p3_set_sa_sequence"];
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _free = Module["_free"] = asm["_free"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _llvm_ctlz_i32 = Module["_llvm_ctlz_i32"] = asm["_llvm_ctlz_i32"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var __GLOBAL__I_a = Module["__GLOBAL__I_a"] = asm["__GLOBAL__I_a"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiid = Module["dynCall_viiiiiid"] = asm["dynCall_viiiiiid"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = function(size) { return asm['stackAlloc'](size) };
Runtime.stackSave = function() { return asm['stackSave']() };
Runtime.stackRestore = function(top) { asm['stackRestore'](top) };


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



